<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[
  <!ENTITY uw "University of Washington">
  <!ENTITY dept "Department of Bioengineering">
]>
<article><title>GNU Autotools in Sesami-Nut Shell</title>
  <articleinfo>
    <abstract>
      <para>
      </para>
      <para>
	The information in this document is targeted primarily towards
	the RFPK Software Team and associates and is specific to the
	computer systems and network installed in the RFPK Laboratory
	of the &dept; of the &uw;.  RFPK is the Resource for
	Population Kinetics.  Its work is supported, in part, by grant
	P41 EB-001975 of the National Institutes of Health (NIH) of
	the U.S.  Department of Health and Human Services.
      </para>
      <para>
	<link linkend="copyright">Copyright</link> (c) 2004, by the &uw;.
      </para>
    </abstract>
    <revhistory>
      <revision>
	<revnumber>1.1</revnumber>
	<date>February 8, 2005</date>
	<authorinitials>sh</authorinitials>
	<revremark>Changed the title</revremark>
      </revision>
      <revision>
	<revnumber>1.0</revnumber>
	<date>February 1, 2005</date>
	<authorinitials>sh</authorinitials>
	<revremark>Initial version</revremark>
      </revision>
    </revhistory>
  </articleinfo>
  <sect1>
    <title>Preliminary</title>
    <para>
    The primary goal of this documentation is to summarize the relationships among the tools that
    constitute to collectively discovering peculiarity of a machine on which the tools are run
    and creating customized Makefile(s) that build projects for that machine.
    Such tools include 
       <ulink url="http://www.gnu.org/software/autoconf/manual/autoconf-2.57/autoconf.html">Autoconf</ulink>,
       <ulink url="http://www.gnu.org/software/automake/manual/automake.html">Automake</ulink> and
       <ulink url="http://www.gnu.org/software/libtool/manual.html">Libtool</ulink>,
    witch further make use of Autoheader, libtoolize, aclocal and so on.
    Secondarily, this documentation lists key features of these auto-tools that would be
    relevant to projects of sizes RFPK most likely to face.
    </para>
    <para>
    Most of the contents of this documentation comes from 
    <ulink url="http://sources.redhat.com/autobook/autobook/autobook.html">
    GNU Autoconf, Automake, and Libtool</ulink> by Gary Vaughn, Ben Ellison, Tom Traney and Ian Taylor,
    which is published under <ulink url="http://www.opencontent.org/openpub/">Open Plublicaiton License</ulink>.
    </para>
    <sect2>
       <title>Convention</title>
       <para>In this documentation, I call the collection of tools that discover peculiarity of a machine
             <emphasis>Autotools</emphasis>.  When I refer to a tool that constitutes to
              Autotools, I call it <emphasis>a Tool</emphasis> (note that the first letter is capitalized)
              while a tool in general is written as "a tool".
       </para>
    </sect2>
  </sect1>
  <sect1 id="nutshell">
    <title>Autotools in Sesami-Seed-Shell</title>
    <para>
    Autotools is a collection of tools, which is used to discover peculiarity of a machine on which
    it runs and creates customized Makefile(s) for that machine.  Autotools includes  
       <ulink url="http://www.gnu.org/software/autoconf/manual/autoconf-2.57/autoconf.html">Autoconf</ulink>,
       <ulink url="http://www.gnu.org/software/automake/manual/automake.html">Automake</ulink> and
       <ulink url="http://www.gnu.org/software/libtool/manual.html">Libtool</ulink>,
    which further make use of Autoheader, libtoolize, aclocal and so on.  
    The collection evolved over years.  The first to come was Autoconf,
    which was soon followed by Automake.  Then, when shared libraries became the norm (as opposed to
    static libraries), Libtool was developed.
    </para>
    <para>
    Perhaps because of the way Autotools has been evolved, there are lots of couplings among Tools,
    which frustrate new users heck out it.  Take a back, the Tools themselves 
    do not interact with each other directly.  The way in which their inputs and outputs
    are used, however, is inter-mingled, for the lack of better word.  A single file serves as
    an input to both aclocal and Autoconf.  Yet, an output of aclocal serves as another input to 
    Autoconf.  An output of Autoconf becomes a tool to translate an output of Automake, and so on.
    </para>
    <para>
    The minimal set of files you the developer must provide for the Autotools's cascading effect to
    take place are the following two:
    </para>
       <variablelist>
          <varlistentry>
             <term><filename>configure.ac</filename></term>
             <listitem>
               <para>
               This is the primary (note, I said <emphasis>primary</emphasis>) input file for Autoconf.
               You need (and probably want) only one <filename>configure.ac</filename> per product.
               </para>
               <para>
               In this file, you list macros that are associated with features and tools
               you are going to use to build your project.
               For example, if your project is written in C++ and thus you need a C++ compiler to build it, 
               you list a macro <literal>AC_PROG_CXX</literal>.
               </para>
             </listitem>
          </varlistentry>
          <varlistentry>
             <term><filename>Makefile.am</filename></term>
             <listitem>
               <para>
               This is a psudo Makefile and is going to be the primary input file for Automake.
               You need at least one <filename>Makefile.am</filename> per product
               but, if the product is organized in multiple directories, you need one per sub-project/directory.  
               For instance, if your product ships with a library and a set of documentations 
               (say, their source are found in <filename>lib/</filename> and <filename>doc/</filename>
                directories), you need a <filename>Makefile.am</filename> in the top directory, one in 
               <filename>lib/</filename> and another in <filename>doc/</filename> so that
               these <filename>Makefile.am</filename>'s are processed recursively.
               </para>
               <para>
               In this file, you define a number of variables that are already declared by
               Automake.  Such variables may include <literal>AC_CXXFLAGS</literal>.
               The value set for <literal>AC_CXXFLAGS</literal> is translated as
               compiler flags.
               </para>
             </listitem>
          </varlistentry>
       </variablelist>
    <para>
    The following diagram demonstrates dependencies among the Tools and their artifacts.  
    The blue boxes capture the Tools.  Artifacts that are going to serve as inputs to some other tools
    or become tools themselves are color-boxed as well.  Note that, I did not include 
    the role of Autoheader or Libtool in this diagram in order to keep the complexity kept minimal.
       <mediaobject>
          <imageobject>
             <imagedata fileref="interaction.jpg" format="JPEG" width="60%" depth="60%" align="center"/>
          </imageobject>
          <caption ><para>Simplified Dependencies</para></caption>
       </mediaobject>
    If you would like to see their full dependency graph, check 
    <ulink url="http://sources.redhat.com/autobook/autobook/autobook_276.html#SEC276">Appendix C: Generated File Dependencies</ulink>.
    </para>
    <sect2>
       <title><filename>autoconf</filename></title>
       <para>
       The autoconf program takes two input files: 
       <filename>configure.ac</filename> and <filename>aclocal.m4</filename>.
       <filename>aclocal.m4</filename>is generated by aclocal and contains the definitions of macros
       used in <filename>configure.ac</filename>.  
       Autoconf expands these macros in <filename>configure.ac</filename>, perhaps using macro definitions
       from <filename>aclocal.m4</filename>, to generate the <filename>configure</filename>.
       [<ulink url="http://sources.redhat.com/autobook/autobook/autobook_280.html#SEC280">
       Click here for a diagram</ulink>]
       </para>
     </sect2>
     <sect2>
       <title><filename>aclocal</filename></title>
       <para>The aclocal program creates the file <filename>aclocal.m4</filename>
       by combining stock installed macros, user defined macros and the contents 
       of <filename>acinclude.m4</filename> to define all of the macros 
       required by <filename>configure.in</filename> in a single file. 
       [<ulink url="http://sources.redhat.com/autobook/autobook/autobook_277.html#SEC277">
       Click here for a diagram</ulink>]
       </para>
    </sect2>
    <sect2>
       <title><filename>automake</filename></title>
       <para>
       The automake program takes two input files: <filename>configure.in</filename> and 
       <filename>Makefile.am</filename> (<emphasis>one that resides in the same directory
       as of <filename>configure.in</filename></emphasis>).  It generates
       <filename>Makefile.in</filename>, which, in turn, becomes an input to 
       the <filename>configure</filename> script generated by Autoconf.
       [<ulink url="http://sources.redhat.com/autobook/autobook/autobook_279.html#SEC279">
       Click here for a diagram</ulink>]
       </para>
    </sect2>
    <sect2>
       <title>Libtool</title>
       <para>
       Libtool is a collection of scripts that handle the differences between
       shared library generation and use on different systems.  This Tool is 
       automatically used when you list a macro <literal>AC_PROG_LIBTOOL</literal>
       in <filename>configure.ac</filename> and shared libraries 
       under <literal>xxx_LTLIBRARIES</literal> in one of your <filename>Makefile.am</filename>'s.
       A program called <filename>libtoolize</filename> adds the necessary infrastructure to
       your project
       [<ulink url="http://sources.redhat.com/autobook/autobook/autobook_279.html#SEC279">
       Click here for a diagram</ulink>].
       </para>
    </sect2>
 </sect1>
 <sect1 id="bootstrap"> 
    <title>Boostrap</title>
    <para>
    A bootstrap can be a script which runs Tools in a proper order
    with options that enable them to generate missing files along the way
    when you apply Autotools to your project for the first time.
    You probably have seen <filename>autogen.sh</filename>.  That script
    does just that.  The name us, however, somewhat misleading.
    It sounds as if it is only useful for the very first time you
    apply Autotools.  The script rather should be called something like
    <filename>bootstrap</filename>.  It can be run over and over again
    whenever you made changes to your <filename>configure.ac</filename>
    or <filename>Makefile.am</filename>'s.
    </para>
  </sect1>
  <sect1 id="autoconf">
     <title>What is <filename>configure.ac</filename> for?</title>
       <para>
       <filename>configure.ac</filename> is where you list macros -- to check some 
       features and aspects of the system, to look for a C compiler, etc. --- 
       to be executed in sequence.
       You list both Autoconf and Automake macros in this file because
       this file serves as the input file for both tools.
       <literal>AC_</literal>'s are Autoconf macros.  <literal>AM_</literal>'s are Automake's.
       The entire list of Autoconf macros are available 
       <ulink url="http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_194.html#SEC194">
       here</ulink>.  Here, I list only essentials.
       </para>
       <sect2>
          <title><literal>AC_INIT</literal></title>
          <para>
          This macro performs essential initialization for the generated
          <filename>configure</filename> script.  Naturally, this macro appears
          at the top of <filename>configure.ac</filename>.
          </para>
       </sect2>
       <sect2>
          <title><literal>AC_OUTPUT</literal></title>
          <para>
          This macro must be called at the end of every <filename>configure.ac</filename>.
          It creates each file listed in this macro.  For a given file, by default,
          <filename>configure</filename> reads the template file whose name is the name
          of the input file with <literal>.in</literal> appended.
          </para>
       </sect2>
       <sect2>
          <title><literal>AC_CONFIG_HEADER</literal></title>
          <para>
          When this macro presents, all the C preprocessor macros are defined in the
          named file (ie. by convension, you usually name it <filename>config.h</filename>)
          as opposed to having them defined via <literal>-D</literal> options in
          DEFS <filename>Makefile</filename>.  If you're using Automake, however,
          use <literal>AM_CONFIG_HEADER</literal> instead.
          </para>
       </sect2>
       <sect2>
          <title><literal>AC_PROG_xxx</literal></title>
          <para>
          AC_PROG_xxx macros look for certain programs/tools and set appropriate C preprocessor
          macros accordingly.
          </para>
          <variablelist>
             <varlistentry>
                <term><literal>AC_PROG_C</literal></term>
                <listitem>
                   <para>This checks for C compiler to use and setst he shell variable <literal>CC</literal>
                   to the value.  If the GNU C compiler is being used, this sets the shell variable 
                   <literal>GCC</literal> to <literal>yes</literal>.  This macro sets the shell variable
                   <literal>CFLAGS</literal> if it has not already been set.  It also calls
                   <literal>AC_SUBST</literal> on <literal>CC</literal> and <literal>CFLAGS</literal>.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>AC_PROG_CXX</literal></term>
                <listitem>
                   <para>This is like AC_PROG_C but checks for C++ compiler and sets the shell variable 
                   <literal>CXX</literal> and <literal>CXXFLAGS</literal>.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>AC_PROG_CPP</literal></term>
                <listitem>
                   <para>
                   This macro sets the output variable <literal>CPP</literal> to a command
                   that runs the C preprocessor.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>AC_PROG_LEX</literal></term>
                <listitem>
                   <para>
                   This looks for a lex-like program and sets the <filename>Makefile</filename>
                   variable <literal>LEX</literal> to the result.  If you are using Automake,
                   use <literal>AM_PROG_LEX</literal> to have it do additional initialization
                   work.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>AC_PROG_YACC</literal></term>
                <listitem>
                   <para>
                   This looks for a yacc-like program and sets the <filename>Makefile</filename>
                   variable <literal>YACC</literal> to the result.If you are using Automake,
                   use <literal>AM_PROG_YACC</literal> to have it do additional initialization
                   work.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>AC_PROG_LIBTOOL</literal></term>
                <listitem>
                   <para>
                   This macro is the primary way to integrate Libtool support into 
                   <filename>configure</filename>.  If you are building shared libraries 
                   (ie. as opposed to static), you must call this macro.
                   </para>
                </listitem>
             </varlistentry>
          </variablelist>
       </sect2>
       <sect2>
          <title><literal>AC_CHECK_xxx</literal></title>
          <para>
          AC_CHECK_xxx macros check certain aspects of the system
          onto which your program is built and/or installed.  When a test
          passes, Automake defines a macro beginning with <literal>HAVE_</literal> followed
          by the aspect/function/file/etc. name listed in <literal>AC_CHECK_</literal>.
          These macros will be defined via <literal>-D</literal> options unless
          <literal>AC_CONFIG_HEADER</literal> is specified in <filename>configure.ac</filename>.
          </para>
          <para>
          Here are a few of them.
          </para>
          <variablelist>
             <varlistentry>
                <term>AC_CHECK_FUNCS: Checking if a named function implmented</term>
                <listitem>
                   <para>
                   To see if a particular function is implemented on the target system,
                   list function names in <literal>AC_CHECK_FUNCS</literal>.
                   For instance, you want to check if <filename>time</filename>
                   is implemented. Add the following macro in <filename>configure.ac</filename>,
                   and a macro <literal>HAVE_TIME</literal> will be defined when 
                   the function is found:
                   </para>
                   <programlisting>
AC_CHECK_FUNCS( stat, break )
                   </programlisting>
                   <para>
                   A shell command, <literal>break</literal>, can appear anywhere after a function
                   name.  It tells Autoconf to stop looking for the remaining functions in the list.
                   For further discussion, consult 
                   <ulink url="http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_46.html#SEC46">
                   particular function checks</ulink> or 
                   <ulink url="http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_47.html#SEC47"> 
                   generic (other) function checks</ulink>.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term>AC_CHECK_LIB: Checking which library has a named function</term>
                <listitem>
                   <para>
                   This looks for the named function in the named libray specified by its base name.
                   For instance, the math library, <filename>libm.a</filename>, would be named just
                   <literal>m</literal>.  If the function is found in the library <filename>foo</filename>,
                   the C processor macro <literal>HAVE_LIBFOO</literal> is defined.
                   </para>
                </listitem>
             </varlistentry>
          </variablelist>
       </sect2>
  </sect1>
  <sect1 id="automake">
    <title>What is <filename>Makefile.am</filename> For? and What Can I or Cannot do?</title>
       <para>
       <filename>Makefile.am</filename> is the primary input file to Automake.  
       Automake turns this into a GNU compliant <filename>Makefile.in</filename> 
       for use with <filename>configure</filename>.  
       Consider <filename>Makefile.am</filename> as macro
       <filename>Makefile</filename>.  Thus, you write <filename>Makefile.am</filename>
       according to <filename>make</filename> syntax.  Automake recognizes special
       macro and target names and genrates code based on these.
       </para>
       <sect2>
          <title>Comment (# vs. ##)</title>
          <para>
          Ordinary <filename>make</filename> comments ('<literal>#</literal>') 
          are passed through to the output, but 
          comments beginning with '<literal>##</literal>' are Autokame 
          comments and are not passed through.
          </para>
       </sect2>
       <sect2>
          <title>Arbitrary Macros and Targets</title>
          <para>
          All macros and targests, including those that Automake does not recognize,
          are passed through to the generated <filename>Makefile.in</filename>.
          </para>
       </sect2>
       <sect2>
          <title>Arbitrary Variables</title>
          <para>
          Automake turns every <literal>AC_SUBST</literal> into a 
          <filename>Makefile</filename> variable.  
          This is convenient in more ways than on: Not only does it mean that 
          you can refer to these macros in <filename>Makfele.am</filename> 
          without extra work, but, bcause Automake scans <filename>configure.in</filename>
          before it reads any <filename>Makefile.am</filename>, 
          it also means that special variables and overrides Automake recognizes 
          can be defined once in <filename>configure.in</filename>.
          </para>
       </sect2>
       <sect2>
          <title>Sources Living in Subdirectories</title>
          <para>
          Suppose you want to build a library from source code organized in such a way::
             <programlisting>
aspk/spkcompiler/...(common source)...
aspk/spkcompiler/nonmem/something1.cpp
                        something2.cpp
                        ...(NONMEM specific source)...
             </programlisting>
          And, quite naturally you would try defining macros in <filename>Makefile.am</filename>
          like this:
             <programlisting>
lib_LIBRARIES = libspkcompiler.a
libspkcompiler_a_SOURCES = nonmem/something1.cpp ...
             </programlisting>
          Naah, you cannot specify paths under <literal>xxx_SOURCES</literal>!
          There are ways to get around but may not be a simple solution for you!  
          If you're trying to build a library in this way, you may want to
          consider building the library as a <emphasis>convenience library</emphasis> 
          (consult 
          <ulink url="http://sources.redhat.com/autobook/autobook/autobook.html">
          GNU Autoconf, Automake and Libtool</ulink> for
          <emphasis>convenience libraries</emphasis>).
          For programs, you may need to build temporary static libraries in
          subdirectories and integrate them into the final target.  
          </para>
          <para>To have Automake execute recursively into subdirectories, 
          specify in the top <filename>Makefile.am</filename>:
          <programlisting>
SUBDIR = . sub1 sub2
          </programlisting>
          The target(s) are built in the order in which the subdirectories are listed:
          1) '<filename>.</filename>', the current directory, 
          2) <filename>sub1</filename> and then 3) <filename>sub2</filename>.
          </para>
       </sect2>
       <sect2>
          <title>Prefixes: Where & What To Install</title>
          <para>
          Prefixes are used to decide where the built objects should be installed. 
          These names are prefixes to the primary which indicate which standard 
          directory should be used as the installation directory. 
          The standard directory names are given in the GNU standards 
          (see <ulink url="http://www.gnu.org/prep/standards/standards.html#Directory-Variables">
          Variables for Installation Directories</ulink>). 
          Automake extends this list with <literal>pkglibdir</literal>, 
          <literal>pkgincludedir</literal>, and <literal>pkgdatadir</literal>; 
          these are the same as the non-pkg versions, but with <literal>@PACKAGE@</literal>
          appended. For instance, <literal>pkglibdir</literal> is defined as 
          <literal>$(libdir)/@PACKAGE@</literal>.
          </para>
          <para>
          For each primary, there is one additional variable named by prepending
          <literal>EXTRA_</literal> to the primary name. This variable is used to list objects which 
          may or may not be built, depending on what configure decides. 
          This variable is required because Automake must statically know the 
          entire list of objects that may be built in order to generate 
          a <filename>Makefile.in</filename> that will work in all cases. 
          </para>
          <para>
          Automake adds to <ulink url="http://www.gnu.org/prep/standards/standards.html#Directory-Variables">
          the standard directories for installation</ulink>.
          </para>
          <para>
          By default, an installable file specified in a subdirectory 
          will have its directory name stripped before installation.
          For instance, in this example, the header file will be installed as 
          <literal>$(includedir)/stdio.h</literal>:
          <programlisting>
include_HEADERS = inc/stdio.h
          </programlisting>     
          However, the <literal>nobase_</literal> prefix can be used to circumvent this path stripping. 
          In this example, the header file will be installed as 
          <literal>$(includedir)/sys/types.h</literal>:
          <programlisting>
nobase_include_HEADERS = sys/types.h
          </programlisting>     
          <literal>nobase_</literal> should be specified first when used in conjunction 
          with either <literal>dist_</literal> or <literal>nodist_</literal> . For instance:
          <programlisting>
nobase_dist_pkgdata_DATA = images/vortex.pgm
          </programlisting>
          </para>     
       </sect2>
       <sect2>
          <title>Primaries: What and How To Build</title>
          <para>
          You tell Automake what and how to build by setting variables ending 
          with appropriate <emphasis>Primaries</emphasis>.
          Many actual variable names put into `Makefile.am' are constructed 
          by adding various prefixes to a primary  
          (Refer to <ulink url="http://sources.redhat.com/autobook/autobook/autobook_37.html#SEC37">
          GNU Autoconf, Automake and Libtool</ulink> for details about Primaries).
          </para>

          <variablelist>
             <title>Taste of Primaries</title>
             <varlistentry>
                <term><literal>HEADERS</literal></term>
                <listitem>
                   <para>
                   Macros of this type list header files.  These are separate from 
                   <literal>DATA</literal> macros
                   because this allows for extra error checking in some cases.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>LIBRARIES</literal></term>
                <listitem>
                   <para>
                   Macros of this type list (ie. static) libraries to be built.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>LTLIBRARIES</literal></term>
                <listitem>
                   <para>
                   Macros of this type list Libtool (ie. shared) libraries to be built.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>PROGRAMS</literal></term>
                <listitem>
                   <para>
                   Macros of this type list programs to be built.
                   The program(s) are built and arranged to be installed into <literal>bindir</literal>.
                   For example, if you want to build a program called <filename>doit</filename>, you set: 
                   <programlisting>bin_PROGRAMS = doit</programlisting>
                   <literal>make</literal> assumes its source is called <filename>doit.cpp</filename> 
                   and compiles (if it indeed exists) to produce <filename>doit.o</filename>.  
                   Then it links <filename>doit.o</filename>
                   to create <filename>doit</filename>.  If there are more than one source code file, which
                   most cases do, you list the souce code files under <literal>doit_SOURCES</literal>.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term><literal>SOURCES</literal></term>
                <listitem>
                   <para>
                   Macros of this type list the names of the source code files to be used to 
                   build the target (ex. a library).  I said "names"; You may not specify paths!!!
                   Automake needs to know the <emphasis>static</emphasis> list of files that can be
                   compiled into your program/library as well.  If some source is conditinally compiled, 
                   it can be listed in <literal>EXTRA</literal> variable (consult
                   <ulink url="http://sources.redhat.com/autobook/autobook/autobook_39.html#SEC39">
                   7.4: Programs and Libraries, "GNU Autoconf, Automake and Libtool"</ulink>)
                   </para>
                </listitem>
             </varlistentry>
          </variablelist>
       </sect2>
       <sect2>
          <title>Essential Automake Macros</title>
          <variablelist>
             <varlistentry>
                <term><literal>AM_INIT_AUTOMAKE</literal></term>
                <listitem>
                   <para>
                   This macro is used to do all the standard initializtaion required by Automake.
                   Use this if you're going to use Automake.
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry>
                <term>AC_CONFIG_HEADER</term>
                <listitem>
                   <para>
                   When this macro presents, all the C preprocessor macros are defined in the
                   named file (ie. by convension, you usually name it <filename>config.h</filename>)
                   as opposed to having them defined via <literal>-D</literal> options in
                   DEFS <filename>Makefile</filename>.  This is very much like 
                   <literal>AC_CONFIG_HEADER</literal> (i.e. an Autoconf macro) but does additional
                   initialization work for Automake
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry> 
                <term><literal>AM_CFLAGS</literal></term>
                <listitem>
                   <para>
                   This is the variable which the Makefile.am author can use to pass in 
                   additional C compiler flags. In some situations, this is not used, 
                   in preference to the per-executable (or per-library) <literal>_CFLAGS</literal>. 
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry> 
                <term><literal>AM_CXXFLAGS</literal></term>
                <listitem>
                   <para>
                   This is similar to <literal>AM_CFLAGS</literal> but for C++. 
                   </para>
                </listitem>
             </varlistentry>
             <varlistentry> 
                <term><literal>AM_CPPFLAGS</literal></term>
                <listitem>
                   <para>
                   The contents of this variable are passed to every compilation which 
                   invokes the C preprocessor; it is a list of arguments to the preprocessor. 
                   For instance, -I and -D options should be listed here.
                                        </para>
                   <para>
                   Automake already provides some -I options automatically. 
                   In particular it generates <literal>-I$(srcdir)</literal>, <literal>-I.</literal>, 
                   and a <literal>-I</literal> pointing to the directory holding 
                   <filename>config.h</filename> (if you've used <literal>AC_CONFIG_HEADERS</literal> 
                   or <literal>AM_CONFIG_HEADER</literal>). You can disable the default 
                   <literal>-I</literal> options using the nostdinc option.
                   </para>
                   <para>
                   <literal>AM_CPPFLAGS</literal> is ignored in preference to a 
                   per-executable (or per-library) <literal>_CPPFLAGS</literal> variable if it is defined. 
                   </para>
                </listitem>
             </varlistentry>         
             <varlistentry> 
                <term><literal>AM_LDFLAGS</literal></term>
                <listitem>
                   <para>
                   This is the variable which the <filename>Makefile.am</filename> author can use to pass 
                   in additional linker flags. In some situations, this is not used, 
                   in preference to the per-executable (or per-library) <literal>_LDFLAGS</literal>. 
                   </para>
                </listitem>
             </varlistentry>
          </variablelist>
       </sect2>
  </sect1>
  <sect1 id="libtool">
     <title>What Does Libtool Need?</title>
     <para>
     You use Libtool when you intend to build a shared library.  All you have to do is
     to state <literal>AC_PROG_LIBTOOL</literal> in <filename>configure.ac</filename>
     for integration of the Tool and list the library name under <literal>_LDLIBRARIES</literal>
     in a <filename>Makefile.am</filename>.  Then, Autoconf and Automake create necessary
     scripts used by Libtool so taht these scripts may be installed/copied on to the
     user's machine and not requiring them a (specific-version of) Libtool installation.
     </para>
     <para>
     Libtool libraries should begin with <literal>lib</literal> so taht the linker 
     can find them when passed with the <literal>-l</literal> option.
     </para>
     <para>
     So, building a Libtool libraray on your machine is as simple as that but
     distributing the source and allow users to build on their own require a bit more.
     See <link linkend="distribution" endterm="distribution.title"/> for further info.
     </para>
  </sect1>
  <sect1 id="installation">
     <title id="installation.title"><literal>make install</literal>: What's and Where Get Installed?</title>
     <para>
     Files defined for Make variables (remember Automake variables *are* Make variables)
     with certain Primaries are installed into the directories where their prefixes indicate.
     For instance, a program listed for <literal>bin_PROGRAMS</literal> will be installed
     into <varname>bindir</varname> 
     (ie. GNU standard directory for program installation: ex. <filename>/usr/bin/</filename>).
     A library listed under <literal>lib_LIBRARIES</literal> will go into <varname>libdir</varname>
     (ex. <filename>/usr/lib/</filename>).
     </para>
     <para>
     Here are a summary of Primaries and their directory variables that can be associated with:
     <informaltable frame="all">
        <tgroup cols="2">
           <thead>
              <row><entry>Primary</entry><entry>Directory Variables</entry></row>
           </thead>
           <tbody>
              <row><entry>PROGRAMS</entry><entry>bindir, sbindir, libexecdir, pkglibdir</entry></row>
              <row><entry>LIBRARIES</entry><entry>libdir, pkglibdir</entry></row>
              <row><entry>LTLIBRARIES</entry><entry>libdir, pkglibdir</entry></row>
              <row><entry>SCRIPTS</entry><entry>bindir, sbindir, binexecdir, pkgdatadir</entry></row>
              <row><entry>DATA</entry><entry>datadir, sysconfdir, sharedsatedir, localstatedir, pkgdatadir</entry></row>
              <row><entry>HEADERS</entry><entry>includedir, oldincludedir, pkgincludedir</entry></row>
              <row><entry>TEXINFO</entry><entry>infodir</entry></row>
              <row><entry>MANS</entry><entry>man, man0-9, mann</entry></row>
           </tbody>
        </tgroup>
     </informaltable>
     All directory variables are GNU standard except for <literal>pkgincludedir</literal>,
     <literal>pkgdatadir</literal> and <literal>pkglibdir</literal> which are additionally 
     defined by Automake.
     </para>
     <para>
     You can define arbitrary directory variables as such:
     <programlisting>
foodir = xxx
foo_PROGRAMS
     </programlisting>
     </para>
  </sect1>

  <sect1 id="distribution">
     <title id="distribution.title"><literal>make dist</literal>: Making a Distribution Tarball</title>
     <para>
     </para>
  </sect1>
  <sect1>
       <title>Odds and Ends</title>
       <sect2>
          <title>Running Programs Without Installing Just-Built Libraries</title>
          <para>
          Let's say you have a suite of tests that excersize your library components.
          You want to execute the tests and, if all tests pass, then install the library.
          In other words, you don't want to install the library unless all tests pass.
          Suppose you have a header file organized in a package directory like this:
          <programlisting>
/usr/local/include/mypackage/a.h
          </programlisting>
          and your test source contain statements, <literal>#include "mypackage/a.h"</literal>.  
          To have this work without installing these headers, the source directory structure must match
          the install directory structure.  So, if you tend to have developing source in 
          <emphasis>somewhere</emphasis>, the entire path, <filename>mypackage/a.h</filename>,
          must be found under <emphasis>somewhere</emphasis> like this:
          <programlisting>
<emphasis>(somewhere)</emphasis>/mypackage/a.h
<emphasis>(somewhere)</emphasis>/mypackage/b.h
          </programlisting>
          Unfortunately, there is <emphasis>no way around!</emphasis>
          </para>
       </sect2>
  </sect1>
  <sect1>
    <title id="copyright">Copyright Notice</title>
    <para>
      Copyright (c) 2004,  by the University of Washington.
      This material may be distributed only subject to the terms and conditions 
      set forth in the Open Publication License, V1.0 or later
      (the latest version is presently available
      <ulink url="http://www.opencontent.org/openpub/">here</ulink>.
    </para>
    <para>
    </para>
  </sect1>
</article>


<!--  LocalWords:  xml DOCTYPE DocBook uw articleinfo SPK RFPK RFPK's linkend
 -->
<!--  LocalWords:  ulink url
 -->
