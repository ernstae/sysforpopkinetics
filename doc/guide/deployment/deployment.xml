<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[
  <!ENTITY uw "University of Washington">
  <!ENTITY dept "Department of Bioengineering">
]>
<article><title>SPK System Deployment Guide</title>
  <articleinfo>
    <abstract>
      <para>
	This guide describes a process for placing new versions
	of the System for Population Kinetics (SPK) in production.
	It is meant to be used
	in conjunction with the process described in the
	<ulink url="../system_test/system_test.html">
	  SPK System Testing Guide
	</ulink>.
      </para>
      <para>
	The information in this guide is essential to individuals and
	groups participating in the development of the System for
	Population Kinetics (SPK), an open source project of the 
	RFPK Laboratory of the &dept; of the &uw;.  RFPK's work
	is supported, in part, by grant P41 EB-001975
	of the National Institutes of Health (NIH) of the U.S.
	Department of Health and Human Services.	
      </para>
      <para>
	<link linkend="copyright">Copyright</link> (c) 2004, by the &uw;.
      </para>
    </abstract>
  </articleinfo>
  <sect1>
    <title id="intro">Introduction</title>
    <para>
      The Resource for Population Kinetics (RFPK), in addition to its roll
      as an academic research group and the principal developer of 
      the System for Population Kinetics (SPK), operates a
      demonstration installation of the software.  This installation
      runs every day, around the clock, providing  
      service to selected researchers.  It is a test-bed not only for
      the software but also the processes that support a 
      production-quality service.
    </para>
    <para>
      In the life-cycle of SPK, deployment is the stage which moves
      a minor version of the software into production.  The entire
      process of producing a new minor version is the following:
      <orderedlist>
	<listitem>
	  <para>
	    Designing, programming and unit-testing an enhancement or
	    modification.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    System testing, as described in the
	    <ulink url="../system_test/system_test.html">
	      SPK System Testing Guide
	    </ulink>.
	    The output of the system testing phase is a 
	    <emphasis>candidate</emphasis> for deployment.
	  </para>
	  <para>
	    A candidate is <emphasis>staged</emphasis> for deployment but
	    is not, in general, deployed immediately.  Candidates 
	    accumulate according to the rhythm of software development.
	    Deployment occurs according to an operations schedule.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Deployment, which performs a <emphasis>regression test</emphasis>
	    on the most recent candidate and, if the test is successful,
	    moves the new minor version into production.  The purpose of
	    the regression test is to insure that the software continues
	    to run everything correctly that it was able to run before
	    the change; in other words, that the software has 
	    <emphasis>not</emphasis> regressed.
	  </para>
	</listitem>
      </orderedlist>
    </para>
  </sect1>
  <sect1>
    <title>Regression Testing</title>
    <para>
      As explained in the <link linkend="intro">Introduction</link>, the purpose
      of the regression test is to demonstrate that the software has 
      <emphasis>not</emphasis> regressed.  The test is run by issuing
      the command 
      <ulink url="../../ops/utils/rt_script.html">
	<command>regression_test</command>
      </ulink>,
      which is a shell script that, in turn, calls the perl script
      <ulink url="../../ops/utils/regression_test.html">
	<command>regression_test.pl</command>
      </ulink>.
      A successful test returns zero as the value of the exit status.
    </para>
    <para>
      The regression test consists of two parts, which will now be described.
    </para>
    <sect2>
      <title>Client-Side Regression Test</title>
      <para>
	This test has not yet been developed.
      </para>
    </sect2>
    <sect2>
      <title>Server-Side Regression Test</title>
      <para>
	The server side of SPK goes into action when the client program,
	known as the MDA, submits a job.  The responsibility of the server
	side is to process the job and to return results to the client.
	A regression test for the server side consists, quite naturally,
	of a set of jobs along with their expected results.  The jobs are
	run and the results compared with what was anticipated.  If 
	there are no significant differences, the test is a success.
	The entire process of extracting the set of selected jobs from the
	database, of running them, and of comparing results is handled
	automatically by regression_test.pl
      </para>
      <para>
	The jobs to use are specified for regression_test.pl in a configuration
	file.  Here are some guidelines for selecting jobs:
	<orderedlist>
	  <listitem>
	    <para>
	      Jobs should be good representatives of the sort of jobs that 
	      scientific researchers create, but they should be selected or
	      modified so that they do not take very long to run.  As 
	      new features are added to SPK, the set of jobs in the regression
	      test increases in size, and so does the quantity of resources
	      consumed each time the test is run.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Coverage should be strived for. Every computational 
	      behavior of SPK should be exercised by at least one job.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Jobs which produce errors or fail to converge should be
	      included, to test that error handling capabilities have not
	      regressed.
	    </para>
	  </listitem>
	</orderedlist>
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Deploying the Candidate</title>
    <para>
      Once the candidate has passed the regression test,
      the installation of the software on the servers where it is required is 
      handled automatically by the
      <ulink url="../../ops/utils/deploy_candidate.html">
	<command>deploy_candidate.pl </command>
      </ulink>
      perl script.
    </para>
  </sect1>
  <sect1>
    <title>Publishing Release-Notes</title>
    <para>
      As explained in the <link linkend="intro">Introduction</link>, software
      engineers develop a sequence of deployment candidates between actual
      deployments of the software to the production environment.  Each
      candidate represents a potential minor version.  Each candidate
      could be one of those that is deployed. 
    </para>
    <para>
      Whenever a software engineer stages a candidate, it is her or his
      responsibility to write a brief set of release-notes describing what
      changes are included in the candidate.  The software engineer does this
      by editing a text file that is created, in skeletal form, by 
      the 
      <ulink url="../../ops/utils/stage_candidate.html">
	<command>stage_candidate.pl </command>
      </ulink>
      perl script.
    </para>
    <para>
      When a candidate is deployed, all of the release-notes files accumulated
      since the last deployment are concatenated to form the release-notes for
      the deployed minor version.  This is done automatically by running the
      <ulink url="../../ops/utils/rn_script.html">
	<command>release_notes</command>
      </ulink>
      shell script.
    </para>
  </sect1>
  <sect1>
    <title>Deploying a Minor Version, Step-by-Step</title>
    <para>
      <orderedlist>
	<listitem>
	  <para>
	    There must be at least one candidate staged for deployment.
	    For more details, see the
	    <ulink url="../system_test/system_test.html">
	      SPK System Testing Guide
	    </ulink>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Obtain exclusive use of the test environment, by negotiating
	    with the other users of this facility.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    In a terminal window:
	    <screen>
ssh aspkserver
su -
regression_test
	    </screen>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    If the regression test runs successfully, skip to step 8.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    The regression test may have failed because of formatting changes 
	    in the output files.  If you decide that all errors were due to this
	    cause, run
	    <screen>
recalibrate_regression.pl
	    </screen>
	    and return to step 3.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    The descrepancies for some jobs may have been due to formatting
	    changes, but others may be due to real errors in the code.
	    Create a configuration file for calibrate_regression.pl,
	    which lists only the jobs for which the errors were due 
	    solely to formatting changes, then run
	    <screen>
recalibrate_regression.pl --config-file="name-of-file"
	    </screen>
	    then proceed to the next step.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    If any of the discrepencies were real, they must be corrected,
	    unit tested, system tested and this procedure repeated
	    from the beginning.  <emphasis>In the meantime, no other candidates 
	    should be staged.</emphasis>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Deploy the software to the production environment by running
	    <screen>
deploy_candidate.pl
	    </screen>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Publish the release notes:
	    <screen>
release_notes
	    </screen>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Inform other users of the test environment that it is now free.
	  </para>
	</listitem>
      </orderedlist>
    </para>
  </sect1>
  <sect1>
    <title id="copyright">Copyright Notice</title>
    <para>
      Copyright (c) 2004, by the University of Washington.
      This material may be distributed only subject to the terms and conditions 
      set forth in the Open Publication License, V1.0 or later
      (the latest version is presently available
      <ulink url="http://www.opencontent.org/openpub/">here</ulink>.
    </para>
  </sect1>
</article>


<!--  LocalWords:  xml DOCTYPE DocBook uw articleinfo SPK RFPK RFPK's linkend
 -->
<!--  LocalWords:  ulink url orderedlist listitem perl MDA
 -->
