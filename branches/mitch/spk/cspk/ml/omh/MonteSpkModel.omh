/*
$begin MonteSpkModel$$
$aindex head subhead$$
$spell
	Enum
	Struct
	cov
	Spk
	const
	valarray
	Ind
	var
	bi
	fi
	Ri
$$

$section A Monte-Carlo Spk Model Object$$

$head Notation$$
$table
number of fixed effects   $cnext
	$latex m$$       
$rnext
number of random effects   $cnext
	$latex n$$       
$rnext
value of fixed effects   $cnext
	$latex \alpha \in \R^m$$  
$rnext
a value of random effects for one individual   $cnext
	$latex b \in \R^n$$     
$rnext
number of measurements for $th i$$ individual   $cnext
	$latex N[i]$$     
$rnext
measurement vector for $th i$$ individual   $cnext
	$latex y^i \in \R^{N[i]}$$     
$rnext
measurement noise vector for $th i$$ individual   $cnext
	$latex e^i \in \R^{N[i]}$$     
$rnext
covariance of random effects   $cnext
	$latex D : \R^m \rightarrow \R^{n \times n}$$       
$rnext
covariance of measurement noise   $cnext
	$latex R^i : \R^n \times \R^m \rightarrow \R^{N[i] \times N[i]}$$     
$rnext
mean of measurement given random effects $cnext
	$latex f^i : \R^n \times \R^m \rightarrow \R^{N[i]}$$     
$tend

$head Statistical Model$$
The Monte-Carlo Spk Model 
for the $th i$$ individual has the following statistical structure:
$latex \[
\begin{array}{rcl}
	b             & \sim & \N[ 0 , D( \alpha ) ] \\
	e^i \; | \; b & \sim & \N[ 0 , R^i ( b \; | \; \alpha ) ] \\
	y^i           &  =   & f^i ( b \; | \; \alpha ) + e^i
\end{array}
\] $$

$head Enum Types$$
If $italic Model$$ is a Monte-Carlo Spk Model, there must
be an enum type 
$syntax%enum %Model%::covStruct%$$
with the following two possible values:
$syntax%%Model%::DIAGONAL%$$ and
$syntax%%Model%::FULL%$$.

$head Member Functions Conventions$$
In the description below, $italic model$$ is a Monte-Carlo Spk Model object.
Each of its member functions (see below) 
has a public and a private interface.
If $italic name$$ is the identifier used for the public interface,
$syntax%do%Name%$$ is the identifier for the private interface
where $italic Name$$ is a version of $italic name$$ with its
first letter capitalized.
The function $syntax%do%Name%$$ is virtual in the Monte-Carlo Spk Model
class and must be specified by a derived class definition.
The function $italic name$$ is a wrapper for 
that catches any exceptions that are thrown by the call to
$syntax%do%Name%$$.

$head Setting Member Functions$$

$subhead getNPopPar$$
The function
$syntax%
	int %model%.getPopPar (void)
%$$
returns the number of fixed effects in the model; i.e., $latex m$$.

$subhead getNIndPar$$
The function
$syntax%
	int %model%.getNIndPar (void)
%$$
returns the number of random effects in the model (for each individual); i.e., 
$latex n$$.

$subhead setPopPar$$
The functions
$syntax%
	void %model%.setPopPar  (const valarray<double> &%alpha%)
	void %model%.doSetPopPar(const valarray<double> &%alpha%)
%$$
set the value of the fixed effect vector 
$latex \[
	\alpha = alpha 
\] $$ 
that corresponds to subsequent usage of $italic model$$.
The argument $italic alpha$$ must have size
equal to $italic m$$.
Calling $code setPopPar$$ 
erases any previous setting by the 
$code selectIndividual$$ and the $code setIndPar$$ member functions.

$subhead selectIndividual$$
The functions
$syntax%
	void %model%.selectIndividual  (int %individual%)
	void %model%.doSelectIndividual(int %individual%)
%$$
sets the index for the individual that corresponds to subsequent 
usage of $italic model$$
$latex \[
	i = individual
\] $$
The argument $italic individual$$ must be an $code int$$ that is greater
than or equal zero and less than the number of individuals in the
population study.
Calling $code selectIndividual$$ 
erases any previous setting by the $code setIndPar$$ member function.

$subhead setIndPar$$
The functions
$syntax%
	void %model%.setIndPar  (const valarray &%bi%)
	void %model%.doSetIndPar(const valarray &%bi%)
%$$
sets the value of the random effects for individual $italic i$$; i.e.,
$latex \[
	b = bi
\] $$
for subsequent usage of $italic model$$.
The argument $italic bi$$ must have 
size equal to $italic n$$.

$head Random Effects Covariance$$

$subhead indParVariance$$
In the function calls
$syntax%
	void %model%.indParVariance  (valarray<double> &%DOut%) const
	void %model%.doIndParVariance(valarray<double> &%DOut%) const
%$$
The argument $italic DOut$$ 
has its input and output size equal to $latex n * n$$.
The input values of its elements do not matter
and the output value is the variance of the random effects; i.e.,
for $latex j = 0 , \ldots , n-1$$ and $latex k = 0 , \ldots , n-1$$
$latex \[
	DOut [ j * n + k ]  = D( \alpha )_{j,k}
\] $$
The output value must be a symmetric positive definite matrix.


$subhead indParVariance_popPar$$
In the function calls
$syntax%
	void %model%.indParVariance_popPar  (valarray<double> &%D_pop%) const
	void %model%.doIndParVariance_popPar(valarray<double> &%D_pop%) const
%$$
The argument $italic D_pop$$ 
has its input and output size equal to $latex n * n * m$$.
The input values of its elements do not matter
and the output values are given by the following formula:
for $latex j = 0 , \ldots , m-1$$,
$latex k = 0 , \ldots , n-1$$,
and $latex l = 0, \ldots , n-1$$
$latex \[
	D\_pop [ j * n * n + k * n + l ]  = 
	\frac{\partial}{ \partial \alpha_j } 
	D( \alpha )_{k,l}
\] $$

$head Measurement Mean Given the Random Effects$$

$subhead dataMean$$
The functions
$syntax%
	void %model%.dataMean  (valarray<double> &%fi%) const
	void %model%.doDataMean(valarray<double> &%fi%) const
%$$
The argument $italic fi$$ has its
input and output size equal to $latex N[i]$$.
The input values of the elements of $italic fi$$ do not matter
and the output values are given by the following formula:
$latex \[
	fi = f^i ( b , \alpha )
\] $$

$subhead dataMean_indPar$$
The functions
$syntax%
	void %model%.dataMean_indPar  (valarray<double> &%fi_ind%) const
	void %model%.doDataMean_indPar(valarray<double> &%fi_ind%) const
%$$
The argument $italic fi_ind$$ has its
input and output size equal to $latex n * N[i]$$.
The input values of the elements of $italic fi_ind$$ do not matter.
and the output values are given by the following formula:
for $latex j = 0 , \ldots , n-1$$ and
$latex k = 0 , \ldots , N[i]-1$$,
$latex \[
	fi\_ind [ j * N[i] + k ] = 
	\frac{\partial}{ \partial b_j } 
	f^i ( b , \alpha )_k
\] $$

$subhead dataMean_popPar$$
The functions
$syntax%
	void %model%.dataMean_popPar  (valarray<double> &%fi_pop%) const
	void %model%.doDataMean_popPar(valarray<double> &%fi_pop%) const
%$$
The argument $italic fi_pop$$ has its
input and output size equal to $latex m * N[i]$$.
The input values of the elements of $italic fi_pop$$ do not matter.
and the output values are given by the following formula:
for $latex j = 0 , \ldots , m-1$$ and
$latex k = 0 , \ldots , N[i]-1$$,
$latex \[
	fi\_pop [ j * N[i] + k ] = 
	\frac{\partial}{ \partial \alpha_j } 
	f^i ( b , \alpha )_k
\] $$

$head Measurement Covariance Given the Random Effects$$

$subhead dataVariance$$
The functions
$syntax%
	void %model%.dataVariance  (valarray<double> &%Ri%) const
	void %model%.doDataVariance(valarray<double> &%Ri%) const
%$$
The argument $italic Ri$$ 
has input and output size equal to $latex N[i] * N[i]$$. 
The input values of its elements do not matter
and the output value of its elements are given by the following formula:
$latex \[
	Ri = R^i ( b , \alpha )
\] $$

$subhead dataVariance_indPar$$
The functions
$syntax%
	void %model%.dataVariance_indPar  (valarray<double> &%Ri_ind%) const
	void %model%.doDataVariance_indPar(valarray<double> &%Ri_ind%) const
%$$
The argument $italic Ri_ind$$ has its
input and output size equal to $latex n * N[i] * N[i]$$.
The input values of the elements of $italic Ri_ind$$ do not matter.
and the output values are given by the following formula:
for $latex j = 0 , \ldots , n-1$$,
$latex k = 0 , \ldots , N[i]-1$$, and
$latex l = 0 , \ldots , N[i]-1$$
$latex \[
	Ri\_ind [ j * N[i] * N[i] + k * N[i] + l ] = 
	\frac{\partial}{ \partial b_j } 
	R^i ( b , \alpha )_{k,l}
\] $$

$subhead dataVariance_popPar$$
The functions
$syntax%
	void %model%.dataVariance_popPar  (valarray<double> &%Ri_pop%) const
	void %model%.doDataVariance_popPar(valarray<double> &%Ri_pop%) const
%$$
The argument $italic Ri_pop$$ has its
input and output size equal to $latex m * N[i] * N[i]$$.
The input values of the elements of $italic Ri_pop$$ do not matter.
and the output values are given by the following formula:
for $latex j = 0 , \ldots , m-1$$,
$latex k = 0 , \ldots , N[i]-1$$, and
$latex l = 0 , \ldots , N[i]-1$$
$latex \[
	Ri\_pop [ j * N[i] * N[i] + k * N[i] + l ] = 
	\frac{\partial}{ \partial \alpha_j } 
	R^i ( b , \alpha )_{k,l}
\] $$

$end
