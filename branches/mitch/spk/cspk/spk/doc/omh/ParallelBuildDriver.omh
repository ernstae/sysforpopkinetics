$begin Building Spk Driver for Parallel Computation$$

$spell
    parallelization exe Spk executables multi standalone ppka instantiate vs cpp intra bool nmake dsp lib Unix
    const dir int hyperlinks int argc argv init Holden ind initializer instantiates
$$

$section Building SPK Driver for Parallel Computation$$

$index Parallel, building an arbitrary SPK driver for parallel computation$$

$head What do I need to do to run SPK in the parallel mode?$$

Somebody has to write a SPK driver that acts as Master or as Node depending on how it has been invoked.
The *somebody* has been traditionally an end-user of SPK; for the single-process-single-threaded SPK,
an end-user wrote a C/C++ program declaring & defining a User-provided model class
and calling $xref/ppkaOptParallel//ppkaOpt()/$$ in $code main()$$.  However, for the parallel version
of SPK, $bold we provide an automated driver generator$$ that will integrate arbitrary user-written sequences of 
programming statements that would otherwise make up as a $code main()$$ program  
as well as the declaration & definition of a User-provided Model.
$pre

$$
Here is the reason why.  A SPK driver must go through the following steps properly in order to complete a population analysis:
$pre

$$
$table
1)      $cend   Initialize the communication channel                                                   $rend
2)      $cend   Instantiate an arbitrary User-provided Model class                                     $rend
3)      $cend   Initiate a Node as a separate process to avoid hung-up in case all other Node die      $rend
4)      $cend   If SPK has been invoked as Master then execute a series of statements written by end-user that eventually calls $xref/ppkaOptParallel//ppkaOpt()/$$                  $rend
        $cend   for population analysis (User-provided Script). If it is a Node, execute the steps N1 - N6 below.  $rend
5)      $cend   Release the resources properly as necessary                                            $rend
6)      $cend   Signal all Nodes of the end of SPK session                                             $rend
$tend
$pre

$$
$table
N1)     $cend   Search and pick up an input date package for an individual from Shared Disk Space      $rend
N2)     $cend   Unpack the package that contains input data for the individual parameter analysis      $rend
N3)     $cend   Estimate the individual parameter and compute derivatives                              $rend
N4)     $cend   Compose the results from estimateB() into a package                                    $rend
N5)     $cend   Write the result package in to Shared Disk Space                                       $rend
N6)     $cend   Repeat the above steps N1-N5 until the detection of the end of SPK session             $rend
$tend
$pre

$$
As you can easily see, asking end-user to correctly write such a driver seems undoubtedly unacceptable, 
so we instead provide a generator that will integrate multiple components written by user that
would be otherwise provided as $code main()$$ in a .cpp file. 
$pre

$$
So, what $bold you, as an end-user, has to do is to implement the following components$$ strictly according to the $bold
$xref/Building Spk Driver for Parallel Computation/What components does SPK need from me?/specifications/$$ $$ discussed
later in this page:

$table
* $cend the declaration and definition of a User-provided Model                                                         $rend                                                             
* $cend a function that initializes a User-provided Model object properly and returns the instance                      $rend
* $cend a procedure that, along with others, requests a call to ppkaOpt()                                               $rend
* $cend a procedure that properly releases the resources held by the User-provided Model object and others as necessary $rend
$tend


$head What components does SPK need from me?$$
You, as an end-user of SPK, must provided the following components strictly according to the specifications listed in
this section.
$pre

$$
All three functions (or procedures) will by called by $xref/Executing in Parallel Mode//a Spk driver/$$
you will generate using the $xref/generateDriver//automatic 
driver generator/$$.  An automatically generated driver is given a name, $code userSpkDriver.exe$$.
The Spk driver will forward to all these functions the original entire argument list
given by the user who invokes userSpkDriver.exe from the command line.
The Spk driver uses only these required arguments, ignoring extra ones, given at the command line and 
simply forward the entire list to these functions.
$pre

$$
All argument values to $xref/Executing in Parallel Mode//userSpkDriver.exe/$$ should be proceeded by 
$bold -$italic specifier$$$$: for instance, if you decided to pass the number of individuals in population, you may want to call it 
$italic -size$$ followed by a single value such as $math%100%$$.
The whole statement would look like this:
$codep

    userSpkDriver -mode multiple -who master -dir \\Holden\Shared_dir 

$$
$italic Note that the order of appearance should not matter.$$

$subhead User-provided Model declaration and definition$$
The declaration and definition of a User-provided Model in a single .cpp file or separate .h and .cpp files.
$pre

$$
Regardless of whether you separate the declaration from the definition in different files (.h and .cpp), 
the filename(s) must reflect the class name directly.
For instance, if a model class you derive from $xref/SPK_Model//SPK_Model/$$ is named $italic $bold MyModel$$ $$,
the corresponding header file name must be $bold $italic MyModel.h$$ $$ and definition file name must be 
$bold $italic MyModel.cpp$$ $$.

$subhead Initializer$$
$syntax//MyModel/ popInit(int /argc/, const char* /argv/)
/$$
A function that instantiates your User-provided Model class and returns the object.
$pre

$$
$italic argc$$ and $italic argv$$ are the original argument list given to the Spk Driver from the command line.

$subhead Body$$
$syntax/void popAnalysis(int /argc/, const char* /argv/, /MyModel/& /model/, bool /isMultiple/, const File& /sharedDir/)
/$$
A procedure that, along with others, requests a call to ppkaOpt().
$pre

$$
This procedure corresponds to, otherwise, the core part of the main program user would write; the middle portion after
removing the (model) initialization and the resource release portions.
$pre

$$
$italic argc$$ and $italic argv$$ are the original argument list given to the Spk Driver from the command line.
$pre

$$
$italic model$$ is a reference to the User-provided Model object returned by $code popInit()$$.  This will be passed from the calling 
SPK driver, assuming the driver has been generated by $xref/generateDriver//generateDriver.exe/$$.
$pre

$$
$italic isMultiple$$ is true if end-user requested multi-processing.    This will be passed from the calling 
SPK driver, assuming the driver has been generated by $xref/generateDriver//generateDriver.exe/$$.
$pre

$$
$italic sharedDir$$ is a File object that points to the shared directory.   This will be passed from the calling 
SPK driver, assuming the driver has been generated by $xref/generateDriver//generateDriver.exe/$$.

$subhead Clean-up$$
$syntax/void popClean(int /argc/, const char* /argv/, /MyModel/& /model/)
/$$
A procedure that properly releases the resources user allocated.  User are only but all responsible for
these resources they allocated themselves. 
$pre

$$
$italic argc$$ and $italic argv$$ are the original argument list given to the Spk Driver from the command line.


$head I have all components implemented, so what do I do now?$$
Now, you run the automated SPK driver generator, $xref/generateDriver//generateDriver.exe/$$ to generate
a SPK driver integrating the components you just written and placed in the same directory where 
$xref/generateDriver//generateDriver.exe/$$, exists.  A SPK driver, named 
$xref/Executing in Parallel Mode//userSpkDriver.exe/$$ will appear in the directory upon a
successful completion.

$end