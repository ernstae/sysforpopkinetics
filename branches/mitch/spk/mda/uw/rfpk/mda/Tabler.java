/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda;

import uw.rfpk.mda.nonmem.*;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import java.awt.Dimension;
import java.util.ArrayList;
import java.text.DecimalFormat;
import java.text.NumberFormat;

/** This class handles table outpput
 *
 * @author  Jiaji Du
 */
public class Tabler extends javax.swing.JFrame {
    
    /** Creates new form Tabler.
     * @param frame the MDAFrame object.
     * @param dataLabels an ArrayList object containing data labels.
     * @param dataValues  a data value matrix.
     * @param indIDs individual IDs.
     */
    public Tabler(MDAFrame frame, ArrayList dataLabels, double[][] dataValues, String[] indIDs)
    {
        this.frame = frame;
        this.dataLabels = dataLabels;
        this.dataValues = dataValues;
        this.indIDs = indIDs;
        initComponents();
        columnModel.clear();
        for(int i = 0; i < dataLabels.size(); i++)
            columnModel.addElement(dataLabels.get(i));
        indPoints = DefaultPlot.getIndPoints(indIDs);
        indIDNames = new String[indPoints.length];
        indIDNames[0] = indIDs[0];
        rowModel.clear();
        rowModel.addElement("ind = " + indIDs[0]);
        int j = 0;
        for(int i = 1; i < indIDs.length; i++)
            if(!indIDs[i].equals(indIDNames[j]))
            {
                indIDNames[++j] = indIDs[i];
                rowModel.addElement("ind = " + indIDs[i]);
            }
        setLocation(frame.getLocation().x + 250, frame.getLocation().y + 150);
        setSize(274, 340);
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel18 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        columnList = new javax.swing.JList(columnModel);
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel20 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        rowList = new javax.swing.JList(rowModel);
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel29.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel29.setText("Select data items");
        jPanel18.add(jLabel29, java.awt.BorderLayout.NORTH);

        jScrollPane14.setViewportView(columnList);

        jPanel18.add(jScrollPane14, java.awt.BorderLayout.CENTER);

        jCheckBox1.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBox1.setText("Select all");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jPanel18.add(jCheckBox1, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 150;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 1);
        getContentPane().add(jPanel18, gridBagConstraints);

        jButton4.setText("Display");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton4);

        jButton5.setText("Cancel");
        jButton5.setMaximumSize(new java.awt.Dimension(81, 25));
        jButton5.setMinimumSize(new java.awt.Dimension(81, 25));
        jButton5.setPreferredSize(new java.awt.Dimension(81, 25));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        getContentPane().add(jPanel20, gridBagConstraints);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel30.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel30.setText("Select individuals");
        jPanel19.add(jLabel30, java.awt.BorderLayout.NORTH);

        jScrollPane15.setViewportView(rowList);

        jPanel19.add(jScrollPane15, java.awt.BorderLayout.CENTER);

        jCheckBox2.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBox2.setText("Select all");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jPanel19.add(jCheckBox2, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 150;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 5, 0);
        getContentPane().add(jPanel19, gridBagConstraints);

        jCheckBox3.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBox3.setText("Use exponential number format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBox4.setText("Include only first row of each individual");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jCheckBox4, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        int size = columnModel.getSize();
        if(jCheckBox1.isSelected())
        {       
            int[] indices = new int[size];
            for(int i = 0; i < size; i++)
                indices[i] = i;
            columnList.setSelectedIndices(indices);
        }
        else
            columnList.removeSelectionInterval(0, size - 1);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        int size = rowModel.getSize();
        if(jCheckBox2.isSelected())
        {
            int[] indices = new int[size];
            for(int i = 0; i < size; i++)
                indices[i] = i;
            rowList.setSelectedIndices(indices);
        }
        else
            rowList.removeSelectionInterval(0, size - 1);
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int[] columns = columnList.getSelectedIndices();
        int[] inds = rowList.getSelectedIndices();
        int nColumns = columns.length;
        int nInds = inds.length;       
        if(nColumns > 0 && nInds > 0)
        {
            int[] startRows = new int[indPoints.length];
            startRows[0] = 0;
            for(int i = 1; i < startRows.length; i++)
                startRows[i] = startRows[i - 1] + indPoints[i - 1];
            if(jCheckBox4.isSelected())
                for(int i = 0; i < indPoints.length; i++)
                    indPoints[i] = 1;
            StringBuffer buffer = new StringBuffer();
            if(jCheckBox3.isSelected())
            {
                for(int i = 0; i < nColumns; i++)
                    buffer.append(formatData(10, (String)dataLabels.get(columns[i])));
                DecimalFormat f = (DecimalFormat)NumberFormat.getInstance(java.util.Locale.ENGLISH);
                f.applyPattern("0.0000E00");
                double value;
                for(int i = 0; i < nInds; i++)
                    for(int j = 0; j < indPoints[inds[i]]; j++)
                    {
                        buffer.append("\n");
                        if(dataLabels.get(columns[0]).equals("ID"))
                        {
                            buffer.append(formatData(10, String.valueOf(indIDs[startRows[inds[i]]])));
                            for(int k = 1; k < nColumns; k++)
                            {
                                value = dataValues[startRows[inds[i]] + j][columns[k]];
                                if(String.valueOf(value).equals("NaN"))
                                    buffer.append("         NaN");
                                else if(String.valueOf(value).equals("-Infinity"))
                                    buffer.append("   -Infinity");
                                else if(String.valueOf(value).equals("Infinity") || String.valueOf(value).equals("+Infinity"))
                                    buffer.append("   +Infinity");
                                else
                                {
                                    buffer.append(" ");
                                    buffer.append(Utility.formatData(8, f.format(value)));
                                }
                            }
                        }
                        else
                            for(int k = 0; k < nColumns; k++)
                            {
                                value = dataValues[startRows[inds[i]] + j][columns[k]];
                                if(String.valueOf(value).equals("NaN"))
                                    buffer.append("         NaN");
                                else if(String.valueOf(value).equals("-Infinity"))
                                    buffer.append("   -Infinity");
                                else if(String.valueOf(value).equals("Infinity") || String.valueOf(value).equals("+Infinity"))
                                    buffer.append("   +Infinity");
                                else
                                {
                                    buffer.append(" ");
                                    buffer.append(Utility.formatData(8, f.format(value)));
                                }
                            }
                    }
            }
            else
            {
                int length;
                int[] lengths = new int[nColumns];
                for(int i = 0; i < nColumns; i++)
                    lengths[i] = 1;
                for(int i = 0; i < nColumns; i++)
                {
                    length = ((String)dataLabels.get(columns[i])).length();
                    if(length > lengths[i]) lengths[i] = length;
                }
                for(int i = 0; i < nInds; i++)
                    for(int j = 0; j < indPoints[inds[i]]; j++)
                        if(dataLabels.get(columns[0]).equals("ID"))
                        {
                            length = String.valueOf(indIDs[startRows[inds[i]]]).length();
                            if(length > lengths[0]) lengths[0] = length;
                            for(int k = 1; k < nColumns; k++)
                            {
                                length = String.valueOf(dataValues[startRows[inds[i]] + j][columns[k]]).length();
                                if(length > lengths[k]) lengths[k] = length;
                            }
                        }
                        else
                            for(int k = 0; k < nColumns; k++)
                            {
                                length = String.valueOf(dataValues[startRows[inds[i]] + j][columns[k]]).length();
                                if(length > lengths[k]) lengths[k] = length;
                            }
                for(int i = 0; i < nColumns; i++)
                    buffer.append(formatData(lengths[i], (String)dataLabels.get(columns[i])));
                for(int i = 0; i < nInds; i++)
                    for(int j = 0; j < indPoints[inds[i]]; j++)
                    {
                        buffer.append("\n");
                        if(dataLabels.get(columns[0]).equals("ID"))
                        {
                            buffer.append(formatData(lengths[0], String.valueOf(indIDs[startRows[inds[i]]])));
                            for(int k = 1; k < nColumns; k++)
                                buffer.append(formatData(lengths[k], 
                                                         String.valueOf(dataValues[startRows[inds[i]] + j][columns[k]])));
                        }
                        else
                            for(int k = 0; k < nColumns; k++)
                                buffer.append(formatData(lengths[k], 
                                                         String.valueOf(dataValues[startRows[inds[i]] + j][columns[k]])));
                    }
            }
            frame.setEditorText(buffer.toString());
            frame.setEditorCaretPosition(0);
            frame.setEditorTitle("Table of selected dataset");
        }
        setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        setVisible(false);
    }//GEN-LAST:event_exitForm

    /** Generates a default table.
     * @param frame the MDAFrame object.
     * @param dataLabels an ArrayList object containing data labels.
     * @param dataValues a data value matrix.
     * @param indIDs individual IDs.
     * @param labels data labels of the date items to be included in the table.
     * @param exponential true for using exponential format, false for using free format.
     */
    public static void defaultTable(MDAFrame frame, ArrayList dataLabels, double[][] dataValues,
                                    String[] indIDs, String[] labels, boolean exponential)
    {
        int nColumns = labels.length;
        int nRows = dataValues.length;
        int[] columns = new int[nColumns];
        for(int i = 0; i < nColumns; i++)
            columns[i] = dataLabels.indexOf(labels[i]);
        DecimalFormat f = (DecimalFormat)NumberFormat.getInstance(java.util.Locale.ENGLISH);
        f.applyPattern("0.0000E00");
        StringBuffer buffer = new StringBuffer();
        if(exponential)
        {
            for(int i = 0; i < nColumns; i++)
                buffer.append(formatData(10, (String)dataLabels.get(columns[i])));
            double value;
            for(int i = 0; i < nRows; i++)
            {
                buffer.append("\n");
                buffer.append(formatData(10,  indIDs[i]));
                for(int j = 1; j < nColumns; j++)
                {
                    value = dataValues[i][columns[j]];
                    if(String.valueOf(value).equals("NaN"))
                        buffer.append("         NaN");
                    else if(String.valueOf(value).equals("-Infinity"))
                        buffer.append("   -Infinity");
                    else if(String.valueOf(value).equals("Infinity") || String.valueOf(value).equals("+Infinity"))
                        buffer.append("   +Infinity");
                    else
                    {
                        buffer.append(" ");
                        buffer.append(Utility.formatData(8, f.format(value)));
                    }
                }
            }
        }
        else
        {
            int length;
            int[] lengths = new int[nColumns];
            for(int i = 0; i < nColumns; i++)
                lengths[i] = 1;
            for(int i = 0; i < nColumns; i++)
            {
                length = ((String)dataLabels.get(columns[i])).length();
                if(length > lengths[i]) lengths[i] = length;
            }
            for(int i = 0; i < nRows; i++)
            {
                length = String.valueOf(indIDs[i]).length();
                if(length > lengths[0]) lengths[0] = length;
                for(int j = 1; j < nColumns; j++)
                {
                    length = String.valueOf(dataValues[i][columns[j]]).length();
                    if(length > lengths[j]) lengths[j] = length;
                }
            }
            for(int i = 0; i < nColumns; i++)
                buffer.append(formatData(lengths[i], (String)dataLabels.get(columns[i])));
            for(int i = 0; i < nRows; i++)
            {   
                buffer.append("\n"); 
                buffer.append(formatData(lengths[0], String.valueOf(indIDs[i])));
                for(int j = 1; j < nColumns; j++)
                    buffer.append(formatData(lengths[j], String.valueOf(dataValues[i][columns[j]])));
            }
        }
        frame.setEditorText(buffer.toString());
        frame.setEditorCaretPosition(0);
        frame.setEditorTitle("Table of default dataset");
    }
    
    private static String formatData(int length, String number)
    {
        length += 2;
        StringBuffer buffer = new StringBuffer(length);
        for(int i = 0; i < length - number.length(); i++) 
            buffer.append(" ");
        buffer.append(number);
        return buffer.toString();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList columnList;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JList rowList;
    // End of variables declaration//GEN-END:variables
    
    // List model for data item list of table dialog
    private DefaultListModel columnModel = new DefaultListModel();
    
    // List model for individual list of table dialog
    private DefaultListModel rowModel = new DefaultListModel();
    
    // Individual ID names
    private String[] indIDNames;
    
    // MDA main window
    private MDAFrame frame;
    
    // List of data labels
    private ArrayList dataLabels;
    
    // All data values
    private double[][] dataValues;
    
    // Individual IDs
    private String[] indIDs;
    
    // Number of indvidual data points list
    private int[] indPoints;
}
