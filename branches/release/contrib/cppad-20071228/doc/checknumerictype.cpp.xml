<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>The CheckNumericType Function: Example and Test</title>
<meta name="description" id="description" content="The CheckNumericType Function: Example and Test"/>
<meta name="keywords" id="keywords" content=" Checknumerictype example check Numerictype test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_checknumerictype.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>CheckNumericType</option>
<option>CheckNumericType.cpp</option>
</select>
</td>
<td><a href="checknumerictype.xml" target="_top">Prev</a>
</td><td><a href="simplevector.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>CheckNumericType-&gt;</option>
<option>CheckNumericType.cpp</option>
</select>
</td>
<td>CheckNumericType.cpp</td>
<td>Headings</td>
</tr></table><br/>


<center><b><big><big>The CheckNumericType Function: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/check_numeric_type.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/near_equal.hpp&gt;<br/>
<br/>
<br/>
//&#xA0;Chosing&#xA0;a&#xA0;value&#xA0;between&#xA0;1&#xA0;and&#xA0;10&#xA0;selects&#xA0;a&#xA0;numeric&#xA0;class&#xA0;properity&#xA0;to&#xA0;be&#xA0;<br/>
//&#xA0;omitted&#xA0;and&#xA0;result&#xA0;in&#xA0;an&#xA0;error&#xA0;message&#xA0;being&#xA0;generated&#xA0;<br/>
#&#xA0;define&#xA0;CppADMyTypeOmit&#xA0;0<br/>
<br/>
namespace&#xA0;{&#xA0;//&#xA0;Empty&#xA0;namespace<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-------------------------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;class&#xA0;MyType&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;private:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;d;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constructor&#xA0;from&#xA0;void&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType(void)&#xA0;:&#xA0;d(0.)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constructor&#xA0;from&#xA0;an&#xA0;int&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType(int&#xA0;d_)&#xA0;:&#xA0;d(d_)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;constuctor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType(const&#xA0;MyType&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;d&#xA0;=&#xA0;x.d;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;assignment&#xA0;operator<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;operator&#xA0;=&#xA0;(const&#xA0;MyType&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;d&#xA0;=&#xA0;x.d;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;member&#xA0;function&#xA0;that&#xA0;converts&#xA0;to&#xA0;double<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Double(void)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;d;&#xA0;}<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;1<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;unary&#xA0;plus<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;operator&#xA0;+&#xA0;(void)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;x;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x.d&#xA0;=&#xA0;&#xA0;d;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;unary&#xA0;plus<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;operator&#xA0;-&#xA0;(void)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;x;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x.d&#xA0;=&#xA0;-&#xA0;d;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;3<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;binary&#xA0;addition<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;operator&#xA0;+&#xA0;(const&#xA0;MyType&#xA0;&amp;x)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;y;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y.d&#xA0;=&#xA0;d&#xA0;+&#xA0;x.d&#xA0;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;y;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;4<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;binary&#xA0;subtraction<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;operator&#xA0;-&#xA0;(const&#xA0;MyType&#xA0;&amp;x)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;y;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y.d&#xA0;=&#xA0;d&#xA0;-&#xA0;x.d&#xA0;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;y;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;5<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;binary&#xA0;multiplication<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;operator&#xA0;*&#xA0;(const&#xA0;MyType&#xA0;&amp;x)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;y;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y.d&#xA0;=&#xA0;d&#xA0;*&#xA0;x.d&#xA0;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;y;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;6<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;binary&#xA0;division<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;operator&#xA0;/&#xA0;(const&#xA0;MyType&#xA0;&amp;x)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;y;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y.d&#xA0;=&#xA0;d&#xA0;/&#xA0;x.d&#xA0;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;y;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;7<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;computed&#xA0;assignment&#xA0;addition<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;operator&#xA0;+=&#xA0;(const&#xA0;MyType&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;d&#xA0;+=&#xA0;x.d;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;8<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;computed&#xA0;assignment&#xA0;subtraction<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;operator&#xA0;-=&#xA0;(const&#xA0;MyType&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;d&#xA0;-=&#xA0;x.d;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;9<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;computed&#xA0;assignment&#xA0;multiplication<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;operator&#xA0;*=&#xA0;(const&#xA0;MyType&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;d&#xA0;*=&#xA0;x.d;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyTypeOmit&#xA0;!=&#xA0;10<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;computed&#xA0;assignment&#xA0;division<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;operator&#xA0;/=&#xA0;(const&#xA0;MyType&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;d&#xA0;/=&#xA0;x.d;&#xA0;}<br/>
#&#xA0;endif<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-------------------------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/*<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Solve:&#xA0;A[0]&#xA0;*&#xA0;x[0]&#xA0;+&#xA0;A[1]&#xA0;*&#xA0;x[1]&#xA0;=&#xA0;b[0]&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[2]&#xA0;*&#xA0;x[0]&#xA0;+&#xA0;A[3]&#xA0;*&#xA0;x[1]&#xA0;=&#xA0;b[1]&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*/&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;template&#xA0;&lt;class&#xA0;NumericType&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;Solve(NumericType&#xA0;*A,&#xA0;NumericType&#xA0;*x,&#xA0;NumericType&#xA0;*b)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;make&#xA0;sure&#xA0;NumericType&#xA0;satisfies&#xA0;its&#xA0;conditions<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckNumericType&lt;NumericType&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;b&#xA0;to&#xA0;x<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;b[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;b[1];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;A&#xA0;to&#xA0;work&#xA0;space<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;NumericType&#xA0;W[4];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[0]&#xA0;=&#xA0;A[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[1]&#xA0;=&#xA0;A[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[2]&#xA0;=&#xA0;A[2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[3]&#xA0;=&#xA0;A[3];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;divide&#xA0;first&#xA0;row&#xA0;by&#xA0;W(1,1)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[1]&#xA0;/=&#xA0;W[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;/=&#xA0;W[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[0]&#xA0;=&#xA0;NumericType(1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;subtract&#xA0;W(2,1)&#xA0;times&#xA0;first&#xA0;row&#xA0;from&#xA0;second&#xA0;row<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[3]&#xA0;-=&#xA0;W[2]&#xA0;*&#xA0;W[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;-=&#xA0;W[2]&#xA0;*&#xA0;x[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[2]&#xA0;=&#xA0;NumericType(0);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;divide&#xA0;second&#xA0;row&#xA0;by&#xA0;W(2,&#xA0;2)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;/=&#xA0;W[3];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W[3]&#xA0;&#xA0;=&#xA0;NumericType(1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;first&#xA0;row&#xA0;to&#xA0;solve&#xA0;for&#xA0;x[0]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;-=&#xA0;W[1]&#xA0;*&#xA0;x[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
}&#xA0;//&#xA0;End&#xA0;Empty&#xA0;namespace<br/>
<br/>
bool&#xA0;CheckNumericType(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;A[4];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[0]&#xA0;=&#xA0;MyType(1);&#xA0;A[1]&#xA0;=&#xA0;MyType(2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[2]&#xA0;=&#xA0;MyType(3);&#xA0;A[3]&#xA0;=&#xA0;MyType(4);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;b[2];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[0]&#xA0;=&#xA0;MyType(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[1]&#xA0;=&#xA0;MyType(2);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;x[2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Solve(A,&#xA0;x,&#xA0;b);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyType&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;=&#xA0;A[0]&#xA0;*&#xA0;x[0]&#xA0;+&#xA0;A[1]&#xA0;*&#xA0;x[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(sum.Double(),&#xA0;b[0].Double(),&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;=&#xA0;A[2]&#xA0;*&#xA0;x[0]&#xA0;+&#xA0;A[3]&#xA0;*&#xA0;x[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(sum.Double(),&#xA0;b[1].Double(),&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/check_numeric_type.cpp

</body>
</html>
