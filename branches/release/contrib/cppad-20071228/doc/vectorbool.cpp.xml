<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>CppAD::vectorBool Class: Example and Test</title>
<meta name="description" id="description" content="CppAD::vectorBool Class: Example and Test"/>
<meta name="keywords" id="keywords" content=" bool Cppad::vector vectorbool Cppad Cppad::vectorbool example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_vectorbool.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>CppAD_vector</option>
<option>vectorBool.cpp</option>
</select>
</td>
<td><a href="cppad_vector.cpp.xml" target="_top">Prev</a>
</td><td><a href="tracknewdel.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>CppAD_vector-&gt;</option>
<option>CppAD_vector.cpp</option>
<option>vectorBool.cpp</option>
</select>
</td>
<td>vectorBool.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>CppAD::vectorBool Class: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/vector.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/check_simple_vector.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;sstream&gt;&#xA0;//&#xA0;sstream&#xA0;and&#xA0;string&#xA0;are&#xA0;used&#xA0;to&#xA0;test&#xA0;output&#xA0;operation<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
<br/>
bool&#xA0;vectorBool(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::vectorBool;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vectorBool&#xA0;x;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;default&#xA0;constructor&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(x.size()&#xA0;==&#xA0;0);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x.resize(2);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;resize&#xA0;and&#xA0;set&#xA0;element&#xA0;assignment<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(x.size()&#xA0;==&#xA0;2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;false;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vectorBool&#xA0;y(2);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;sizing&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y.size()&#xA0;==&#xA0;2);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;vectorBool&#xA0;z(x);&#xA0;//&#xA0;copy&#xA0;constructor&#xA0;and&#xA0;const&#xA0;element&#xA0;access<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(z.size()&#xA0;==&#xA0;2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;(z[0]&#xA0;==&#xA0;false)&#xA0;&amp;&amp;&#xA0;(z[1]&#xA0;==&#xA0;true)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;true;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;modify,&#xA0;assignment&#xA0;changes&#xA0;x<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(x[0]&#xA0;==&#xA0;true);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x&#xA0;=&#xA0;y&#xA0;=&#xA0;z;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vector&#xA0;assignment<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;(x[0]&#xA0;==&#xA0;false)&#xA0;&amp;&amp;&#xA0;(x[1]&#xA0;==&#xA0;true)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;(y[0]&#xA0;==&#xA0;false)&#xA0;&amp;&amp;&#xA0;(y[1]&#xA0;==&#xA0;true)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;(z[0]&#xA0;==&#xA0;false)&#xA0;&amp;&amp;&#xA0;(z[1]&#xA0;==&#xA0;true)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;test&#xA0;of&#xA0;output<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::string&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;correct=&#xA0;&quot;01&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::string&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;str;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::ostringstream&#xA0;buf;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;z;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;str&#xA0;=&#xA0;buf.str();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(str&#xA0;==&#xA0;correct);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;test&#xA0;of&#xA0;push_back<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x.resize(0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;100;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x.push_back(&#xA0;(i&#xA0;%&#xA0;3)&#xA0;!=&#xA0;0&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(x.size()&#xA0;==&#xA0;100);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;100;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;x[i]&#xA0;==&#xA0;((i&#xA0;%&#xA0;3)&#xA0;!=&#xA0;0)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;is&#xA0;that&#xA0;boolvector&#xA0;is<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;simple&#xA0;vector&#xA0;class&#xA0;with&#xA0;elements&#xA0;of&#xA0;type&#xA0;bool<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckSimpleVector&lt;&#xA0;bool,&#xA0;vectorBool&#xA0;&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/vector_bool.cpp

</body>
</html>
