<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>The CheckSimpleVector Function: Example and Test</title>
<meta name="description" id="description" content="The CheckSimpleVector Function: Example and Test"/>
<meta name="keywords" id="keywords" content=" Checksimplevector example check Simplevector test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_checksimplevector.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>CheckSimpleVector</option>
<option>CheckSimpleVector.cpp</option>
</select>
</td>
<td><a href="checksimplevector.xml" target="_top">Prev</a>
</td><td><a href="nan.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>CheckSimpleVector-&gt;</option>
<option>CheckSimpleVector.cpp</option>
</select>
</td>
<td>CheckSimpleVector.cpp</td>
<td>Headings</td>
</tr></table><br/>


<center><b><big><big>The CheckSimpleVector Function: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/vector.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/check_simple_vector.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
<br/>
<br/>
//&#xA0;Chosing&#xA0;a&#xA0;value&#xA0;between&#xA0;1&#xA0;and&#xA0;9&#xA0;selects&#xA0;a&#xA0;simple&#xA0;vector&#xA0;properity&#xA0;to&#xA0;be&#xA0;<br/>
//&#xA0;omitted&#xA0;and&#xA0;result&#xA0;in&#xA0;an&#xA0;error&#xA0;message&#xA0;being&#xA0;generated&#xA0;<br/>
#&#xA0;define&#xA0;CppADMyVectorOmit&#xA0;0<br/>
<br/>
//&#xA0;-------------------------------------------------------------------------<br/>
<br/>
//&#xA0;example&#xA0;class&#xA0;used&#xA0;for&#xA0;non-constant&#xA0;elements&#xA0;(different&#xA0;from&#xA0;Scalar)<br/>
template&#xA0;&lt;class&#xA0;Scalar&gt;<br/>
class&#xA0;MyElement&#xA0;{<br/>
private:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Scalar&#xA0;*element;<br/>
public:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;element&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyElement(Scalar&#xA0;*e)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;element&#xA0;=&#xA0;e;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;an&#xA0;example&#xA0;element&#xA0;assignment&#xA0;that&#xA0;returns&#xA0;void<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;operator&#xA0;=&#xA0;(const&#xA0;Scalar&#xA0;&amp;s)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;*element&#xA0;=&#xA0;s;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;conversion&#xA0;to&#xA0;Scalar<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;operator&#xA0;Scalar()&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;*element;&#xA0;}<br/>
};&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
<br/>
//&#xA0;example&#xA0;simple&#xA0;vector&#xA0;class&#xA0;<br/>
template&#xA0;&lt;class&#xA0;Scalar&gt;<br/>
class&#xA0;MyVector&#xA0;{<br/>
private:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;length;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Scalar&#xA0;*&#xA0;data;<br/>
public:<br/>
<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;1<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;type&#xA0;of&#xA0;the&#xA0;elements&#xA0;in&#xA0;the&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;Scalar&#xA0;value_type;<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;default&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;MyVector(void)&#xA0;:&#xA0;length(0)&#xA0;,&#xA0;data(0)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;3<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constructor&#xA0;with&#xA0;a&#xA0;specified&#xA0;size<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;MyVector(size_t&#xA0;n)&#xA0;:&#xA0;length(n)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;data&#xA0;=&#xA0;new&#xA0;Scalar[length];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;4<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;MyVector(const&#xA0;MyVector&#xA0;&amp;x)&#xA0;:&#xA0;length(x.length)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;data&#xA0;=&#xA0;new&#xA0;Scalar[length];&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;length;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data[i]&#xA0;=&#xA0;x.data[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;4&#xA0;<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;7<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;destructor&#xA0;(it&#xA0;is&#xA0;not&#xA0;safe&#xA0;to&#xA0;delete&#xA0;the&#xA0;pointer&#xA0;in&#xA0;cases&#xA0;4&#xA0;and&#xA0;7)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;~MyVector(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;data;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;5<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;size&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;size_t&#xA0;size(void)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;length;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;6<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;resize&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;void&#xA0;resize(size_t&#xA0;n)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;data;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;length&#xA0;=&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;length&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data&#xA0;=&#xA0;new&#xA0;Scalar[length];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;data&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;7<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;assignment&#xA0;operator<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;MyVector&#xA0;&amp;&#xA0;operator=(const&#xA0;MyVector&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;length;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data[i]&#xA0;=&#xA0;x.data[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;*this;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;8<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;non-constant&#xA0;element&#xA0;access<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyElement&lt;Scalar&gt;&#xA0;operator[](size_t&#xA0;i)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;data&#xA0;+&#xA0;i;&#xA0;}<br/>
#&#xA0;endif<br/>
#&#xA0;if&#xA0;CppADMyVectorOmit&#xA0;!=&#xA0;9<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constant&#xA0;element&#xA0;access<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;Scalar&#xA0;&amp;&#xA0;operator[](size_t&#xA0;i)&#xA0;const<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;data[i];&#xA0;}<br/>
#&#xA0;endif<br/>
};<br/>
//&#xA0;-------------------------------------------------------------------------<br/>
<br/>
/*<br/>
Compute&#xA0;r&#xA0;=&#xA0;a&#xA0;*&#xA0;v,&#xA0;where&#xA0;a&#xA0;is&#xA0;a&#xA0;scalar&#xA0;with&#xA0;same&#xA0;type&#xA0;as&#xA0;the&#xA0;elements&#xA0;of&#xA0;<br/>
the&#xA0;Simple&#xA0;Vector&#xA0;v.&#xA0;This&#xA0;routine&#xA0;uses&#xA0;the&#xA0;CheckSimpleVector&#xA0;function&#xA0;to&#xA0;ensure&#xA0;that&#xA0;<br/>
the&#xA0;types&#xA0;agree.<br/>
*/&#xA0;<br/>
namespace&#xA0;{&#xA0;//&#xA0;Empty&#xA0;namespace<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;template&#xA0;&lt;class&#xA0;Scalar,&#xA0;class&#xA0;Vector&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;Sscal(const&#xA0;Scalar&#xA0;&amp;a,&#xA0;const&#xA0;Vector&#xA0;&amp;v)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;invoke&#xA0;CheckSimpleVector&#xA0;function&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckSimpleVector&lt;Scalar,&#xA0;Vector&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;v.size();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;r(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;r[i]&#xA0;=&#xA0;a&#xA0;*&#xA0;v[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;r;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
}<br/>
<br/>
bool&#xA0;CheckSimpleVector(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::vector;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;--------------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;If&#xA0;you&#xA0;change&#xA0;double&#xA0;to&#xA0;float&#xA0;in&#xA0;the&#xA0;next&#xA0;statement,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;CheckSimpleVector&#xA0;will&#xA0;generate&#xA0;an&#xA0;error&#xA0;message&#xA0;at&#xA0;compile&#xA0;time.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;a&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;--------------------------------------------------------<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyVector&lt;double&gt;&#xA0;v(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[0]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[1]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MyVector&lt;double&gt;&#xA0;r&#xA0;=&#xA0;Sscal(a,&#xA0;v);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;(r[0]&#xA0;==&#xA0;3.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;(r[1]&#xA0;==&#xA0;6.);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/check_simple_vector.cpp

</body>
</html>
