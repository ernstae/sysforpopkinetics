<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Second Partials Reverse Driver: Example and Test</title>
<meta name="description" id="description" content="Second Partials Reverse Driver: Example and Test"/>
<meta name="keywords" id="keywords" content=" second partial example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_revtwo.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Drivers</option>
<option>RevTwo</option>
<option>RevTwo.cpp</option>
</select>
</td>
<td><a href="revtwo.xml" target="_top">Prev</a>
</td><td><a href="funcheck.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Drivers-&gt;</option>
<option>Jacobian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>Hessian</option>
<option>ForTwo</option>
<option>RevTwo</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>RevTwo-&gt;</option>
<option>RevTwo.cpp</option>
</select>
</td>
<td>RevTwo.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Second Partials Reverse Driver: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
namespace&#xA0;{&#xA0;//&#xA0;-----------------------------------------------------<br/>
//&#xA0;define&#xA0;the&#xA0;template&#xA0;function&#xA0;in&#xA0;empty&#xA0;namespace<br/>
//&#xA0;bool&#xA0;RevTwoCases&lt;VectorBase,&#xA0;VectorSize_t&gt;(void)<br/>
template&#xA0;&lt;class&#xA0;VectorBase,&#xA0;class&#xA0;VectorSize_t&gt;&#xA0;<br/>
bool&#xA0;RevTwoCases()<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::NearEqual;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::exp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::sin;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::cos;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;domain&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;&#xA0;X(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;2.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables&#xA0;and&#xA0;starting&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;calculation&#xA0;between&#xA0;the&#xA0;domain&#xA0;and&#xA0;range&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;Square&#xA0;=&#xA0;X[0]&#xA0;*&#xA0;X[0];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;range&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;3;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;&#xA0;Y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;Square&#xA0;*&#xA0;exp(&#xA0;X[1]&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[1]&#xA0;=&#xA0;Square&#xA0;*&#xA0;sin(&#xA0;X[1]&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[2]&#xA0;=&#xA0;Square&#xA0;*&#xA0;cos(&#xA0;X[1]&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;and&#xA0;stop&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;double&gt;&#xA0;f(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;new&#xA0;value&#xA0;for&#xA0;the&#xA0;independent&#xA0;variable&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorBase&#xA0;x(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;set&#xA0;i&#xA0;and&#xA0;j&#xA0;to&#xA0;compute&#xA0;specific&#xA0;second&#xA0;partials&#xA0;of&#xA0;y<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorSize_t&#xA0;i(p);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorSize_t&#xA0;j(p);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;i[0]&#xA0;=&#xA0;0;&#xA0;j[0]&#xA0;=&#xA0;0;&#xA0;//&#xA0;for&#xA0;partials&#xA0;y[0]&#xA0;w.r.t&#xA0;x[0]&#xA0;and&#xA0;x[k]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;i[1]&#xA0;=&#xA0;1;&#xA0;j[1]&#xA0;=&#xA0;1;&#xA0;//&#xA0;for&#xA0;partials&#xA0;y[1]&#xA0;w.r.t&#xA0;x[1]&#xA0;and&#xA0;x[k]<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;the&#xA0;second&#xA0;partials<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorBase&#xA0;ddw(n&#xA0;*&#xA0;p);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ddw&#xA0;=&#xA0;f.RevTwo(x,&#xA0;i,&#xA0;j);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;partials&#xA0;of&#xA0;y[0]&#xA0;w.r.t&#xA0;x[0]&#xA0;is&#xA0;2&#xA0;*&#xA0;x[0]&#xA0;*&#xA0;exp(x[1])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;partials&#xA0;of&#xA0;y[0]&#xA0;w.r.t&#xA0;x[0]&#xA0;and&#xA0;x[k]&#xA0;for&#xA0;k&#xA0;=&#xA0;0,&#xA0;1&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;2.*exp(x[1]),&#xA0;ddw[0*p+0],&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;2.*x[0]*exp(x[1]),&#xA0;ddw[1*p+0],&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;partials&#xA0;of&#xA0;y[1]&#xA0;w.r.t&#xA0;x[1]&#xA0;is&#xA0;x[0]&#xA0;*&#xA0;x[0]&#xA0;*&#xA0;cos(x[1])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;partials&#xA0;of&#xA0;F_1&#xA0;w.r.t&#xA0;x[1]&#xA0;and&#xA0;x[k]&#xA0;for&#xA0;k&#xA0;=&#xA0;0,&#xA0;1&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;&#xA0;&#xA0;&#xA0;2.*x[0]*cos(x[1]),&#xA0;ddw[0*p+1],&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;&#xA0;NearEqual(&#xA0;-x[0]*x[0]*sin(x[1]),&#xA0;ddw[1*p+1],&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
}&#xA0;//&#xA0;End&#xA0;empty&#xA0;namespace&#xA0;<br/>
#&#xA0;include&#xA0;&lt;vector&gt;<br/>
#&#xA0;include&#xA0;&lt;valarray&gt;<br/>
bool&#xA0;RevTwo(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Run&#xA0;with&#xA0;VectorBase&#xA0;equal&#xA0;to&#xA0;three&#xA0;different&#xA0;cases<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;all&#xA0;of&#xA0;which&#xA0;are&#xA0;Simple&#xA0;Vectors&#xA0;with&#xA0;elements&#xA0;of&#xA0;type&#xA0;double.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;RevTwoCases&lt;&#xA0;CppAD::vector&#xA0;&lt;double&gt;,&#xA0;std::vector&lt;size_t&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;RevTwoCases&lt;&#xA0;std::vector&#xA0;&#xA0;&#xA0;&lt;double&gt;,&#xA0;std::vector&lt;size_t&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;RevTwoCases&lt;&#xA0;std::valarray&#xA0;&lt;double&gt;,&#xA0;std::vector&lt;size_t&gt;&#xA0;&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Run&#xA0;with&#xA0;VectorSize_t&#xA0;equal&#xA0;to&#xA0;two&#xA0;other&#xA0;cases<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;which&#xA0;are&#xA0;Simple&#xA0;Vectors&#xA0;with&#xA0;elements&#xA0;of&#xA0;type&#xA0;size_t.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;RevTwoCases&lt;&#xA0;std::vector&#xA0;&lt;double&gt;,&#xA0;CppAD::vector&lt;size_t&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;RevTwoCases&lt;&#xA0;std::vector&#xA0;&lt;double&gt;,&#xA0;std::valarray&lt;size_t&gt;&#xA0;&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: example/rev_two.cpp

</body>
</html>
