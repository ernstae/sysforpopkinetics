<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Adolc Speed: Gradient of Determinant Using Expansion by Minors</title>
<meta name="description" id="description" content="Adolc Speed: Gradient of Determinant Using Expansion by Minors"/>
<meta name="keywords" id="keywords" content=" adolc speed minor compute_det_minor "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_adolc_det_minor.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>speed</option>
<option>speed_adolc</option>
<option>adolc_det_minor.cpp</option>
</select>
</td>
<td><a href="speed_adolc.xml" target="_top">Prev</a>
</td><td><a href="adolc_det_lu.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>speed</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>whats_new</option>
<option>include_deprecated</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_adolc-&gt;</option>
<option>adolc_det_minor.cpp</option>
<option>adolc_det_lu.cpp</option>
<option>adolc_poly.cpp</option>
</select>
</td>
<td>adolc_det_minor.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Operation Sequence</option>
<option>compute_det_minor</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Adolc Speed: Gradient of Determinant Using Expansion by Minors</big></big></b></center>
<br/>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br/>
Note that the expansion by minors 
<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>

does not depend on the matrix being factored.
Hence we use the same tape recording for all the matrices.

<br/>
<br/>
<b><big><a name="compute_det_minor" id="compute_det_minor">compute_det_minor</a></big></b>

<br/>
Routine that computes the gradient of determinant using Adolc:
<code><font color="blue">
<span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/vector.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/speed/det_by_minor.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/speed/uniform_01.hpp&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;adolc/adouble.h&gt;<br/>
#&#xA0;include&#xA0;&lt;adolc/interfaces.h&gt;<br/>
<br/>
void&#xA0;compute_det_minor(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;repeat&#xA0;&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;matrix&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;gradient&#xA0;)<br/>
{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-----------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;setup<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;tag&#xA0;&#xA0;=&#xA0;0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tape&#xA0;identifier<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;keep&#xA0;=&#xA0;1;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;keep&#xA0;forward&#xA0;mode&#xA0;results&#xA0;in&#xA0;buffer<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;m&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;of&#xA0;dependent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;n&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;size*size;&#xA0;//&#xA0;number&#xA0;of&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;f;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;function&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;j;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;temporary&#xA0;index<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;object&#xA0;for&#xA0;computing&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;adouble&#xA0;&#xA0;&#xA0;&#xA0;ADScalar;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;ADScalar*&#xA0;&#xA0;ADVector;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::det_by_minor&lt;ADScalar&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;AD&#xA0;value&#xA0;of&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADScalar&#xA0;&#xA0;&#xA0;detA;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;AD&#xA0;version&#xA0;of&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADVector&#xA0;&#xA0;&#xA0;A&#xA0;=&#xA0;new&#xA0;ADScalar[n];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vectors&#xA0;of&#xA0;reverse&#xA0;mode&#xA0;weights&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*u&#xA0;=&#xA0;new&#xA0;double[m];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u[0]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vector&#xA0;with&#xA0;matrix&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*mat&#xA0;=&#xA0;new&#xA0;double[n];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vector&#xA0;to&#xA0;receive&#xA0;gradient&#xA0;result<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*grad&#xA0;=&#xA0;new&#xA0;double[n];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;choose&#xA0;a&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::uniform_01(n,&#xA0;mat);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;trace_on(tag,&#xA0;keep);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[j]&#xA0;&lt;&lt;=&#xA0;mat[j];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;AD&#xA0;computation&#xA0;of&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;detA&#xA0;=&#xA0;Det(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;function&#xA0;object&#xA0;f&#xA0;:&#xA0;A&#xA0;-&gt;&#xA0;detA<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;detA&#xA0;&gt;&gt;=&#xA0;f;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;trace_off();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;------------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;get&#xA0;the&#xA0;next&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::uniform_01(n,&#xA0;mat);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;determinant&#xA0;at&#xA0;the&#xA0;new&#xA0;matrix&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;zos_forward(tag,&#xA0;m,&#xA0;n,&#xA0;keep,&#xA0;mat,&#xA0;&amp;f);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;and&#xA0;return&#xA0;gradient&#xA0;using&#xA0;reverse&#xA0;mode<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fos_reverse(tag,&#xA0;m,&#xA0;n,&#xA0;u,&#xA0;grad);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;------------------------------------------------------<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;matrix&#xA0;and&#xA0;gradient<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;matrix[j]&#xA0;=&#xA0;mat[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gradient[j]&#xA0;=&#xA0;grad[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tear&#xA0;down<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;grad;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;mat;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;A;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;<br/>
}<br/>
</span>
</font></code>

<hr/>Input File: speed/adolc/det_minor.cpp

</body>
</html>
