<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Boolean Functions: Example and Test</title>
<meta name="description" id="description" content="AD Boolean Functions: Example and Test"/>
<meta name="keywords" id="keywords" content=" example Ad bool test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_boolfun.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>BoolValued</option>
<option>BoolFun</option>
<option>BoolFun.cpp</option>
</select>
</td>
<td><a href="boolfun.xml" target="_top">Prev</a>
</td><td><a href="parvar.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>BoolValued-&gt;</option>
<option>Compare</option>
<option>NearEqualExt</option>
<option>BoolFun</option>
<option>ParVar</option>
<option>EqualOpSeq</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>BoolFun-&gt;</option>
<option>BoolFun.cpp</option>
</select>
</td>
<td>BoolFun.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Boolean Functions: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;complex&gt;<br/>
<br/>
<br/>
//&#xA0;define&#xA0;abbreviation&#xA0;for&#xA0;double&#xA0;precision&#xA0;complex&#xA0;<br/>
typedef&#xA0;std::complex&lt;double&gt;&#xA0;Complex;<br/>
<br/>
namespace&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;unary&#xA0;bool&#xA0;function&#xA0;with&#xA0;Complex&#xA0;argument<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;static&#xA0;bool&#xA0;IsReal(const&#xA0;Complex&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x.imag()&#xA0;==&#xA0;0.;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;binary&#xA0;bool&#xA0;function&#xA0;with&#xA0;Complex&#xA0;arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;static&#xA0;bool&#xA0;AbsGeq(const&#xA0;Complex&#xA0;&amp;x,&#xA0;const&#xA0;Complex&#xA0;&amp;y)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;axsq&#xA0;=&#xA0;x.real()&#xA0;*&#xA0;x.real()&#xA0;+&#xA0;x.imag()&#xA0;*&#xA0;x.imag();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;aysq&#xA0;=&#xA0;y.real()&#xA0;*&#xA0;y.real()&#xA0;+&#xA0;y.imag()&#xA0;*&#xA0;y.imag();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;axsq&#xA0;&gt;=&#xA0;aysq;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Create&#xA0;version&#xA0;of&#xA0;IsReal&#xA0;with&#xA0;AD&lt;Complex&gt;&#xA0;argument<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;inside&#xA0;of&#xA0;namespace&#xA0;and&#xA0;outside&#xA0;of&#xA0;any&#xA0;other&#xA0;function.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_BOOL_UNARY(Complex,&#xA0;IsReal)<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Create&#xA0;version&#xA0;of&#xA0;AbsGeq&#xA0;with&#xA0;AD&lt;Complex&gt;&#xA0;arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;inside&#xA0;of&#xA0;namespace&#xA0;and&#xA0;outside&#xA0;of&#xA0;any&#xA0;other&#xA0;function.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_BOOL_BINARY(Complex,&#xA0;AbsGeq)<br/>
<br/>
}<br/>
bool&#xA0;BoolFun(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::AD&lt;Complex&gt;&#xA0;x&#xA0;=&#xA0;Complex(1.,&#xA0;&#xA0;0.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::AD&lt;Complex&gt;&#xA0;y&#xA0;=&#xA0;Complex(1.,&#xA0;&#xA0;1.);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;IsReal(x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;!&#xA0;AbsGeq(x,&#xA0;y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/bool_fun.cpp

</body>
</html>
