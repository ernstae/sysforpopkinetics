<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Interfacing to C: Example and Test</title>
<meta name="description" id="description" content="Interfacing to C: Example and Test"/>
<meta name="keywords" id="keywords" content=" C interface to difference central "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_interface2c.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>Interface2C.cpp</option>
</select>
</td>
<td><a href="general.xml" target="_top">Prev</a>
</td><td><a href="jacminordet.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>test_vector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>Interface2C.cpp</option>
<option>JacMinorDet.cpp</option>
<option>JacLuDet.cpp</option>
<option>HesMinorDet.cpp</option>
<option>HesLuDet.cpp</option>
<option>OdeStiff.cpp</option>
<option>ode_taylor.cpp</option>
<option>ode_taylor_adolc.cpp</option>
<option>StackMachine.cpp</option>
<option>mul_level</option>
</select>
</td>
<td>Interface2C.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Interfacing to C: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;&#xA0;&#xA0;//&#xA0;CppAD&#xA0;utilities<br/>
#&#xA0;include&#xA0;&lt;cassert&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;assert&#xA0;macro<br/>
<br/>
namespace&#xA0;{&#xA0;//&#xA0;Begin&#xA0;empty&#xA0;namespace<br/>
/*<br/>
Compute&#xA0;the&#xA0;value&#xA0;of&#xA0;a&#xA0;sum&#xA0;of&#xA0;Gaussians&#xA0;defined&#xA0;by&#xA0;a&#xA0;and&#xA0;evaluated&#xA0;at&#xA0;x<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;=&#xA0;sum_{i=1}^n&#xA0;a[3*i]&#xA0;exp(&#xA0;(x&#xA0;-&#xA0;a[3*i+1])^2&#xA0;/&#xA0;a[3*i+2])^2&#xA0;)<br/>
where&#xA0;the&#xA0;floating&#xA0;point&#xA0;type&#xA0;is&#xA0;a&#xA0;template&#xA0;parameter<br/>
*/<br/>
template&#xA0;&lt;class&#xA0;Float&gt;<br/>
Float&#xA0;sumGauss(const&#xA0;Float&#xA0;&amp;x,&#xA0;const&#xA0;CppAD::vector&lt;Float&gt;&#xA0;&amp;a)&#xA0;&#xA0;&#xA0;<br/>
{&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;of&#xA0;components&#xA0;in&#xA0;a<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;na&#xA0;=&#xA0;a.size();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;of&#xA0;Gaussians<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;na&#xA0;/&#xA0;3;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;the&#xA0;restricitons&#xA0;on&#xA0;na&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;na&#xA0;==&#xA0;n&#xA0;*&#xA0;3&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;temporaries&#xA0;used&#xA0;inside&#xA0;of&#xA0;loop<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Float&#xA0;ex,&#xA0;arg;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initialize&#xA0;sum<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Float&#xA0;y&#xA0;=&#xA0;0.;&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;loop&#xA0;with&#xA0;respect&#xA0;to&#xA0;Gaussians<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;arg&#xA0;=&#xA0;&#xA0;&#xA0;(x&#xA0;-&#xA0;a[3*i+1])&#xA0;/&#xA0;a[3*i+2];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ex&#xA0;&#xA0;=&#xA0;&#xA0;&#xA0;exp(-arg&#xA0;*&#xA0;arg);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;&#xA0;+=&#xA0;&#xA0;&#xA0;a[3*i]&#xA0;*&#xA0;ex;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;y;<br/>
}<br/>
/*<br/>
Create&#xA0;a&#xA0;C&#xA0;function&#xA0;interface&#xA0;that&#xA0;computes&#xA0;both<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;=&#xA0;sum_{i=1}^n&#xA0;a[3*i]&#xA0;exp(&#xA0;(x&#xA0;-&#xA0;a[3*i+1])^2&#xA0;/&#xA0;a[3*i+2])^2&#xA0;)<br/>
and&#xA0;its&#xA0;derivative&#xA0;with&#xA0;respect&#xA0;to&#xA0;the&#xA0;parameter&#xA0;vector&#xA0;a.<br/>
*/<br/>
extern&#xA0;&quot;C&quot;<br/>
void&#xA0;sumGauss(float&#xA0;x,&#xA0;float&#xA0;a[],&#xA0;float&#xA0;*y,&#xA0;float&#xA0;dyda[],&#xA0;size_t&#xA0;na)&#xA0;&#xA0;&#xA0;<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Note&#xA0;that&#xA0;any&#xA0;simple&#xA0;vector&#xA0;could&#xA0;replace&#xA0;CppAD::vector;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;for&#xA0;example,&#xA0;std::vector,&#xA0;std::valarray<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;the&#xA0;restrictions&#xA0;on&#xA0;na<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;na&#xA0;%&#xA0;3&#xA0;==&#xA0;0&#xA0;);&#xA0;&#xA0;//&#xA0;mod(na,&#xA0;3)&#xA0;=&#xA0;0<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;the&#xA0;shorthand&#xA0;ADfloat&#xA0;for&#xA0;the&#xA0;type&#xA0;CppAD::AD&lt;float&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;CppAD::AD&lt;float&gt;&#xA0;ADfloat;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vector&#xA0;for&#xA0;indpendent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;ADfloat&gt;&#xA0;A(na);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;used&#xA0;with&#xA0;template&#xA0;function&#xA0;above<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;float&gt;&#xA0;&#xA0;&#xA0;acopy(na);&#xA0;&#xA0;//&#xA0;used&#xA0;for&#xA0;derivative&#xA0;calculations<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vector&#xA0;for&#xA0;the&#xA0;dependent&#xA0;variables&#xA0;(there&#xA0;is&#xA0;only&#xA0;one)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;ADfloat&gt;&#xA0;Y(1);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;the&#xA0;independent&#xA0;variables&#xA0;from&#xA0;C&#xA0;vector&#xA0;to&#xA0;CppAD&#xA0;vectors<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;na;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;=&#xA0;acopy[i]&#xA0;=&#xA0;a[i];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;that&#xA0;A&#xA0;is&#xA0;the&#xA0;independent&#xA0;variable&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;value&#xA0;of&#xA0;x&#xA0;as&#xA0;an&#xA0;ADfloat&#xA0;object<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADfloat&#xA0;X&#xA0;=&#xA0;x;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Evaluate&#xA0;template&#xA0;version&#xA0;of&#xA0;sumGauss&#xA0;with&#xA0;ADfloat&#xA0;as&#xA0;the&#xA0;template&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;parameter.&#xA0;Set&#xA0;the&#xA0;independent&#xA0;variable&#xA0;to&#xA0;the&#xA0;resulting&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;sumGauss(X,&#xA0;A);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;the&#xA0;AD&#xA0;function&#xA0;object&#xA0;F&#xA0;:&#xA0;A&#xA0;-&gt;&#xA0;Y<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;float&gt;&#xA0;F(A,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;Value&#xA0;to&#xA0;convert&#xA0;Y[0]&#xA0;to&#xA0;float&#xA0;and&#xA0;return&#xA0;y&#xA0;=&#xA0;F(a)&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*y&#xA0;=&#xA0;CppAD::Value(Y[0]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;derivative&#xA0;F'(a)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;float&gt;&#xA0;J(na);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;J&#xA0;=&#xA0;F.Jacobian(acopy);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;the&#xA0;value&#xA0;of&#xA0;dyda&#xA0;=&#xA0;F'(a)&#xA0;as&#xA0;a&#xA0;C&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;na;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dyda[i]&#xA0;=&#xA0;J[i];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;<br/>
}<br/>
/*<br/>
Link&#xA0;CppAD::NearEqual&#xA0;so&#xA0;do&#xA0;not&#xA0;have&#xA0;to&#xA0;use&#xA0;namespace&#xA0;notation&#xA0;in&#xA0;Interface2C<br/>
*/<br/>
bool&#xA0;NearEqual(float&#xA0;x,&#xA0;float&#xA0;y,&#xA0;float&#xA0;r,&#xA0;float&#xA0;a)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;CppAD::NearEqual(x,&#xA0;y,&#xA0;r,&#xA0;a);<br/>
}<br/>
<br/>
}&#xA0;//&#xA0;End&#xA0;empty&#xA0;namespace<br/>
<br/>
bool&#xA0;Interface2C(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;This&#xA0;routine&#xA0;is&#xA0;intentionally&#xA0;coded&#xA0;as&#xA0;if&#xA0;it&#xA0;were&#xA0;a&#xA0;C&#xA0;routine<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;except&#xA0;for&#xA0;the&#xA0;fact&#xA0;that&#xA0;it&#xA0;uses&#xA0;the&#xA0;predefined&#xA0;type&#xA0;bool.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;float&#xA0;x,&#xA0;a[6],&#xA0;y,&#xA0;dyda[6],&#xA0;tmp[6];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;na,&#xA0;n,&#xA0;i;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;of&#xA0;parameters&#xA0;(3&#xA0;for&#xA0;each&#xA0;Gaussian)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;na&#xA0;=&#xA0;6;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;of&#xA0;Gaussians<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;&#xA0;=&#xA0;na&#xA0;/&#xA0;3;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;value&#xA0;of&#xA0;x<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;value&#xA0;of&#xA0;the&#xA0;parameter&#xA0;vector&#xA0;a<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;na;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i]&#xA0;=&#xA0;(float)&#xA0;(i+1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaulate&#xA0;function&#xA0;and&#xA0;derivative<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sumGauss(x,&#xA0;a,&#xA0;&amp;y,&#xA0;dyda,&#xA0;na);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compare&#xA0;dyda&#xA0;to&#xA0;central&#xA0;difference&#xA0;approximation&#xA0;for&#xA0;deriative<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;na;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;local&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;float&#xA0;small,&#xA0;ai,&#xA0;yp,&#xA0;ym,&#xA0;dy_da;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;We&#xA0;assume&#xA0;that&#xA0;the&#xA0;type&#xA0;float&#xA0;has&#xA0;at&#xA0;least&#xA0;7&#xA0;digits&#xA0;of&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;precision,&#xA0;so&#xA0;we&#xA0;choose&#xA0;small&#xA0;to&#xA0;be&#xA0;about&#xA0;pow(10.,&#xA0;-7./2.).<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;small&#xA0;&#xA0;=&#xA0;(float)&#xA0;3e-4;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;value&#xA0;of&#xA0;this&#xA0;component&#xA0;of&#xA0;a<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ai&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;a[i];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;F(&#xA0;a&#xA0;+&#xA0;small&#xA0;*&#xA0;ei&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i]&#xA0;&#xA0;=&#xA0;ai&#xA0;+&#xA0;small;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sumGauss(x,&#xA0;a,&#xA0;&amp;yp,&#xA0;tmp,&#xA0;na);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;F(&#xA0;a&#xA0;-&#xA0;small&#xA0;*&#xA0;ei&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i]&#xA0;&#xA0;=&#xA0;ai&#xA0;-&#xA0;small;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sumGauss(x,&#xA0;a,&#xA0;&amp;ym,&#xA0;tmp,&#xA0;na);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;central&#xA0;difference&#xA0;approximates&#xA0;for&#xA0;partial<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dy_da&#xA0;=&#xA0;(yp&#xA0;-&#xA0;ym)&#xA0;/&#xA0;(2&#xA0;*&#xA0;small);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;restore&#xA0;this&#xA0;component&#xA0;of&#xA0;a<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i]&#xA0;&#xA0;=&#xA0;ai;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dyda[i],&#xA0;dy_da,&#xA0;small,&#xA0;small);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: example/interface_2c.cpp

</body>
</html>
