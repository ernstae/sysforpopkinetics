<html><head>
<title>Source: LuSolve</title>
<meta name="description" id="description" content="Source: LuSolve">
<meta name="keywords" id="keywords" content=" Lusolve source ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_lu_solve.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuDetAndSolve</option>
<option>LuSolve</option>
<option>lu_solve.hpp</option>
</select>
</td>
<td><a href="lusolve.cpp.htm" target="_top">Prev</a>
</td><td><a href="lufactor.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>LuDetAndSolve-&gt;</option>
<option>LuSolve</option>
<option>LuFactor</option>
<option>LuInvert</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuSolve-&gt;</option>
<option>LuSolve.cpp</option>
<option>lu_solve.hpp</option>
</select>
</td>
<td>lu_solve.hpp</td>
<td>Headings</td>
</tr></table><br>
<center><b><big><big>Source: LuSolve</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_LU_SOLVE_INCLUDED 
<code><span style='white-space: nowrap'><br>
</span></code># define CPPAD_LU_SOLVE_INCLUDED

<span style='white-space: nowrap'><br>
#&nbsp;include&nbsp;&lt;complex&gt;<br>
#&nbsp;include&nbsp;&lt;vector&gt;<br>
<br>
//&nbsp;link&nbsp;exp&nbsp;for&nbsp;float&nbsp;and&nbsp;double&nbsp;cases<br>
#&nbsp;include&nbsp;&lt;cppad/std_math_unary.hpp&gt;<br>
<br>
#&nbsp;include&nbsp;&lt;cppad/local/cppad_assert.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/check_simple_vector.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/check_numeric_type.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/lu_factor.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/lu_invert.hpp&gt;<br>
<br>
namespace&nbsp;CppAD&nbsp;{&nbsp;//&nbsp;BEGIN&nbsp;CppAD&nbsp;namespace<br>
<br>
//&nbsp;LeqZero<br>
template&nbsp;&lt;typename&nbsp;Float&gt;<br>
inline&nbsp;bool&nbsp;LeqZero(const&nbsp;Float&nbsp;&amp;x)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;&lt;=&nbsp;Float(0);&nbsp;}<br>
inline&nbsp;bool&nbsp;LeqZero(&nbsp;const&nbsp;std::complex&lt;double&gt;&nbsp;&amp;x&nbsp;)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;==&nbsp;std::complex&lt;double&gt;(0);&nbsp;}<br>
inline&nbsp;bool&nbsp;LeqZero(&nbsp;const&nbsp;std::complex&lt;float&gt;&nbsp;&amp;x&nbsp;)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;==&nbsp;std::complex&lt;float&gt;(0);&nbsp;}<br>
<br>
//&nbsp;LuSolve<br>
template&nbsp;&lt;typename&nbsp;Float,&nbsp;typename&nbsp;FloatVector&gt;<br>
int&nbsp;LuSolve(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;FloatVector&nbsp;&amp;A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;FloatVector&nbsp;&amp;B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FloatVector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;logdet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;numeric&nbsp;type&nbsp;specifications<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckNumericType&lt;Float&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;simple&nbsp;vector&nbsp;class&nbsp;specifications<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckSimpleVector&lt;Float,&nbsp;FloatVector&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;index&nbsp;of&nbsp;pivot&nbsp;element&nbsp;(diagonal&nbsp;of&nbsp;L)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signdet;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;sign&nbsp;of&nbsp;the&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pivot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pivot&nbsp;element<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;the&nbsp;value&nbsp;zero<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;Float&nbsp;zero(0);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pivot&nbsp;row&nbsp;and&nbsp;column&nbsp;order&nbsp;in&nbsp;the&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;size_t&gt;&nbsp;ip(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::vector&lt;size_t&gt;&nbsp;jp(n);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;-------------------------------------------------------<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A.size()&nbsp;==&nbsp;n&nbsp;*&nbsp;n,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuSolve:&nbsp;A&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;n&nbsp;*&nbsp;n&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.size()&nbsp;==&nbsp;n&nbsp;*&nbsp;m,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuSolve:&nbsp;B&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;n&nbsp;*&nbsp;m&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X.size()&nbsp;==&nbsp;n&nbsp;*&nbsp;m,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuSolve:&nbsp;X&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;n&nbsp;*&nbsp;m&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;-------------------------------------------------------<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;copy&nbsp;A&nbsp;so&nbsp;that&nbsp;it&nbsp;does&nbsp;not&nbsp;change<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FloatVector&nbsp;Lu(A);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;copy&nbsp;B&nbsp;so&nbsp;that&nbsp;it&nbsp;does&nbsp;not&nbsp;change<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;=&nbsp;B;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Lu&nbsp;factor&nbsp;the&nbsp;matrix&nbsp;A<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signdet&nbsp;=&nbsp;LuFactor(ip,&nbsp;jp,&nbsp;Lu);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;the&nbsp;log&nbsp;of&nbsp;the&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logdet&nbsp;&nbsp;=&nbsp;Float(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(p&nbsp;=&nbsp;0;&nbsp;p&nbsp;&lt;&nbsp;n;&nbsp;p++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pivot&nbsp;using&nbsp;the&nbsp;max&nbsp;absolute&nbsp;element<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pivot&nbsp;&nbsp;&nbsp;=&nbsp;Lu[&nbsp;ip[p]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[p]&nbsp;];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;for&nbsp;determinant&nbsp;equal&nbsp;to&nbsp;zero<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;pivot&nbsp;==&nbsp;zero&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;abort&nbsp;the&nbsp;mission<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logdet&nbsp;=&nbsp;Float(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;update&nbsp;the&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;LeqZero&nbsp;(&nbsp;pivot&nbsp;)&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;logdet&nbsp;+=&nbsp;log(&nbsp;-&nbsp;pivot&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signdet&nbsp;=&nbsp;-&nbsp;signdet;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;logdet&nbsp;+=&nbsp;log(&nbsp;pivot&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;solve&nbsp;the&nbsp;linear&nbsp;equations<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LuInvert(ip,&nbsp;jp,&nbsp;Lu,&nbsp;X);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;return&nbsp;the&nbsp;sign&nbsp;factor&nbsp;for&nbsp;the&nbsp;determinant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;signdet;<br>
}<br>
}&nbsp;//&nbsp;END&nbsp;CppAD&nbsp;namespace&nbsp;<br>
</span># endif
</font></code>


<hr>Input File: omh/lu_solve_hpp.omh

</body>
</html>
