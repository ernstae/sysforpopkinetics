<html><head>
<title>Subset of Second Order Partials: Example and Test</title>
<meta name="description" id="description" content="Subset of Second Order Partials: Example and Test">
<meta name="keywords" id="keywords" content=" second partial example test ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_fortwo.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Drivers</option>
<option>ForTwo</option>
<option>ForTwo.cpp</option>
</select>
</td>
<td><a href="fortwo.htm" target="_top">Prev</a>
</td><td><a href="revtwo.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Drivers-&gt;</option>
<option>Jacobian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>Hessian</option>
<option>ForTwo</option>
<option>RevTwo</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ForTwo-&gt;</option>
<option>ForTwo.cpp</option>
</select>
</td>
<td>ForTwo.cpp</td>
<td>Headings</td>
</tr></table><br>



<center><b><big><big>Subset of Second Order Partials: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;<br>
namespace&nbsp;{&nbsp;//&nbsp;-----------------------------------------------------<br>
//&nbsp;define&nbsp;the&nbsp;template&nbsp;function&nbsp;in&nbsp;empty&nbsp;namespace<br>
//&nbsp;bool&nbsp;ForTwoCases&lt;VectorBase,&nbsp;VectorSize_t&gt;(void)<br>
template&nbsp;&lt;class&nbsp;VectorBase,&nbsp;class&nbsp;VectorSize_t&gt;&nbsp;<br>
bool&nbsp;ForTwoCases()<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::AD;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::NearEqual;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::exp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::sin;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::cos;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;domain&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;&nbsp;X(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[0]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[1]&nbsp;=&nbsp;2.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;independent&nbsp;variables&nbsp;and&nbsp;starting&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::Independent(X);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;a&nbsp;calculation&nbsp;between&nbsp;the&nbsp;domain&nbsp;and&nbsp;range&nbsp;values<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;Square&nbsp;=&nbsp;X[0]&nbsp;*&nbsp;X[0];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;range&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;m&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;&nbsp;Y(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;Square&nbsp;*&nbsp;exp(&nbsp;X[1]&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[1]&nbsp;=&nbsp;Square&nbsp;*&nbsp;sin(&nbsp;X[1]&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[2]&nbsp;=&nbsp;Square&nbsp;*&nbsp;cos(&nbsp;X[1]&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;f:&nbsp;X&nbsp;-&gt;&nbsp;Y&nbsp;and&nbsp;stop&nbsp;tape&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;double&gt;&nbsp;f(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;new&nbsp;value&nbsp;for&nbsp;the&nbsp;independent&nbsp;variable&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorBase&nbsp;x(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;=&nbsp;2.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[1]&nbsp;=&nbsp;1.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;set&nbsp;j&nbsp;and&nbsp;k&nbsp;to&nbsp;compute&nbsp;specific&nbsp;second&nbsp;partials&nbsp;of&nbsp;y&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;p&nbsp;=&nbsp;2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorSize_t&nbsp;j(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorSize_t&nbsp;k(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j[0]&nbsp;=&nbsp;0;&nbsp;k[0]&nbsp;=&nbsp;0;&nbsp;//&nbsp;for&nbsp;second&nbsp;partial&nbsp;w.r.t.&nbsp;x[0]&nbsp;and&nbsp;x[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j[1]&nbsp;=&nbsp;0;&nbsp;k[1]&nbsp;=&nbsp;1;&nbsp;//&nbsp;for&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;x[0]&nbsp;and&nbsp;x[1]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;the&nbsp;second&nbsp;partials<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorBase&nbsp;ddy(m&nbsp;*&nbsp;p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ddy&nbsp;=&nbsp;f.ForTwo(x,&nbsp;j,&nbsp;k);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partial&nbsp;of&nbsp;y&nbsp;w.r.t&nbsp;x[0]&nbsp;is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;exp(x[1])&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;sin(x[1])&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;cos(x[1])&nbsp;]&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;of&nbsp;y&nbsp;w.r.t&nbsp;x[0]&nbsp;and&nbsp;x[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*exp(x[1]),&nbsp;ddy[0*p+0],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*sin(x[1]),&nbsp;ddy[1*p+0],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*cos(x[1]),&nbsp;ddy[2*p+0],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;of&nbsp;F&nbsp;w.r.t&nbsp;x[0]&nbsp;and&nbsp;x[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*x[0]*exp(x[1]),&nbsp;ddy[0*p+1],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(&nbsp;2.*x[0]*cos(x[1]),&nbsp;ddy[1*p+1],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;&nbsp;NearEqual(-2.*x[0]*sin(x[1]),&nbsp;ddy[2*p+1],&nbsp;1e-10,&nbsp;1e-10&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
}&nbsp;//&nbsp;End&nbsp;empty&nbsp;namespace&nbsp;<br>
#&nbsp;include&nbsp;&lt;vector&gt;<br>
#&nbsp;include&nbsp;&lt;valarray&gt;<br>
bool&nbsp;ForTwo(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Run&nbsp;with&nbsp;VectorBase&nbsp;equal&nbsp;to&nbsp;three&nbsp;different&nbsp;cases<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;all&nbsp;of&nbsp;which&nbsp;are&nbsp;Simple&nbsp;Vectors&nbsp;with&nbsp;elements&nbsp;of&nbsp;type&nbsp;double.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;ForTwoCases&lt;&nbsp;CppAD::vector&nbsp;&lt;double&gt;,&nbsp;std::vector&lt;size_t&gt;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;ForTwoCases&lt;&nbsp;std::vector&nbsp;&nbsp;&nbsp;&lt;double&gt;,&nbsp;std::vector&lt;size_t&gt;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;ForTwoCases&lt;&nbsp;std::valarray&nbsp;&lt;double&gt;,&nbsp;std::vector&lt;size_t&gt;&nbsp;&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Run&nbsp;with&nbsp;VectorSize_t&nbsp;equal&nbsp;to&nbsp;two&nbsp;other&nbsp;cases<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;which&nbsp;are&nbsp;Simple&nbsp;Vectors&nbsp;with&nbsp;elements&nbsp;of&nbsp;type&nbsp;size_t.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;ForTwoCases&lt;&nbsp;std::vector&nbsp;&lt;double&gt;,&nbsp;CppAD::vector&lt;size_t&gt;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;ForTwoCases&lt;&nbsp;std::vector&nbsp;&lt;double&gt;,&nbsp;std::valarray&lt;size_t&gt;&nbsp;&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
</span></font></code>
<hr>Input File: example/for_two.cpp

</body>
</html>
