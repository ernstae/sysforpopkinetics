<html><head>
<title>Interfacing to C: Example and Test</title>
<meta name="description" id="description" content="Interfacing to C: Example and Test">
<meta name="keywords" id="keywords" content=" C interface to difference central ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_interface2c.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>Interface2C.cpp</option>
</select>
</td>
<td><a href="general.htm" target="_top">Prev</a>
</td><td><a href="jacminordet.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>test_vector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>Interface2C.cpp</option>
<option>JacMinorDet.cpp</option>
<option>JacLuDet.cpp</option>
<option>HesMinorDet.cpp</option>
<option>HesLuDet.cpp</option>
<option>OdeStiff.cpp</option>
<option>ode_taylor.cpp</option>
<option>ode_taylor_adolc.cpp</option>
<option>StackMachine.cpp</option>
<option>mul_level</option>
</select>
</td>
<td>Interface2C.cpp</td>
<td>Headings</td>
</tr></table><br>
<center><b><big><big>Interfacing to C: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;&nbsp;&nbsp;//&nbsp;CppAD&nbsp;utilities<br>
#&nbsp;include&nbsp;&lt;cassert&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;assert&nbsp;macro<br>
<br>
namespace&nbsp;{&nbsp;//&nbsp;Begin&nbsp;empty&nbsp;namespace<br>
/*<br>
Compute&nbsp;the&nbsp;value&nbsp;of&nbsp;a&nbsp;sum&nbsp;of&nbsp;Gaussians&nbsp;defined&nbsp;by&nbsp;a&nbsp;and&nbsp;evaluated&nbsp;at&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;sum_{i=1}^n&nbsp;a[3*i]&nbsp;exp(&nbsp;(x&nbsp;-&nbsp;a[3*i+1])^2&nbsp;/&nbsp;a[3*i+2])^2&nbsp;)<br>
where&nbsp;the&nbsp;floating&nbsp;point&nbsp;type&nbsp;is&nbsp;a&nbsp;template&nbsp;parameter<br>
*/<br>
template&nbsp;&lt;class&nbsp;Float&gt;<br>
Float&nbsp;sumGauss(const&nbsp;Float&nbsp;&amp;x,&nbsp;const&nbsp;CppAD::vector&lt;Float&gt;&nbsp;&amp;a)&nbsp;&nbsp;&nbsp;<br>
{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;number&nbsp;of&nbsp;components&nbsp;in&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;na&nbsp;=&nbsp;a.size();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;number&nbsp;of&nbsp;Gaussians<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;na&nbsp;/&nbsp;3;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;the&nbsp;restricitons&nbsp;on&nbsp;na&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(&nbsp;na&nbsp;==&nbsp;n&nbsp;*&nbsp;3&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;temporaries&nbsp;used&nbsp;inside&nbsp;of&nbsp;loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;ex,&nbsp;arg;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;initialize&nbsp;sum<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;y&nbsp;=&nbsp;0.;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;loop&nbsp;with&nbsp;respect&nbsp;to&nbsp;Gaussians<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg&nbsp;=&nbsp;&nbsp;&nbsp;(x&nbsp;-&nbsp;a[3*i+1])&nbsp;/&nbsp;a[3*i+2];&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ex&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;exp(-arg&nbsp;*&nbsp;arg);&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;+=&nbsp;&nbsp;&nbsp;a[3*i]&nbsp;*&nbsp;ex;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;y;<br>
}<br>
/*<br>
Create&nbsp;a&nbsp;C&nbsp;function&nbsp;interface&nbsp;that&nbsp;computes&nbsp;both<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;=&nbsp;sum_{i=1}^n&nbsp;a[3*i]&nbsp;exp(&nbsp;(x&nbsp;-&nbsp;a[3*i+1])^2&nbsp;/&nbsp;a[3*i+2])^2&nbsp;)<br>
and&nbsp;its&nbsp;derivative&nbsp;with&nbsp;respect&nbsp;to&nbsp;the&nbsp;parameter&nbsp;vector&nbsp;a.<br>
*/<br>
extern&nbsp;&quot;C&quot;<br>
void&nbsp;sumGauss(float&nbsp;x,&nbsp;float&nbsp;a[],&nbsp;float&nbsp;*y,&nbsp;float&nbsp;dyda[],&nbsp;size_t&nbsp;na)&nbsp;&nbsp;&nbsp;<br>
{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Note&nbsp;that&nbsp;any&nbsp;simple&nbsp;vector&nbsp;could&nbsp;replace&nbsp;CppAD::vector;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;for&nbsp;example,&nbsp;std::vector,&nbsp;std::valarray<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;the&nbsp;restrictions&nbsp;on&nbsp;na<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(&nbsp;na&nbsp;%&nbsp;3&nbsp;==&nbsp;0&nbsp;);&nbsp;&nbsp;//&nbsp;mod(na,&nbsp;3)&nbsp;=&nbsp;0<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;the&nbsp;shorthand&nbsp;ADfloat&nbsp;for&nbsp;the&nbsp;type&nbsp;CppAD::AD&lt;float&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;CppAD::AD&lt;float&gt;&nbsp;ADfloat;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;vector&nbsp;for&nbsp;indpendent&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;ADfloat&gt;&nbsp;A(na);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;used&nbsp;with&nbsp;template&nbsp;function&nbsp;above<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;float&gt;&nbsp;&nbsp;&nbsp;acopy(na);&nbsp;&nbsp;//&nbsp;used&nbsp;for&nbsp;derivative&nbsp;calculations<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;vector&nbsp;for&nbsp;the&nbsp;dependent&nbsp;variables&nbsp;(there&nbsp;is&nbsp;only&nbsp;one)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;ADfloat&gt;&nbsp;Y(1);&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;copy&nbsp;the&nbsp;independent&nbsp;variables&nbsp;from&nbsp;C&nbsp;vector&nbsp;to&nbsp;CppAD&nbsp;vectors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;na;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i]&nbsp;=&nbsp;acopy[i]&nbsp;=&nbsp;a[i];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;that&nbsp;A&nbsp;is&nbsp;the&nbsp;independent&nbsp;variable&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::Independent(A);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;value&nbsp;of&nbsp;x&nbsp;as&nbsp;an&nbsp;ADfloat&nbsp;object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADfloat&nbsp;X&nbsp;=&nbsp;x;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Evaluate&nbsp;template&nbsp;version&nbsp;of&nbsp;sumGauss&nbsp;with&nbsp;ADfloat&nbsp;as&nbsp;the&nbsp;template&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;parameter.&nbsp;Set&nbsp;the&nbsp;independent&nbsp;variable&nbsp;to&nbsp;the&nbsp;resulting&nbsp;value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;sumGauss(X,&nbsp;A);&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;the&nbsp;AD&nbsp;function&nbsp;object&nbsp;F&nbsp;:&nbsp;A&nbsp;-&gt;&nbsp;Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;float&gt;&nbsp;F(A,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;Value&nbsp;to&nbsp;convert&nbsp;Y[0]&nbsp;to&nbsp;float&nbsp;and&nbsp;return&nbsp;y&nbsp;=&nbsp;F(a)&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*y&nbsp;=&nbsp;CppAD::Value(Y[0]);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;the&nbsp;derivative&nbsp;F'(a)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;float&gt;&nbsp;J(na);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;J&nbsp;=&nbsp;F.Jacobian(acopy);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;return&nbsp;the&nbsp;value&nbsp;of&nbsp;dyda&nbsp;=&nbsp;F'(a)&nbsp;as&nbsp;a&nbsp;C&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;na;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dyda[i]&nbsp;=&nbsp;J[i];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
}<br>
/*<br>
Link&nbsp;CppAD::NearEqual&nbsp;so&nbsp;do&nbsp;not&nbsp;have&nbsp;to&nbsp;use&nbsp;namespace&nbsp;notation&nbsp;in&nbsp;Interface2C<br>
*/<br>
bool&nbsp;NearEqual(float&nbsp;x,&nbsp;float&nbsp;y,&nbsp;float&nbsp;r,&nbsp;float&nbsp;a)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;CppAD::NearEqual(x,&nbsp;y,&nbsp;r,&nbsp;a);<br>
}<br>
<br>
}&nbsp;//&nbsp;End&nbsp;empty&nbsp;namespace<br>
<br>
bool&nbsp;Interface2C(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;routine&nbsp;is&nbsp;intentionally&nbsp;coded&nbsp;as&nbsp;if&nbsp;it&nbsp;were&nbsp;a&nbsp;C&nbsp;routine<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;except&nbsp;for&nbsp;the&nbsp;fact&nbsp;that&nbsp;it&nbsp;uses&nbsp;the&nbsp;predefined&nbsp;type&nbsp;bool.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;x,&nbsp;a[6],&nbsp;y,&nbsp;dyda[6],&nbsp;tmp[6];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;na,&nbsp;n,&nbsp;i;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;number&nbsp;of&nbsp;parameters&nbsp;(3&nbsp;for&nbsp;each&nbsp;Gaussian)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;na&nbsp;=&nbsp;6;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;number&nbsp;of&nbsp;Gaussians<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;&nbsp;=&nbsp;na&nbsp;/&nbsp;3;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;value&nbsp;of&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;1.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;value&nbsp;of&nbsp;the&nbsp;parameter&nbsp;vector&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;na;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;=&nbsp;(float)&nbsp;(i+1);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaulate&nbsp;function&nbsp;and&nbsp;derivative<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumGauss(x,&nbsp;a,&nbsp;&amp;y,&nbsp;dyda,&nbsp;na);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compare&nbsp;dyda&nbsp;to&nbsp;central&nbsp;difference&nbsp;approximation&nbsp;for&nbsp;deriative<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;na;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;local&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;small,&nbsp;ai,&nbsp;yp,&nbsp;ym,&nbsp;dy_da;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;We&nbsp;assume&nbsp;that&nbsp;the&nbsp;type&nbsp;float&nbsp;has&nbsp;at&nbsp;least&nbsp;7&nbsp;digits&nbsp;of&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;precision,&nbsp;so&nbsp;we&nbsp;choose&nbsp;small&nbsp;to&nbsp;be&nbsp;about&nbsp;pow(10.,&nbsp;-7./2.).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;small&nbsp;&nbsp;=&nbsp;(float)&nbsp;3e-4;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;value&nbsp;of&nbsp;this&nbsp;component&nbsp;of&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ai&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;a[i];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;F(&nbsp;a&nbsp;+&nbsp;small&nbsp;*&nbsp;ei&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;&nbsp;=&nbsp;ai&nbsp;+&nbsp;small;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumGauss(x,&nbsp;a,&nbsp;&amp;yp,&nbsp;tmp,&nbsp;na);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;F(&nbsp;a&nbsp;-&nbsp;small&nbsp;*&nbsp;ei&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;&nbsp;=&nbsp;ai&nbsp;-&nbsp;small;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumGauss(x,&nbsp;a,&nbsp;&amp;ym,&nbsp;tmp,&nbsp;na);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;central&nbsp;difference&nbsp;approximates&nbsp;for&nbsp;partial<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy_da&nbsp;=&nbsp;(yp&nbsp;-&nbsp;ym)&nbsp;/&nbsp;(2&nbsp;*&nbsp;small);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;restore&nbsp;this&nbsp;component&nbsp;of&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]&nbsp;&nbsp;=&nbsp;ai;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dyda[i],&nbsp;dy_da,&nbsp;small,&nbsp;small);&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
</span></font></code>
<hr>Input File: example/interface_2c.cpp

</body>
</html>
