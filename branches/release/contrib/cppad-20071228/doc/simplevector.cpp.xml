<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Simple Vector Template Class: Example and Test</title>
<meta name="description" id="description" content="Simple Vector Template Class: Example and Test"/>
<meta name="keywords" id="keywords" content=" vector simple example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_simplevector.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>SimpleVector</option>
<option>SimpleVector.cpp</option>
</select>
</td>
<td><a href="simplevector.xml" target="_top">Prev</a>
</td><td><a href="checksimplevector.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>SimpleVector-&gt;</option>
<option>SimpleVector.cpp</option>
</select>
</td>
<td>SimpleVector.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Simple Vector Template Class: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;iostream&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;std::cout&#xA0;and&#xA0;std::endl<br/>
<br/>
#&#xA0;include&#xA0;&lt;vector&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;std::vector<br/>
#&#xA0;include&#xA0;&lt;valarray&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;std::valarray<br/>
#&#xA0;include&#xA0;&lt;cppad/vector.hpp&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;CppAD::vector<br/>
#&#xA0;include&#xA0;&lt;cppad/check_simple_vector.hpp&gt;&#xA0;&#xA0;//&#xA0;CppAD::CheckSimpleVector<br/>
namespace&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;template&#xA0;&lt;typename&#xA0;Vector&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;Ok(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;type&#xA0;corresponding&#xA0;to&#xA0;elements&#xA0;of&#xA0;Vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;typename&#xA0;Vector::value_type&#xA0;Scalar;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initialize&#xA0;testing&#xA0;flag<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;x;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;the&#xA0;default&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(x.size()&#xA0;==&#xA0;0);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;test&#xA0;size&#xA0;for&#xA0;an&#xA0;empty&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;y(2);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;the&#xA0;sizing&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y.size()&#xA0;==&#xA0;2);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;size&#xA0;for&#xA0;an&#xA0;vector&#xA0;with&#xA0;elements<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;non-const&#xA0;access&#xA0;to&#xA0;the&#xA0;elements&#xA0;of&#xA0;y<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;2;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y[i]&#xA0;=&#xA0;Scalar(i);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;Vector&#xA0;z(y);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;constructor<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x.resize(2);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;resize&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x&#xA0;=&#xA0;z;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vector&#xA0;assignment<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;the&#xA0;const&#xA0;access&#xA0;to&#xA0;the&#xA0;elements&#xA0;of&#xA0;x<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;and&#xA0;test&#xA0;the&#xA0;values&#xA0;of&#xA0;elements&#xA0;of&#xA0;x,&#xA0;y,&#xA0;z<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;2;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(x[i]&#xA0;==&#xA0;Scalar(i));<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[i]&#xA0;==&#xA0;Scalar(i));<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(z[i]&#xA0;==&#xA0;Scalar(i));<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
}<br/>
bool&#xA0;SimpleVector&#xA0;(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;routine&#xA0;above&#xA0;to&#xA0;check&#xA0;these&#xA0;cases<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Ok&lt;&#xA0;std::vector&lt;double&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Ok&lt;&#xA0;std::valarray&lt;float&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Ok&lt;&#xA0;CppAD::vector&lt;int&gt;&#xA0;&gt;();<br/>
#&#xA0;ifndef&#xA0;_MSC_VER<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Avoid&#xA0;Microsoft&#xA0;following&#xA0;compiler&#xA0;warning:&#xA0;&#xA0;'size_t'&#xA0;:&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;forcing&#xA0;value&#xA0;to&#xA0;bool&#xA0;'true'&#xA0;or&#xA0;'false'&#xA0;(performance&#xA0;warning)&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Ok&lt;&#xA0;std::vector&lt;bool&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Ok&lt;&#xA0;CppAD::vector&lt;bool&gt;&#xA0;&gt;();<br/>
#&#xA0;endif<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;CheckSimpleVector&#xA0;for&#xA0;more&#xA0;extensive&#xA0;testing<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckSimpleVector&lt;double,&#xA0;std::vector&lt;double&gt;&#xA0;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckSimpleVector&lt;float,&#xA0;&#xA0;std::valarray&lt;float&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckSimpleVector&lt;int,&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;int&gt;&#xA0;&#xA0;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckSimpleVector&lt;bool,&#xA0;&#xA0;&#xA0;std::vector&lt;bool&gt;&#xA0;&#xA0;&#xA0;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::CheckSimpleVector&lt;bool,&#xA0;&#xA0;&#xA0;CppAD::vector&lt;bool&gt;&#xA0;&#xA0;&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: example/simple_vector.cpp

</body>
</html>
