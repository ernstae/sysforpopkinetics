<html><head>
<title>exp_2: CppAD Forward and Reverse Sweeps</title>
<meta name="description" id="description" content="exp_2: CppAD Forward and Reverse Sweeps">
<meta name="keywords" id="keywords" content=" ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_exp_2_cppad_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Introduction</option>
<option>exp_2</option>
<option>exp_2_cppad</option>
</select>
</td>
<td><a href="exp_2_rev2.cpp.htm" target="_top">Prev</a>
</td><td><a href="exp_eps.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Introduction-&gt;</option>
<option>get_started.cpp</option>
<option>exp_2</option>
<option>exp_eps</option>
<option>exp_apx_main.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>exp_2-&gt;</option>
<option>exp_2.hpp</option>
<option>exp_2.cpp</option>
<option>exp_2_for0</option>
<option>exp_2_for1</option>
<option>exp_2_rev1</option>
<option>exp_2_for2</option>
<option>exp_2_rev2</option>
<option>exp_2_cppad</option>
</select>
</td>
<td>exp_2_cppad</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Exercises</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>exp_2: CppAD Forward and Reverse Sweeps</big></big></b></center>
.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Use CppAD forward and reverse modes to compute the
partial derivative with respect to <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
,
at the point <code>
<span style='white-space: nowrap'>&nbsp;x&nbsp;=&nbsp;.5</span></code>
,
of the function 
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exp_2(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>as defined by the <a href="exp_2.hpp.htm" target="_top"><span style='white-space: nowrap'>exp_2.hpp</span></a>
 include file.

<br>
<br>
<b><big><a name="Exercises" id="Exercises">Exercises</a></big></b>

<ol type="1"><li>
Create and test a modified version of the routine below that computes
the same order derivatives with respect to <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
,
at the point <code>
<span style='white-space: nowrap'>&nbsp;x&nbsp;=&nbsp;.1</span></code>
 
of the function 
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exp_2(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code></li><li>
Create a routine called
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exp_3(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>that evaluates the function
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f(x)&nbsp;=&nbsp;1&nbsp;+&nbsp;x^2&nbsp;/&nbsp;2&nbsp;+&nbsp;x^3&nbsp;/&nbsp;6<br>
\]&nbsp;</span></code>

Test a modified version of the routine below that computes
the derivative of <code>
<span style='white-space: nowrap'>&nbsp;f(x)</span></code>

at the point <code>
<span style='white-space: nowrap'>&nbsp;x&nbsp;=&nbsp;.5</span></code>
.
</li></ol>

<code><font color="blue">
<span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;&nbsp;&nbsp;//&nbsp;http://www.coin-or.org/CppAD/&nbsp;<br>
#&nbsp;include&nbsp;&quot;exp_2.hpp&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;order&nbsp;exponential&nbsp;approximation<br>
bool&nbsp;exp_2_cppad(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::AD;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::vector;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;can&nbsp;use&nbsp;any&nbsp;simple&nbsp;vector&nbsp;template&nbsp;class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::NearEqual;&nbsp;//&nbsp;checks&nbsp;if&nbsp;values&nbsp;are&nbsp;nearly&nbsp;equal<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;domain&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;1;&nbsp;//&nbsp;dimension&nbsp;of&nbsp;the&nbsp;domain&nbsp;space<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;X(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[0]&nbsp;=&nbsp;.5;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;value&nbsp;of&nbsp;x&nbsp;for&nbsp;this&nbsp;operation&nbsp;sequence<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;independent&nbsp;variables&nbsp;and&nbsp;start&nbsp;recording&nbsp;operation&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::Independent(X);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;our&nbsp;exponential&nbsp;approximation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;x&nbsp;&nbsp;&nbsp;=&nbsp;X[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;apx&nbsp;=&nbsp;exp_2(x);&nbsp;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;range&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;m&nbsp;=&nbsp;1;&nbsp;&nbsp;//&nbsp;dimension&nbsp;of&nbsp;the&nbsp;range&nbsp;space<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Y(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;apx;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;variable&nbsp;that&nbsp;represents&nbsp;only&nbsp;range&nbsp;space&nbsp;component<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Create&nbsp;f:&nbsp;X&nbsp;-&gt;&nbsp;Y&nbsp;corresponding&nbsp;to&nbsp;this&nbsp;operation&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;and&nbsp;stop&nbsp;recording.&nbsp;This&nbsp;also&nbsp;executes&nbsp;a&nbsp;zero&nbsp;order&nbsp;forward&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;sweep&nbsp;using&nbsp;values&nbsp;in&nbsp;X&nbsp;for&nbsp;x.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;double&gt;&nbsp;f(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;first&nbsp;order&nbsp;forward&nbsp;sweep&nbsp;that&nbsp;computes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;partial&nbsp;of&nbsp;exp_2(x)&nbsp;with&nbsp;respect&nbsp;to&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&nbsp;dx(n);&nbsp;&nbsp;//&nbsp;differential&nbsp;in&nbsp;domain&nbsp;space<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&nbsp;dy(m);&nbsp;&nbsp;//&nbsp;differential&nbsp;in&nbsp;range&nbsp;space<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[0]&nbsp;=&nbsp;1.;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;direction&nbsp;for&nbsp;partial&nbsp;derivative<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Forward(1,&nbsp;dx);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;check&nbsp;=&nbsp;1.5;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dy[0],&nbsp;check,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;first&nbsp;order&nbsp;reverse&nbsp;sweep&nbsp;that&nbsp;computes&nbsp;the&nbsp;derivative<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&nbsp;&nbsp;w(m);&nbsp;&nbsp;&nbsp;//&nbsp;weights&nbsp;for&nbsp;components&nbsp;of&nbsp;the&nbsp;range<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&nbsp;dw(n);&nbsp;&nbsp;&nbsp;//&nbsp;derivative&nbsp;of&nbsp;the&nbsp;weighted&nbsp;function<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[0]&nbsp;=&nbsp;1.;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;there&nbsp;is&nbsp;only&nbsp;one&nbsp;weight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dw&nbsp;&nbsp;&nbsp;=&nbsp;f.Reverse(1,&nbsp;w);&nbsp;//&nbsp;derivative&nbsp;of&nbsp;w[0]&nbsp;*&nbsp;exp_2(x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check&nbsp;=&nbsp;1.5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;partial&nbsp;of&nbsp;exp_2(x)&nbsp;with&nbsp;respect&nbsp;to&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[0],&nbsp;check,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;order&nbsp;forward&nbsp;sweep&nbsp;that&nbsp;computes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;of&nbsp;exp_2(x)&nbsp;with&nbsp;respect&nbsp;to&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&nbsp;x2(n);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;order&nbsp;Taylor&nbsp;coefficients&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&nbsp;y2(m);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x2[0]&nbsp;=&nbsp;0.;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;evaluate&nbsp;second&nbsp;partial&nbsp;.w.r.t.&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y2&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Forward(2,&nbsp;x2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check&nbsp;=&nbsp;0.5&nbsp;*&nbsp;1.;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Taylor&nbsp;coef&nbsp;is&nbsp;1/2&nbsp;second&nbsp;derivative&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(y2[0],&nbsp;check,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;order&nbsp;reverse&nbsp;sweep&nbsp;that&nbsp;computes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;derivative&nbsp;of&nbsp;partial&nbsp;of&nbsp;exp_2(x)&nbsp;w.r.t.&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dw.resize(2&nbsp;*&nbsp;n);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;space&nbsp;for&nbsp;first&nbsp;and&nbsp;second&nbsp;derivatives<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dw&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Reverse(2,&nbsp;w);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check&nbsp;=&nbsp;1.;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;result&nbsp;should&nbsp;be&nbsp;second&nbsp;derivative<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[0*2+1],&nbsp;check,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
<br>
</span>
</font></code>

<hr>Input File: introduction/exp_apx/exp_2_cppad.cpp

</body>
</html>
