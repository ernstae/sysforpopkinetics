<html><head>
<title>LU Factorization of A Square Matrix and Stability Calculation</title>
<meta name="description" id="description" content="LU Factorization of A Square Matrix and Stability Calculation">
<meta name="keywords" id="keywords" content=" Luratio linear Lu factor equation determinant solve ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_luratio_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuRatio</option>
</select>
</td>
<td><a href="benderquad.cpp.htm" target="_top">Prev</a>
</td><td><a href="luratio.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>LuRatio-&gt;</option>
<option>LuRatio.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Description</option>
<option>Include</option>
<option>Matrix Storage</option>
<option>sign</option>
<option>ip</option>
<option>jp</option>
<option>LU</option>
<option>---..A</option>
<option>---..P</option>
<option>---..L</option>
<option>---..U</option>
<option>---..Factor</option>
<option>---..Determinant</option>
<option>ratio</option>
<option>---..Purpose</option>
<option>SizeVector</option>
<option>Base</option>
<option>ADvector</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>LU Factorization of A Square Matrix and Stability Calculation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<code><font color="blue"><br>
# include &lt;cppad/cppad.hpp&gt;</font></code>
<code><span style='white-space: nowrap'><br>
</span></code><code><font color="blue"></font></code><i><span style='white-space: nowrap'>sign</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;LuRatio(</span></font></code><i><span style='white-space: nowrap'>ip</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>jp</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>LU</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>ratio</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Description" id="Description">Description</a></big></b>
<br>
Computes an LU factorization of the matrix <i>A</i> 
where <i>A</i> is a square matrix.
A measure of the numerical stability called <i>ratio</i> is calculated.
This ratio is useful when the results of <code><font color="blue">LuRatio</font></code> are
used as part of an <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object.

<br>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
This routine is designed to be used with AD objects and
requires the <code><font color="blue">cppad/cppad.hpp</font></code> file to be included.

<br>
<br>
<b><big><a name="Matrix Storage" id="Matrix Storage">Matrix Storage</a></big></b>
<br>
All matrices are stored in row major order.
To be specific, if <code>
<span style='white-space: nowrap'>&nbsp;Y</span></code>
 is a vector
that contains a <code>
<span style='white-space: nowrap'>&nbsp;p</span></code>
 by <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 matrix,
the size of <code>
<span style='white-space: nowrap'>&nbsp;Y</span></code>
 must be equal to <code>
<span style='white-space: nowrap'>&nbsp;&nbsp;p&nbsp;*&nbsp;q&nbsp;</span></code>
 and for
<code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;p-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;q-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y_{i,j}&nbsp;=&nbsp;Y[&nbsp;i&nbsp;*&nbsp;q&nbsp;+&nbsp;j&nbsp;]<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="sign" id="sign">sign</a></big></b>
<br>
The return value <i>sign</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;</span></font></code><i><span style='white-space: nowrap'>sign</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>If <i>A</i> is invertible, <i>sign</i> is plus or minus one
and is the sign of the permutation corresponding to the row ordering
<i>ip</i> and column ordering <i>jp</i>.
If <i>A</i> is not invertible, <i>sign</i> is zero.

<br>
<br>
<b><big><a name="ip" id="ip">ip</a></big></b>
<br>
The argument <i>ip</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>SizeVector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ip</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see description of <a href="lufactor.htm#SizeVector" target="_top"><span style='white-space: nowrap'>SizeVector</span></a>
 below).
The size of <i>ip</i> is referred to as <i>n</i> in the
specifications below.
The input value of the elements of <i>ip</i> does not matter.
The output value of the elements of <i>ip</i> determine
the order of the rows in the permuted matrix.

<br>
<br>
<b><big><a name="jp" id="jp">jp</a></big></b>
<br>
The argument <i>jp</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>SizeVector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>jp</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see description of <a href="lufactor.htm#SizeVector" target="_top"><span style='white-space: nowrap'>SizeVector</span></a>
 below).
The size of <i>jp</i> must be equal to <i>n</i>.
The input value of the elements of <i>jp</i> does not matter.
The output value of the elements of <i>jp</i> determine
the order of the columns in the permuted matrix.

<br>
<br>
<b><big><a name="LU" id="LU">LU</a></big></b>
<br>
The argument <i>LU</i> has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>LU</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and the size of <i>LU</i> must equal <code>
<span style='white-space: nowrap'>&nbsp;n&nbsp;*&nbsp;n</span></code>

(see description of <a href="luratio.htm#ADvector" target="_top"><span style='white-space: nowrap'>ADvector</span></a>
 below).

<br>
<br>
<b><a name="LU.A" id="LU.A">A</a></b>
<br>
We define <i>A</i> as the matrix corresponding to the input 
value of <i>LU</i>.

<br>
<br>
<b><a name="LU.P" id="LU.P">P</a></b>
<br>
We define the permuted matrix <i>P</i> in terms of <i>A</i> by
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>P</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>j</span></i><code><font color="blue"><span style='white-space: nowrap'>)&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font></code><i><span style='white-space: nowrap'>ip</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>]&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font></code><i><span style='white-space: nowrap'>jp</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>j</span></i><code><font color="blue"><span style='white-space: nowrap'>]&nbsp;]<br>
</span></font></code><br>
<b><a name="LU.L" id="LU.L">L</a></b>
<br>
We define the lower triangular matrix <i>L</i> in terms of the 
output value of <i>LU</i>.
The matrix <i>L</i> is zero above the diagonal
and the rest of the elements are defined by
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>L</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>j</span></i><code><font color="blue"><span style='white-space: nowrap'>)&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>LU</span></i><code><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font></code><i><span style='white-space: nowrap'>ip</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>]&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font></code><i><span style='white-space: nowrap'>jp</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>j</span></i><code><font color="blue"><span style='white-space: nowrap'>]&nbsp;]<br>
</span></font></code>for <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;i</span></code>
.

<br>
<br>
<b><a name="LU.U" id="LU.U">U</a></b>
<br>
We define the upper triangular matrix <i>U</i> in terms of the
output value of <i>LU</i>.
The matrix <i>U</i> is zero below the diagonal,
one on the diagonal,
and the rest of the elements are defined by
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>U</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>j</span></i><code><font color="blue"><span style='white-space: nowrap'>)&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>LU</span></i><code><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font></code><i><span style='white-space: nowrap'>ip</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>]&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font></code><i><span style='white-space: nowrap'>jp</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>j</span></i><code><font color="blue"><span style='white-space: nowrap'>]&nbsp;]<br>
</span></font></code>for <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-2</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;i+1&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
.

<br>
<br>
<b><a name="LU.Factor" id="LU.Factor">Factor</a></b>
<br>
If the return value <i>sign</i> is non-zero,
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>L</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>U</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>P</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>If the return value of <i>sign</i> is zero,
the contents of <i>L</i> and <i>U</i> are not defined. 

<br>
<br>
<b><a name="LU.Determinant" id="LU.Determinant">Determinant</a></b>

<br>
If the return value <i>sign</i> is zero,
the determinant of <i>A</i> is zero.
If <i>sign</i> is non-zero,
using the output value of <i>LU</i>
the determinant of the matrix <i>A</i> is equal to
<code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code><i><span style='white-space: nowrap'>sign</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>LU</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>ip</span></i><code><font color="blue"><span style='white-space: nowrap'>[0],&nbsp;</span></font></code><i><span style='white-space: nowrap'>jp</span></i><code><font color="blue"><span style='white-space: nowrap'>[0]]&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>...</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>LU</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>ip</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>-1],&nbsp;</span></font></code><i><span style='white-space: nowrap'>jp</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>-1]]&nbsp;<br>
</span></font></code><br>
<b><big><a name="ratio" id="ratio">ratio</a></big></b>
<br>
The argument <i>ratio</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ratio</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>On input, the value of <i>ratio</i> does not matter.
On output it is a measure of how good the choice of pivots is.
For <code>
<span style='white-space: nowrap'>&nbsp;p&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
, 
the <i>p</i>-th pivot element is the element of maximum absolute value of a 
<code>
<span style='white-space: nowrap'>&nbsp;(n-p)&nbsp;\times&nbsp;(n-p)</span></code>
 sub-matrix.
The ratio of each element of sub-matrix divided by the pivot element
is computed.
The return value of <i>ratio</i> is the maximum absolute value of
such ratios over with respect to all elements and all the pivots.

<br>
<br>
<b><a name="ratio.Purpose" id="ratio.Purpose">Purpose</a></b>
<br>
Suppose that the execution of a call to <code><font color="blue">LuRatio</font></code> 
is recorded in the <code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object <i>F</i>.
Then a call to <a href="forward.htm" target="_top"><span style='white-space: nowrap'>Forward</span></a>
 of the form
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Forward(</span></font></code><i><span style='white-space: nowrap'>k</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>xk</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>with <i>k</i> equal to zero will revaluate this Lu factorization
with the same pivots and a new value for <i>A</i>.
In this case, the resulting <i>ratio</i> may not be one.
If <i>ratio</i> is too large (the meaning of too large is up to you), 
the current pivots do not yield a stable LU factorization of <i>A</i>.
A better choice for the pivots (for this value of <i>A</i>)
will be made if you recreate the <code><font color="blue">ADFun</font></code> object
starting with the <a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
 variable values
that correspond to the vector <i>xk</i>.

<br>
<br>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br>
The type <i>SizeVector</i> must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;size_t</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
This type is determined by the argument <i>ratio</i>
which has type <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>.
The type <i>Base</i> must be
<code><font color="blue">float</font></code>, <code><font color="blue">double</font></code>, or any type in the
<a href="glossary.htm#AD Levels Above Base" target="_top"><span style='white-space: nowrap'>AD&nbsp;levels&nbsp;above</span></a>

above <code><font color="blue">float</font></code> or <code><font color="blue">double</font></code>.

<br>
<br>
<b><big><a name="ADvector" id="ADvector">ADvector</a></big></b>
<br>
The type <i>ADvector</i> must be a 
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector&nbsp;class</span></a>
 with elements of type
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file <a href="luratio.cpp.htm" target="_top"><span style='white-space: nowrap'>LuRatio.cpp</span></a>

contains an example and test of using <code><font color="blue">LuRatio</font></code>.
It returns true if it succeeds and false otherwise.


<hr>Input File: cppad/local/lu_ratio.hpp

</body>
</html>
