<html><head>
<title>Computing Jacobian and Hessian of Bender's Reduced Objective</title>
<meta name="description" id="description" content="Computing Jacobian and Hessian of Bender's Reduced Objective">
<meta name="keywords" id="keywords" content=" Hessian Bender Jacobian Benderquad ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_benderquad_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>BenderQuad</option>
</select>
</td>
<td><a href="odegearcontrol.cpp.htm" target="_top">Prev</a>
</td><td><a href="benderquad.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>BenderQuad-&gt;</option>
<option>BenderQuad.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Problem</option>
<option>Purpose</option>
<option>x</option>
<option>y</option>
<option>fun</option>
<option>---..fun.f</option>
<option>---..fun.h</option>
<option>---..fun.dy</option>
<option>g</option>
<option>gx</option>
<option>gxx</option>
<option>BAvector</option>
<option>ADvector</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>Computing Jacobian and Hessian of Bender's Reduced Objective</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>
<code><font color="blue"></font></code><i></i><code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;<br>
BenderQuad(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>g</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>gx</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>gxx</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>  

<br>
<br>
<b><big><a name="Problem" id="Problem">Problem</a></big></b>
<br>
The type <a href="benderquad.htm#ADvector" target="_top"><span style='white-space: nowrap'>ADvector</span></a>
 cannot be determined
form the arguments above 
(currently the type <i>ADvector</i> must be 
<code><font color="blue"><span style='white-space: nowrap'>CPPAD_TEST_VECTOR&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>.)
This will be corrected in the future by requiring <i>Fun</i>
to define <code><font color="blue"></font></code><i><span style='white-space: nowrap'>Fun</span></i><code><font color="blue"><span style='white-space: nowrap'>::vector_type</span></font></code> which will specify the
type <i>ADvector</i>.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We are given the optimization problem
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\rm&nbsp;minimize}&nbsp;&amp;&nbsp;F(x,&nbsp;y)&nbsp;&amp;&nbsp;{\rm&nbsp;w.r.t.}&nbsp;\;&nbsp;(x,&nbsp;y)&nbsp;\in&nbsp;\R^n&nbsp;\times&nbsp;\R^m<br>
\end{array}<br>
\]&nbsp;</span></code>

that is convex with respect to <code>
<span style='white-space: nowrap'>&nbsp;y</span></code>
.
In addition, we are given a set of equations <code>
<span style='white-space: nowrap'>&nbsp;H(x,&nbsp;y)</span></code>

such that 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;H[&nbsp;x&nbsp;,&nbsp;Y(x)&nbsp;]&nbsp;=&nbsp;0&nbsp;\;\;&nbsp;\Rightarrow&nbsp;\;\;&nbsp;F_y&nbsp;[&nbsp;x&nbsp;,&nbsp;Y(x)&nbsp;]&nbsp;=&nbsp;0<br>
\]&nbsp;</span></code>

(In fact, it is often the case that <code>
<span style='white-space: nowrap'>&nbsp;H(x,&nbsp;y)&nbsp;=&nbsp;F_y&nbsp;(x,&nbsp;y)</span></code>
.)
Furthermore, it is easy to calculate a Newton step for these equations; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy&nbsp;=&nbsp;-&nbsp;[&nbsp;\partial_y&nbsp;H(x,&nbsp;y)]^{-1}&nbsp;H(x,&nbsp;y)<br>
\]&nbsp;</span></code>

The purpose of this routine is to compute the 
value, Jacobian, and Hessian of the reduced objective function
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;G(x)&nbsp;=&nbsp;F[&nbsp;x&nbsp;,&nbsp;Y(x)&nbsp;]<br>
\]&nbsp;</span></code>

Note that if only the value and Jacobian are needed, they can be
computed more quickly using the relations
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;G^{(1)}&nbsp;(x)&nbsp;=&nbsp;\partial_x&nbsp;F&nbsp;[x,&nbsp;Y(x)&nbsp;]<br>
\]&nbsp;</span></code>
 

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The <code><font color="blue">BenderQuad</font></code> argument <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see <a href="benderquad.htm#BAvector" target="_top"><span style='white-space: nowrap'>BAvector</span></a>
 below)
and its size must be equal to <i>n</i>.
It specifies the point at which we evaluating 
the reduced objective function and its derivatives.


<br>
<br>
<b><big><a name="y" id="y">y</a></big></b>
<br>
The <code><font color="blue">BenderQuad</font></code> argument <i>y</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>m</i>.
It must be equal to <code>
<span style='white-space: nowrap'>&nbsp;Y(x)</span></code>
; i.e., 
it must solve the problem in <code>
<span style='white-space: nowrap'>&nbsp;y</span></code>
 for this given value of <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\rm&nbsp;minimize}&nbsp;&amp;&nbsp;F(x,&nbsp;y)&nbsp;&amp;&nbsp;{\rm&nbsp;w.r.t.}&nbsp;\;&nbsp;y&nbsp;\in&nbsp;\R^m<br>
\end{array}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="fun" id="fun">fun</a></big></b>
<br>
The <code><font color="blue">BenderQuad</font></code> object <i>fun</i> 
must support the member functions listed below.
The <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> arguments will be variables for
a tape created by a call to <a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
 from <code><font color="blue">BenderQuad</font></code>
(hence they can not be combined with variables corresponding to a 
different tape). 

<br>
<br>
<b><a name="fun.fun.f" id="fun.fun.f">fun.f</a></b>
<br>
The <code><font color="blue">BenderQuad</font></code> argument <i>fun</i> supports the syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.f(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.f</span></font></code> argument <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see <a href="benderquad.htm#ADvector" target="_top"><span style='white-space: nowrap'>ADvector</span></a>
 below)
and its size must be equal to <i>n</i>.
The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.f</span></font></code> argument <i>y</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>m</i>.
The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.f</span></font></code> result <i>f</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to one.
The value of <i>f</i> is
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;F(x,&nbsp;y)<br>
\]&nbsp;</span></code>
.

<br>
<br>
<b><a name="fun.fun.h" id="fun.fun.h">fun.h</a></b>
<br>
The <code><font color="blue">BenderQuad</font></code> argument <i>fun</i> supports the syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>h</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.h(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.h</span></font></code> argument <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>n</i>.
The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.h</span></font></code> argument <i>y</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>m</i>.
The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.h</span></font></code> result <i>h</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>h</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>m</i>.
The value of <i>h</i> is
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h&nbsp;=&nbsp;H(x,&nbsp;y)<br>
\]&nbsp;</span></code>
.

<br>
<br>
<b><a name="fun.fun.dy" id="fun.fun.dy">fun.dy</a></b>
<br>
The <code><font color="blue">BenderQuad</font></code> argument <i>fun</i> supports the syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>dy</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.dy(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>h</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
<br>
</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.dy</span></font></code> argument <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>n</i>.
Its value will be exactly equal to the <code><font color="blue">BenderQuad</font></code> argument 
<i>x</i> and values depending on it can be stored as private objects
in <i>f</i> and need not be recalculated.
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.dy</span></font></code> argument <i>y</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>m</i>.
Its value will be exactly equal to the <code><font color="blue">BenderQuad</font></code> argument 
<i>y</i> and values depending on it can be stored as private objects
in <i>f</i> and need not be recalculated.
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>h</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.dy</span></font></code> argument <i>h</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>h</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>m</i>.
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>dy</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.dy</span></font></code> result <i>dy</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>dy</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and its size must be equal to <i>m</i>.
The return value <i>dy</i> is given by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy&nbsp;=&nbsp;-&nbsp;[&nbsp;\partial_y&nbsp;H&nbsp;(x&nbsp;,&nbsp;y)&nbsp;]^{-1}&nbsp;h<br>
\]&nbsp;</span></code>

Note that if <i>h</i> is equal to <code>
<span style='white-space: nowrap'>&nbsp;H(x,&nbsp;y)</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;dy</span></code>
 is the Newton step for finding a zero
of <code>
<span style='white-space: nowrap'>&nbsp;H(x,&nbsp;y)</span></code>
 with respect to <code>
<span style='white-space: nowrap'>&nbsp;y</span></code>
;
i.e., 
<code>
<span style='white-space: nowrap'>&nbsp;y&nbsp;+&nbsp;dy</span></code>
 is an approximate solution for the equation
<code>
<span style='white-space: nowrap'>&nbsp;H&nbsp;(x,&nbsp;y&nbsp;+&nbsp;dy)&nbsp;=&nbsp;0</span></code>
. 

<br>
<br>
<b><big><a name="g" id="g">g</a></big></b>
<br>
The argument <i>g</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>g</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and has size one.
The input value of its element does not matter.
On output,
it contains the value of <code>
<span style='white-space: nowrap'>&nbsp;G&nbsp;(x)</span></code>
; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[0]&nbsp;=&nbsp;G&nbsp;(x)<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="gx" id="gx">gx</a></big></b>
<br>
The argument <i>gx</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>gx</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and has size <code>
<span style='white-space: nowrap'>&nbsp;n&nbsp;</span></code>
.
The input values of its elements do not matter.
On output,
it contains the Jacobian of <code>
<span style='white-space: nowrap'>&nbsp;G&nbsp;(x)</span></code>
; i.e.,
for <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
, 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gx[&nbsp;j&nbsp;]&nbsp;=&nbsp;G^{(1)}&nbsp;(x)_j<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="gxx" id="gxx">gxx</a></big></b>
<br>
The argument <i>gx</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>gxx</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and has size <code>
<span style='white-space: nowrap'>&nbsp;n&nbsp;\times&nbsp;n</span></code>
.
The input values of its elements do not matter.
On output,
it contains the Hessian of <code>
<span style='white-space: nowrap'>&nbsp;G&nbsp;(x)</span></code>
; i.e.,
for <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
, and
<code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
, 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gxx[&nbsp;i&nbsp;*&nbsp;n&nbsp;+&nbsp;j&nbsp;]&nbsp;=&nbsp;G^{(2)}&nbsp;(x)_{i,j}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="BAvector" id="BAvector">BAvector</a></big></b>
<br>
The type <i>BAvector</i> must be a 
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class. 
We use <i>Base</i> to refer to the type of the elements of 
<i>BAvector</i>; i.e.,
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>::value_type<br>
</span></font></code><br>
<b><big><a name="ADvector" id="ADvector">ADvector</a></big></b>
<br>
The type <i>ADvector</i> must be a 
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of type 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>; i.e.,
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>ADvector</span></i><code><font color="blue"><span style='white-space: nowrap'>::value_type<br>
</span></font></code>must be the same type as
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>BAvector</span></i><code><font color="blue"><span style='white-space: nowrap'>::value_type&nbsp;&gt;<br>
</span></font></code>.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="benderquad.cpp.htm" target="_top"><span style='white-space: nowrap'>BenderQuad.cpp</span></a>

contains an example and test of this operation.   
It returns true if it succeeds and false otherwise.



<hr>Input File: cppad/local/bender_quad.hpp

</body>
</html>
