<html><head>
<title>Source: LuInvert</title>
<meta name="description" id="description" content="Source: LuInvert">
<meta name="keywords" id="keywords" content=" Luinvert source ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_lu_invert.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuDetAndSolve</option>
<option>LuInvert</option>
<option>lu_invert.hpp</option>
</select>
</td>
<td><a href="luinvert.cpp.htm" target="_top">Prev</a>
</td><td><a href="rombergone.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>LuDetAndSolve-&gt;</option>
<option>LuSolve</option>
<option>LuFactor</option>
<option>LuInvert</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuInvert-&gt;</option>
<option>LuInvert.cpp</option>
<option>lu_invert.hpp</option>
</select>
</td>
<td>lu_invert.hpp</td>
<td>Headings</td>
</tr></table><br>
<center><b><big><big>Source: LuInvert</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_LU_INVERT_INCLUDED 
<code><span style='white-space: nowrap'><br>
</span></code># define CPPAD_LU_INVERT_INCLUDED

<span style='white-space: nowrap'><br>
#&nbsp;include&nbsp;&lt;cppad/local/cppad_assert.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/check_simple_vector.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/check_numeric_type.hpp&gt;<br>
<br>
namespace&nbsp;CppAD&nbsp;{&nbsp;//&nbsp;BEGIN&nbsp;CppAD&nbsp;namespace<br>
<br>
//&nbsp;LuInvert<br>
template&nbsp;&lt;typename&nbsp;SizeVector,&nbsp;typename&nbsp;FloatVector&gt;<br>
void&nbsp;LuInvert(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;SizeVector&nbsp;&nbsp;&amp;ip,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;SizeVector&nbsp;&nbsp;&amp;jp,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;FloatVector&nbsp;&amp;LU,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FloatVector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;B&nbsp;)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;k;&nbsp;//&nbsp;column&nbsp;index&nbsp;in&nbsp;X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;p;&nbsp;//&nbsp;index&nbsp;along&nbsp;diagonal&nbsp;in&nbsp;LU<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i;&nbsp;//&nbsp;row&nbsp;index&nbsp;in&nbsp;LU&nbsp;and&nbsp;X<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;typename&nbsp;FloatVector::value_type&nbsp;Float;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;numeric&nbsp;type&nbsp;specifications<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckNumericType&lt;Float&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;simple&nbsp;vector&nbsp;class&nbsp;specifications<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckSimpleVector&lt;Float,&nbsp;FloatVector&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckSimpleVector&lt;size_t,&nbsp;SizeVector&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;etmp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;ip.size();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jp.size()&nbsp;==&nbsp;n,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuInvert:&nbsp;jp&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;n&nbsp;*&nbsp;n&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LU.size()&nbsp;==&nbsp;n&nbsp;*&nbsp;n,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuInvert:&nbsp;Lu&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;n&nbsp;*&nbsp;m&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;m&nbsp;=&nbsp;B.size()&nbsp;/&nbsp;n;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.size()&nbsp;==&nbsp;n&nbsp;*&nbsp;m,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuSolve:&nbsp;B&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;a&nbsp;multiple&nbsp;of&nbsp;n&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;temporary&nbsp;storage&nbsp;for&nbsp;reordered&nbsp;solution<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FloatVector&nbsp;x(n);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;loop&nbsp;over&nbsp;equations<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(k&nbsp;=&nbsp;0;&nbsp;k&nbsp;&lt;&nbsp;m;&nbsp;k++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;invert&nbsp;the&nbsp;equation&nbsp;c&nbsp;=&nbsp;L&nbsp;*&nbsp;b<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(p&nbsp;=&nbsp;0;&nbsp;p&nbsp;&lt;&nbsp;n;&nbsp;p++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;solve&nbsp;for&nbsp;c[p]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etmp&nbsp;=&nbsp;B[&nbsp;ip[p]&nbsp;*&nbsp;m&nbsp;+&nbsp;k&nbsp;]&nbsp;/&nbsp;LU[&nbsp;ip[p]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[p]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[&nbsp;ip[p]&nbsp;*&nbsp;m&nbsp;+&nbsp;k&nbsp;]&nbsp;=&nbsp;etmp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;subtract&nbsp;off&nbsp;effect&nbsp;on&nbsp;other&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;p+1;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[&nbsp;ip[i]&nbsp;*&nbsp;m&nbsp;+&nbsp;k&nbsp;]&nbsp;-=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etmp&nbsp;*&nbsp;LU[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[p]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;invert&nbsp;the&nbsp;equation&nbsp;x&nbsp;=&nbsp;U&nbsp;*&nbsp;c<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;n;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(&nbsp;p&nbsp;&gt;&nbsp;0&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;--p;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etmp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;B[&nbsp;ip[p]&nbsp;*&nbsp;m&nbsp;+&nbsp;k&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[&nbsp;jp[p]&nbsp;]&nbsp;=&nbsp;etmp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;p;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[&nbsp;ip[i]&nbsp;*&nbsp;m&nbsp;+&nbsp;k&nbsp;]&nbsp;-=&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etmp&nbsp;*&nbsp;LU[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[p]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;copy&nbsp;reordered&nbsp;solution&nbsp;into&nbsp;B<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i&nbsp;*&nbsp;m&nbsp;+&nbsp;k]&nbsp;=&nbsp;x[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
}<br>
}&nbsp;//&nbsp;END&nbsp;CppAD&nbsp;namespace&nbsp;<br>
</span># endif
</font></code>


<hr>Input File: omh/lu_invert_hpp.omh

</body>
</html>
