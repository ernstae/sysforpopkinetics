<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Source: LuSolve</title>
<meta name="description" id="description" content="Source: LuSolve"/>
<meta name="keywords" id="keywords" content=" Lusolve source "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_lu_solve.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuDetAndSolve</option>
<option>LuSolve</option>
<option>lu_solve.hpp</option>
</select>
</td>
<td><a href="lusolve.cpp.xml" target="_top">Prev</a>
</td><td><a href="lufactor.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>LuDetAndSolve-&gt;</option>
<option>LuSolve</option>
<option>LuFactor</option>
<option>LuInvert</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuSolve-&gt;</option>
<option>LuSolve.cpp</option>
<option>lu_solve.hpp</option>
</select>
</td>
<td>lu_solve.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Source: LuSolve</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_LU_SOLVE_INCLUDED 
<code><span style='white-space: nowrap'><br/>
</span></code># define CPPAD_LU_SOLVE_INCLUDED

<span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;complex&gt;<br/>
#&#xA0;include&#xA0;&lt;vector&gt;<br/>
<br/>
//&#xA0;link&#xA0;exp&#xA0;for&#xA0;float&#xA0;and&#xA0;double&#xA0;cases<br/>
#&#xA0;include&#xA0;&lt;cppad/std_math_unary.hpp&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/local/cppad_assert.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/check_simple_vector.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/check_numeric_type.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/lu_factor.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/lu_invert.hpp&gt;<br/>
<br/>
namespace&#xA0;CppAD&#xA0;{&#xA0;//&#xA0;BEGIN&#xA0;CppAD&#xA0;namespace<br/>
<br/>
//&#xA0;LeqZero<br/>
template&#xA0;&lt;typename&#xA0;Float&gt;<br/>
inline&#xA0;bool&#xA0;LeqZero(const&#xA0;Float&#xA0;&amp;x)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x&#xA0;&lt;=&#xA0;Float(0);&#xA0;}<br/>
inline&#xA0;bool&#xA0;LeqZero(&#xA0;const&#xA0;std::complex&lt;double&gt;&#xA0;&amp;x&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x&#xA0;==&#xA0;std::complex&lt;double&gt;(0);&#xA0;}<br/>
inline&#xA0;bool&#xA0;LeqZero(&#xA0;const&#xA0;std::complex&lt;float&gt;&#xA0;&amp;x&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;x&#xA0;==&#xA0;std::complex&lt;float&gt;(0);&#xA0;}<br/>
<br/>
//&#xA0;LuSolve<br/>
template&#xA0;&lt;typename&#xA0;Float,&#xA0;typename&#xA0;FloatVector&gt;<br/>
int&#xA0;LuSolve(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;m&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;FloatVector&#xA0;&amp;A&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;FloatVector&#xA0;&amp;B&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;FloatVector&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;X&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Float&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;logdet&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;numeric&#xA0;type&#xA0;specifications<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CheckNumericType&lt;Float&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;simple&#xA0;vector&#xA0;class&#xA0;specifications<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CheckSimpleVector&lt;Float,&#xA0;FloatVector&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;p;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;index&#xA0;of&#xA0;pivot&#xA0;element&#xA0;(diagonal&#xA0;of&#xA0;L)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;sign&#xA0;of&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Float&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;pivot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;pivot&#xA0;element<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;the&#xA0;value&#xA0;zero<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;Float&#xA0;zero(0);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;pivot&#xA0;row&#xA0;and&#xA0;column&#xA0;order&#xA0;in&#xA0;the&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::vector&lt;size_t&gt;&#xA0;ip(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::vector&lt;size_t&gt;&#xA0;jp(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-------------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_ASSERT_KNOWN(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A.size()&#xA0;==&#xA0;n&#xA0;*&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuSolve:&#xA0;A&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;n&#xA0;*&#xA0;n&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_ASSERT_KNOWN(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B.size()&#xA0;==&#xA0;n&#xA0;*&#xA0;m,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuSolve:&#xA0;B&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;n&#xA0;*&#xA0;m&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_ASSERT_KNOWN(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X.size()&#xA0;==&#xA0;n&#xA0;*&#xA0;m,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuSolve:&#xA0;X&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;n&#xA0;*&#xA0;m&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-------------------------------------------------------<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;A&#xA0;so&#xA0;that&#xA0;it&#xA0;does&#xA0;not&#xA0;change<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;FloatVector&#xA0;Lu(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;B&#xA0;so&#xA0;that&#xA0;it&#xA0;does&#xA0;not&#xA0;change<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X&#xA0;=&#xA0;B;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Lu&#xA0;factor&#xA0;the&#xA0;matrix&#xA0;A<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet&#xA0;=&#xA0;LuFactor(ip,&#xA0;jp,&#xA0;Lu);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;the&#xA0;log&#xA0;of&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;logdet&#xA0;&#xA0;=&#xA0;Float(0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(p&#xA0;=&#xA0;0;&#xA0;p&#xA0;&lt;&#xA0;n;&#xA0;p++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;pivot&#xA0;using&#xA0;the&#xA0;max&#xA0;absolute&#xA0;element<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;pivot&#xA0;&#xA0;&#xA0;=&#xA0;Lu[&#xA0;ip[p]&#xA0;*&#xA0;n&#xA0;+&#xA0;jp[p]&#xA0;];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;for&#xA0;determinant&#xA0;equal&#xA0;to&#xA0;zero<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;pivot&#xA0;==&#xA0;zero&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;abort&#xA0;the&#xA0;mission<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;logdet&#xA0;=&#xA0;Float(0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&#xA0;&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;update&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;LeqZero&#xA0;(&#xA0;pivot&#xA0;)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;logdet&#xA0;+=&#xA0;log(&#xA0;-&#xA0;pivot&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet&#xA0;=&#xA0;-&#xA0;signdet;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;logdet&#xA0;+=&#xA0;log(&#xA0;pivot&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;solve&#xA0;the&#xA0;linear&#xA0;equations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;LuInvert(ip,&#xA0;jp,&#xA0;Lu,&#xA0;X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;the&#xA0;sign&#xA0;factor&#xA0;for&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;signdet;<br/>
}<br/>
}&#xA0;//&#xA0;END&#xA0;CppAD&#xA0;namespace&#xA0;<br/>
</span># endif
</font></code>


<hr/>Input File: omh/lu_solve_hpp.omh

</body>
</html>
