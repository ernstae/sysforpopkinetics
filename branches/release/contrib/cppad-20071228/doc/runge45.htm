<html><head>
<title>An Embedded 4th and 5th Order Runge-Kutta ODE Solver</title>
<meta name="description" id="description" content="An Embedded 4th and 5th Order Runge-Kutta ODE Solver">
<meta name="keywords" id="keywords" content=" Runge45 Ode Runge-kutta Runge Kutta solve differential equation ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_runge45_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>Runge45</option>
</select>
</td>
<td><a href="rombergmul.cpp.htm" target="_top">Prev</a>
</td><td><a href="runge45.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>Runge45-&gt;</option>
<option>Runge45.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Include</option>
<option>xf</option>
<option>Fun</option>
<option>---..t</option>
<option>---..x</option>
<option>---..f</option>
<option>---..Warning</option>
<option>M</option>
<option>ti</option>
<option>tf</option>
<option>xi</option>
<option>e</option>
<option>Scalar</option>
<option>Vector</option>
<option>Example</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>An Embedded 4th and 5th Order Runge-Kutta ODE Solver</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>
<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/runge_45.hpp&gt;<br>
</span></font></code><code><font color="blue"></font></code><i><span style='white-space: nowrap'>xf</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;Runge45(</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>M</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>ti</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>tf</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>xi</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><code><font color="blue"></font></code><i><span style='white-space: nowrap'>xf</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;Runge45(</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>M</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>ti</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>tf</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>xi</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>e</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This is an implementation of the
Cash-Karp embedded 4th and 5th order Runge-Kutta ODE solver 
described in Section 16.2 of <a href="bib.htm#Numerical Recipes" target="_top"><span style='white-space: nowrap'>Numerical&nbsp;Recipes</span></a>
.
We use <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
 for the size of the vector <i>xi</i>.
Let <code>
<span style='white-space: nowrap'>&nbsp;\R</span></code>
 denote the real numbers
and let <code>
<span style='white-space: nowrap'>&nbsp;F&nbsp;:&nbsp;\R&nbsp;\times&nbsp;\R^n&nbsp;\rightarrow&nbsp;\R^n</span></code>
 be a smooth function.
The return value <i>xf</i> contains a 5th order
approximation for the value <code>
<span style='white-space: nowrap'>&nbsp;X(tf)</span></code>
 where 
<code>
<span style='white-space: nowrap'>&nbsp;X&nbsp;:&nbsp;[ti&nbsp;,&nbsp;tf]&nbsp;\rightarrow&nbsp;\R^n</span></code>
 is defined by 
the following initial value problem:
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X(ti)&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;xi&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X'(t)&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;F[t&nbsp;,&nbsp;X(t)]&nbsp;<br>
\end{array}<br>
\]&nbsp;</span></code>

If your set of ordinary differential equations
are stiff, an implicit method may be better
(perhaps <a href="rosen34.htm" target="_top"><span style='white-space: nowrap'>Rosen34</span></a>
.)

<br>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
The file <code><font color="blue">cppad/runge_45.hpp</font></code> is included by <code><font color="blue">cppad/cppad.hpp</font></code>
but it can also be included separately with out the rest of 
the <code><font color="blue">CppAD</font></code> routines.

<br>
<br>
<b><big><a name="xf" id="xf">xf</a></big></b>
<br>
The return value <i>xf</i> has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>xf</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and the size of <i>xf</i> is equal to <i>n</i> 
(see description of <a href="runge45.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below).
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X(tf)&nbsp;=&nbsp;xf&nbsp;+&nbsp;O(&nbsp;h^6&nbsp;)<br>
\]&nbsp;</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;h&nbsp;=&nbsp;(tf&nbsp;-&nbsp;ti)&nbsp;/&nbsp;M</span></code>
 is the step size.
If <i>xf</i> contains not a number <a href="nan.htm" target="_top"><span style='white-space: nowrap'>nan</span></a>
,
see the discussion for <a href="runge45.htm#Fun.f" target="_top"><span style='white-space: nowrap'>f</span></a>
.

<br>
<br>
<b><big><a name="Fun" id="Fun">Fun</a></big></b>
<br>
The class <i>Fun</i> 
and the object <i>F</i> satisfy the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Fun</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The object <i>F</i> (and the class <i>Fun</i>)
must have a member function named <code><font color="blue">Ode</font></code> 
that supports the syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode(</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><br>
<b><a name="Fun.t" id="Fun.t">t</a></b>
<br>
The argument <i>t</i> to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode</span></font></code> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see description of <a href="runge45.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 below). 

<br>
<br>
<b><a name="Fun.x" id="Fun.x">x</a></b>
<br>
The argument <i>x</i> to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode</span></font></code> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and has size <i>n</i>
(see description of <a href="runge45.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below). 

<br>
<br>
<b><a name="Fun.f" id="Fun.f">f</a></b>
<br>
The argument <i>f</i> to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode</span></font></code> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>On input and output, <i>f</i> is a vector of size <i>n</i>
and the input values of the elements of <i>f</i> do not matter.
On output,
<i>f</i> is set equal to <code>
<span style='white-space: nowrap'>&nbsp;F(t,&nbsp;x)</span></code>
 in the differential equation.
If any of the elements of <i>f</i> have the value not a number <code><font color="blue">nan</font></code>
the routine <code><font color="blue">Runge45</font></code> returns with all the
elements of <i>xf</i> and <i>e</i> equal to <code><font color="blue">nan</font></code>.

<br>
<br>
<b><a name="Fun.Warning" id="Fun.Warning">Warning</a></b>
<br>
The argument <i>f</i> to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode</span></font></code>
must have a call by reference in its prototype; i.e.,
do not forget the <code><font color="blue">&amp;</font></code> in the prototype for <i>f</i>.

<br>
<br>
<b><big><a name="M" id="M">M</a></big></b>
<br>
The argument <i>M</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font></code><i><span style='white-space: nowrap'>M</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the number of steps
to use when solving the differential equation.
This must be greater than or equal one.
The step size is given by <code>
<span style='white-space: nowrap'>&nbsp;h&nbsp;=&nbsp;(tf&nbsp;-&nbsp;ti)&nbsp;/&nbsp;M</span></code>
, thus
the larger <i>M</i>, the more accurate the
return value <i>xf</i> is as an approximation
for <code>
<span style='white-space: nowrap'>&nbsp;X(tf)</span></code>
.

<br>
<br>
<b><big><a name="ti" id="ti">ti</a></big></b>
<br>
The argument <i>ti</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ti</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see description of <a href="runge45.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 below). 
It specifies the initial time for <i>t</i> in the 
differential equation; i.e., 
the time corresponding to the value <i>xi</i>.

<br>
<br>
<b><big><a name="tf" id="tf">tf</a></big></b>
<br>
The argument <i>tf</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>tf</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the final time for <i>t</i> in the 
differential equation; i.e., 
the time corresponding to the value <i>xf</i>.

<br>
<br>
<b><big><a name="xi" id="xi">xi</a></big></b>
<br>
The argument <i>xi</i> has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>xi</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and the size of <i>xi</i> is equal to <i>n</i>.
It specifies the value of <code>
<span style='white-space: nowrap'>&nbsp;X(ti)</span></code>


<br>
<br>
<b><big><a name="e" id="e">e</a></big></b>
<br>
The argument <i>e</i> is optional and has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>e</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>If <i>e</i> is present,
the size of <i>e</i> must be equal to <i>n</i>.
The input value of the elements of <i>e</i> does not matter.
On output
it contains an element by element
estimated bound for the absolute value of the error in <i>xf</i>
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;=&nbsp;O(&nbsp;h^5&nbsp;)<br>
\]&nbsp;</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;h&nbsp;=&nbsp;(tf&nbsp;-&nbsp;ti)&nbsp;/&nbsp;M</span></code>
 is the step size.
If on output, <i>e</i> contains not a number <code><font color="blue">nan</font></code>,
see the discussion for <a href="runge45.htm#Fun.f" target="_top"><span style='white-space: nowrap'>f</span></a>
.

<br>
<br>
<b><big><a name="Scalar" id="Scalar">Scalar</a></big></b>
<br>
The type <i>Scalar</i> must satisfy the conditions
for a <a href="numerictype.htm" target="_top"><span style='white-space: nowrap'>NumericType</span></a>
 type.
The routine <a href="checknumerictype.htm" target="_top"><span style='white-space: nowrap'>CheckNumericType</span></a>
 will generate an error message
if this is not the case.
In addition, the following operations must be defined for 
<i>Scalar</i> objects <i>a</i> and <i>b</i>:

<table><tr><td align='left'  valign='top'>

<b>Operation</b> </td><td align='left'  valign='top'>
 <b>Description</b>  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue"></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>b</span></i> </td><td align='left'  valign='top'>

	less than operator (returns a <code><font color="blue">bool</font></code> object)
</td></tr>
</table>
<br>
<b><big><a name="Vector" id="Vector">Vector</a></big></b>
<br>
The type <i>Vector</i> must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;Scalar</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="runge45.cpp.htm" target="_top"><span style='white-space: nowrap'>Runge45.cpp</span></a>

contains an example and test a test of using this routine.
It returns true if it succeeds and false otherwise.

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>
<br>
The source code for this routine is in the file
<code><font color="blue">cppad/runge_45.hpp</font></code>.


<hr>Input File: cppad/runge_45.hpp

</body>
</html>
