<html><head>
<title>AD Computed Assignment Operators</title>
<meta name="description" id="description" content="AD Computed Assignment Operators">
<meta name="keywords" id="keywords" content=" assignment operator + computed add plus - subtract minus * multiply times / divide multiple ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_compute_assign_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>Arithmetic</option>
<option>compute_assign</option>
</select>
</td>
<td><a href="div.cpp.htm" target="_top">Prev</a>
</td><td><a href="addeq.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Arithmetic-&gt;</option>
<option>UnaryPlus</option>
<option>UnaryMinus</option>
<option>ad_binary</option>
<option>compute_assign</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>compute_assign-&gt;</option>
<option>AddEq.cpp</option>
<option>SubEq.cpp</option>
<option>MulEq.cpp</option>
<option>DivEq.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Op</option>
<option>Base</option>
<option>x</option>
<option>y</option>
<option>Result</option>
<option>Operation Sequence</option>
<option>Example</option>
<option>Derivative</option>
<option>---..Addition</option>
<option>---..Subtraction</option>
<option>---..Multiplication</option>
<option>---..Division</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>AD Computed Assignment Operators</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i>

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Performs computed assignment operations 
where either <i>x</i> has type 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>.

<br>
<br>
<b><big><a name="Op" id="Op">Op</a></big></b>
<br>
The operator <i>Op</i> is one of the following
<table><tr><td align='left'  valign='top'>

<b>Op</b>  </td><td align='left'  valign='top'>
 <b>Meaning</b> </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">+=</font></code>   </td><td align='left'  valign='top'>
 <i>x</i> is assigned <i>x</i> plus <i>y</i> </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">-=</font></code>   </td><td align='left'  valign='top'>
 <i>x</i> is assigned <i>x</i> minus <i>y</i> </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">*=</font></code>   </td><td align='left'  valign='top'>
 <i>x</i> is assigned <i>x</i> times <i>y</i> </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">/=</font></code>   </td><td align='left'  valign='top'>
 <i>x</i> is assigned <i>x</i> divided by <i>y</i> 
</td></tr>
</table>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
The type <i>Base</i> is determined by the operand <i>x</i>.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The operand <i>x</i> has the following prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code><br>
<b><big><a name="y" id="y">y</a></big></b>
<br>
The operand <i>y</i> has the following prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>where <i>Type</i> is
<code><font color="blue"><span style='white-space: nowrap'>VecAD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;::reference</span></font></code>,
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
<i>Base</i>, or
<code><font color="blue">double</font></code>.

<br>
<br>
<b><big><a name="Result" id="Result">Result</a></big></b>


<br>
The result of this assignment 
can be used as a reference to <i>x</i>.
For example, if <i>z</i> has the following type
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>then the syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;+=&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>will compute <i>x</i> plus <i>y</i>
and then assign this value to both <i>x</i> and <i>z</i>. 


<br>
<br>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br>
This is an <a href="glossary.htm#Operation.Atomic" target="_top"><span style='white-space: nowrap'>atomic</span></a>

<a href="glossary.htm#AD of Base" target="_top"><span style='white-space: nowrap'>AD&nbsp;of&nbsp;Base</span></a>
 operation
and hence it is part of the current
AD of <i>Base</i> 
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
.



<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The following files contain examples and tests of these functions.
Each test returns true if it succeeds and false otherwise.
<table><tr><td align='left'  valign='top'>

<a href="addeq.cpp.htm" target="_top">AddEq.cpp</a></td><td>
AD Computed Assignment Addition: Example and Test</td></tr>
<tr><td>

<a href="subeq.cpp.htm" target="_top">SubEq.cpp</a></td><td>
AD Computed Assignment Subtraction: Example and Test</td></tr>
<tr><td>

<a href="muleq.cpp.htm" target="_top">MulEq.cpp</a></td><td>
AD Computed Assignment Multiplication: Example and Test</td></tr>
<tr><td>

<a href="diveq.cpp.htm" target="_top">DivEq.cpp</a></td><td>
AD Computed Assignment Division: Example and Test</td></tr>
<tr><td>

</td></tr>
</table>
<br>
<b><big><a name="Derivative" id="Derivative">Derivative</a></big></b>
<br>
If <code>
<span style='white-space: nowrap'>&nbsp;f</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;g</span></code>
 are 
<a href="glossary.htm#Base Function" target="_top"><span style='white-space: nowrap'>Base&nbsp;functions</span></a>


<br>
<br>
<b><a name="Derivative.Addition" id="Derivative.Addition">Addition</a></b>

<br>
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\D{[&nbsp;f(x)&nbsp;+&nbsp;g(x)&nbsp;]}{x}&nbsp;=&nbsp;\D{f(x)}{x}&nbsp;+&nbsp;\D{g(x)}{x}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="Derivative.Subtraction" id="Derivative.Subtraction">Subtraction</a></b>

<br>
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\D{[&nbsp;f(x)&nbsp;-&nbsp;g(x)&nbsp;]}{x}&nbsp;=&nbsp;\D{f(x)}{x}&nbsp;-&nbsp;\D{g(x)}{x}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="Derivative.Multiplication" id="Derivative.Multiplication">Multiplication</a></b>

<br>
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\D{[&nbsp;f(x)&nbsp;*&nbsp;g(x)&nbsp;]}{x}&nbsp;=&nbsp;g(x)&nbsp;*&nbsp;\D{f(x)}{x}&nbsp;+&nbsp;f(x)&nbsp;*&nbsp;\D{g(x)}{x}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="Derivative.Division" id="Derivative.Division">Division</a></b>

<br>
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\D{[&nbsp;f(x)&nbsp;/&nbsp;g(x)&nbsp;]}{x}&nbsp;=&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1/g(x)]&nbsp;*&nbsp;\D{f(x)}{x}&nbsp;-&nbsp;[f(x)/g(x)^2]&nbsp;*&nbsp;\D{g(x)}{x}<br>
\]&nbsp;</span></code>



<hr>Input File: cppad/local/compute_assign.hpp

</body>
</html>
