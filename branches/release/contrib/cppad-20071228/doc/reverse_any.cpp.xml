<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Any Order Reverse Mode: Example and Test</title>
<meta name="description" id="description" content="Any Order Reverse Mode: Example and Test"/>
<meta name="keywords" id="keywords" content=" reverse any order example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_reverse_any.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Reverse</option>
<option>reverse_any</option>
<option>reverse_any.cpp</option>
</select>
</td>
<td><a href="reverse_any.xml" target="_top">Prev</a>
</td><td><a href="sparse.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Reverse-&gt;</option>
<option>reverse_one</option>
<option>reverse_two</option>
<option>reverse_any</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>reverse_any-&gt;</option>
<option>reverse_any.cpp</option>
</select>
</td>
<td>reverse_any.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Any Order Reverse Mode: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
namespace&#xA0;{&#xA0;//&#xA0;----------------------------------------------------------<br/>
//&#xA0;define&#xA0;the&#xA0;template&#xA0;function&#xA0;reverse_any_cases&lt;Vector&gt;&#xA0;in&#xA0;empty&#xA0;namespace<br/>
template&#xA0;&lt;typename&#xA0;Vector&gt;&#xA0;<br/>
bool&#xA0;reverse_any_cases(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::NearEqual;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;domain&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;3;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;X(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;0.;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[2]&#xA0;=&#xA0;2.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables&#xA0;and&#xA0;start&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;range&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;X[0]&#xA0;*&#xA0;X[1]&#xA0;*&#xA0;X[2];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f&#xA0;:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;and&#xA0;stop&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;double&gt;&#xA0;f(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;define&#xA0;W(t,&#xA0;u)&#xA0;=&#xA0;(u_0&#xA0;+&#xA0;dx_0*t)*(u_1&#xA0;+&#xA0;dx_1*t)*(u_2&#xA0;+&#xA0;dx_2*t)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;zero&#xA0;order&#xA0;forward&#xA0;to&#xA0;evaluate&#xA0;W0(u)&#xA0;=&#xA0;W(0,&#xA0;u)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;u(n),&#xA0;W0(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u[0]&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u[1]&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u[2]&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W0&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(0,&#xA0;u);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;check;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;check&#xA0;&#xA0;&#xA0;=&#xA0;&#xA0;u[0]*u[1]*u[2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(W0[0]&#xA0;,&#xA0;check,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;define&#xA0;W_t(t,&#xA0;u)&#xA0;=&#xA0;partial&#xA0;W(t,&#xA0;u)&#xA0;w.r.t&#xA0;t<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;W_t(t,&#xA0;u)&#xA0;&#xA0;=&#xA0;(u_0&#xA0;+&#xA0;dx_0*t)*(u_1&#xA0;+&#xA0;dx_1*t)*dx_2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;(u_0&#xA0;+&#xA0;dx_0*t)*(u_2&#xA0;+&#xA0;dx_2*t)*dx_1<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;(u_1&#xA0;+&#xA0;dx_1*t)*(u_2&#xA0;+&#xA0;dx_2*t)*dx_0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;first&#xA0;order&#xA0;forward&#xA0;mode&#xA0;to&#xA0;evaluate&#xA0;W1(u)&#xA0;=&#xA0;W_t(0,&#xA0;u)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;dx(n),&#xA0;W1(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[0]&#xA0;=&#xA0;.2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[1]&#xA0;=&#xA0;.3;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[2]&#xA0;=&#xA0;.4;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W1&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;dx);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;check&#xA0;=&#xA0;&#xA0;u[0]*u[1]*dx[2]&#xA0;+&#xA0;u[0]*u[2]*dx[1]&#xA0;+&#xA0;u[1]*u[2]*dx[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(W1[0],&#xA0;check,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;define&#xA0;W_tt&#xA0;(t,&#xA0;u)&#xA0;=&#xA0;partial&#xA0;W_t(t,&#xA0;u)&#xA0;w.r.t&#xA0;t<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;W_tt(t,&#xA0;u)&#xA0;=&#xA0;2*(u_0&#xA0;+&#xA0;dx_0*t)*dx_1*dx_2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;2*(u_1&#xA0;+&#xA0;dx_1*t)*dx_0*dx_2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;2*(u_3&#xA0;+&#xA0;dx_3*t)*dx_0*dx_1<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;second&#xA0;order&#xA0;forward&#xA0;to&#xA0;evaluate&#xA0;W2(u)&#xA0;=&#xA0;1/2&#xA0;*&#xA0;W_tt(0,&#xA0;u)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;ddx(n),&#xA0;W2(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ddx[0]&#xA0;=&#xA0;ddx[1]&#xA0;=&#xA0;ddx[2]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;W2&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(2,&#xA0;ddx);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;check&#xA0;&#xA0;=&#xA0;&#xA0;u[0]*dx[1]*dx[2]&#xA0;+&#xA0;u[1]*dx[0]*dx[2]&#xA0;+&#xA0;u[2]*dx[0]*dx[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(W2[0],&#xA0;check,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;third&#xA0;order&#xA0;reverse&#xA0;mode&#xA0;to&#xA0;evaluate&#xA0;derivatives<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p&#xA0;=&#xA0;3;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;w(m),&#xA0;dw(n&#xA0;*&#xA0;p);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w[0]&#xA0;&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dw&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Reverse(p,&#xA0;w);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;derivative&#xA0;of&#xA0;W0(u)&#xA0;w.r.t.&#xA0;u<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[0*p+0],&#xA0;u[1]*u[2],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[1*p+0],&#xA0;u[0]*u[2],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[2*p+0],&#xA0;u[0]*u[1],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;derivative&#xA0;of&#xA0;W1(u)&#xA0;w.r.t.&#xA0;u<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[0*p+1],&#xA0;u[1]*dx[2]&#xA0;+&#xA0;u[2]*dx[1],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[1*p+1],&#xA0;u[0]*dx[2]&#xA0;+&#xA0;u[2]*dx[0],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[2*p+1],&#xA0;u[0]*dx[1]&#xA0;+&#xA0;u[1]*dx[0],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;derivative&#xA0;of&#xA0;W2(u)&#xA0;w.r.t&#xA0;u<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[0*p+2],&#xA0;dx[1]*dx[2],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[1*p+2],&#xA0;dx[0]*dx[2],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[2*p+2],&#xA0;dx[0]*dx[1],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
}&#xA0;//&#xA0;End&#xA0;empty&#xA0;namespace&#xA0;<br/>
#&#xA0;include&#xA0;&lt;vector&gt;<br/>
#&#xA0;include&#xA0;&lt;valarray&gt;<br/>
bool&#xA0;reverse_any(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;reverse_any_cases&lt;&#xA0;CppAD::vector&#xA0;&#xA0;&lt;double&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;reverse_any_cases&lt;&#xA0;std::vector&#xA0;&#xA0;&#xA0;&#xA0;&lt;double&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;reverse_any_cases&lt;&#xA0;std::valarray&#xA0;&#xA0;&lt;double&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: example/reverse_any.cpp

</body>
</html>
