$comment
%************************************************************************
%                                                                       *
%  From:   Resource Facility for Population Kinetics                    *
%          Department of Bioengineering Box 352255                      *
%          University of Washington                                     *
%          Seattle, WA 98195-2255                                       *
%                                                                       *
%  Copyright (C) 2002, University of Washington,                        *
%  Resource Facility for Population Kinetics. All Rights Reserved.      *
%                                                                       *
%  This software was developed with support from NIH grant RR-12609.    *
%  Please cite this grant in any publication for which this software    *
%  is used and send a notification to the address given above.          *
%                                                                       *
%  Check for updates and notices at:                                    *
%  http://www.rfpk.washington.edu                                       *
%                                                                       *
%************************************************************************

$$
$begin SpkModel$$
$spell
	Model model 
    ind
    distrib
    inv 
    non 
    const 
    virtuals 
    instantiate 
    fi 
    int
    nr
    Spk
    cerr
    endl
    covariance
    covariances
    inx
    Bayesian
    SpkModel
    bool
    resize
    cov
    valarray
    std
$$

$section SPK Model Base Class$$

$index SpkModel$$
$cindex \SPK Model Base Class$$

$head Description$$
$code SpkModel$$ serves as the base class for SPK model classes.
It is declared in $code SpkModel.h$$.
This class provides the mechanism for SPK to obtain values from 
model functions at various evaluation points.
In particular, objects of type $code SpkModel$$ possess member 
functions that return values for the mean of the data $math%f%$$, 
the covariance of the data $math%R%$$, 
the covariance of the individual parameters $math%D%$$,
and their derivatives with respect to both the 
population parameters $italic alp$$ and the individual parameters
$italic b$$.
$pre

$$
There are two ways to implement $code SpkModel$$ subclasses 
depending on whether these $code SpkModel$$ objects will be used
for individual analysis, i.e., for estimating individual parameters,
or whether they will be used for the population analysis, i.e.,
for estimating population parameters.

$head Note on Redefining Virtual Functions$$
Many of the virtual functions of this base class are provided 
with default implementations that will throw an exception if they
are called.
Before any of these virtual functions can be 
called they must therefore be redefined.
However, if some of these virtual functions are not required for 
the type of analysis that the $code SpkModel$$ object will be 
used to perform, then those functions can be left as they are.
$pre

$$
For example, if the model will only be used for individual 
analysis, then the functions required for population analysis
do not need to be redefined.
Or, if the model will only be used to estimate individual parameters
using an extended least squares objective function rather than
a MAP Bayesian objective function, then the function
$xref/SpkModel_indParVariance//SpkModel::indParVariance()/$$ 
will not be called and does not need a new
definition.

$head Individual Analysis$$
In order to implement a concrete subclass of $code SpkModel$$ 
that will be used for individual analysis some of the virtual 
functions of the class must be provided with new definitions. 

$subhead Functions that Must be Defined$$
For estimating an individual parameters using an extended least 
squares objective function, the following virtual functions must 
be defined.
$pre

$$
$table
$tref SpkModel_setIndPar$$  $rend
$tref SpkModel_dataMean$$    $rend
$tref SpkModel_dataMean_indPar$$  $rend
$tref SpkModel_dataVariance$$    $rend
$tref SpkModel_dataVariance_indPar$$
$tend

$subhead Functions that may be Redefined Optionally$$
The following function is optional for individual analysis.  
It must be defined, however, if the
model will be used to estimate individual parameters
using a MAP Bayesian objective function, i.e., one that includes 
the terms involving the covariance of the individual parameters
$pre

$$
$table
$tref SpkModel_indParVariance$$
$tend

$subhead Functions that Can be Redefined for Better Performance$$
The following are provided with default definitions that may 
be redefined to make them faster.
$pre

$$
$table
$tref SpkModel_dataVarianceInv$$   $rend
$tref SpkModel_dataVarianceInv_indPar$$
$tend
$pre

$$
The following is also provided with a default definition that may 
be redefined to make it faster if the
model will be used to estimate individual parameters
using a Bayesian objective function.
$pre

$$
$table
$tref SpkModel_indParVarianceInv$$
$tend

$head Population Analysis$$
In order to implement a concrete subclass of $code SpkModel$$ 
that will be used for population analysis some of the virtual 
functions of the class must be provided with new definitions. 

$subhead Functions that Must be Redefined$$
For estimating population parameters, the following virtual functions 
must be redefined in addition to both the required and optional 
functions definitions for individual analysis that were listed above.
$pre

$$
$table
$tref SpkModel_setPopPar$$       $rend
$tref SpkModel_selectIndividual$$       $rend      
$tref SpkModel_dataMean_popPar$$       $rend
$tref SpkModel_dataVariance_popPar$$       $rend
$tref SpkModel_indParVariance$$          $rend
$tref SpkModel_indParVariance_popPar$$
$tend

$subhead Functions that Can be Redefined for Better Performance$$
The following are provided with default definitions that may 
be redefined to make them faster.
$pre

$$
$table
$tref SpkModel_dataVarianceInv_popPar$$    $rend
$tref SpkModel_indParVarianceInv$$       $rend
$tref SpkModel_indParVarianceInv_popPar$$
$tend

$head State Considerations$$

Objects of type $code SpkModel$$ possess state setting 
functions that SPK calls
in order to set the current individual $math%i%$$, 
the current population parameters $math%alp%$$, and 
the current individual parameters $math%b%$$.
SPK uses the state setting functions to indicate for which 
values of $math%i%$$, $math%alp%$$, and $math%b%$$ that 
$math%f%$$, $math%R%$$, $math%D%$$, and their derivatives 
should be evaluated.

$subhead Making the Model Functions Depend on i, alp, and b$$
$xref/glossary/Model Functions Depend on i - alp - b/Click here/$$.


$subhead Making the Model Functions Depend on alp and b$$
$xref/glossary/Model Functions Depend on alp and b/Click here/$$.


$subhead Making the Model Functions Depend on only b$$
$xref/glossary/Model Functions Depend on only b/Click here/$$.

$childtable/
        SpkModel.cpp/$$

$head Example$$
The following code demonstrates an implementation of $code SpkModel$$ for 
the population analysis, using the default implementations of
$code doDataVarianceInv()$$, $code doDataVarianceInv_indPar()$$, 
$code doDataVarianceInv_popPar()$$, $code doIndParVarianceInv()$$,
and $code doIndParVarianceInv_popPar()$$.

$codep

    #include "SpkModel.h"
    #include "SpkException.h"
    #include "SpkValarray.h"

    const int N = 10;                     // #of individuals in the population
    const int Y = {3,2,4,1,5,3,4,10,8, 5} // #of measurements for each individuals
    const MAX_POP_ITER = 10;              // max# of iterations for population parameters optimization
    const MAX_INT_ITER = 5;               // max# of iterations for individual parameters optimization


    //
    // Use a particular implementation of valarray, SPK_VA::valarray.
    // By default, without explicitly setting a macro at compilation time, 
    // SPK_VA::valarray is set to std::valarray.
    // SPK_VA is defined in "SpkValarray.h".
    //
    using SPK_VA::valarray;

    class UserPopModel : public SpkModel
    {
        //
        // Place to keep track of current active individual.
        // SPK calls doSelectIndividual() defined in this subclass,
        // as it iterates over the population.
        // So, you may not change this value yourself.
        // You can only reference the value.
        //
        int _who;

        //
        // Place to keep track of current estimated population parameters.
        // SPK calls doSetPopPar() defined in this subclass,
        // as it iterates during the population level optimization effort.
        // So, you may not change this value yourself.
        // You can only reference the value.
        //
        valarray<double> _popPar;
        
        //
        // Place to keep track of current estimated population parameters.
        // SPK calls doSetIndPar() defined in this subclass,
        // as it iterates during individual level optimization efforts.
        // So, you may not change this value yourself.
        // You can only reference the value.
        //
        valarray<double> _indPar;

    public:

        //
        // This particular class only defines the default constructor,
        // which does nothing but initializing private members.
        // You can define more constructors to match your needs.
        //
        UserPopModel()
        : _who(0), _indPar(0), _popPar(0) 
        {}

        //
        // This particular class does not allocate memory dynamically.
        // So, there are not much to do here.
        //
        ~UserPopModel()
        {}

    
    /***********************************************
     *
     *   Virtual Members that You Define
     *
     *
     * NOTE: All these virtual member functions
     *       are private that have corresponding
     *       public interfaces defined in the base
     *       SpkModel class.
     *
     *       These private members are called via
     *       corresponding public interfaces
     *       within SPK.  
     *        
     *       For doSetXXX(), you shall never
     *       call them unless you are unit testing
     *       this class.
     *       
     ***********************************************/
    private:


        //
        // SPK calls this member as it iterates over the population.
        // The value will be in the range of 0 to N-1,
        // where 0 indicates the first individual in the population.
        //
        // The corresponding public interface for this function
        // is void SpkModel::selectIndividual( int who ).
        //
        // Do not call this function yourself unless you are
        // unit testing this class, or SPK cannot guarantee
        // any results.
        // 
        virtual void doSelectIndividual(int who) 
        {
            _who = who;
        }

        //
        // SPK calls this member during population level
        // optimization effort.
        //
        // The corresponding public interface for this function
        // is void SpkModel::setPopPar( const valarray<double> ).
        //
        // Do not call this function yourself unless you are
        // unit testing this class, or SPK cannot guarantee
        // any results.
        // 
        virtual void doSetPopPar(const valarray<double>& alp)
        {
            _popPar = alp;
        }

        //
        // SPK calls this member during individual level
        // optimization efforts.
        //
        // The corresponding public interface for this function
        // is void SpkModel::setIndPar( const valarray<double> ).
        //
        // Do not call this function yourself unless you are
        // unit testing this class, or SPK cannot guarantee
        // any results.
        // 
        virtual void doSetIndPar(const valarray<double>& b)
        {
            _indPar = b;
        }

        //
        // Evaluate f( _popPar, _indPar, _who ).
        //
        virtual void doDataMean( valarray<double>& fOut ) const
        {
            //
            // f(popPar, indPar) is a model for the mean of data, which
            // is a vector valued function.
            // The size of the resulting vector is the same as
            // the number of measurements for a particular
            // individual.
            // The number is stored in a global array, Y.
            //
            fOut.resize( Y[_who] );

            //
            // compute the mean of data for each different individual
            //
            switch( _who )
            {
                case 0:
                    fOut = ...  // set the value for the first individual
                    break;
                case 1:
                    fOut = ...  // set the value for the second individual
                    break;
                ...
                default: break;
            }
        }

        //
        // Evaluate the derivative of f( _popPar, _indPar, _who ) with
        // respect to _indPar.
        //
        virtual bool doDataMean_indPar( valarray<double>& f_indParOut ) const
        {
            //
            // f(popPar, indPar) is a model for the mean of data, which
            // is a vector valued function. Therefore, the derivative
            // of f(popPar, indPar) with respect to indPar
            // is a Y[_who] by #indPar matrix.
            //
            f_indParOut.resize( Y[_who] * _indPar.size() );

            //
            // compute the mean of data for each different individual
            //
            switch( _who )
            {
                case 0:
                    f_indParOut = ...  // Set the value for the first individual
                                       // In this example, we know the derivative
                                       // for this individual is NOT all zero.
                                       // So, return true.
                    return true;
                    break;
                case 1:
                    f_indParOut = ...  // Set the value for the second individual
                                       // In this example, we know the derivative
                                       // for this individual is all zero.
                                       // So, return false.
                    return false;

                ...
                default: break;
            }

            return true;
        }

        //
        // Evaluate the derivative of f( _popPar, _indPar, _who ) with
        // respect to _popPar.
        //
        virtual bool doDataMean_popPar( valarray<double>& f_popParOut ) const
        {
            //
            // f(popPar, indPar) is a model for the mean of data, which
            // is a vector valued function. Therefore, the derivative
            // of f(popPar, indPar) with respect to popPar
            // is a Y[_who] by #popPar matrix.
            //
            f_popParOut.resize( Y[_who] * _popPar.size() );

            //
            // compute the mean of data for each different individual
            //
            switch( _who )
            {
                case 0:
                    f_indParOut = ...  // Set the value for the first individual
                                       // In this example, we know the derivative
                                       // for this individual is all zero.
                                       // So, return false.
                    return false;
                    break;
                case 1:
                    f_indParOut = ...  // Set the value for the second individual
                                       // In this example, we know the derivative
                                       // for this individual is all zero.
                                       // So, return false.
                    return false;

                ...
                default: break;
            }

            return true;
        }

        //
        // Evaluate R( _popPar, _indPar, _who ).
        //
        virtual void doDataVariance( valarray<double>& ROut) const
        {
            //
            // R(popPar, indPar) is a model for the covariance of data, which
            // is a matrix valued function.
            // The resulting matrix is a positive symmetric matrix of
            // size equal to the number of measurements for a particular
            // individual.  The number is stored in a global array, Y.
            //
            ROut.resize( Y[_who] * Y[_who] );

            //
            // compute the covariance of data for each different individual
            //
            switch( _who )
            {
                case 0:
                    ROut = ...  // set the value for the first individual
                    break;
                case 1:
                    ROut = ...  // set the value for the second individual
                    break;
                ...
                default: break;
            }
        }

        //
        // Evaluate the derivative of R( _popPar, _indPar, _who ) with
        // respect to _indPar.
        //
        virtual bool doDataVariance_indPar( valarray<double>& R_indParOut ) const
        {
            //
            // R(popPar, indPar) is a model for the covariance of data, which
            // is a matrix valued function. Therefore, the derivative
            // of R(popPar, indPar) with respect to indPar
            // is a Y[_who] * Y[_who] by #indPar matrix.
            //
            R_indParOut.resize( Y[_who] * Y[_who] * _indPar.size() );

            //
            // compute the covariance of data for each different individual
            //
            switch( _who )
            {
                case 0:
                    R_indParOut = ...  // Set the value for the first individual
                                       // In this example, we know the derivative
                                       // for this individual is NOT all zero.
                                       // So, return true.
                    return true;
                case 1:
                    R_indParOut = ...  // Set the value for the second individual
                                       // In this example, we know the derivative
                                       // for this individual is all zero.
                                       // So, return false.
                    return false;
                ...
                default: break;
            }
            return true;
        }

        //
        // Evaluate the derivative of R( _popPar, _indPar, _who ) with
        // respect to _popPar.
        //
        virtual bool doDataVariance_popPar( valarray<double>& R_popParOut ) const
        {
            //
            // R(popPar, indPar) is a model for the covariance of data, which
            // is a matrix valued function. Therefore, the derivative
            // of R(popPar, indPar) with respect to popPar
            // is a Y[_who] * Y[_who] by #popPar matrix.
            //
            R_popParOut.resize( Y[_who] * Y[_who] * _popPar.size() );

            //
            // compute the covariance of data for each different individual
            //
            switch( _who )
            {
                case 0:
                    R_popParOut = ...  // Set the value for the first individual
                                       // In this example, we know the derivative
                                       // for this individual is NOT all zero.
                                       // So, return true.
                    return true;
                case 1:
                    R_popParOut = ...  // Set the value for the second individual
                                       // In this example, we know the derivative
                                       // for this individual is all zero.
                                       // So, return false.
                    return false;
                ...
                default: break;
            }
            return true;
        }

        //
        // Evaluate D( _popPar ).
        //
        virtual void doIndParVariance( valarray<double>& DOut ) const
        {
            //
            // D(popPar) is a model for the variance of individual parameters, 
            // which is a matrix valued function.
            // The resulting matrix is a positive symmetric matrix of
            // size equal to the size of individual parameters.
            //
            DOut.resize( _indPar.size() * _indPar.size() );

            DOut = ... // Set the value
        }

        //
        // Evaluate the derivative of D( _popPar ) with respect to _popPar.
        //
        virtual bool doIndParVariance_popPar( valarray<double>& D_popParOut ) const
        {
            //
            // D(popPar) is a model for the variance of individual parameters, 
            // which is a matrix valued function.
            // Therefore, the derivative of D(popPar) with respect to
            // popPar has the dimensions of ( #indPar * #indPar ) by #popPar
            //
            D_popParOut.resize( _indPar.size() * _indPar.size() * _popPar.size() );

            D_popParOut = ... // Set the value

            // 
            // In this example, we know D_popPar has some non-zero values in it.
            // So, return true.
            return true;
        }
    }
    void main()
    {
        // Instantiate the user-implemented SpkModel
        UserPopModel model;
      
        valarray<double> dataMean_popParOut;
        valarray<double> dataVariance_popParOut;
        valarray<double> dataVarianceInv_popParOut;
        valarray<double> indParVariance_popParOut;
        valarray<double> indParVarianceInv_popParOut;

        valarray<double> dataMeanOut;
        valarray<double> dataMean_indParOut;
        valarray<double> dataVarianceOut;
        valarray<double> dataVariance_indParOut;
        valarray<double> dataVarianceInvOut;
        valarray<double> dataVarianceInv_indParOut;
        valarray<double> indParVarianceOut;
        valarray<double> indParVarianceInvOut;

        //
        // Set the initial value for population parameters.
        //
        valarray<double> popParIn(nPopPar);
        popParIn = someInitialValueForPopPar;


        //
        // Set the initial values for all individuals'
        // individual parameters.
        // 
        // j-th column contains j-th individual's initial parameters.
        //
        valarray<double> indParAllIn(nIndPar * N);
        indParAllIn = someInitialValuesForIndPars;

        //
        // This outer loop demonstrates what fitPopulation()
        // does in an over-simplified fashion.
        //
        newPopPar    = popParIn;
        newIndParAll = indParAllIn;
        for( int j=0; j<MAX_POP_ITER; j++ )
        {        
            //
            // Set the current population parameters
            //
            model.setPopPar( newPopPar );

            //
            // Iterate over the population.
            //
            for( int who=0; who<N; who++ )
            {
                //
                // Select an individual
                //
                model.selectIndividual( who );

                //
                // Set the initial value for this particular individual's
                // parameters.
                //
                newIndPar = newIndParAll[ slice( who * nIndPar, nIndPar, 1 ) ];

                //
                // This inner loop demonstrates what fitIndividual()
                // does in an over-simplified fashion.
                //
                for(int i=0; i<MAX_IND_ITER; i++)
                {
                    //
                    // Any of these model member functions may throw
                    // if they detect an error.
                    // Here, a single try-catch block takes care of
                    // all calls but, in practice, this should be 
                    // done individually.
                    // 
                    try{
                        model.dataMean(dataMeanOut);
                        model.dataMean_indPar(dataMean_indParOut);

                        model.dataVariance(dataVarianceOut);
                        model.dataVariance_indPar(dataVariance_indParOut);

                        model.dataVarianceInv(dataVarianceInvOut);
                        model.dataVarianceInv_indPar(dataVarianceInv_indParOut);

                        model.indParVariance(indParVarianceOut);
                        model.indParVarianceInv(indParVarianceInvOut);
                    }
                    catch( const SpkException& e )
                    {
                        //
                        // Print out the exception and quit.
                        //
                        cerr << e << endl;
                        exit(-1);
                    }

                    //
                    // Estimate this individual's parameters
                    // and set it for the next iteration.
                    //
                    newIndPar = ... 
                    model.setIndPar(newIndPar);
                }
                newIndParAll[ slice( who * nIndPar, nIndPar, 1 ) ] = newIndPar;
            }

            try{
                model.dataMean_popPar(dataMean_popParOut);
                model.dataVariance_popPar(dataVariance_popParOut);
                model.dataVarianceInv_popPar(dataVarianceInv_popParOut);
                model.indParVariance_popPar(indParVariance_popParOut);
                model.indParVarianceInv_popPar(indParVarianceInv_popParOut);
            }
            catch(const SpkException& e)
            {
                cerr << e << endl;
                exit(-1);
            }

            //
            // Estimate this population parameters
            // and set it for the next iteration.
            //
            newPopPar = ... 
        }
    }
$$
$pre

$$
$center
$italic
$include shortCopyright.txt$$
$$
$$
$end
