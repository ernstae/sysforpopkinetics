/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.wizard;

import uw.rfpk.mda.nonmem.Utility; 
import org.netbeans.ui.wizard.*;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.BadLocationException;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;

/**
 * This class defines a step to create the $THETA record.
 * @author Jiaji Du
 */
public class Theta extends javax.swing.JPanel implements WizardStep {
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this; 
    private int nTheta = 0;
    private int index = -1;
    private int highlight = 0;
    private boolean isValid = false;
    private MDAIterator iterator = null;
    private DefaultListModel model = null; 
    private JWizardPane wizardPane = null;
    private DefaultHighlighter high1 = new DefaultHighlighter();
    private DefaultHighlighter high2 = new DefaultHighlighter();
    private DefaultHighlighter high3 = new DefaultHighlighter();    
    private DefaultHighlighter.DefaultHighlightPainter highlight_painter =
            new DefaultHighlighter.DefaultHighlightPainter(new Color(200,200,250));

    /** Creates new form Theta.
     * @param iter a MDAIterator object to initialize the field iterator.     
     */
    public Theta(MDAIterator iter) { 
        iterator = iter;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        changeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setFocusable(false);
        jTextField1.setFocusCycleRoot(true);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 125;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 9, 10);
        add(jTextField1, gridBagConstraints);

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField2MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 11, 10);
        add(jTextField2, gridBagConstraints);

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 16, 7, 12);
        add(addButton, gridBagConstraints);

        upButton.setText("Up");
        upButton.setEnabled(false);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(16, 16, 7, 12);
        add(upButton, gridBagConstraints);

        downButton.setText("Down");
        downButton.setEnabled(false);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 56, 12);
        add(downButton, gridBagConstraints);

        jTextPane1.setBackground(new java.awt.Color(238, 238, 238));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Enter initial estimates and bounds (except that FIXED is selected) \n- To get default bounds, press ENTER after entering initial estimate\n- Bounds influence stopping criteria (INF bounds not recommended)\n- Note: exponential expression may not be NONMEM compatible");
        jTextPane1.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(238, 238, 238));
        jTextPane2.setEditable(false);
        jTextPane2.setText("List of fixed\neffect values\nand limits you\nhave entered\nin NONMEM\nSyntax");
        jTextPane2.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 12, 12, 0);
        add(jTextPane2, gridBagConstraints);

        changeButton.setText("Change");
        changeButton.setEnabled(false);
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 6, 12);
        add(changeButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 12);
        add(deleteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jSeparator2, gridBagConstraints);

        model = new DefaultListModel();
        jList1 = new javax.swing.JList(model);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFixedCellHeight(15);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 88;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 12, 16);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Lower Bound");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 12, 9, 12);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Initial Estimate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 12, 11, 12);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Upper Bound");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 12, 22, 12);
        add(jLabel3, gridBagConstraints);

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });
        jTextField3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField3MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 20, 10);
        add(jTextField3, gridBagConstraints);

        jCheckBox1.setText("-INF");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 6, 10);
        add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("FIXED");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 9, 10);
        add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText("INF");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 18, 10);
        add(jCheckBox3, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        if(evt.getKeyCode() == 10)
        {     
            if(highlight == 3)
            {
                high3.removeAllHighlights();
                highlight = 0;
            }            
            try
            {
                int length = jTextField2.getText().length();
                if(length > 0)
                {                
                    jTextField2.setHighlighter(high2);
                    high2.addHighlight(0, length, highlight_painter);
                    jTextField2.requestFocusInWindow();
                    highlight = 2;
                }
            }
            catch(BadLocationException e) 
            {
                JOptionPane.showMessageDialog(null, e, "BadLocationException", JOptionPane.ERROR_MESSAGE);
            }           
        }
    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if(evt.getKeyCode() == 10)
        {
            if(highlight == 1)
            {
                high1.removeAllHighlights();
                highlight = 0;
            }
            try
            {
                int length = jTextField3.getText().length();
                if(length > 0)
                {                
                    jTextField3.setHighlighter(high3);
                    high3.addHighlight(0, length, highlight_painter);
                    jTextField3.requestFocusInWindow();
                    highlight = 3;
                }
            }
            catch(BadLocationException e) 
            {
                JOptionPane.showMessageDialog(null, e, "BadLocationException", JOptionPane.ERROR_MESSAGE);
            }           
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        if(evt.getKeyCode() == 10)
        {
            String text = jTextField2.getText().trim();
            if(!Utility.isFloatNumber(text))
            {
                JOptionPane.showMessageDialog(null, 
                                              "The Initial Estimate is not a floating " +
                                              "point number.",   
                                              "Input Error",    
                                              JOptionPane.ERROR_MESSAGE);
                return;
            }
       
            String text1 = "0";
            String text3 = "0";
            boolean isMinus = false;
            if(text.startsWith("-"))
            {
                text = text.substring(1);
                isMinus = true;
            }
            if(text.startsWith("0") && text.length() > 1)
                text = text.substring(1);
            while(text.endsWith("0") && text.indexOf(".") != -1)
                text = text.substring(0, text.length() - 1);
            if(!text.equals(".") && !text.equals(" ") && !text.equals("0"))
            {
                int l = text.length();
                int i = text.indexOf('.');
                if(i == -1)
                {
                    text1 = text.substring(0, l - 1) + "." + text.charAt(l - 1);
                    text3 = text + "0";
                }
                else if(i == 0)
                {
                    text1 = ".0" + text.substring(1);
                    text3 = text.charAt(1) + "." + text.substring(2);
                }
                else if(i == l - 1)
                {
                    text1 = text.substring(0, l - 2) + "." + text.charAt(l - 2);
                    text3 = text.replace('.', '0');
                }
                else
                {
                    text1 = text.substring(0, i - 1) + "." + text.charAt(i - 1) + text.substring(i + 1);
                    text3 = text.substring(0, i) + text.charAt(i + 1) + "." + text.substring(i + 2);     
                }
            }
            if(isMinus)
            {
                jTextField1.setText("-" + text3);
                jTextField3.setText("-" + text1);
            }
            else
            {
                jTextField1.setText(text1);
                jTextField3.setText(text3);               
            }

            jCheckBox1.setSelected(false);
            jCheckBox2.setSelected(false);
            jCheckBox3.setSelected(false);
            jCheckBox1.setEnabled(true);
            jCheckBox3.setEnabled(true);            
            jTextField1.setEnabled(true);
            jTextField3.setEnabled(true);
                
            if(highlight == 2)
            {
                high2.removeAllHighlights();
                highlight = 0;
            }
            try
            {
                int length = jTextField1.getText().length();
                if(length > 0)
                {
                    jTextField1.setHighlighter(high1);
                    high1.addHighlight(0, length, highlight_painter);
                    jTextField1.requestFocusInWindow();
                    highlight = 1;
                }
            }
            catch(BadLocationException e) 
            {
                JOptionPane.showMessageDialog(null, e, "BadLocationException", JOptionPane.ERROR_MESSAGE);
            }           
        }
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jTextField3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField3MouseClicked
        if(highlight == 3)
        {
            high3.removeAllHighlights(); 
            highlight = 0;
        }
    }//GEN-LAST:event_jTextField3MouseClicked

    private void jTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MouseClicked
        if(highlight == 2)
        {
            high2.removeAllHighlights();        
            highlight = 0;
        }
    }//GEN-LAST:event_jTextField2MouseClicked

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        if(highlight == 1)
        {
            high1.removeAllHighlights();  
            highlight = 0;
        }
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        addButton.setEnabled(true);
        if(highlight == 2)
        {
            jTextField2.setText("");
            high2.removeAllHighlights();  
            highlight = 0;            
        }
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        index = jList1.getSelectedIndex();
        
        // Reload selected value
        String selectedValue = (String)jList1.getSelectedValue();
        selectedValue = selectedValue.substring(1, selectedValue.length() - 1);
        if(selectedValue.endsWith("FIXED"))
        {
            jCheckBox2.setSelected(true);
            jCheckBox1.setSelected(false);
            jCheckBox3.setSelected(false);
            jCheckBox1.setEnabled(false);
            jCheckBox3.setEnabled(false);            
            jTextField2.setText(selectedValue.split(" ")[0]);
            jTextField1.setText("");
            jTextField3.setText("");
            jTextField1.setEnabled(false);
            jTextField3.setEnabled(false);          
        }
        else
        {
            String[] items = selectedValue.split(",");        
            jCheckBox2.setSelected(false);
            if(items[0].equals("-1000000"))
            {
                jCheckBox1.setSelected(true);
                jTextField1.setEnabled(false);             
            }
            else
            {
                jCheckBox1.setSelected(false);
                jTextField1.setEnabled(true);             
            }
            if(items[2].equals("1000000"))
            {
                jCheckBox3.setSelected(true);
                jTextField3.setEnabled(false);             
            }
            else
            {
                jCheckBox3.setSelected(false);
                jTextField3.setEnabled(true);             
            }            
            jCheckBox1.setEnabled(true);
            jCheckBox3.setEnabled(true);            
            jTextField2.setText(items[1]);
            jTextField1.setText(items[0]);
            jTextField3.setText(items[2]);
        }
        
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_jList1MouseClicked

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        jCheckBox3.setSelected(false);
        if(highlight == 3)
        {
            jTextField3.setText("");
            high3.removeAllHighlights();  
            highlight = 0;            
        }
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        jCheckBox1.setSelected(false);
        if(highlight == 1)
        {
            high1.removeAllHighlights();  
            highlight = 0;           
            jTextField1.setText("");
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if(jCheckBox3.isSelected())
        {
            jTextField3.setText("1000000");
            jTextField3.setEnabled(false);
        }
        else
        {
            jTextField3.setText("");
            jTextField3.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
        {
            jTextField1.setText("-1000000");
            jTextField1.setEnabled(false);
        }
        else
        {
            jTextField1.setText("");
            jTextField1.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if(jCheckBox2.isSelected())
        {
            jCheckBox1.setSelected(false);
            jCheckBox3.setSelected(false);
            jCheckBox1.setEnabled(false);
            jCheckBox3.setEnabled(false);            
            jTextField1.setText("");
            jTextField3.setText("");
            jTextField1.setEnabled(false);
            jTextField3.setEnabled(false);
        }
        else
        {
            jCheckBox1.setEnabled(true);
            jCheckBox3.setEnabled(true);            
            jTextField1.setEnabled(true);
            jTextField3.setEnabled(true);            
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Remove the selected element
        model.removeElement(jList1.getSelectedValue());
        jList1.setSelectedIndex(--index);

        // Set add, change, delete and left buttons
        addButton.setEnabled(true);
        isValid = model.getSize() == nTheta;
        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        if(model.getSize() == 0 || index == -1)
        {
            changeButton.setEnabled(false);
            deleteButton.setEnabled(false); 
        }

        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // Remove the selected element
        model.removeElement(jList1.getSelectedValue());
        
        // Prepare to add
        String element = prepareToAdd();
        if(element == null) return;        

        // Add the element to the list
        model.add(index, element);     
        jList1.setSelectedIndex(index);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_changeButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        jList1.setSelectedIndex(++index);
        if(index == 0)
        {
            changeButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_downButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Prepare to add
        String element = prepareToAdd();
        if(element == null) return; 
        
        // add the element to the list
        model.add(++index, element);
        jList1.setSelectedIndex(index);
        
        // Set add and left options
        if(model.getSize() == nTheta && nTheta != 0)
        {
            addButton.setEnabled(false);
            isValid = true;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        }
        
        // Set change and delete buttons
        if(model.getSize() > 0)
        {
            changeButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
     
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_addButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        jList1.setSelectedIndex(--index);

        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_upButtonActionPerformed
    
    private String prepareToAdd()
    {
        // Check if addable
        if(model.getSize() == nTheta)
        {
            addButton.setEnabled(false);
            String step = iterator.getIsPred() ? "Model Definition step ($PRED record)." : 
                                                 "Model Parameters step ($PK record).";
            JOptionPane.showMessageDialog(null, 
                                          "The number of fixed effects parameters (THETA) is " + nTheta + 
                                          " found in " + step,   
                                          "Input Error.",    
                                          JOptionPane.ERROR_MESSAGE);
            return null;
        }
        
        // Pick up the text box content
        String text1 = jTextField1.getText().trim(); 
        String text2 = jTextField2.getText().trim(); 
        String text3 = jTextField3.getText().trim();  
        
        // Check if text1, text2 and text3 are numbers
        if(!jCheckBox2.isSelected() && !Utility.isFloatNumber(text1))
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Lower Bound is not a floating " +
                                          "point number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);           
            return null;
        }
        if(!Utility.isFloatNumber(text2))
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Initial Estimate is not a floating " +
                                          "point number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return null;
        }
        if(!jCheckBox2.isSelected() && !Utility.isFloatNumber(text3))
        { 
            JOptionPane.showMessageDialog(null, 
                                          "The Upper Bound is not a floating " +
                                          "point number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return null;
        }
        
        // Check if text1, text2 and text3 are in order
        if(!jCheckBox2.isSelected() && new Double(text1).doubleValue() > new Double(text2).doubleValue())
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Lower Bound is greater than " +
                                          "the Initial Estimate.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return null;
        }
        if(!jCheckBox2.isSelected() && new Double(text2).doubleValue() > new Double(text3).doubleValue())
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Upper Bound is smaller than " +
                                          "the Initial Estimate.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                    
            return null;
        }

        // Check if text1, text2 and text3 are too long
        if(text1.length() > 8)
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Lower Bound has more than 8 characters.\n" +
                                          "It is fine for SPK, but the generated control\n" +
                                          "file may not be accepted by NONMEM.",   
                                          "Warning Message",    
                                          JOptionPane.INFORMATION_MESSAGE);           
        }
        if(text2.length() > 8)
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Initial Estimate has more than 8 characters.\n" +
                                          "It is fine for SPK, but the generated control\n" +
                                          "file may not be accepted by NONMEM.",   
                                          "Warning Message",    
                                          JOptionPane.INFORMATION_MESSAGE);           
        }
        if(text3.length() > 8)
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Upper Bound has more than 8 characters.\n" +
                                          "It is fine for SPK, but the generated control\n" +
                                          "file may not be accepted by NONMEM.",   
                                          "Warning Message",    
                                          JOptionPane.INFORMATION_MESSAGE);           
        }
        
        // Construct the element for the list   
        String element = ""; 
        if(!jCheckBox2.isSelected())
        {
            String lowerBound = jCheckBox1.isSelected() ? "-1000000" : text1;
            String upperBound = jCheckBox3.isSelected() ? "1000000":text3;
            element = "(" + lowerBound + "," + text2 + "," + upperBound + ")";
        }
        else
        {
            element = "(" + text2 + " FIXED)";
        }
        return element;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is to return the StepDescriptor object.
     * @return a StepDescriptor object.
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
            if(iterator.analysis.equals("individual") || iterator.analysis.equals("two-stage") || iterator.analysis.equals("nonparametric")) 
                return "Random Effects";
  	    return "Fixed Effects";
  	}

	public String getStepTitle(){
            if(iterator.analysis.equals("individual") || iterator.analysis.equals("two-stage") || iterator.analysis.equals("nonparametric")) 
                return "Random Effects";
	    return "Fixed Effects";
	}

	public void showingStep(JWizardPane wizard){
            if(iterator.getIsBack())
            {
                iterator.setIsBack(false);
                return;
            }
            wizardPane = wizard;
            if(iterator.getIsReload())
            {
                String text = iterator.getReload().getProperty("THETA");
                if(text != null)
                {
                    iterator.getReload().remove("THETA");
                    model.removeAllElements();

                    int beginIndex = text.indexOf("(");
                    nTheta = 0;
                    while(beginIndex != -1)
                    {
                        int endIndex = text.indexOf(")", beginIndex); 
                        model.addElement(text.substring(beginIndex, endIndex + 1));
                        beginIndex = text.indexOf("(", endIndex);
                        nTheta++;
                    }
                    index = nTheta - 1;
                    jList1.setSelectedIndex(index);
                    
                    // Set delete button
                    deleteButton.setEnabled(nTheta > 0);
                    
                    // Set left options
                    if(nTheta == iterator.getNTheta())
                    {
                        isValid = true;                    
                        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());
                    }
                    
                    // Set up and down buttons
                    Utility.setUpDownButton(index, model, upButton, downButton);
                }
                
                if(iterator.initAdvan.contains("theta"))
                {
                    model.removeAllElements();
                    nTheta = 0;
                    index = -1;
                    iterator.initAdvan.remove("theta");
                    jTextField1.setText("");
                    jTextField2.setText("");
                    jTextField3.setText("");
                    jCheckBox1.setSelected(false);
                    jCheckBox2.setSelected(false);
                    jCheckBox3.setSelected(false);
                    addButton.setEnabled(false);
                    changeButton.setEnabled(false);
                    deleteButton.setEnabled(false);
                    upButton.setEnabled(false);
                    downButton.setEnabled(false);
                }
            }
            if(nTheta != iterator.getNTheta())
            {
                nTheta = iterator.getNTheta();
                isValid = false;
                wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());                
            }
            if(model.size() == iterator.getNTheta())
            {
                isValid = true;
                wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());                
            }
            jTextField2.requestFocusInWindow();        
            try
            {
                int length = jTextField2.getText().length();
                if(length > 0) 
                {
                    jTextField2.setHighlighter(high2);
                    high2.addHighlight(0, length, highlight_painter);
                    highlight = 2;
                }
            }
            catch(BadLocationException e) 
            {
                JOptionPane.showMessageDialog(null, e, "BadLocationException", JOptionPane.ERROR_MESSAGE);
            }            
 	}

        public boolean checkingStep(JWizardPane wizard){
            if(nTheta == 0 || model.getSize() == 0 || model.getSize() != nTheta)
            {
                JOptionPane.showMessageDialog(null, "Value was missing.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            return true;
        }
        
	public void hidingStep(JWizardPane wizard){
            if(iterator.getIsBack()) return;
            if(nTheta == 0 || model.getSize() == 0 || model.getSize() != nTheta)
                return;
            MDAObject object = (MDAObject)wizard.getCustomizedObject();
            String record = "";
            for(int i = 0; i < nTheta; i++)
                record = record + "\n" + ((String)model.get(i)).replaceAll("\r", "");
            object.getRecords().setProperty("Theta", "$THETA " + record);
            String[][] theta = new String[nTheta][4];
            for(int i = 0; i < nTheta; i++)
            {
                String element = (String)model.get(i);
                element = element.substring(1, element.length() - 1);
                String[] values = element.split(",");
                if(values.length == 1)
                {
                    String value = values[0].split(" ")[0];
                    for(int j = 0; j < 3; j++)
                        theta[i][j] = value;
                    theta[i][3] = "yes";
                }
                else
                {
                    for(int j = 0; j < 3; j++)
                        theta[i][j] = values[j];
                    theta[i][3] = "no";
                }
            }
            object.getSource().theta = theta;
	}

	public boolean isValid(){
            return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    if(!iterator.getIsOnline()) 
                        new Help("Help for $THETA Record", 
                                 Theta.class.getResource("/uw/rfpk/mda/nonmem/help/Theta.html"));
                    else
                        Utility.openURL("https://" + iterator.getServerName() + 
                                        ":" + iterator.getServerPort() + "/user/help/Theta.html");  
                }
            };
	}
        
        public String getHelpID() {
            return "Prepare_Input_Fixed_Effects";
        }
        
    }
}
