/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.compartment;

import uw.rfpk.mda.nonmem.Utility;
import javax.swing.DefaultListModel;
import java.awt.Cursor;
import java.util.*;
import javax.swing.JList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Dimension;

/** This class defines variable dialog.
 *
 * @author  Jiaji Du
 */

public class VariableDialog extends javax.swing.JDialog {
    
    /**
     * Creates new form VariableDialog.
     * 
     * @param parent DesignTool object.
     */
    public VariableDialog(DesignTool parent) {
        super(parent, false);
        tool = parent;
        initComponents();
        jList1.setModel(listModel);
        setVariableList();
        jList1.setCellRenderer(new MyCellRenderer());
        setSize(400, 350);
        setLocationRelativeTo(tool.parameterButton);
        setVisible(true);
    }
    
    private void setVariableList()
    {
        listModel.removeAllElements();
        for(Parameter parameter : Model.parameterList)
            listModel.addElement(parameter.value);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        modelButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Parameter List");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Select an item to modify or to change order");
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(259, 200));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/wizard/icons/up.png")));
        upButton.setPreferredSize(new java.awt.Dimension(50, 25));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        jPanel1.add(upButton);

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/wizard/icons/down.png")));
        downButton.setPreferredSize(new java.awt.Dimension(50, 25));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        jPanel1.add(downButton);

        modelButton.setText("Model");
        modelButton.setPreferredSize(new java.awt.Dimension(75, 25));
        modelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelButtonActionPerformed(evt);
            }
        });

        jPanel1.add(modelButton);

        helpButton.setText("Help");
        helpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        jPanel1.add(helpButton);

        jButton1.setText("Close");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Help is not currently available for this topic.");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void modelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int index = jList1.getSelectedIndex();
        if(index < 0)
        {
            setCursor(null);
            return;
        }
        Parameter parameter = Model.parameterList.get(index);
        if(parameter.name.matches("FF\\d+"))
        {
            parameter.value = JOptionPane.showInputDialog(null, "Enter forcing function:                        ", 
                                                          parameter.value);
        }
        else
        {
            int[] isOK = {1};
            if(tool.iterator.analysis.equals("population"))
                new MixedModelDialog(null, parameter, tool.object.getDataLabels(), isOK);
            else
                new IndModelDialog(null, parameter, tool.object.getDataLabels(), isOK);
            if(isOK[0] == 0)
            {
                setCursor(null);
                return;
            }
        }
        if(parameter.value.equals("") || parameter.value.endsWith("="))
        {
            JOptionPane.showMessageDialog(null, "The parameter's model has not been defined.",
                                          "Warning Message", JOptionPane.WARNING_MESSAGE);
            setCursor(null);
            return;
        }
        tool.updateParameterList(parameter, false);
        setVariableList();
        tool.setRecords();
        setCursor(null);
    }//GEN-LAST:event_modelButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int index = jList1.getSelectedIndex();
        if(index < listModel.size() - 1)
        {
            Parameter parameter = Model.parameterList.get(index);
            Model.parameterList.set(index, Model.parameterList.get(index + 1));
            Model.parameterList.set(index + 1, parameter);
            setVariableList();
            jList1.setSelectedIndex(index + 1);
            tool.setRecords();
        }
        setCursor(null);
    }//GEN-LAST:event_downButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int index = jList1.getSelectedIndex();
        if(index > 0)
        {
            Parameter parameter = Model.parameterList.get(index);
            Model.parameterList.set(index, Model.parameterList.get(index - 1));
            Model.parameterList.set(index - 1, parameter);
            setVariableList();
            jList1.setSelectedIndex(index - 1);
            tool.setRecords();
        }
        setCursor(null);
    }//GEN-LAST:event_upButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /** Main method.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new VariableDialog(new DesignTool()).setVisible(true);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modelButton;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel listModel = new DefaultListModel();
    private DesignTool tool;
}

class MyCellRenderer extends JPanel implements ListCellRenderer
{
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
    {
        string = (String)value;
        background = isSelected ? list.getSelectionBackground() : list.getBackground();
        foreground = isSelected ? list.getSelectionForeground() : list.getForeground();
        return this;
    }
    
    public void paintComponent(Graphics g)
    {
        g.setColor(background);
        g.fillRect(0, 0, getWidth(), getHeight());
        g.setColor(foreground);
        String[] lines = string.split("\n");
        for(int i = 0; i < lines.length; i++)
            g.drawString(lines[i], 0, 10 * (i + 1) + 4);
    }
    
    public Dimension getPreferredSize()
    {
        String[] lines = string.split("\n");
//        int length = lines[0].length();
//        if(lines.length > 1)
//            for(int i = 1; i < lines.length; i++)
//                length = Math.max(lines[i].length(), length);
        return new Dimension(0, lines.length * 10 + 8);
    }
    
    private String string;
    private Color background;
    private Color foreground;
}
