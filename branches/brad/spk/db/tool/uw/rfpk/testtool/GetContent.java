/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.testtool;

import java.io.*;
import java.sql.*;
import javax.swing.*;
import rfpk.spk.spkdb.*;
import javax.swing.JOptionPane;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;

/**
 * This is the main class of data content management tool.
 * @author  Jiaji Du
 */
public class GetContent extends javax.swing.JFrame {
    
    /** Creates new form GetContent */
    public GetContent() {
        initComponents();
        jTextField1.setText(dbHost);
        jTextField4.setText(dbName);
        jTextField5.setText(userName);
        jTextField6.setText(password);        
        setSize(700, 500);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tableTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        fieldTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        whereTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        equalTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Get Database Content");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton3.setText("Select");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setPreferredSize(new java.awt.Dimension(60, 19));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton3);

        jButton2.setText("Update");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setPreferredSize(new java.awt.Dimension(60, 19));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton2);

        jLabel1.setText("Table");
        jPanel2.add(jLabel1);

        tableTextField.setPreferredSize(new java.awt.Dimension(80, 19));
        jPanel2.add(tableTextField);

        jLabel7.setText("Field");
        jPanel2.add(jLabel7);

        fieldTextField.setPreferredSize(new java.awt.Dimension(80, 19));
        jPanel2.add(fieldTextField);

        jLabel8.setText("Where");
        jPanel2.add(jLabel8);

        whereTextField.setPreferredSize(new java.awt.Dimension(80, 19));
        jPanel2.add(whereTextField);

        jLabel4.setText("=");
        jPanel2.add(jLabel4);

        equalTextField.setPreferredSize(new java.awt.Dimension(80, 19));
        jPanel2.add(equalTextField);

        jButton1.setText("Save");
        jButton1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton1.setPreferredSize(new java.awt.Dimension(60, 19));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jLabel2.setText("Database Host");
        jPanel1.add(jLabel2);

        jTextField1.setPreferredSize(new java.awt.Dimension(140, 19));
        jPanel1.add(jTextField1);

        jLabel3.setText("Name");
        jPanel1.add(jLabel3);

        jTextField4.setPreferredSize(new java.awt.Dimension(80, 19));
        jPanel1.add(jTextField4);

        jLabel5.setText("Username");
        jPanel1.add(jLabel5);

        jTextField5.setPreferredSize(new java.awt.Dimension(80, 19));
        jPanel1.add(jTextField5);

        jLabel6.setText("Password");
        jPanel1.add(jLabel6);

        jTextField6.setPreferredSize(new java.awt.Dimension(80, 19));
        jPanel1.add(jTextField6);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "There is no text to save.", "Input Error",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        JFileChooser files = new JFileChooser();
        int result = files.showSaveDialog(null);
        if(result == files.APPROVE_OPTION)
	{
            File file = files.getSelectedFile();
            try
            {
                BufferedWriter out = new BufferedWriter(new FileWriter(file));
                out.write(jTextArea1.getText());
                out.close();
            }
            catch(IOException e )
            {
                JOptionPane.showMessageDialog(null, e, "IOException", JOptionPane.ERROR_MESSAGE);
            }
        }        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try
        {
            // Connect to the database
            Connection con = Spkdb.connect(jTextField4.getText(),
                                           jTextField1.getText(),
                                           jTextField5.getText(),
                                           jTextField6.getText());
            
            // Get the content
            String equalsTo = equalTextField.getText();
            if(!isPosIntNumber(equalsTo))
                equalsTo = "'" + equalsTo + "'";
            String sql = "select " + fieldTextField.getText() + " from " + tableTextField.getText() +
                         " where " + whereTextField.getText() + "=" + equalsTo;
            Statement stmt = con.createStatement();
	    ResultSet rs = stmt.executeQuery(sql);
            rs.next();
            Blob blob = rs.getBlob(fieldTextField.getText());
            if(blob != null)
            {
                long length = blob.length();
                if(fieldTextField.getText().equals("report"))
                    jTextArea1.setText(untar(blob.getBytes(1L, (int)length), "database_name", Long.parseLong(equalsTo)));
                else
                    jTextArea1.setText(new String(blob.getBytes(1L, (int)length)));
                jTextArea1.setCaretPosition(0);
            }

            // Disconnect to the database
            Spkdb.disconnect(con);
          
        }
        catch(SpkdbException e) 
        {
            JOptionPane.showMessageDialog(null, e, "SpkdbException", JOptionPane.ERROR_MESSAGE); 
        }
        catch(SQLException e) 
        {
            JOptionPane.showMessageDialog(null, e, "SQLException", JOptionPane.ERROR_MESSAGE);        
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(jTextArea1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "There is no text for the source.", "Input Error",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(fieldTextField.getText().equals("report"))
        {
            JOptionPane.showMessageDialog(null, "Report can not be updated.", "Input Error",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        try
        {
            // Connect to the database
            Connection con = Spkdb.connect(jTextField4.getText(),  
                                           jTextField1.getText(), 
                                           jTextField5.getText(), 
                                           jTextField6.getText());
            
            // Update the content
            String equalsTo = equalTextField.getText();
            if(!isPosIntNumber(equalsTo))
                equalsTo = "'" + equalsTo + "'";
            String sql = "update " + tableTextField.getText() + " set " + fieldTextField.getText() +
                         "='" + jTextArea1.getText() + "' where " + whereTextField.getText() + "=" +
                         equalsTo;
            Statement stmt = con.createStatement();
	    int i = stmt.executeUpdate(sql);
            if(i == 1)
                JOptionPane.showMessageDialog(null, 
                                              tableTextField.getText() + " table has been updated.",  
                                              "Information",
                                              JOptionPane.INFORMATION_MESSAGE);                
            
            // Disconnect to the database
            Spkdb.disconnect(con);
          
        }
        catch(SpkdbException e) 
        {
            JOptionPane.showMessageDialog(null, e, "SpkdbException", JOptionPane.ERROR_MESSAGE); 
        }
        catch(SQLException e) 
        {
            JOptionPane.showMessageDialog(null, e, "SQLException", JOptionPane.ERROR_MESSAGE);        
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /** Determine if a character sting represents an positive integer number.
     * @param s a String object containing the character string.
     * @return a boolean, true for the string is an positive integer number,
     * false for otherwise.
     */    
    public static boolean isPosIntNumber(String s)
    {
        int i;
        try
        {
            i = Integer.parseInt(s);   
        }
        catch(NumberFormatException e)
        {
            return false;   
        }
        if(i <= 0)
            return false;
        return true;
    }
    private String untar(byte[] bytes, String environment, long jobId)
    {
        String workingDir = "/tmp/" + environment + jobId; 
        File directory = new File(workingDir);
        directory.mkdir();
        File file1 = new File(workingDir + "/result.tar.gz");
        File file2 = new File(workingDir + "/result.xml");
        saveFile(bytes, file1);
        String text = null;
        Process process = null;
        String[] command = {"/bin/tar", "xzf", "result.tar.gz"};
        try 
        {
            process = Runtime.getRuntime().exec(command, null, directory);
            process.waitFor();
            text = openFile(file2); 
        }
        catch(IOException e)
        {
        }
        catch(InterruptedException e)
        {
        }
        finally
        {
            if(process != null) process.destroy();
            if(file1.exists()) file1.delete();
            if(file2.exists()) file2.delete();
            if(directory.exists()) directory.delete();
        }
        return text;
    }
    
    private static void saveFile(byte[] bytes, File file)
    {
        FileOutputStream out = null;
        try
        {
            out = new FileOutputStream(file);
        }
        catch(FileNotFoundException e){}         
        ByteBuffer buffer = ByteBuffer.allocate(bytes.length);       
        FileChannel channel = out.getChannel();         
        buffer.put(bytes);     
        buffer.flip();         
        try
        {
            channel.write(buffer);             
            out.close();
        }
        catch(IOException e )
        {
        }
    }
    
    private static String openFile(File file)
    {
        String text = null;
        try
	{
            StringBuffer buffer = new StringBuffer();
            BufferedReader in = new BufferedReader(new FileReader(file));
            String line;
            while((line = in.readLine()) != null)
                buffer.append(line).append("\n");
            in.close();
            text = buffer.toString();
        }
        catch(IOException e)
	{
        }
        return text;
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /** The main method that creates the application object and displays it.
     * @param args the command line arguments, not being used.
     */
    public static void main(String args[]) {
        new GetContent().setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField equalTextField;
    private javax.swing.JTextField fieldTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField tableTextField;
    private javax.swing.JTextField whereTextField;
    // End of variables declaration//GEN-END:variables
 
    // Database host
    private static final String  dbHost = "192.168.1.2";
    
    // Database name
    private static final String  dbName = "spkdb";
    
    // Database username
    private static final String  userName = "daemon";
    
    // Database password
    private static final String  password = "daemon";    
}
