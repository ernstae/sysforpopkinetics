$comment
%************************************************************************
%                                                                       *
%  From:   Resource Facility for Population Kinetics                    *
%          Department of Bioengineering Box 352255                      *
%          University of Washington                                     *
%          Seattle, WA 98195-2255                                       *
%                                                                       *
%  Copyright (C) 2002, University of Washington,                        *
%  Resource Facility for Population Kinetics. All Rights Reserved.      *
%                                                                       *
%  This software was developed with support from NIH grant RR-12609.    *
%  Please cite this grant in any publication for which this software    *
%  is used and send a notification to the address given above.          *
%                                                                       *
%  Check for updates and notices at:                                    *
%  http://www.rfpk.washington.edu                                       *
%                                                                       *
%************************************************************************

$$
$begin EqIndModel$$
$spell 
    aval
    bool
    bval
    const
    cout
    dmat
    endl
    EqInd
    exp
    Ind
    inx
    ios
    iostream
    iomanip
    namespace
    resize
    setiosflags
    setprecision
    std
    Spk
    valarray
    Yi
    cmath
    Fo
$$

$section Equivalent Individual Model Class$$

$index EqIndModel$$
$cindex \Equivalent Individual Model Class$$

$head Description$$
$code EqIndModel$$ is a sub-class of $xref/SpkModel//SpkModel/$$ class.
It is declared in $code EqIndModel.h$$.

   $comment [Sachiko, 09/25/2002]
      The statement immediately below this comment block 
      essentially confines the use of this class only to
      fitOrderOpt() routine, which is not necessarily 
      a requirement for this class.
    $$
and used in the function firstOrderOpt in Spk library for  
population analysis.
$pre

$$
This class is an equivalent individual Spk model class constructed from a 
population Spk model class.  The construction of the class is based on 
first-order approximation for the mean and the data variance functions by

$math%

                          ~
f  (alp, b) = f(alp, 0) + d f(alp, 0)b,
 FO                        b 

R  (alp, b) = R(alp, 0).
 FO

%$$

  $comment [Sachiko, 09/25/2002]
     This description portion should say something about the nature
     of this particular implementation of FO that differentiate
     from the straight translation of FO approximation written
     as it is in the above equations.  The above equations seem
     rather for the population model, fi(alp,b) and Ri(alp,b), where i specifies a
     particular individual.  
     
     In this implementation, 
     there is (conceptually) no such a thing like alp (fixed parameter)
     because it treats a population problem as an individual problem;
     thus the model is the individual model which is a function of only a random parameter.

     Here's an example of how to clarify such:

     f  (x) = [ f1(x,0) ]
      FO      [ f2(x,0) ]
              [ ...     ]
              [ fn(x,0) ]

     R  (x) = [ R1(x,0) + f1_b1(x,0) * D(x) * f1_b1(x,0)' ], 0, ..., 0                                         ]
      FO      [ 0, ...                 .                        ..., 0                                         ]
              [ 0, ...                   .                      ..., 0                                         ]
              [ 0, ...                     .                    ..., 0                                         ]
              [ 0, ...                                            0, Rn(x,0) + fn_bn(x,0) * D(x) * fn_bn(x,0)' ]

     D  (x) = D(B)
      FO

     Y      = [ y1  ]
      FO      [ y2  ]
              [ ... ]
              [ yn  ]

     where n is the number of individuals, and x is set to alp.
  $$

$head Reference$$
B. M. Bell, $italic Approximating The Marginal Likelihood Estimate 
For Models With Random Parameters$$, Applied Mathematics and Computation, 
119 (2001) 57-75.

$childtable/
        EqIndModel.cpp/$$

$head Example$$
The following code demonstrates an application of the EqIndModel class.
If you enter

$codep

#include "DoubleMatrix.h"
#include "EqIndModel.h"
#include "SpkModel.h"
#include <iostream>
#include <iomanip>
#include <cmath>

using namespace std; 

/*************************************************************************
 *
 * Class of the population level original SpkModel object
 *
 *************************************************************************/

class TestModel : public SpkModel
{
    valarray<double> _a, _b;
    int _i;
    const int _nA;
    const int _nB;
    const int _nYi;
public:
    TestModel(int nA, int nB, int nYi) : _nA(nA), _nB(nB), _nYi(nYi) {};    
    ~TestModel(){};
private:
    void doSelectIndividual(int inx)
    {
        _i = inx;
    }
    void doSetPopPar(const valarray<double>& aval)
    {
        _a = aval;
    }
    void doSetIndPar(const valarray<double>& bval)
    {
        _b = bval;
    }
    void doIndParVariance( valarray<double>& ret ) const
    {
        //
        // D = [ alp[1] ]
        //
        ret.resize(_nB * _nB);
        ret[0] = _a[1];
    }
    bool doIndParVariance_popPar( valarray<double>& ret ) const
    {
        //
        // D_alp = [ 0  1 ]
        //
        ret.resize(_nB * _nB * _nA);
        ret[0] = 0.0;
        ret[1] = 1.0;
        return true;
    }
    void doDataMean( valarray<double>& ret ) const
    {
        //
        // f = [ alp[0] + exp( b[0] ) + i ]
        //
        ret.resize(_nYi);
        ret[0] = ( _a[0] + exp( _b[0] ) + _i );
    }
    bool doDataMean_popPar( valarray<double>& ret ) const
    {
        //
        // f_alp = [ 1   0 ]
        //
        ret.resize(_nYi * _nA);
        ret[0] = 1.0;
        ret[1] = 0.0;
        return true;
    }
    bool doDataMean_indPar( valarray<double>& ret ) const
    {
        //
        // f_b = [ exp( b[0] ) ]
        //
        ret.resize(_nYi * _nB);
        ret[0] = exp( _b[0] );
        return true;
    }
    void doDataVariance( valarray<double>& ret ) const
    {
        //
        // R = [ b[0] - i ]
        //
        ret.resize(_nYi * _nYi);
        ret[0] = _b[0] - _i;
    }
    bool doDataVariance_popPar( valarray<double>& ret ) const
    {
        //
        // R_alp = [ 0   0 ]
        //
        ret.resize(_nYi * _nYi * _nA);
        ret[0] = 0.0;
        ret[1] = 0.0;
        return false;
    }
    bool doDataVariance_indPar( valarray<double>& ret ) const
    {
        //
        // R_b = [ 1 ]
        //
        ret.resize(_nYi * _nYi *_nB);
        ret[0] = 1.0;
        return false;
    }
};

/*************************************************************************
 *
 * Function: main
 *
 *************************************************************************/


int main()
{
  //------------------------------------------------------------
  // Preliminaries.
  //------------------------------------------------------------

  // Number of individuals.
  const int nInd = 2;

  // Number of measurements per individual (same for all)
  const int nYi = 1;

  // Number of measurements for all individuals
  const int nY = nInd * nYi;

  // Number of pop parameter
  const int nAlp = 2;

  // Number of ind parameter
  const int nB = 1;


  //------------------------------------------------------------
  // Create a TestModel instance.
  //------------------------------------------------------------

  TestModel testModel( nAlp, nB, nYi );

  valarray<double> a( nAlp );
  a[0] = 1.0;
  a[1] = 2.0;
  testModel.setPopPar( a );

  //------------------------------------------------------------
  // Create a EqIndModel instance.
  //------------------------------------------------------------

  valarray<int> N( 1.0, nInd );
  valarray<double> bStep( .01, nB );

  EqIndModel eqIndModel( &testModel, N, bStep, nAlp );

  //------------------------------------------------------------
  // Prepare tests.
  //------------------------------------------------------------

  cout << setiosflags(ios::scientific) << setprecision(15);
  // bStep = .01  Define
  double C = ( exp( .01 ) - exp( -.01 ) ) / 2 / .01;
  C = C * C;
  double e = 1e-13;
  cout<< endl << endl << "C = " << C << endl << endl;

  //------------------------------------------------------------
  // Test dataMean.
  //------------------------------------------------------------

  valarray<double> f;
  eqIndModel.dataMean( f );

  //             / alp[ 0 ] + 1 \
  //    f(alp) = |               |
  //             \ alp[ 0 ] + 2 /
  
  DoubleMatrix dmatF( f );
  cout << "f = " << endl;
  dmatF.print(); 

  //------------------------------------------------------------
  // Test dataMean_indPar.
  //------------------------------------------------------------

  valarray<double> f_b;
  eqIndModel.dataMean_indPar( f_b );

  //               / 1 \
  //    f_b(alp) = |   |
  //               \ 1 /

  DoubleMatrix dmatF_b( f_b, nAlp );
  cout << "f_b = " << endl;
  dmatF_b.print(); 

  //------------------------------------------------------------
  // Test dataVariance.
  //------------------------------------------------------------

  valarray<double> R;
  eqIndModel.dataVariance( R );

  //             / C * a[ 1 ]                 0 \
  //    R(alp) = |                              |
  //             \ 0             C * a[ 1 ] - 1 /

  DoubleMatrix dmatR( R, nY );
  cout << "R = " << endl;
  dmatR.print(); 

  //------------------------------------------------------------
  // Test dataVariance_indPar.
  //------------------------------------------------------------

  valarray<double> R_b;
  eqIndModel.dataVariance_indPar( R_b );

  //               / 0    C \
  //    R_b(alp) = | 0    0 |
  //               | 0    0 |
  //               \ 0    C /

  DoubleMatrix dmatR_b( R_b, nAlp );
  cout << "R_b = " << endl;
  dmatR_b.print(); 

  return 0;
}
$$
then it will display the following when it is run:
$codep

C = 1.000033333777770e+000

f =
[ 2.000000000000000e+000 ]
[ 3.000000000000000e+000 ]
f_b =
[ 1.000000000000000e+000 0.000000000000000e+000 ]
[ 1.000000000000000e+000 0.000000000000000e+000 ]
R =
[ 2.000066667555529e+000 0.000000000000000e+000 ]
[ 0.000000000000000e+000 1.000066667555485e+000 ]
R_b =
[ 0.000000000000000e+000 1.000033333777765e+000 ]
[ 0.000000000000000e+000 0.000000000000000e+000 ]
[ 0.000000000000000e+000 0.000000000000000e+000 ]
[ 0.000000000000000e+000 1.000033333777743e+000 ]

$$
$pre

$$
$center
$italic
$include shortCopyright.txt$$
$$
$$
$end
