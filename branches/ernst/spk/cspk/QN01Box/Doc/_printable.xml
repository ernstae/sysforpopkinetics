<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>

<head><title>A Box Constrained, Interior Point, Trust Region, Quasi-Newton Method</title></head>
<body>

<hr/>
<center><b><big><big>A Box Constrained, Interior Point, Trust Region, Quasi-Newton Method</big></big></b></center>
<br/>
<b><big><a name="a" id="a">a: Namespace</a></big></b>


<br/>
All of the routines in the package are in the 
<code><font color="blue">QN01Box</font></code> namespace.

<br/>
<br/>
<b><big><a name="b" id="b">b: Contents</a></big></b>
<br/>
<div><a href="#1" target="_top">Table&#xA0;of&#xA0;Contents:&#xA0;1</a><br/>
<a href="#2" target="_top">Your&#xA0;License&#xA0;To&#xA0;Use&#xA0;This&#xA0;Program:&#xA0;2</a><br/>
<a href="#3" target="_top">Install&#xA0;QN01Box:&#xA0;3</a><br/>
<a href="#4" target="_top">Nonlinear&#xA0;Optimization&#xA0;with&#xA0;[0,&#xA0;1]&#xA0;Box&#xA0;Constraints:&#xA0;4</a><br/>
<a href="#5" target="_top">Choosing&#xA0;a&#xA0;Scaled&#xA0;Projected&#xA0;Gradient&#xA0;Convergence&#xA0;Criteria:&#xA0;5</a><br/>
<a href="#6" target="_top">General&#xA0;Purpose&#xA0;Utilities:&#xA0;6</a><br/>
<a href="#7" target="_top">Glossary:&#xA0;7</a><br/>
<a href="#8" target="_top">Record&#xA0;of&#xA0;New&#xA0;Features&#xA0;and&#xA0;Bug&#xA0;Fixes&#xA0;For&#xA0;QN01Box:&#xA0;8</a><br/>
<a href="#9" target="_top">Alphabetic&#xA0;Listing&#xA0;of&#xA0;Cross&#xA0;Reference&#xA0;Tags:&#xA0;9</a><br/>
<a href="#10" target="_top">Keyword&#xA0;Index:&#xA0;10</a><br/>
</div>
<hr/>
<center><b><big><big>
1: Table of Contents</big></big></b></center>

<pre>
A Box Constrained, Interior Point, Trust Region, Quasi-Newton Method: <a href="#">QN01Box: </a>
    Table of Contents: <a href="#1">_contents: 1</a>
    Your License To Use This Program: <a href="#2">License: 2</a>
    Install QN01Box: <a href="#3">Install: 3</a>
    Nonlinear Optimization with [0, 1] Box Constraints: <a href="#4">QuasiNewton01Box: 4</a>
        Quadratic Problem with Box Constraints: Approximate Complementarity: <a href="#4.1">QuadBox: 4.1</a>
            Next Interior Point Iterate: <a href="#4.1.1">Next: 4.1.1</a>
                First Order Approximation Step: <a href="#4.1.1.1">Delta: 4.1.1.1</a>
            Central Path Residual: <a href="#4.1.2">Residual: 4.1.2</a>
        The Broyden-Fletcher-Goldfarb-Shanno Update: <a href="#4.2">Bfgs: 4.2</a>
    Choosing a Scaled Projected Gradient Convergence Criteria: <a href="#5">Converge: 5</a>
    General Purpose Utilities: <a href="#6">Utility: 6</a>
        A Fast and Simple Memory Management Template Class: <a href="#6.1">Memory: 6.1</a>
        Maximum Absolute Value of an Element of a Vector: <a href="#6.2">MaxAbs: 6.2</a>
        Sum of Absolute Value of Elements of a Vector: <a href="#6.3">SumAbs: 6.3</a>
        Returns the IEEE Floating Point Value Plus Infinity: <a href="#6.4">PlusInfinity: 6.4</a>
        Compute the Scaled Projected Gradient: <a href="#6.5">ScaleProjGrad: 6.5</a>
        Ensure that A Symmetric Matrix is Positive Definite: <a href="#6.6">PositiveMatrix: 6.6</a>
        Zero One Scale a Function's Argument Vector: <a href="#6.7">zero_one_scale: 6.7</a>
        QN01Box Error Messages and Traps: <a href="#6.8">Error: 6.8</a>
    Glossary: <a href="#7">glossary: 7</a>
    Record of New Features and Bug Fixes For QN01Box: <a href="#8">WhatsNew: 8</a>
    Alphabetic Listing of Cross Reference Tags: <a href="#9">_reference: 9</a>
    Keyword Index: <a href="#10">_index: 10</a>
</pre>
<hr/>
<center><b><big><big><a name="2" id="2">2: Your License To Use This Program</a>
</big></big></b></center>
<code><font color="black"><span style='white-space: nowrap'>-----------------------------------------------------------------------<br/>
University&#xA0;of&#xA0;Washington's&#xA0;Free-Fork&#xA0;License<br/>
<br/>
System&#xA0;for&#xA0;Population&#xA0;Kinetics&#xA0;(SPK)<br/>
Copyright&#xA0;©&#xA0;1998-2003&#xA0;University&#xA0;of&#xA0;Washington,<br/>
Resource&#xA0;Facility&#xA0;for&#xA0;Population&#xA0;Kinetics.<br/>
<br/>
This&#xA0;University&#xA0;of&#xA0;Washington&#xA0;Distribution&#xA0;(code&#xA0;and&#xA0;documentation)&#xA0;is<br/>
made&#xA0;available&#xA0;to&#xA0;the&#xA0;open&#xA0;source&#xA0;community&#xA0;as&#xA0;a&#xA0;public&#xA0;service&#xA0;by&#xA0;the<br/>
University&#xA0;of&#xA0;Washington.<br/>
<br/>
Under&#xA0;this&#xA0;license,&#xA0;this&#xA0;Distribution&#xA0;may&#xA0;be&#xA0;modified&#xA0;and&#xA0;the&#xA0;original<br/>
version&#xA0;and&#xA0;modified&#xA0;versions&#xA0;may&#xA0;be&#xA0;copied,&#xA0;distributed,&#xA0;publicly<br/>
displayed&#xA0;and&#xA0;performed&#xA0;provided&#xA0;that&#xA0;the&#xA0;following&#xA0;conditions&#xA0;are<br/>
met:<br/>
<br/>
1.&#xA0;Modified&#xA0;versions&#xA0;are&#xA0;distributed&#xA0;with&#xA0;source&#xA0;code&#xA0;and<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;documentation&#xA0;and&#xA0;with&#xA0;permission&#xA0;for&#xA0;others&#xA0;to&#xA0;use&#xA0;any&#xA0;code&#xA0;and<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;documentation&#xA0;(whether&#xA0;in&#xA0;original&#xA0;or&#xA0;modified&#xA0;versions)&#xA0;as&#xA0;granted<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;under&#xA0;this&#xA0;license;<br/>
2.&#xA0;if&#xA0;modified,&#xA0;the&#xA0;source&#xA0;code,&#xA0;documentation,&#xA0;and&#xA0;user&#xA0;run-time<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;elements&#xA0;should&#xA0;be&#xA0;clearly&#xA0;labeled&#xA0;by&#xA0;placing&#xA0;an&#xA0;identifier&#xA0;of&#xA0;origin<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(such&#xA0;as&#xA0;a&#xA0;name,&#xA0;initial,&#xA0;or&#xA0;other&#xA0;tag)&#xA0;after&#xA0;the&#xA0;version&#xA0;number;<br/>
3.&#xA0;users,&#xA0;modifiers,&#xA0;distributors,&#xA0;and&#xA0;others&#xA0;coming&#xA0;into<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;possession&#xA0;or&#xA0;using&#xA0;the&#xA0;Distribution&#xA0;in&#xA0;original&#xA0;or&#xA0;modified&#xA0;form<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;accept&#xA0;the&#xA0;entire&#xA0;risk&#xA0;as&#xA0;to&#xA0;the&#xA0;possession,&#xA0;use,&#xA0;and&#xA0;performance&#xA0;of<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;the&#xA0;Distribution;<br/>
4.&#xA0;this&#xA0;copyright&#xA0;management&#xA0;information&#xA0;(software&#xA0;identifier&#xA0;and<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;version&#xA0;number,&#xA0;copyright&#xA0;notice&#xA0;and&#xA0;license)&#xA0;shall&#xA0;be&#xA0;retained&#xA0;in&#xA0;all<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;versions&#xA0;of&#xA0;the&#xA0;Distribution;<br/>
5.&#xA0;the&#xA0;University&#xA0;of&#xA0;Washington&#xA0;may&#xA0;make&#xA0;modifications&#xA0;to&#xA0;the<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Distribution&#xA0;that&#xA0;are&#xA0;substantially&#xA0;similar&#xA0;to&#xA0;modified&#xA0;versions&#xA0;of<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;the&#xA0;Distribution,&#xA0;and&#xA0;may&#xA0;make,&#xA0;use,&#xA0;sell,&#xA0;copy,&#xA0;distribute,&#xA0;publicly<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;display,&#xA0;and&#xA0;perform&#xA0;such&#xA0;modifications,&#xA0;including&#xA0;making&#xA0;such<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;modifications&#xA0;available&#xA0;under&#xA0;this&#xA0;or&#xA0;other&#xA0;licenses,&#xA0;without<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obligation&#xA0;or&#xA0;restriction;<br/>
6.&#xA0;modifications&#xA0;incorporating&#xA0;code,&#xA0;libraries,&#xA0;and/or<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;documentation&#xA0;subject&#xA0;to&#xA0;any&#xA0;other&#xA0;open&#xA0;source&#xA0;license&#xA0;may&#xA0;be&#xA0;made,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;and&#xA0;the&#xA0;resulting&#xA0;work&#xA0;may&#xA0;be&#xA0;distributed&#xA0;under&#xA0;the&#xA0;terms&#xA0;of&#xA0;such&#xA0;open<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;source&#xA0;license&#xA0;if&#xA0;required&#xA0;by&#xA0;that&#xA0;open&#xA0;source&#xA0;license,&#xA0;but&#xA0;doing&#xA0;so<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;will&#xA0;not&#xA0;affect&#xA0;this&#xA0;Distribution,&#xA0;other&#xA0;modifications&#xA0;made&#xA0;under&#xA0;this<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;license&#xA0;or&#xA0;modifications&#xA0;made&#xA0;under&#xA0;other&#xA0;University&#xA0;of&#xA0;Washington<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;licensing&#xA0;arrangements;<br/>
7.&#xA0;no&#xA0;permission&#xA0;is&#xA0;granted&#xA0;to&#xA0;distribute,&#xA0;publicly&#xA0;display,&#xA0;or<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;publicly&#xA0;perform&#xA0;modifications&#xA0;to&#xA0;the&#xA0;Distribution&#xA0;made&#xA0;using<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;proprietary&#xA0;materials&#xA0;that&#xA0;cannot&#xA0;be&#xA0;released&#xA0;in&#xA0;source&#xA0;format&#xA0;under<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;conditions&#xA0;of&#xA0;this&#xA0;license;<br/>
8.&#xA0;the&#xA0;name&#xA0;of&#xA0;the&#xA0;University&#xA0;of&#xA0;Washington&#xA0;may&#xA0;not&#xA0;be&#xA0;used&#xA0;in<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;advertising&#xA0;or&#xA0;publicity&#xA0;pertaining&#xA0;to&#xA0;Distribution&#xA0;of&#xA0;the&#xA0;software<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;without&#xA0;specific,&#xA0;prior&#xA0;written&#xA0;permission.<br/>
<br/>
This&#xA0;software&#xA0;is&#xA0;made&#xA0;available&#xA0;&quot;as&#xA0;is&quot;,&#xA0;and<br/>
<br/>
THE&#xA0;UNIVERSITY&#xA0;OF&#xA0;WASHINGTON&#xA0;DISCLAIMS&#xA0;ALL&#xA0;WARRANTIES,&#xA0;EXPRESS&#xA0;OR<br/>
IMPLIED,&#xA0;WITH&#xA0;REGARD&#xA0;TO&#xA0;THIS&#xA0;SOFTWARE,&#xA0;INCLUDING&#xA0;WITHOUT&#xA0;LIMITATION<br/>
ALL&#xA0;IMPLIED&#xA0;WARRANTIES&#xA0;OF&#xA0;MERCHANTABILITY&#xA0;AND&#xA0;FITNESS&#xA0;FOR&#xA0;A&#xA0;PARTICULAR<br/>
PURPOSE,&#xA0;AND&#xA0;IN&#xA0;NO&#xA0;EVENT&#xA0;SHALL&#xA0;THE&#xA0;UNIVERSITY&#xA0;OF&#xA0;WASHINGTON&#xA0;BE&#xA0;LIABLE<br/>
FOR&#xA0;ANY&#xA0;SPECIAL,&#xA0;INDIRECT&#xA0;OR&#xA0;CONSEQUENTIAL&#xA0;DAMAGES&#xA0;OR&#xA0;ANY&#xA0;DAMAGES<br/>
WHATSOEVER&#xA0;RESULTING&#xA0;FROM&#xA0;LOSS&#xA0;OF&#xA0;USE,&#xA0;DATA&#xA0;OR&#xA0;PROFITS,&#xA0;WHETHER&#xA0;IN&#xA0;AN<br/>
ACTION&#xA0;OF&#xA0;CONTRACT,&#xA0;TORT&#xA0;(INCLUDING&#xA0;NEGLIGENCE)&#xA0;OR&#xA0;STRICT&#xA0;LIABILITY,<br/>
ARISING&#xA0;OUT&#xA0;OF&#xA0;OR&#xA0;IN&#xA0;CONNECTION&#xA0;WITH&#xA0;THE&#xA0;USE&#xA0;OR&#xA0;PERFORMANCE&#xA0;OF&#xA0;THIS<br/>
SOFTWARE.<br/>
-----------------------------------------------------------------------<br/>
</span></font></code>
<hr/>
<center><b><big><big><a name="3" id="3">3: Install QN01Box</a>
</big></big></b></center>
<br/>
<b><big><a name="3.a" id="3.a">3.a: Get Tar File</a></big></b>
<br/>
E-mail <code><font color="blue">bradbell</font></code> at <code><font color="blue">apl.washington.edu</font></code> and request 
the current version of <code><font color="blue"><span style='white-space: nowrap'>qn01box-</span></font></code><i><span style='white-space: nowrap'>yy</span></i><code><font color="blue"><span style='white-space: nowrap'>-</span></font></code><i><span style='white-space: nowrap'>mm</span></i><code><font color="blue"><span style='white-space: nowrap'>-</span></font></code><i><span style='white-space: nowrap'>dd</span></i><code><font color="blue"><span style='white-space: nowrap'>.tar.gz</span></font></code>.

<br/>
<br/>
<b><big><a name="3.b" id="3.b">3.b: Extraction</a></big></b>
<br/>
Use the command
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;tar&#xA0;-xvzf&#xA0;qn01box-</span></font></code><i><span style='white-space: nowrap'>yy</span></i><code><font color="blue"><span style='white-space: nowrap'>-</span></font></code><i><span style='white-space: nowrap'>mm</span></i><code><font color="blue"><span style='white-space: nowrap'>-</span></font></code><i><span style='white-space: nowrap'>dd</span></i><code><font color="blue"><span style='white-space: nowrap'>.tar.gz<br/>
</span></font></code>to decompress and extract QN01Box into the distribution
directory.
Change into the distribution directory by executing the command
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cd&#xA0;qn01box-</span></font></code><i><span style='white-space: nowrap'>yy</span></i><code><font color="blue"><span style='white-space: nowrap'>-</span></font></code><i><span style='white-space: nowrap'>mm</span></i><code><font color="blue"><span style='white-space: nowrap'>-</span></font></code><i><span style='white-space: nowrap'>dd</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>The documentation for QN01Box can be read starting with the file
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Doc/q01box.xml<br/>
</span>
</font></code>
<br/>
<b><big><a name="3.c" id="3.c">3.c: Configure</a></big></b>
<br/>
Execute the command
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;./configure&#xA0;\<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;prefix=</span></font></code><i><span style='white-space: nowrap'>PrefixDir</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;\<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;POSTFIX_DIR=</span></font></code><i><span style='white-space: nowrap'>PostfixDir</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;\<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_PREFIX_DIR=</span></font></code><i><span style='white-space: nowrap'>CppADprefixDir</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;\<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_POSTFIX_DIR=</span></font></code><i><span style='white-space: nowrap'>CppADpostfixDir</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;\<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;COMPILE_FLAGS=</span></font></code><i><span style='white-space: nowrap'>CppErrorsAndWarnings</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;<br/>
</span></font></code>where only <code><font color="blue">./configure</font></code> needs to appear and the
rest of the arguments are optional.

<br/>
<br/>
<b><big><a name="3.d" id="3.d">3.d: PrefixDir and PostfixDir</a></big></b>
<br/>
The default value for <i>PrefixDir</i> is <code><font color="blue">$HOME</font></code>
and the default value for <i>PostfixDir</i> is the empty string; i.e.,
by default 
the QN01Box include files will install in
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;$HOME/include/QN01Box<br/>
</span>
</font></code>
and the QN01Box library will be
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;$HOME/lib/libQN01Box.a<br/>
</span>
</font></code>
As an example, if the configure command is
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;./configure&#xA0;--prefix=/usr/local&#xA0;POSTFIX_DIR=spktest<br/>
</span>
</font></code>
the QN01Box include files will install in
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/usr/local/include/spktest/QN01Box<br/>
</span>
</font></code>
and the QN01Box library will be
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/usr/local/lib/spktest/libQN01Box.a<br/>
</span>
</font></code>
<br/>
<b><big><a name="3.e" id="3.e">3.e: CppADPrefixDir and CppADPostfixDir</a></big></b>
<br/>
The QN01Box package uses some of the utilities that come with
<a href="http://www.coin-or.org/CppAD/Doc/installunix.htm" target="_top"><span style='white-space: nowrap'>CppAD</span></a>
 (http://www.coin-or.org/CppAD/Doc/installunix.htm) 
(hence CppAD must be installed).
The default value for <i>CppADPrefixDir</i> is <code><font color="blue">$HOME</font></code>
and the default value for <i>CppADPostfixDir</i> is the empty string; i.e.,
by default 
the CppAD include files are in
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;$HOME/include/CppAD<br/>
</span>
</font></code>
and the CppAD library is
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;$HOME/lib/libCppAD.a<br/>
</span>
</font></code>
As an example, if 
the CppAD include files are in
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/usr/local/include/spktest/CppAD<br/>
</span>
</font></code>
and the CppAD library is
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/usr/local/lib/spktest/libCppAD.a<br/>
</span>
</font></code>
the configure should include the arguments
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_PREFIX_DIR=/usr/local&#xA0;CPPAD_POSTFIX_DIR=spktest<br/>
</span>
</font></code>
<br/>
<b><big><a name="3.f" id="3.f">3.f: CppErrorsAndWarnings</a></big></b>
<br/>
If present, this specifies flags for all of the C++
compilation commands. For example,
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;COMPILE_FLAGS=&quot;-g&#xA0;-Wall&quot;<br/>
</span>
</font></code>
would be a good choice for debugging
(these flags must be valid for the compiler that your system uses).
The configure option
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;COMPILE_FLAGS=&quot;-DNDEBUG&#xA0;-O2&#xA0;-Wall&quot;<br/>
</span>
</font></code>
would be a good choice for an optimized version of the library.

<br/>
<br/>
<b><big><a name="3.g" id="3.g">3.g: make</a></big></b>
<br/>
The command
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;make<br/>
</span>
</font></code>
will compile and link a test of the installation.
The command
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;./Test/RunTest<br/>
</span>
</font></code>
will run the test.
If any errors occur, an error message will be printed.

<br/>
<br/>
<b><big><a name="3.h" id="3.h">3.h: Installation</a></big></b>
<br/>
Once you are satisfied that the tests give the correct results,
you can execute the command
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;make&#xA0;install<br/>
</span>
</font></code>
This will install QN01Box in the directory specified
by <a href="#3.d"><span style='white-space: nowrap'>PrefixDir&#xA0;and&#xA0;PostfixDir</span>: 3.d</a>
.



<hr/>



<center><b><big><big><a name="4" id="4">4: Nonlinear Optimization with [0, 1] Box Constraints</a>
</big></big></b></center>
<center>(Bradley M. Bell &amp; James V. Burke)
</center><table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>template&#xA0;&lt;class&#xA0;</span></font></code><i><span style='white-space: nowrap'>Fun</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;<br/>
const&#xA0;char&#xA0;*&#xA0;QuasiNewton01Box(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Arguments&#xA0;that&#xA0;are&#xA0;only&#xA0;Inputs<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::ostream&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>os</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>level</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>ItrMax</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>QuadMax</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ConvergeNorm&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>norm</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>delta</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Fun</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Arguments&#xA0;that&#xA0;are&#xA0;both&#xA0;Inputs&#xA0;and&#xA0;Outputs<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>sOkCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>ItrCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>QuadCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>BfgsCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>rCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>fCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>xCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>sCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>gCur</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>HCur</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="4.a" id="4.a">4.a: Original Problem</a></big></b>
<br/>
Determine a value of <i>x</i> such that the
<a href="#7.f"><span style='white-space: nowrap'>infinity&#xA0;norm</span>: 7.f</a>
 of the
<a href="#7.n"><span style='white-space: nowrap'>scaled&#xA0;project&#xA0;gradient</span>: 7.n</a>

for the following problem is less than or equal
<a href="#4.h"><span style='white-space: nowrap'>delta</span>: 4.h</a>
:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="right" >
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>with</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>respect</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mtd></mtr><mtr><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
</mtd><mtd columnalign="right" >
<mn>0</mn>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02264;</mo>
<mn>1</mn>
</mtd></mtr></mtable>
</mrow></math>

<br/>
<b><big><a name="4.b" id="4.b">4.b: Convention</a></big></b>



<br/>
<br/>
<b><a name="4.b.a" id="4.b.a">4.b.a: Arguments</a></b>
<br/>
All of the arguments to <code><font color="blue">QuasiNewton01Box</font></code>
are inputs; i.e., their values must
be set before <code><font color="blue">QuasiNewton01Box</font></code> is called.
In addition, the arguments with names that
end in <i>Cur</i> are both inputs and outputs; i.e.
their values must be set before <code><font color="blue">QuasiNewton01Box</font></code> is called
and they have the same definition (but possibly different values)
when <code><font color="blue">QuasiNewton01Box</font></code> returns.

<br/>
<br/>
<b><a name="4.b.b" id="4.b.b">4.b.b: Exceptions</a></b>
<br/>
This routine <code><font color="blue">QuasiNewton01Box</font></code> is
<a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.
There is one stipulations to this,
calls to <i>obj</i> may not be exception safe because
<i>obj</i> is under the
control of the calling routine and hence the callers responsibility.
Furthermore, if an exception does occur,
the arguments that are both inputs and outputs are valid
and can be used to continue the optimization process.

<br/>
<br/>
<b><big><a name="4.c" id="4.c">4.c: Return Value</a></big></b>
<br/>
The routine <code><font color="blue">QuasiNewton01Box</font></code> returns &quot;ok&quot; if it detects convergence,
and an error message otherwise.
(See <a href="#4.h"><span style='white-space: nowrap'>delta</span>: 4.h</a>
 for the definition of convergence.)


<br/>
<br/>
<b><big><a name="4.d" id="4.d">4.d: ItrMax</a></big></b>
<br/>
The argument <i>ItrMax</i> specifies the maximum allowable value
for <i>ItrCur</i>. Thus <i>ItrMax</i>
minus <i>ItrCur</i> is the maximum number of
<code><font color="blue">QuasiNewton01Box</font></code> iterations that will be preformed,
and the maximum number of times that <code><font color="blue">QuasiNewton01Box</font></code> will
change its state
(in response to this call).
There is at most one evaluation of the gradient of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>


and at most one Bfgs update of the approximate Hessian for each
iteration.
There may be multiple evaluations of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>


for each iteration.

<br/>
<br/>
<b><big><a name="4.e" id="4.e">4.e: QuadMax</a></big></b>
<br/>
The argument <i>QuadMax</i> specifies the maximum number
of interior point iterations to use when solving one Quadratic subproblem.

<br/>
<br/>
<b><big><a name="4.f" id="4.f">4.f: n</a></big></b>
<br/>
The argument <i>n</i> specifies the number of components
in the argument vector <i>x</i>.

<br/>
<br/>
<b><big><a name="4.g" id="4.g">4.g: norm</a></big></b>
<br/>
The argument <i>norm</i> specifies the norm used for the 
convergence criteria.
It is be one of the following enum type values
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;namespace&#xA0;QN01Box&#xA0;{&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;enum&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;GradSumAbs,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;GradMaxAbs,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;StepSumAbs,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;StepMaxAbs<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ConvergeNorm;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
</span>
</font></code>
<br/>
<b><big><a name="4.h" id="4.h">4.h: delta</a></big></b>
<br/>
The argument <i>delta</i> specifies the convergence criteria.
If the return value of <code><font color="blue">QuasiNewton01Box</font></code> is equal to &quot;ok&quot;,
convergence criteria has been satisfied:
<table><tr><td align='left'  valign='top'>

<b>norm</b>         </td><td align='left'  valign='top'>
 <b>Criteria</b>                  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">GradSumAbs</font></code>   </td><td align='left'  valign='top'>
 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>pCur</mi>
<msub><mo stretchy="false">|</mo>
<mn>1</mn>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='normal'>&#x003B4;</mi>
</mrow></math>

  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">GradMaxAbs</font></code>   </td><td align='left'  valign='top'>
 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>pCur</mi>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='normal'>&#x003B4;</mi>
</mrow></math>

 </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">StepSumAbs</font></code>   </td><td align='left'  valign='top'>
 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>sCur</mi>
<msub><mo stretchy="false">|</mo>
<mn>1</mn>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='normal'>&#x003B4;</mi>
</mrow></math>

  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">StepMaxAbs</font></code>   </td><td align='left'  valign='top'>
 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>sCur</mi>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='normal'>&#x003B4;</mi>
</mrow></math>

 
</td></tr>
</table>
where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mo stretchy="false">&#x000B7;</mo>
<msub><mo stretchy="false">|</mo>
<mn>1</mn>
</msub>
</mrow></math>

 
is the <a href="#7.g"><span style='white-space: nowrap'>L-one&#xA0;norm</span>: 7.g</a>
,
where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mo stretchy="false">&#x000B7;</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mrow></math>

 
is the <a href="#7.f"><span style='white-space: nowrap'>infinity&#xA0;norm</span>: 7.f</a>
,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>pCur</mi>
</mrow></math>

 is the current value of the
<a href="#7.n"><span style='white-space: nowrap'>scaled&#xA0;projected&#xA0;gradient</span>: 7.n</a>
,
and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>sCur</mi>
</mrow></math>

 is the step from the current point to the solution
of the approximating quadratic subproblem.
Note that if <code><font color="blue">StepSumAbs</font></code> or <code><font color="blue">StepMaxAbs</font></code> is chosen
convergence will not be accepted unless the addition condition
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>ItrCur</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&gt;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i> is satisfied 
(to ensure that <i>HCur</i> is a reasonably accurate approximation).

<br/>
<br/>
<b><big><a name="4.i" id="4.i">4.i: Fun obj</a></big></b>
<br/>
The template argument <i>Fun</i> is a special class defined for this objective function.
Any data that is special to this functions definition can be stored as private data in the class
and initialized when <i>obj</i> object is constructed.
It must have the following member functions:

<br/>
<br/>
<b><a name="4.i.a" id="4.i.a">4.i.a: Objective Function</a></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function(const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;double&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>evaluates the objective.
If the return value of <i>obj</i> is equal to &quot;ok&quot;,
this sets the scalar <i>f</i>
equal to the objective function at <i>x</i>
where <i>x</i> is a vector of length <i>n</i> and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02264;</mo>
<mn>1</mn>
</mrow></math>

.
This may be equal to any finite value or <a href="#6.4"><span style='white-space: nowrap'>PlusInfinity</span>: 6.4</a>

(it cannot be not a number).
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the return value is plus infinity,
the function is not assumed to be smooth
between its current best point (<i>xCur</i>)
and the requested new point (<i>xNext</i> or <i>xTmp</i>).
The optimizer will (in some sense) try to take a smaller step
in its search for a new <i>x</i> near <i>xCur</i> where the objective
is lower than its current best estimate of the minimizer.
The gradient of the objective will not be evaluated at
any point where the objective is plus infinity.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the return value of
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>
is not equal to &quot;ok&quot;,
<code><font color="blue">QuasiNewton01Box</font></code> will abort its operation and return with
its return value
equal to the value returned by
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>.

<br/>
<br/>
<b><a name="4.i.b" id="4.i.b">4.i.b: Gradient</a></b>
<br/>
The objective function is alway evaluated at the same 
<i>x</i> value directly before
evaluating the gradient of the objective function.
In addition, the corresponding value of the objective will be finite; i.e.,
not equal to plus infinity.
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.gradient(double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>g</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>evaluates the gradient using the value of <i>x</i> in the previous
call to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>.
The argument <i>g</i> is a vector of length <i>n</i>.
If the return value of
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.gradient</span></font></code>
is not equal to &quot;ok&quot;,
<code><font color="blue">QuasiNewton01Box</font></code> will abort its operation and return with
its return value
equal to the value returned by
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.gradient</span></font></code> .

<br/>
<br/>
<b><a name="4.i.c" id="4.i.c">4.i.c: Hessian</a></b>
<br/>
The objective function is alway evaluated at the same 
<i>x</i> value directly before
evaluating the Hessian of the objective.
In addition, the corresponding value of the objective will be finite; i.e.,
not equal to plus infinity.
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.Hessian(double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>H</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>If the return value of 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.Hessian</span></font></code>
is equal to &quot;not available&quot;, the values in <i>H</i> will be ignored
and a Quasi-Newton approximation will be used for the Hessian.
Otherwise, <i>H</i> 
contains the Hessian corresponding to the value of <i>x</i> 
in the previous call to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>
In this case, <i>H</i> is a vector of length <code><font color="blue"></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;*&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i>
(row major or column major order does not matter because the Hessian
is symmetric).
If the return value of
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.Hessian</span></font></code>
is not equal to &quot;ok&quot; or &quot;not available&quot;,
<code><font color="blue">QuasiNewton01Box</font></code> will abort its operation and return with
its return value
equal to the value returned by
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.Hessian</span></font></code> .

<br/>
<br/>
<b><big><a name="4.j" id="4.j">4.j: sOkCur</a></big></b>
<br/>
The value <i>sOkCur</i> is discussed
together with <a href="#4.q"><span style='white-space: nowrap'>sCur</span>: 4.q</a>
.

<br/>
<br/>
<b><big><a name="4.k" id="4.k">4.k: ItrCur</a></big></b>
<br/>
On input and output,
<i>ItrCur</i> contains the number of <code><font color="blue">QuasiNewton01Box</font></code> iterations
that have been completed so far.
This is also the number of times that the state of
<code><font color="blue">QuasiNewton01Box</font></code> has changed.
The current state is defined by the value of
<i>rCur</i>, <i>xCur</i>, and <i>HCur</i>.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the input value of <i>xCur</i> satisfies the convergence criteria,
the output value of <i>ItrCur</i> is equal to its input value
(the state of <code><font color="blue">QuasiNewton01Box</font></code> does not change)
and the return value of <code><font color="blue">QuasiNewton01Box</font></code> is equal to &quot;ok&quot;.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the input value of <i>xCur</i>
does not satisfies the convergence criteria,
and the input value of <i>ItrCur</i> equal to <i>ItrMax</i>,
<code><font color="blue">QuasiNewton01Box</font></code> will not change its state.
It will however attempt to set the output value of <i>sCur</i>
to a solution of the
<a href="#4.q.a"><span style='white-space: nowrap'>quadratic&#xA0;subproblem</span>: 4.q.a</a>
.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the return value of <code><font color="blue">QuasiNewton01Box</font></code> is not equal to &quot;ok&quot; and
the output value of <i>ItrCur</i> is equal to its input value,
<code><font color="blue">QuasiNewton01Box</font></code> will never make any progress from
its current state.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code><b><big><a name="4.l" id="4.l">4.l: QuadCur</a></big></b>
<br/>
On input and output,
<i>QuadCur</i> contains the total number of interior point iterations
used by the Quadratic sub-problem solver so far
(counting all iterations of <code><font color="blue">QuasiNewton01Box</font></code>).

<br/>
<br/>
<b><big><a name="4.m" id="4.m">4.m: BfgsCur</a></big></b>
<br/>
On input and output,
<i>BfgsCur</i> contains the total number of Bfgs updates
that were applied to obtain the current approximate Hessian <i>HCur</i>.
Note that the update is only applied on a subset of the
<code><font color="blue">QuasiNewton01Box</font></code> iterations
during which the current <i>x</i> value changes.
Also note that one evaluation of the Hessian using 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.Hessian</span></font></code> counts as <i>n</i> Bfgs updates.

<br/>
<br/>
<b><big><a name="4.n" id="4.n">4.n: rCur</a></big></b>
<br/>
On input and output, <i>rCur</i> must be between
<code><font color="blue">MinRadius</font></code> (1e-7) and <code><font color="blue">MaxRadius</font></code> (.5).
It specifies the current trust region radius
as an infinity norm bound on the step size in the
<a href="#4.q.a"><span style='white-space: nowrap'>quadratic&#xA0;subproblem</span>: 4.q.a</a>
.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>The value <i>rCur</i> is adjusted to be larger when the solution of
the quadratic approximation does well in predicting descent of the
original problem.
It is adjusted to be smaller when the solution of the quadratic approximation
does very poorly at predicting descent of the original problem.
If you restart <code><font color="blue">QuasiNewton01Box</font></code> using values output from
a previous call except that you change <i>rCur</i> to what you think is a
better value,
this will invalidate the previous value of <i>sCur</i>
and you should therefore set <i>sOkCur</i> to false.

<br/>
<br/>
<b><big><a name="4.o" id="4.o">4.o: fCur</a></big></b>
<br/>
On input and output, <i>fCur</i>
contains the value 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>xCur</mi>
<mo stretchy="false">)</mo>
</mrow></math>

.
This cannot (on input) and will not (on output)
be equal to <a href="#6.4"><span style='white-space: nowrap'>PlusInfinity</span>: 6.4</a>
.

<br/>
<br/>
<b><big><a name="4.p" id="4.p">4.p: xCur</a></big></b>
<br/>
The argument <i>xCur</i> is a vector of length <i>n</i>.
On input, it
specifies the point at which to start the optimization procedure.
On output, it is the closest to optimal point obtained so far.

<br/>
<br/>
<b><big><a name="4.q" id="4.q">4.q: sCur</a></big></b>
<br/>
The argument <i>sCur</i> is a vector of length <i>n</i>.
If <i>sOkCur</i> is false,
the elements of <i>sCur</i> are unspecified.
Otherwise, <i>sCur</i> solves the quadratic subproblem defined below

<br/>
<br/>
<b><a name="4.q.a" id="4.q.a">4.q.a: Quadratic Subproblem</a></b>
<br/>
Determine a value of <i>s</i> such that the
<a href="#7.f"><span style='white-space: nowrap'>infinity&#xA0;norm</span>: 7.f</a>
 of the
<a href="#7.n"><span style='white-space: nowrap'>scaled&#xA0;project&#xA0;gradient</span>: 7.n</a>

for the following problem is less than or equal
<a href="#4.n"><span style='white-space: nowrap'>rCur</span>: 4.n</a>
 times
<a href="#4.h"><span style='white-space: nowrap'>delta</span>: 4.h</a>
:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="center" >
<msup><mi mathvariant='italic'>gCur</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">+</mo>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mn>2</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>HCur</mi>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>s</mi>
</mtd><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>with</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>respect</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mtd></mtr><mtr><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
</mtd><mtd columnalign="center" >
<mn>0</mn>
<mo stretchy="false">&#x02264;</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>xCur</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02264;</mo>
<mn>1</mn>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>and</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>rCur</mi>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>rCur</mi>
</mtd></mtr></mtable>
</mrow></math>

where
<i>xCur</i>,
<i>gCur</i>, and
<i>HCur</i>, are the corresponding output values.
Note that if the value zero solves the problem above,
the infinity norm of the scaled projected gradient for the
<a href="#4.a"><span style='white-space: nowrap'>original&#xA0;problem</span>: 4.a</a>

is less than or equal <i>delta</i>.

<br/>
<br/>
<b><a name="4.q.b" id="4.q.b">4.q.b: Discussion</a></b>

<ol type="1"><li>
If <i>sOkCur</i> is true on input,
and <i>ItrCur</i> is less than <i>ItrMax</i>,
the next iteration of <code><font color="blue">QuasiNewton01Box</font></code> will either keep
<i>xCur</i> the same or change it by adding <i>sCur</i> to it.

</li><li>

If <i>sOkCur</i> is false on output,
one of the following conditions must hold:
<ol type="a"><li>
The quadratic subproblem could not be solved.
</li><li>

On output, <i>ItrCur</i> is less that <i>ItrMax</i>
and an error message,
other than the maximum number of iterations error message,
has been returned by <code><font color="blue">QuasiNewton01Box</font></code>.
</li></ol>


</li><li>

The value <i>sCur</i> is an accurate estimate of the
true solution minus <i>xCur</i> under the following assumptions:
<ol type="a"><li>
The value <i>delta</i>
is less than half the infinity norm of the value
of the scaled projected gradient corresponding to the input values.
</li><li>

The value <i>sOkCur</i> is true.
</li><li>

The infinity norm of <i>sCur</i> is less than <i>rCur</i>.
</li><li>

The value <i>xCur</i> is close to the true solution.
</li><li>

The Hessian of the objective at the true solution of the
<a href="#4.a"><span style='white-space: nowrap'>original&#xA0;problem</span>: 4.a</a>

is positive definite.
</li><li>

The value <i>HCur</i> is close to the Hessian at <i>xCur</i>.
</li></ol>

</li></ol>


<br/>
<br/>
<b><big><a name="4.r" id="4.r">4.r: gCur</a></big></b>
<br/>
The vector <i>gCur</i> must have length 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>

.
On input and output,
it contains the gradient of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>


at the point 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>xCur</mi>
</mrow></math>

.
To be specific

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">=</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mrow>
</mfrac>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>xCur</mi>
<mo stretchy="false">)</mo>
</mrow></math>

<br/>
<b><big><a name="4.s" id="4.s">4.s: HCur</a></big></b>
<br/>
The vector <i>HCur</i> must have length 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>n</mi>
<mn>2</mn>
</msup>
</mrow></math>

.
On input and output,
it must contain a positive definite approximate for the
Hessian of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>


at the point 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>xCur</mi>
</mrow></math>

.
(On input, if you have no better ideas about this approximation,
it is suggested that you use the identity matrix.)
To be specific

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>H</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>i</mi>
<mspace width='.18em'/>
<mo stretchy="false">&#x000D7;</mo>
<mspace width='.18em'/>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>j</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">&#x02248;</mo>
<mfrac><mrow><msup><mo stretchy="false">&#x02202;</mo>
<mn>2</mn>
</msup>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>j</mi>
</msub>
</mrow>
</mfrac>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>xCur</mi>
<mo stretchy="false">)</mo>
</mrow></math>

<br/>
<b><big><a name="4.t" id="4.t">4.t: os</a></big></b>
<br/>
The argument <i>os</i> specifies which output stream the
tracing should be written to (if any tracing is done).

<br/>
<br/>
<b><big><a name="4.u" id="4.u">4.u: level</a></big></b>
<br/>
The argument <i>level</i> specifies the amount of tracing to do
during the optimization procedure.
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>level</mi>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow></math>

, no tracing is done; i.e., <code><font color="blue">QuasiNewton01Box</font></code>
does not write any output.
Otherwise, tracing is done for each iteration during which the state changes
(<i>rCur</i>, <i>xCur</i>, or <i>HCur</i> changes).

<br/>
<br/>
<b><a name="4.u.a" id="4.u.a">4.u.a: level &gt; 0</a></b>
<br/>
If <i>level</i> is greater than zero,
the final values corresponding to the final iteration are printed.
Using <i>level</i> less than zero is useful when the optimization
will be continued and the final iteration values will be the same
as the first iteration of the continuation.
(If there is a choice of infinity or L1 norm below, 
the chosen norm is the one specified by the argument <i>norm</i>).

<br/>
<br/>
<b><a name="4.u.b" id="4.u.b">4.u.b: abs(level) &gt;= 1</a></b>

<table><tr><td align='left'  valign='top'>

<b>label</b> </td><td align='left'  valign='top'>
 <b>Description</b>
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">k</font></code> </td><td align='left'  valign='top'>

	The current iteration number
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">r</font></code> </td><td align='left'  valign='top'>

	The current value of the trust region radius; i.e., 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>r</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">f</font></code> </td><td align='left'  valign='top'>

	The objective function value at the current iterate; i.e.,
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">|p|</font></code> </td><td align='left'  valign='top'>

	The infinity or L1 norm of the scaled projected gradient 
	corresponding to
	the current iterate; i.e., the infinity norm of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
</mrow></math>


	where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
</mrow></math>

 is the scaled projected gradient function.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">|s|</font></code> </td><td align='left'  valign='top'>

	The infinity or L1 norm of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

 where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

 
	solves the problem

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<msup><mo stretchy="false">)</mo>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msup><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">/</mo>
<mn>2</mn>
</mtd><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>with</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>respect</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mtd></mtr><mtr><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
</mtd><mtd columnalign="center" >
<mn>0</mn>
<mo stretchy="false">&#x02264;</mo>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02264;</mo>
<mn>1</mn>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>and</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">-</mo>
<msup><mi mathvariant='italic'>r</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&#x02264;</mo>
<msup><mi mathvariant='italic'>r</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mtd></mtr></mtable>
</mrow></math>

</td></tr><tr><td align='left'  valign='top'>
<code><font color="blue">|H|</font></code> </td><td align='left'  valign='top'>

	The infinity or L1 norm of Hessian of the quadratic approximation
	for the function <i>f</i>; i.e., the infinity norm of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>


</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">det(H)</font></code> </td><td align='left'  valign='top'>

	The determinant of the Hessian of the quadratic approximation
	for the function <i>f</i>; i.e., the determinant of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">Bfgs</font></code>  </td><td align='left'  valign='top'>

	The current value of <i>BfgsCur</i>.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">df</font></code> </td><td align='left'  valign='top'>

	The following difference of objective function values
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
</mrow></math>


</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">dq</font></code> </td><td align='left'  valign='top'>

	The current quadratic approximation for
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
</mrow></math>

; i.e.,
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<msup><mo stretchy="false">)</mo>
<mi mathvariant='italic'>T</mi>
</msup>
<msup><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">/</mo>
<mn>2</mn>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">eta</font></code> </td><td align='left'  valign='top'>

	The current line search parameter 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='normal'>&#x003B7;</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.
	The next iterate is given by the formula
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>x</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='normal'>&#x003B7;</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">dxMax</font></code> </td><td align='left'  valign='top'>

	The infinity norm of the change in 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

; i.e.,
	the infinity norm of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>x</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<mo stretchy="false">-</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">|Herr|</font></code> </td><td align='left'  valign='top'>

	The infinity norm for the change in the gradient between
	iterates and the prediction of change by 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

; i.e.,
	the infinity norm of
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<msup><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<mo stretchy="false">-</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

</td></tr>
</table>
<br/>
<b><a name="4.u.c" id="4.u.c">4.u.c: abs(level) &gt;= 2</a></b>
<br/>
The information is printed above the <code><font color="blue"></font></code><i><span style='white-space: nowrap'>level</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&gt;=&#xA0;1</span></font></code> information.
<table><tr><td align='left'  valign='top'>

<b>label</b> </td><td align='left'  valign='top'>
 <b>Description</b>
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">i</font></code>    </td><td align='left'  valign='top'>

	The component of the vectors being printed
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">x</font></code>     </td><td align='left'  valign='top'>

	The current argument value <i>x^k</i>; i.e., the value
	of <i>xCur</i> at the beginning of the iteration.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">s</font></code>     </td><td align='left'  valign='top'>

	The current step value 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">g</font></code>    </td><td align='left'  valign='top'>

	The current gradient 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
</mrow></math>


</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">p</font></code>     </td><td align='left'  valign='top'>

	The current scaled projected gradient 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">)</mo>
</mrow></math>

.
</td></tr><tr><td align='left'  valign='top'>

</td></tr>
</table>
<br/>
<b><a name="4.u.d" id="4.u.d">4.u.d: abs(level) &gt;= 3</a></b>
<br/>
The information is printed above the <code><font color="blue"></font></code><i><span style='white-space: nowrap'>level</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&gt;=&#xA0;2</span></font></code> information.
<table><tr><td align='left'  valign='top'>

<b>label</b> </td><td align='left'  valign='top'>
 <b>Description</b> </td></tr><tr><td align='left'  valign='top'>

</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">H</font></code>     </td><td align='left'  valign='top'>

	The approximation for the Hessian 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.
</td></tr>
</table>
<br/>
<b><a name="4.u.e" id="4.u.e">4.u.e: abs(level) &gt;= 4</a></b>

<table><tr><td align='left'  valign='top'>

<b>label</b> </td><td align='left'  valign='top'>
 <b>Description</b> </td></tr><tr><td align='left'  valign='top'>

</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">i</font></code>     </td><td align='left'  valign='top'>

	The component of <i>x</i> corresponding to the gradient check
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">fp</font></code> </td><td align='left'  valign='top'>

	The forward function value used in difference
	approximation for gradient
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">fm</font></code> </td><td align='left'  valign='top'>

	The backward function value used in difference approximation for
	gradient
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">a</font></code> </td><td align='left'  valign='top'>

	The finite difference approximation for the gradient
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">gi</font></code> </td><td align='left'  valign='top'>

	The value of the gradient returned by <i>obj</i> for this component
</td></tr>
</table>
<br/>
<b><a name="4.u.f" id="4.u.f">4.u.f: abs(level) &gt;= 5</a></b>

<table><tr><td align='left'  valign='top'>

<b>label</b> </td><td align='left'  valign='top'>
 <b>Description</b> </td></tr><tr><td align='left'  valign='top'>

</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">j</font></code>     </td><td align='left'  valign='top'>

	The component of <i>x</i> corresponding to the Hessian check
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">gp</font></code> </td><td align='left'  valign='top'>

	The forward gradient value used in difference
	approximation for Hessian
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">gm</font></code> </td><td align='left'  valign='top'>

	The backward gradient value used in difference approximation for
	Hessian
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">aij</font></code> </td><td align='left'  valign='top'>

	The finite difference approximation for 
	the <i>(i,j)</i>-th component of the Hessian 
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">Hij</font></code> </td><td align='left'  valign='top'>

	The <i>(i,j)</i>-th component of the Hessian 
	returned by <i>obj</i>
</td></tr>
</table>
<br/>
<b><big><a name="4.v" id="4.v">4.v: Subroutines</a></big></b>


<table><tr><td align='left'  valign='top'>

<a href="#4.1.1">Next: 4.1.1</a></td><td>
Next Interior Point Iterate</td></tr>
<tr><td>

<a href="#4.1.2">Residual: 4.1.2</a></td><td>
Central Path Residual</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="4.w" id="4.w">4.w: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
(A simpler usage of <code><font color="blue">QuasiNewton01Box</font></code> can be 
found in the <a href="#6.7.o"><span style='white-space: nowrap'>zero_one_scale&#xA0;example</span>: 6.7.o</a>
.)
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/QuasiNewton01Box.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;sstream&gt;<br/>
<br/>
//&#xA0;begin&#xA0;empty&#xA0;namespace<br/>
namespace&#xA0;{&#xA0;<br/>
//<br/>
//&#xA0;Function&#xA0;object&#xA0;class<br/>
class&#xA0;Fun&#xA0;{<br/>
public:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constructor&#xA0;for&#xA0;a&#xA0;function&#xA0;object<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Fun(bool&#xA0;exponential_,&#xA0;size_t&#xA0;n_,&#xA0;double&#xA0;*Q_,&#xA0;double&#xA0;*b_)&#xA0;:&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fcount(0),&#xA0;gcount(0),&#xA0;Hcount(0),&#xA0;exponential(&#xA0;exponential_&#xA0;),&#xA0;n(&#xA0;n_&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;nsq(&#xA0;n_&#xA0;*&#xA0;n_&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x&#xA0;=&#xA0;new&#xA0;double[n_];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q&#xA0;=&#xA0;new&#xA0;double[nsq];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b&#xA0;=&#xA0;new&#xA0;double[n_];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;g&#xA0;=&#xA0;new&#xA0;double[n_];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[i]&#xA0;=&#xA0;b_[i];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;nsq;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q[i]&#xA0;=&#xA0;Q_[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;destructor&#xA0;for&#xA0;a&#xA0;function&#xA0;object<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;~Fun(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;x;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;Q;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;b;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;g;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;function(const&#xA0;double&#xA0;*x_,&#xA0;double&#xA0;&amp;f_&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[i]&#xA0;=&#xA0;x_[i];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;b[i]&#xA0;*&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;.5&#xA0;*&#xA0;x[i]&#xA0;*&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;x[j];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;exponential&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;f_&#xA0;&#xA0;=&#xA0;exp(sum);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;f_&#xA0;&#xA0;=&#xA0;sum;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;++fcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;(const&#xA0;char&#xA0;*)(&quot;ok&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;gradient<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;gradient(double&#xA0;*g_&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;g[i]&#xA0;=&#xA0;b[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;g[i]&#xA0;+=&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;x[j];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;exponential&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;g[i]&#xA0;*=&#xA0;exp(sum);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;g_[i]&#xA0;=&#xA0;g[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;++gcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;(const&#xA0;char&#xA0;*)(&quot;ok&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;Hessian<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;Hessian(double&#xA0;*H_&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;H_[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;=&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;exponential&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;H_[i&#xA0;+&#xA0;n&#xA0;+&#xA0;j]&#xA0;*=&#xA0;exp(sum);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H_[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;+=&#xA0;g[i]&#xA0;*&#xA0;g[j];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;++Hcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;(const&#xA0;char&#xA0;*)(&quot;ok&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;function&#xA0;counter<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;functionCount(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;fcount;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;gradient&#xA0;counter<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;gradientCount(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;gcount;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;Hessian&#xA0;counter<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;HessianCount(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;Hcount;&#xA0;}<br/>
private:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Hcount;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;data&#xA0;that&#xA0;defines&#xA0;the&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;bool&#xA0;&#xA0;&#xA0;exponential;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*x;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*Q;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*b;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*g;<br/>
};<br/>
<br/>
}&#xA0;<br/>
//&#xA0;end&#xA0;empty&#xA0;namespace<br/>
<br/>
bool&#xA0;QuasiNewton01Box(std::string&#xA0;&amp;Msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::ostream&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;os&#xA0;=&#xA0;std::cout;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;level&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ItrMax&#xA0;=&#xA0;50;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;m&#xA0;=&#xA0;7;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;=&#xA0;5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QuadMax&#xA0;=&#xA0;40;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;bool&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;exponential&#xA0;=&#xA0;false;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delta&#xA0;=&#xA0;1e-7;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;k;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::string&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Memory&lt;double&gt;&#xA0;dMemory(6&#xA0;*&#xA0;n&#xA0;+&#xA0;3&#xA0;*&#xA0;n&#xA0;*&#xA0;n&#xA0;+&#xA0;m&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*xOut&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*xCur&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*sCur&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*gCur&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*gOut&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*b&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*HCur&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*Q&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*HOut&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*A&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dMemory(m&#xA0;*&#xA0;n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;A&#xA0;is&#xA0;a&#xA0;random&#xA0;n&#xA0;x&#xA0;m&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;m;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Q&#xA0;is&#xA0;a&#xA0;normalized&#xA0;version&#xA0;of&#xA0;A&#xA0;*&#xA0;A^T&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;+=&#xA0;A[i&#xA0;*&#xA0;m&#xA0;+&#xA0;k]&#xA0;*&#xA0;A[j&#xA0;*&#xA0;m&#xA0;+&#xA0;k];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;+=&#xA0;sqrt(sum&#xA0;/&#xA0;double(n)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;/=&#xA0;double(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q[i]&#xA0;=&#xA0;Q[i]&#xA0;/&#xA0;apxnorm;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;set&#xA0;solution&#xA0;to&#xA0;center&#xA0;of&#xA0;box;&#xA0;i.e.,&#xA0;.1&#xA0;*&#xA0;e<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;b[i]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[i]&#xA0;-=&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;/&#xA0;10.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;special&#xA0;case&#xA0;when&#xA0;n&#xA0;==&#xA0;1<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;n&#xA0;==&#xA0;1&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Q[0]&#xA0;=&#xA0;8.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[0]&#xA0;=&#xA0;-4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;construct&#xA0;function&#xA0;object<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Fun&#xA0;obj(exponential,&#xA0;n,&#xA0;Q,&#xA0;b);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;State&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sOkCur;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;ItrCur;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;QuadCur;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;BfgsCur;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;rCur;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;fCur;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Output&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;fOut;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;run;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(run&#xA0;=&#xA0;1;&#xA0;run&#xA0;&lt;=&#xA0;2;&#xA0;run++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Initialize&#xA0;the&#xA0;state&#xA0;of&#xA0;the&#xA0;optimizer&#xA0;---------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sOkCur&#xA0;=&#xA0;false;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ItrCur&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QuadCur&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BfgsCur&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;rCur&#xA0;=&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initial&#xA0;xCur&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;xCur[i]&#xA0;=&#xA0;.75;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;fCur&#xA0;is&#xA0;objective&#xA0;function&#xA0;value&#xA0;at&#xA0;xCur<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;obj.function(xCur,&#xA0;fCur);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ok&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gCur&#xA0;is&#xA0;gradient&#xA0;at&#xA0;xCur<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;obj.gradient(gCur);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ok&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initialize&#xA0;the&#xA0;HCur&#xA0;as&#xA0;the&#xA0;identity&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HCur[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j&#xA0;]&#xA0;=&#xA0;static_cast&lt;double&gt;(&#xA0;i&#xA0;==&#xA0;j&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Solve&#xA0;the&#xA0;optimization&#xA0;problem&#xA0;------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;&quot;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(&#xA0;Msg&#xA0;==&#xA0;&quot;&quot;&#xA0;&amp;&amp;&#xA0;ItrCur&#xA0;&lt;&#xA0;ItrMax&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;ItrPrev&#xA0;=&#xA0;ItrCur;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;ItrPlus;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;run&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ItrPlus&#xA0;=&#xA0;ItrCur&#xA0;+&#xA0;ItrMax;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ItrPlus&#xA0;=&#xA0;ItrCur&#xA0;+&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;QuasiNewton01Box(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;os,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;level,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ItrCur+ItrMax,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QuadMax,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::GradMaxAbs,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delta,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input+Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sOkCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ItrCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QuadCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BfgsCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;rCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;xCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HCur&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;run&#xA0;==&#xA0;1&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;Msg&#xA0;!=&#xA0;&quot;&quot;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Msg&#xA0;==&#xA0;&quot;ok&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;store&#xA0;solution&#xA0;corresponding&#xA0;to&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;all&#xA0;iterations&#xA0;at&#xA0;once<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;xOut[i]&#xA0;=&#xA0;xCur[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tracing&#xA0;for&#xA0;one&#xA0;iteration&#xA0;at&#xA0;a&#xA0;time&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;level&#xA0;&#xA0;=&#xA0;-level;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;Msg&#xA0;==&#xA0;&quot;ok&quot;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;trace&#xA0;the&#xA0;last&#xA0;iterate<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;QuasiNewton01Box(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;os,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;abs(level),<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ItrCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QuadMax,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::GradMaxAbs,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delta,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input+Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sOkCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ItrCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QuadCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BfgsCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;rCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;xCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gCur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HCur&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;ItrCur&#xA0;&gt;&#xA0;ItrPrev&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;&quot;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;the&#xA0;reutrn&#xA0;message<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;Msg&#xA0;==&#xA0;&quot;ok&quot;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;std::ostringstream&#xA0;buf;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;&#xA0;:functionCount&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;obj.functionCount();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;&#xA0;:gradientCount&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;obj.gradientCount();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;&#xA0;:HessianCount&#xA0;&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;obj.HessianCount();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;buf.str();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ok&#xA0;=&#xA0;false;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;that&#xA0;the&#xA0;all&#xA0;at&#xA0;once&#xA0;solution&#xA0;is&#xA0;equal&#xA0;to<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;the&#xA0;once&#xA0;iteration&#xA0;at&#xA0;a&#xA0;time&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;xOut[i]&#xA0;==&#xA0;xCur[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;objective&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;obj.function(xCur,&#xA0;fOut);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ok&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;fCur&#xA0;==&#xA0;fOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;gradient<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;obj.gradient(gOut);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;gCur[i]&#xA0;==&#xA0;gOut[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;the&#xA0;scaled&#xA0;projected&#xA0;gradient<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;p&#xA0;=&#xA0;gOut[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;p&#xA0;&gt;=&#xA0;0.&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;p&#xA0;*=&#xA0;(xCur[i]&#xA0;-&#xA0;0.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;p&#xA0;*=&#xA0;(1.&#xA0;-&#xA0;xCur[i]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;fabs(p)&#xA0;&lt;=&#xA0;delta;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;abs(level)&#xA0;&gt;=&#xA0;2&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;&quot;fOut&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;fOut&#xA0;&lt;&lt;&#xA0;std::endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;&quot;xOut[0]&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;xCur[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;1;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;i&#xA0;%&#xA0;5&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;std::endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;&quot;,&#xA0;[&quot;&#xA0;&lt;&lt;&#xA0;i&#xA0;&lt;&lt;&#xA0;&quot;]&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;xCur[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;std::endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj.Hessian(HOut);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;HCur(&quot;&#xA0;&lt;&lt;&#xA0;i&#xA0;&lt;&lt;&#xA0;&quot;,&quot;&#xA0;&lt;&lt;&#xA0;j&#xA0;&lt;&lt;&#xA0;&quot;)&#xA0;=&#xA0;&quot;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;HCur[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;,&#xA0;HOut(&quot;&#xA0;&lt;&lt;&#xA0;i&#xA0;&lt;&lt;&#xA0;&quot;,&quot;&#xA0;&lt;&lt;&#xA0;j&#xA0;&lt;&lt;&#xA0;&quot;)&#xA0;=&#xA0;&quot;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;HOut[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;,&#xA0;Q(&quot;&#xA0;&lt;&lt;&#xA0;i&#xA0;&lt;&lt;&#xA0;&quot;,&quot;&#xA0;&lt;&lt;&#xA0;j&#xA0;&lt;&lt;&#xA0;&quot;)&#xA0;=&#xA0;&quot;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::cout&#xA0;&lt;&lt;&#xA0;std::endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>
<center><b><big><big><a name="4.1" id="4.1">4.1: Quadratic Problem with Box Constraints: Approximate Complementarity</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'><br/>
const&#xA0;char&#xA0;*&#xA0;QuadBox(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::ostream&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>os</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>kMax</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>level</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>eIn</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>Q</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>r</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;//&#xA0;length&#xA0;n&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>l</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;and&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>k</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>b</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>eOut</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="4.1.a" id="4.1.a">4.1.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">QuadBox</font></code> is <a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.

<br/>
<br/>
<b><big><a name="4.1.b" id="4.1.b">4.1.b: Description</a></big></b>
<br/>
Uses the Interior Point method to find an approximation solution
to the problem
<a href="#7.m"><span style='white-space: nowrap'>P(Q,&#xA0;r,&#xA0;l,&#xA0;u)</span>: 7.m</a>
.
The approximate solution approximately satisfies the complementarity conditions
(see <a href="#4.1.f"><span style='white-space: nowrap'>input&#xA0;and&#xA0;output&#xA0;arguments</span>: 4.1.f</a>
).

<br/>
<br/>
<b><big><a name="4.1.c" id="4.1.c">4.1.c: Return Value</a></big></b>
<br/>
If the return value of <code><font color="blue">QuadBox</font></code> is the (const char *) &quot;ok&quot;,
it succeeded in meeting its specifications.
Otherwise, the return value is an error message and the specifications
have not been met.
Provided that all the input and output arguments have their specified lengths,
such a failure should not have any side effects.

<br/>
<br/>
<b><big><a name="4.1.d" id="4.1.d">4.1.d: Input Arguments</a></big></b>


<br/>
<br/>
<b><big><a name="4.1.e" id="4.1.e">4.1.e: n, Q, r, l, u</a></big></b>
<br/>
We define 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x02208;</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>Z</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
as the values of the corresponding input arguments.
The matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
</mrow></math>

 must be positive definite
and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>u</mi>
</mrow></math>

.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>In the special case where <i>n</i> is zero,
<code><font color="blue">QuadBox</font></code> returns with <i>eOut</i> equal to zero and
with its return value equal to &quot;ok&quot;.

<br/>
<br/>
<b><a name="4.1.e.a" id="4.1.e.a">4.1.e.a: level</a></b>
<br/>
If <i>level = 0</i>, no output is written by this routine.
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>level</mi>
<mo stretchy="false">&#x02265;</mo>
<mn>1</mn>
</mrow></math>

, the following values are
written to the output stream specified by <i>os</i>:
<table><tr><td align='left'  valign='top'>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>k</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 iteration number </td></tr><tr><td align='left'  valign='top'>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 value of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
</mrow></math>

 used call to <a href="#4.1.1"><span style='white-space: nowrap'>Next</span>: 4.1.1</a>

	(except for corrector steps) </td></tr><tr><td align='left'  valign='top'>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003BB;</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 value of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003BB;</mi>
</mrow></math>

 returned by <a href="#4.1.1"><span style='white-space: nowrap'>Next</span>: 4.1.1</a>
 </td></tr><tr><td align='left'  valign='top'>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>fk</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 square of the norm of the residual of 
	<a href="#7.b"><span style='white-space: nowrap'>complementarity&#xA0;conditions</span>: 7.b</a>

	</td></tr><tr><td align='left'  valign='top'>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mrow></math>


	</td><td align='left'  valign='top'>
 the maximum upper complementarity component </td></tr><tr><td align='left'  valign='top'>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mrow></math>


	</td><td align='left'  valign='top'>
 the maximum lower complementarity component </td></tr><tr><td align='left'  valign='top'>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mrow></math>


	</td><td align='left'  valign='top'>
 the maximum component in gradient of Lagrangian w.r.t. 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 
</td></tr>
</table>
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>level</mi>
<mo stretchy="false">&#x02265;</mo>
<mn>2</mn>
</mrow></math>

, 
for each iteration, and after the values listed above, 
the vectors <i>x</i>, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
</mrow></math>

 are also
written to the output stream specified by <i>os</i>.

<br/>
<br/>
<b><a name="4.1.e.b" id="4.1.e.b">4.1.e.b: os</a></b>
<br/>
In the event that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>level</mi>
<mo stretchy="false">&gt;</mo>
<mn>0</mn>
</mrow></math>

,
<i>os</i> specifies the output stream that
the output is written to.

<br/>
<br/>
<b><a name="4.1.e.c" id="4.1.e.c">4.1.e.c: eIn</a></b>
<br/>
The value <i>eIn</i> is the requested 
convergence criteria as a maximum for 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">,</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">,</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mrow></math>

at the output value corresponding
to the arguments <i>x</i>, <i>a</i> and <i>b</i>.
Here and below 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mo stretchy="false">&#x000B7;</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mrow></math>

 is the
<a href="#7.f"><span style='white-space: nowrap'>infinity&#xA0;norm</span>: 7.f</a>
.


<br/>
<br/>
<b><big><a name="4.1.f" id="4.1.f">4.1.f: Input and Output Arguments</a></big></b>


<br/>
<br/>
<b><a name="4.1.f.a" id="4.1.f.a">4.1.f.a: k</a></b>
<br/>
The input value of <i>k</i> specifies the number
of previous iterations that have been made
(<i>kMax</i> is a bound on previous plus current iterations.)
The output value of <i>k</i> is the total number of
iterations (previous plus current).

<br/>
<br/>
<b><a name="4.1.f.b" id="4.1.f.b">4.1.f.b: x,a,b</a></b>
<br/>
The input and output values 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

, and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 satisfy the following conditions:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>u</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>a</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

.
The input values are an initial approximate solution of the
approximate first order conditions.
The output values satisfy the following approximate first order conditions:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>eOut</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>eOut</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>eOut</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mtd></mtr></mtable>
</mrow></math>

at the output value corresponding
to the arguments <i>x</i>, <i>a</i> and <i>b</i>.

<br/>
<br/>
<b><big><a name="4.1.g" id="4.1.g">4.1.g: eOut</a></big></b>
<br/>
The return value <i>eOut</i> is the maximum of

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">,</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">,</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
</mrow></math>

at the output value corresponding
to the arguments <i>x</i>, <i>a</i> and <i>b</i>.
The routine <code><font color="blue">QuadBox</font></code> will attempt to obtain the 
inequality 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>eOut</mi>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>eIn</mi>
</mrow></math>

.
Even if <code><font color="blue">QuadBox</font></code> returns &quot;ok&quot;,
you must check <i>eOut</i> to see if you have obtained
a residual less than or equal the requested value <i>eIn</i>.

<br/>
<br/>
<b><big><a name="4.1.h" id="4.1.h">4.1.h: Subroutines</a></big></b>


<table><tr><td align='left'  valign='top'>

<a href="#4.1.1">Next: 4.1.1</a></td><td>
Next Interior Point Iterate</td></tr>
<tr><td>

<a href="#4.1.2">Residual: 4.1.2</a></td><td>
Central Path Residual</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="4.1.i" id="4.1.i">4.1.i: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Error.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/QuadBox.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Residual.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/MaxAbs.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Next.h&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;sstream&gt;<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
#&#xA0;include&#xA0;&lt;float.h&gt;<br/>
<br/>
static&#xA0;bool&#xA0;Ok(const&#xA0;char&#xA0;*&#xA0;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;strcmp(msg,&#xA0;&quot;ok&quot;)&#xA0;==&#xA0;0;<br/>
}<br/>
<br/>
bool&#xA0;QuadBoxTest(std::string&#xA0;&amp;Msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::cout;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::endl;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i,&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Qxi;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;&#xA0;&#xA0;=&#xA0;20;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;&#xA0;&#xA0;=&#xA0;10;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;ntmp&#xA0;=&#xA0;n&#xA0;*&#xA0;m&#xA0;&#xA0;+&#xA0;&#xA0;n&#xA0;*&#xA0;n&#xA0;+&#xA0;6&#xA0;*&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Memory&lt;double&gt;&#xA0;dMemory(ntmp);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*A&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*Q&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*r&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*l&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*u&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*x&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*a&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*b&#xA0;=&#xA0;dMemory(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;A&#xA0;is&#xA0;a&#xA0;random&#xA0;n&#xA0;x&#xA0;m&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;m;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[j]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;r&#xA0;is&#xA0;the&#xA0;linear&#xA0;coefficient<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;l&#xA0;is&#xA0;lower&#xA0;limit<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;u&#xA0;is&#xA0;the&#xA0;upper&#xA0;limit<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;x&#xA0;is&#xA0;initial&#xA0;value&#xA0;for&#xA0;function&#xA0;argument<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;is&#xA0;initial&#xA0;value&#xA0;for&#xA0;lower&#xA0;limit&#xA0;Lagrange&#xA0;multipliers<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;b&#xA0;is&#xA0;initial&#xA0;value&#xA0;for&#xA0;upper&#xA0;limit&#xA0;Lagrange&#xA0;multipliers<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;r[j]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;l[j]&#xA0;=&#xA0;-.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u[j]&#xA0;=&#xA0;+.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[j]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[j]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[j]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;r[j]&#xA0;*&#xA0;r[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;apxnorm&#xA0;=&#xA0;std::sqrt(sum&#xA0;/&#xA0;double(n));<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;r[j]&#xA0;=&#xA0;.5&#xA0;*&#xA0;r[j]&#xA0;/&#xA0;apxnorm;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Q&#xA0;=&#xA0;A&#xA0;*&#xA0;A^T<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i1&#xA0;=&#xA0;0;&#xA0;i1&#xA0;&lt;&#xA0;n;&#xA0;i1++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i2&#xA0;=&#xA0;0;&#xA0;i2&#xA0;&lt;&#xA0;n;&#xA0;i2++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Q[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;m;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;+=&#xA0;A[i1&#xA0;*&#xA0;m&#xA0;+&#xA0;j]&#xA0;*&#xA0;A[i2&#xA0;*&#xA0;m&#xA0;+&#xA0;j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;Q[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;*&#xA0;Q[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;+=&#xA0;std::sqrt(sum&#xA0;/&#xA0;double(n)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;/=&#xA0;double(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n*n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q[i]&#xA0;=&#xA0;Q[i]&#xA0;/&#xA0;apxnorm;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;maximum&#xA0;number&#xA0;of&#xA0;iterations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;kMax&#xA0;=&#xA0;20;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;convergence&#xA0;criteria<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;eIn&#xA0;=&#xA0;1e-10;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;level&#xA0;of&#xA0;tracing<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;level&#xA0;=&#xA0;0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;iteration&#xA0;counter<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;k&#xA0;=&#xA0;0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;eOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;QuadBox(cout,&#xA0;kMax,&#xA0;level,&#xA0;n,&#xA0;eIn,&#xA0;Q,&#xA0;r,&#xA0;l,&#xA0;u,&#xA0;k,&#xA0;x,&#xA0;a,&#xA0;b,&#xA0;eOut);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;eOut&#xA0;&gt;&#xA0;eIn&#xA0;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;&quot;&#xA0;:QuadBox&#xA0;could&#xA0;not&#xA0;obtain&#xA0;desired&#xA0;accuracy&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;Msg&#xA0;==&#xA0;&quot;ok&quot;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;std::ostringstream&#xA0;buf;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;&#xA0;:QuadBox&#xA0;Iteration&#xA0;Count&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;k;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;buf.str();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ok&#xA0;=&#xA0;false;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Qxi&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Qxi&#xA0;+=&#xA0;Q[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;x[j];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;l[i]&#xA0;&lt;&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;x[i]&#xA0;&lt;&#xA0;u[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;0.&#xA0;&lt;&#xA0;a[i];&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;0.&#xA0;&lt;&#xA0;b[i];&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;account&#xA0;for&#xA0;possible&#xA0;round&#xA0;off&#xA0;error&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;fabs(&#xA0;Qxi&#xA0;+&#xA0;r[i]&#xA0;-&#xA0;a[i]&#xA0;+&#xA0;b[i]&#xA0;)&#xA0;&lt;=&#xA0;10&#xA0;&#xA0;*&#xA0;eOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;a[i]&#xA0;*&#xA0;(x[i]&#xA0;-&#xA0;l[i])&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;=&#xA0;10.&#xA0;*&#xA0;eOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;b[i]&#xA0;*&#xA0;(u[i]&#xA0;-&#xA0;x[i])&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;=&#xA0;10.&#xA0;*&#xA0;eOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="4.1.1" id="4.1.1">4.1.1: Next Interior Point Iterate</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'><br/>
const&#xA0;char&#xA0;*&#xA0;Next(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font></code><i><span style='white-space: nowrap'>alpha</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>Q</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>r</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>l</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>b</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>xOut</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>aOut</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>bOut</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>lambda</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;)<br/>
</span></font></code></td></tr>
</table>
<b><big><a name="4.1.1.a" id="4.1.1.a">4.1.1.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">Next</font></code> is <a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.

<br/>
<br/>
<b><big><a name="4.1.1.b" id="4.1.1.b">4.1.1.b: Return Value</a></big></b>
<br/>
If the return value of <code><font color="blue">Next</font></code> is either the (const char *) &quot;ok&quot;,
it succeeded in meeting its specifications.
Otherwise, the return value is an error message and the specifications
have not been met.
Provided that all the input and output arguments have their specified lengths,
such a failure should not have any side effects.

<br/>
<br/>
<b><big><a name="4.1.1.c" id="4.1.1.c">4.1.1.c: Input Arguments</a></big></b>
<br/>
We define 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x02208;</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>Z</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">&#x02208;</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msubsup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>n</mi>
</msubsup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msubsup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>n</mi>
</msubsup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>da</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>db</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


as the values of the corresponding input arguments.
The matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
</mrow></math>

 must be positive definite

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>u</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>a</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="4.1.1.d" id="4.1.1.d">4.1.1.d: Notation</a></big></b>
<br/>
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 for the
<a href="#7.i"><span style='white-space: nowrap'>vector&#xA0;of&#xA0;ones</span>: 7.i</a>
.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 for the
<a href="#7.c"><span style='white-space: nowrap'>diagonal&#xA0;matrix&#xA0;of&#xA0;a&#xA0;vector</span>: 7.c</a>
.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 for the
<a href="#7.o"><span style='white-space: nowrap'>residual&#xA0;function</span>: 7.o</a>
.

<br/>
<br/>
<b><big><a name="4.1.1.e" id="4.1.1.e">4.1.1.e: Newton Step</a></big></b>
<br/>
The values 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


are defined by:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>R</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mo stretchy="false">=</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>e</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>e</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>R</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
</mrow></math>

 is the derivative of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>


and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>avg</mi>
</mrow></math>

 is the 
<a href="#7.a"><span style='white-space: nowrap'>Euclidean&#xA0;Average</span>: 7.a</a>


<br/>
<br/>
<b><big><a name="4.1.1.f" id="4.1.1.f">4.1.1.f: Output Arguments</a></big></b>
<br/>
We define 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B2;</mi>
<mo stretchy="false">&#x02208;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

 as the 
maximum value, greater than zero and less than or equal one,
such that the following conditions hold:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>l</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>l</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">/</mo>
<mn>1000</mn>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>u</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>u</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">/</mo>
<mn>1000</mn>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">/</mo>
<mn>1000</mn>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">/</mo>
<mn>1000</mn>
</mtd></mtr></mtable>
</mrow></math>

The output values are defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>xOut</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>aOut</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>bOut</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mtd></mtr></mtable>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>lambda</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='normal'>&#x003B2;</mi>
<mo stretchy="false">/</mo>
<msup><mn>2</mn>
<mi mathvariant='italic'>i</mi>
</msup>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>i</mi>
</mrow></math>

 is the smallest
non-negative integer such that the descent criteria below holds.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If <i>msg</i> is &quot;ok&quot;,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>xOut</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>x</mi>
</mrow></math>

, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>aOut</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>a</mi>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>bOut</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

,
then an more accurate answer cannot be obtained 
(due to numerical round off error).

<br/>
<br/>
<b><big><a name="4.1.1.g" id="4.1.1.g">4.1.1.g: Descent Criteria</a></big></b>
<br/>
We define the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
<mo stretchy="false">&#x02192;</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
</mrow></math>

 by:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mspace width='.3em'/>
<msubsup><mo stretchy="false">|</mo>
<mn>2</mn>
<mn>2</mn>
</msubsup>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<msup><mi mathvariant='italic'>R</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x00394;</mi>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mo stretchy="false">,</mo>
<mi mathvariant='normal'>&#x00394;</mi>
<msup><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mo stretchy="false">,</mo>
<mi mathvariant='normal'>&#x00394;</mi>
<msup><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msup><mo stretchy="false">)</mo>
<mi mathvariant='italic'>T</mi>
</msup>
<mspace width='.3em'/>
<msubsup><mo stretchy="false">|</mo>
<mn>2</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>O</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='normal'>&#x003B8;</mi>
<mn>2</mn>
</msup>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<msubsup><mrow><mo stretchy="true">|</mo><mrow><mspace width='.3em'/>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mi mathvariant='normal'>&#x003B1;</mi>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>e</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>e</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mspace width='.3em'/>
</mrow><mo stretchy="true">|</mo></mrow>
<mn>2</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>O</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='normal'>&#x003B8;</mi>
<mn>2</mn>
</msup>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02264;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<msup><mo stretchy="false">)</mo>
<mn>2</mn>
</msup>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msubsup><mo stretchy="false">|</mo>
<mn>2</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">+</mo>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">|</mo>
<mn>2</mn>
</msub>
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='normal'>&#x003B8;</mi>
<mn>2</mn>
</msup>
<msup><mi mathvariant='normal'>&#x003B1;</mi>
<mn>2</mn>
</msup>
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>O</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='normal'>&#x003B8;</mi>
<mn>2</mn>
</msup>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02264;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">[</mo>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<msup><mo stretchy="false">)</mo>
<mn>2</mn>
</msup>
<mo stretchy="false">+</mo>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='normal'>&#x003B8;</mi>
<mn>2</mn>
</msup>
<msup><mi mathvariant='normal'>&#x003B1;</mi>
<mn>2</mn>
</msup>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>O</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='normal'>&#x003B8;</mi>
<mn>2</mn>
</msup>
<mo stretchy="false">)</mo>
</mtd></mtr></mtable>
</mrow></math>

It follows that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003B8;</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02264;</mo>
</mtd><mtd columnalign="left" >
<mi mathvariant='normal'>&#x003B8;</mi>
<mo stretchy="false">(</mo>
<mo stretchy="false">-</mo>
<mn>2</mn>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>O</mi>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='normal'>&#x003B8;</mi>
<mn>2</mn>
</msup>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
<msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02264;</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mn>2</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">)</mo>
</mtd></mtr></mtable>
</mrow></math>

The value 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003BB;</mi>
</mrow></math>

 is chosen so that 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02264;</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mfrac><mrow><mn>1</mn>
</mrow>
<mrow><mn>2</mn>
</mrow>
</mfrac>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">)</mo>
</mrow></math>

<br/>
<b><big><a name="4.1.1.h" id="4.1.1.h">4.1.1.h: Corrector Steps</a></big></b>
<br/>
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow></math>

, the current step is a corrector step.
In this case 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003BB;</mi>
</mrow></math>

 is one if 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mrow></math>


and zero otherwise.
In addition, if 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow></math>

, <code><font color="blue">Next</font></code> always returns &quot;ok&quot;.

<br/>
<br/>
<b><big><a name="4.1.1.i" id="4.1.1.i">4.1.1.i: Staying Interior</a></big></b>
<br/>
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mrow></math>

 is with in 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mn>100</mn>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>MachineEpsilon</mi>
<mo stretchy="false">*</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>u</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>l</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
</mrow></math>

of the boundary, it is pushed back to that distance from the boundary.
This is done on a component by component basis. 
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mrow></math>

 or 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mrow></math>

 is with in 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mn>100</mn>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>MachineEpsilon</mi>
<mo stretchy="false">*</mo>
<mo stretchy="false">(</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>Q</mi>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mo stretchy="false">+</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>r</mi>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mo stretchy="false">)</mo>
</mrow></math>

of zero, it is pushed back to that minimum value.
This is done on a component by component basis. 

<br/>
<br/>
<b><big><a name="4.1.1.j" id="4.1.1.j">4.1.1.j: Subroutines</a></big></b>


<table><tr><td align='left'  valign='top'>

<a href="#4.1.1.1">Delta: 4.1.1.1</a></td><td>
First Order Approximation Step</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="4.1.1.k" id="4.1.1.k">4.1.1.k: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Error.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Next.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Delta.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Residual.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/min.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/max.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/MaxAbs.h&gt;<br/>
#&#xA0;include&#xA0;&lt;CppAD/NearEqual.h&gt;<br/>
<br/>
//&#xA0;CppAD&#xA0;utilities&#xA0;used&#xA0;by&#xA0;QuasiNewton01Box<br/>
<br/>
#&#xA0;include&#xA0;&lt;float.h&gt;<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD_vector.h&gt;<br/>
#&#xA0;include&#xA0;&lt;CppAD/LuSolve.h&gt;<br/>
<br/>
#&#xA0;define&#xA0;StepBound&#xA0;.999<br/>
<br/>
bool&#xA0;NextTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;alpha&#xA0;=&#xA0;.2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;Q[]&#xA0;&#xA0;&#xA0;=&#xA0;{1.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;r[]&#xA0;&#xA0;&#xA0;=&#xA0;{5.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;l[]&#xA0;&#xA0;&#xA0;=&#xA0;{-.5};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;u[]&#xA0;&#xA0;&#xA0;=&#xA0;{1.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;x[]&#xA0;&#xA0;&#xA0;=&#xA0;{0.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[]&#xA0;&#xA0;&#xA0;=&#xA0;{1.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[]&#xA0;&#xA0;&#xA0;=&#xA0;{2.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;xOut[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;aOut[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;bOut[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;ftmp[3];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;derivative&#xA0;of&#xA0;R,&#xA0;right&#xA0;hand&#xA0;side,&#xA0;and&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;LuSolve&#xA0;expects&#xA0;SimpleVector&#xA0;arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;double&gt;&#xA0;Rp(9);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;double&gt;&#xA0;Rhs(3);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;double&gt;&#xA0;Result(3);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;average&#xA0;residual<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;avg&#xA0;=&#xA0;(&#xA0;(*u&#xA0;-&#xA0;*x)*(*b)&#xA0;+&#xA0;(*x&#xA0;-&#xA0;*l)*(*a)&#xA0;)&#xA0;/&#xA0;2.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;first&#xA0;row&#xA0;of&#xA0;Rp<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[0]&#xA0;&#xA0;=&#xA0;-&#xA0;*b;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[1]&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[2]&#xA0;&#xA0;=&#xA0;*u&#xA0;-&#xA0;*x;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rhs[0]&#xA0;=&#xA0;-&#xA0;(*u&#xA0;-&#xA0;*x)*(*b)&#xA0;+&#xA0;alpha&#xA0;*&#xA0;avg;&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;second&#xA0;row&#xA0;of&#xA0;Rp<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[3]&#xA0;&#xA0;=&#xA0;*a;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[4]&#xA0;&#xA0;=&#xA0;*x&#xA0;-&#xA0;*l;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[5]&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rhs[1]&#xA0;=&#xA0;-&#xA0;(*x&#xA0;-&#xA0;*l)*(*a)&#xA0;+&#xA0;alpha&#xA0;*&#xA0;avg;&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;third&#xA0;row&#xA0;of&#xA0;Rp<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[6]&#xA0;&#xA0;=&#xA0;*Q;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[7]&#xA0;&#xA0;=&#xA0;-1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rp[8]&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rhs[2]&#xA0;=&#xA0;-&#xA0;(*Q)*(*x)&#xA0;-&#xA0;*r&#xA0;+&#xA0;*a&#xA0;-&#xA0;*b;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;solve&#xA0;to&#xA0;Delta&#xA0;x,&#xA0;Delta&#xA0;a,&#xA0;and&#xA0;Delta&#xA0;b<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;logdet;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::LuSolve(3,&#xA0;1,&#xA0;Rp,&#xA0;Rhs,&#xA0;Result,&#xA0;logdet);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;determine&#xA0;step&#xA0;size<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;lambda&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;lambda&#xA0;*&#xA0;Result[0]&#xA0;&gt;&#xA0;StepBound&#xA0;*&#xA0;(*u&#xA0;-&#xA0;*x)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;lambda&#xA0;=&#xA0;StepBound&#xA0;*&#xA0;(*u&#xA0;-&#xA0;*x)&#xA0;/&#xA0;Result[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;lambda&#xA0;*&#xA0;Result[0]&#xA0;&lt;&#xA0;StepBound&#xA0;*&#xA0;(*l&#xA0;-&#xA0;*x)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;lambda&#xA0;=&#xA0;StepBound&#xA0;*&#xA0;(*l&#xA0;-&#xA0;*x)&#xA0;/&#xA0;Result[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;lambda&#xA0;*&#xA0;Result[1]&#xA0;&lt;&#xA0;-&#xA0;StepBound&#xA0;*&#xA0;(*a)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;lambda&#xA0;=&#xA0;-&#xA0;StepBound&#xA0;*&#xA0;(*a)&#xA0;/&#xA0;Result[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;lambda&#xA0;*&#xA0;Result[2]&#xA0;&lt;&#xA0;-&#xA0;StepBound&#xA0;*&#xA0;(*b)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;lambda&#xA0;=&#xA0;-&#xA0;StepBound&#xA0;*&#xA0;(*b)&#xA0;/&#xA0;Result[2];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;f0&#xA0;=&#xA0;Residual(n,&#xA0;Q,&#xA0;r,&#xA0;l,&#xA0;u,&#xA0;x,&#xA0;a,&#xA0;b,&#xA0;ftmp);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;fs&#xA0;=&#xA0;f0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;lambda&#xA0;=&#xA0;2.&#xA0;*&#xA0;lambda;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(&#xA0;fs&#xA0;&gt;=&#xA0;&#xA0;f0&#xA0;*&#xA0;(&#xA0;1.&#xA0;-&#xA0;.5&#xA0;*&#xA0;lambda*(1&#xA0;-&#xA0;alpha)&#xA0;)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;lambda&#xA0;=&#xA0;lambda&#xA0;/&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*xOut&#xA0;=&#xA0;*x&#xA0;+&#xA0;lambda&#xA0;*&#xA0;Result[0];&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*aOut&#xA0;=&#xA0;*a&#xA0;+&#xA0;lambda&#xA0;*&#xA0;Result[1];&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*bOut&#xA0;=&#xA0;*b&#xA0;+&#xA0;lambda&#xA0;*&#xA0;Result[2];&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fs&#xA0;=&#xA0;Residual(n,&#xA0;Q,&#xA0;r,&#xA0;l,&#xA0;u,&#xA0;xOut,&#xA0;aOut,&#xA0;bOut,&#xA0;ftmp);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Result[0]&#xA0;=&#xA0;*xOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Result[1]&#xA0;=&#xA0;*aOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Result[2]&#xA0;=&#xA0;*bOut;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;lamOut;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Next(n,&#xA0;alpha,&#xA0;Q,&#xA0;r,&#xA0;l,&#xA0;u,&#xA0;x,&#xA0;a,&#xA0;b,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;xOut,&#xA0;aOut,&#xA0;bOut,&#xA0;lamOut);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;msg&#xA0;==&#xA0;&quot;ok&quot;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ok&#xA0;=&#xA0;false;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(lambda,&#xA0;&#xA0;&#xA0;lamOut,&#xA0;1e-12,&#xA0;1e-12);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(Result[0],&#xA0;*xOut,&#xA0;1e-12,&#xA0;1e-12);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(Result[1],&#xA0;*aOut,&#xA0;1e-12,&#xA0;1e-12);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(Result[2],&#xA0;*bOut,&#xA0;1e-12,&#xA0;1e-12);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="4.1.1.1" id="4.1.1.1">4.1.1.1: First Order Approximation Step</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'><br/>
const&#xA0;char&#xA0;*&#xA0;Delta(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font></code><i><span style='white-space: nowrap'>alpha</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>Q</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>r</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>l</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>b</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>dx</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>da</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>db</span></i><code><font color="blue"><span style='white-space: nowrap'>)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
</span></font></code></td></tr>
</table>
<b><big><a name="4.1.1.1.a" id="4.1.1.1.a">4.1.1.1.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">Delta</font></code> is <a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.

<br/>
<br/>
<b><big><a name="4.1.1.1.b" id="4.1.1.1.b">4.1.1.1.b: Return Value</a></big></b>
<br/>
If the return value of <code><font color="blue">Delta</font></code> is either the (const char *) &quot;ok&quot;,
it succeeded in meeting its specifications.
Otherwise, the return value is an error message and the specifications
have not been met.
Provided that all the input and output arguments have their specified lengths,
such a failure should not have any side effects.

<br/>
<br/>
<b><big><a name="4.1.1.1.c" id="4.1.1.1.c">4.1.1.1.c: Input Arguments</a></big></b>
<br/>
We define 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x02208;</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>Z</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">&#x02208;</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
as the values of the corresponding input arguments.
The matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
</mrow></math>

 must be positive definite

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">&lt;</mo>
<mn>1</mn>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>u</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>a</mi>
</mrow></math>

, and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="4.1.1.1.d" id="4.1.1.1.d">4.1.1.1.d: Notation</a></big></b>
<br/>
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 for the
<a href="#7.i"><span style='white-space: nowrap'>vector&#xA0;of&#xA0;ones</span>: 7.i</a>
.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 for the
<a href="#7.c"><span style='white-space: nowrap'>diagonal&#xA0;matrix&#xA0;of&#xA0;a&#xA0;vector</span>: 7.c</a>
.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 for the
<a href="#7.o"><span style='white-space: nowrap'>residual&#xA0;function</span>: 7.o</a>
.

This routine solves for 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


such that:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>R</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mo stretchy="false">=</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>e</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mi mathvariant='italic'>e</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>R</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
</mrow></math>

 is the derivative of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>


and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>avg</mi>
</mrow></math>

 is the 
<a href="#7.a"><span style='white-space: nowrap'>Euclidean&#xA0;Average</span>: 7.a</a>
.

<br/>
<br/>
<b><big><a name="4.1.1.1.e" id="4.1.1.1.e">4.1.1.1.e: Output Arguments</a></big></b>
<br/>
The values 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mrow></math>

, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mrow></math>

, and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mrow></math>


will be placed in the output arguments

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>dx</mi>
</mrow></math>

, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>da</mi>
</mrow></math>

, and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>db</mi>
</mrow></math>


respectively.
These arguments must be vectors of length 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>

.


<br/>
<br/>
<b><big><a name="4.1.1.1.f" id="4.1.1.1.f">4.1.1.1.f: Theory</a></big></b>
<br/>
The derivative of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

 is given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msup><mi mathvariant='italic'>R</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>Q</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

Substituting in for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

 and its derivative
in the equation defining 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mrow></math>



<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mrow></math>

, and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mrow></math>


we obtain:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>Q</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>b</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>a</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>b</mi>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

where

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='normal'>&#x003B2;</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">{</mo>
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">}</mo>
<mo stretchy="false">/</mo>
<mn>2</mn>
</mtd></mtr></mtable>
</mrow></math>

Replacing the first row by
the first row times 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
</mrow></math>

,
and replacing the second row by
the second row times 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
</mrow></math>

,
we obtain:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>Q</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>e</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>a</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>b</mi>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

Replacing the first row by
the first row plus the second row plus the third row,
we obtain:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<msup><mrow><mo stretchy="true">[</mo><mrow><mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>Q</mi>
</mrow><mo stretchy="true">]</mo></mrow>
<mrow><mn>-1</mn>
</mrow>
</msup>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x000D7;</mo>
</mtd><mtd columnalign="left" >
<mrow><mo stretchy="true">[</mo><mrow><mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>r</mi>
</mrow><mo stretchy="true">]</mo></mrow>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mn>-1</mn>
</mrow>
</msup>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>b</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>a</mi>
</mtd></mtr></mtable>
</mrow></math>

<br/>
<b><big><a name="4.1.1.1.g" id="4.1.1.1.g">4.1.1.1.g: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Delta.h&gt;<br/>
#&#xA0;include&#xA0;&lt;CppAD/NearEqual.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
<br/>
<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;math.h&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
<br/>
bool&#xA0;DeltaTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;n&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;3;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;alpha&#xA0;=&#xA0;.25;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;Q[]&#xA0;&#xA0;&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;-.5,&#xA0;.25,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;-.5,&#xA0;&#xA0;&#xA0;1.,&#xA0;-.5,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.25,&#xA0;&#xA0;.5,&#xA0;1.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;r[]&#xA0;&#xA0;&#xA0;=&#xA0;{1.,&#xA0;2.,&#xA0;3.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;l[]&#xA0;&#xA0;&#xA0;=&#xA0;{-1.,&#xA0;-2.,&#xA0;-1.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;u[]&#xA0;&#xA0;&#xA0;=&#xA0;{3.,&#xA0;2.,&#xA0;3.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;x[]&#xA0;&#xA0;&#xA0;=&#xA0;{.1,&#xA0;.2&#xA0;,&#xA0;.3&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;a[]&#xA0;&#xA0;&#xA0;=&#xA0;{1.,&#xA0;3.,&#xA0;2.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;b[]&#xA0;&#xA0;&#xA0;=&#xA0;{2.,&#xA0;1.,&#xA0;2.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;dx[3];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;da[3];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;db[3];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Delta(n,&#xA0;alpha,&#xA0;Q,&#xA0;r,&#xA0;l,&#xA0;u,&#xA0;x,&#xA0;a,&#xA0;b,&#xA0;dx,&#xA0;da,&#xA0;db);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;msg&#xA0;==&#xA0;&quot;ok&quot;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ok&#xA0;=&#xA0;false;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;determine&#xA0;beta&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;beta&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;dtmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;dtmp&#xA0;=&#xA0;(u[i]&#xA0;-&#xA0;x[i])*&#xA0;b[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;beta&#xA0;+=&#xA0;dtmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dtmp&#xA0;=&#xA0;(x[i]&#xA0;-&#xA0;l[i])*&#xA0;a[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;beta&#xA0;+=&#xA0;dtmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;beta&#xA0;&#xA0;=&#xA0;beta&#xA0;/&#xA0;(2&#xA0;*&#xA0;n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;solution&#xA0;of&#xA0;equations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;u_x&#xA0;=&#xA0;u[i]&#xA0;-&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;x_l&#xA0;=&#xA0;x[i]&#xA0;-&#xA0;l[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;D(u-x)&#xA0;*&#xA0;b&#xA0;-&#xA0;D(b)&#xA0;*&#xA0;dx&#xA0;+&#xA0;D(u-x)&#xA0;*&#xA0;db&#xA0;=&#xA0;alpha&#xA0;*&#xA0;beta&#xA0;*&#xA0;e<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(&#xA0;u_x*b[i]&#xA0;-&#xA0;b[i]*dx[i]&#xA0;+&#xA0;u_x*db[i],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;alpha&#xA0;*&#xA0;beta,&#xA0;1e-12,&#xA0;1e-12&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;D(x-l)&#xA0;*&#xA0;a&#xA0;+&#xA0;D(a)&#xA0;*&#xA0;dx&#xA0;+&#xA0;D(x-l)&#xA0;*&#xA0;da&#xA0;=&#xA0;alpha&#xA0;*&#xA0;beta&#xA0;*&#xA0;e<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(&#xA0;x_l*a[i]&#xA0;+&#xA0;a[i]*dx[i]&#xA0;+&#xA0;x_l*da[i],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;alpha&#xA0;*&#xA0;beta&#xA0;,&#xA0;1e-12&#xA0;,&#xA0;1e-12&#xA0;);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Q&#xA0;*&#xA0;x&#xA0;+&#xA0;r&#xA0;-&#xA0;a&#xA0;+&#xA0;b&#xA0;+&#xA0;Q&#xA0;*&#xA0;dx&#xA0;-&#xA0;D(e)&#xA0;*&#xA0;da&#xA0;+&#xA0;D(e)&#xA0;*&#xA0;db&#xA0;&#xA0;=&#xA0;0&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Qxi&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Qdxi&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Qxi&#xA0;&#xA0;+=&#xA0;Q[i*n+j]&#xA0;*&#xA0;x[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Qdxi&#xA0;+=&#xA0;Q[i*n+j]&#xA0;*&#xA0;dx[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(0.,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Qxi&#xA0;+&#xA0;r[i]&#xA0;-&#xA0;a[i]&#xA0;+&#xA0;b[i]&#xA0;+&#xA0;Qdxi&#xA0;-&#xA0;da[i]&#xA0;+&#xA0;db[i],<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1e-12,&#xA0;1e-12&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="4.1.2" id="4.1.2">4.1.2: Central Path Residual</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>double&#xA0;Residual(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>Q</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>r</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>l</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>b</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>FOut</span></i><code><font color="blue"><span style='white-space: nowrap'>)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;3&#xA0;*&#xA0;n<br/>
<br/>
</span></font></code></td></tr>
</table>
<b><big><a name="4.1.2.a" id="4.1.2.a">4.1.2.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">Residual</font></code> is <a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.

<br/>
<br/>
<b><big><a name="4.1.2.b" id="4.1.2.b">4.1.2.b: Input Arguments</a></big></b>
<br/>
We define 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x02208;</mo>
<msub><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>Z</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
</msub>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
as the values of the corresponding input arguments.
The matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
</mrow></math>

 must be positive definite

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>u</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>u</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>a</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="4.1.2.c" id="4.1.2.c">4.1.2.c: Notation</a></big></b>
<br/>
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 for the
<a href="#7.i"><span style='white-space: nowrap'>vector&#xA0;of&#xA0;ones</span>: 7.i</a>
.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 for the
<a href="#7.c"><span style='white-space: nowrap'>diagonal&#xA0;matrix&#xA0;of&#xA0;a&#xA0;vector</span>: 7.c</a>
.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 for the
<a href="#7.o"><span style='white-space: nowrap'>residual&#xA0;function</span>: 7.o</a>
.

<br/>
<br/>
<b><big><a name="4.1.2.d" id="4.1.2.d">4.1.2.d: Output Arguments</a></big></b>
<br/>
The value 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 will be placed in the
output argument 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>FOut</mi>
</mrow></math>


which must be a vector of length at 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>3</mn>
<mi mathvariant='italic'>n</mi>
</mrow></math>

.
The return value of <code><font color="blue">Residual</font></code> is the
sum of the squares of the elements of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>FOut</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="4.1.2.e" id="4.1.2.e">4.1.2.e: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Error.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Residual.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/MaxAbs.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/is_symmetric.h&gt;<br/>
#&#xA0;include&#xA0;&lt;CppAD/NearEqual.h&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
<br/>
bool&#xA0;ResidualTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;Q[]&#xA0;=&#xA0;{1.,&#xA0;-1.,&#xA0;-1.,&#xA0;2.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;r[]&#xA0;=&#xA0;{1.,&#xA0;2.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;l[]&#xA0;=&#xA0;{-1.,&#xA0;-2.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;u[]&#xA0;=&#xA0;{1.,&#xA0;1.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;x[]&#xA0;=&#xA0;{.5,&#xA0;-.5};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;a[]&#xA0;=&#xA0;{1.,&#xA0;2.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;b[]&#xA0;=&#xA0;{3.,&#xA0;4.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;FOut[6];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;Fsq;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;i;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;call&#xA0;to&#xA0;Residual&#xA0;with&#xA0;dx,&#xA0;da,&#xA0;db<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Fsq&#xA0;=&#xA0;Residual(n,&#xA0;Q,&#xA0;r,&#xA0;l,&#xA0;u,&#xA0;x,&#xA0;a,&#xA0;b,&#xA0;FOut);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(&#xA0;FOut[0],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(u[0]&#xA0;-&#xA0;x[0])&#xA0;*&#xA0;b[0]&#xA0;,&#xA0;1e-12,&#xA0;1e-12&#xA0;);&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(&#xA0;FOut[1],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(u[1]&#xA0;-&#xA0;x[1])&#xA0;*&#xA0;b[1]&#xA0;,&#xA0;1e-12,&#xA0;1e-12&#xA0;);&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(&#xA0;FOut[2],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(x[0]&#xA0;-&#xA0;l[0])&#xA0;*&#xA0;a[0]&#xA0;,&#xA0;1e-12,&#xA0;1e-12&#xA0;);&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(&#xA0;FOut[3],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(x[1]&#xA0;-&#xA0;l[1])&#xA0;*&#xA0;a[1]&#xA0;,&#xA0;1e-12,&#xA0;1e-12&#xA0;);&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(FOut[4],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q[0]*x[0]&#xA0;+&#xA0;Q[2]*x[1]&#xA0;+&#xA0;r[0]&#xA0;-&#xA0;a[0]&#xA0;+&#xA0;b[0]&#xA0;,&#xA0;1e-12,&#xA0;1e-12&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(FOut[5],&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Q[1]*x[0]&#xA0;+&#xA0;Q[3]*x[1]&#xA0;+&#xA0;r[1]&#xA0;-&#xA0;a[1]&#xA0;+&#xA0;b[1]&#xA0;,&#xA0;1e-12,&#xA0;1e-12&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;6;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;FOut[i]&#xA0;*&#xA0;FOut[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(&#xA0;Fsq,&#xA0;&#xA0;sum,&#xA0;1e-12,&#xA0;1e-12&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="4.2" id="4.2">4.2: The Broyden-Fletcher-Goldfarb-Shanno Update</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>const&#xA0;char&#xA0;*&#xA0;Bfgs(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font></code><i><span style='white-space: nowrap'>epsilon</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>xk</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>gk</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>xp</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>gp</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;and&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>H</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="4.2.a" id="4.2.a">4.2.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">Bfgs</font></code> uses the QN01Box
<a href="#6.8"><span style='white-space: nowrap'>error&#xA0;handler</span>: 6.8</a>
 to report errors.

<br/>
<br/>
<b><big><a name="4.2.b" id="4.2.b">4.2.b: Input Argument</a></big></b>
<br/>
Let the positive integer
<i>n</i>,
the positive value	

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>

, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
be the value of the corresponding input arguments.

<br/>
<br/>
<b><big><a name="4.2.c" id="4.2.c">4.2.c: H</a></big></b>
<br/>
The matrix <i>H</i> is both an input and an output argument.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

 
to denote the input value of <i>H</i> and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

 to denote its output value.
We define the values 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>s</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>y</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mtd></mtr></mtable>
</mrow></math>

If the following conditions hold:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="right" >
<mi mathvariant='normal'>&#x0025B;</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="right" >
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<msup><mo stretchy="false">|</mo>
<mn>2</mn>
</msup>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
<msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>s</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="right" >
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mtd></mtr></mtable>
</mrow></math>

the output value of <i>H</i> is given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">-</mo>
<mfrac><mrow><mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
<msup><mo stretchy="false">)</mo>
<mi mathvariant='italic'>T</mi>
</msup>
</mrow>
<mrow><msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
</mrow>
</mfrac>
<mo stretchy="false">+</mo>
<mfrac><mrow><mi mathvariant='italic'>y</mi>
<msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
</mrow>
<mrow><msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>s</mi>
</mrow>
</mfrac>
</mrow></math>

Otherwise the output value of <i>H</i> is given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="4.2.d" id="4.2.d">4.2.d: Return Value</a></big></b>
<br/>
The return value of <code><font color="blue">Bfgs</font></code> is
as follows:
<center>
<table><tr><td align='left'  valign='top'>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <b>Condition</b>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <b>Return Value</b>
</td></tr><tr><td align='left'  valign='top'>

if 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>

  
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;|s| small&quot; 
</td></tr><tr><td align='left'  valign='top'>

else if 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&lt;</mo>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<msup><mo stretchy="false">|</mo>
<mn>2</mn>
</msup>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;sHs small&quot; 
</td></tr><tr><td align='left'  valign='top'>

else if 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&lt;</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;ys small&quot; 
</td></tr><tr><td align='left'  valign='top'>

else 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;ok&quot; 
</td></tr>
</table>
</center><b><big><a name="4.2.e" id="4.2.e">4.2.e: Remark</a></big></b>
<br/>
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

 is positive definite, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
</mrow></math>

 is also positive definite.

<br/>
<br/>
<b><big><a name="4.2.f" id="4.2.f">4.2.f: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Bfgs.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;math.h&gt;<br/>
<br/>
bool&#xA0;BfgsTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;i1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;i2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;sHs;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;&#xA0;&#xA0;=&#xA0;2;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Memory&lt;double&gt;&#xA0;dMemory(2&#xA0;*&#xA0;n&#xA0;*&#xA0;n&#xA0;+&#xA0;5&#xA0;*&#xA0;n);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*A&#xA0;&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*H&#xA0;&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*xk&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*gk&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*xp&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*gp&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*Hs&#xA0;=&#xA0;dMemory(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;A&#xA0;is&#xA0;a&#xA0;random&#xA0;n&#xA0;x&#xA0;m&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[j]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp&#xA0;are&#xA0;random&#xA0;vectors<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;ys_sum&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;xk[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gk[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;xp[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gk[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;0&#xA0;&lt;&#xA0;i&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ys_sum&#xA0;+=&#xA0;(xp[i]&#xA0;-&#xA0;xk[i])&#xA0;*&#xA0;(gp[i]&#xA0;-&#xA0;gk[i]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;H&#xA0;=&#xA0;A&#xA0;*&#xA0;A^T<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;apxnorm&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i1&#xA0;=&#xA0;0;&#xA0;i1&#xA0;&lt;&#xA0;n;&#xA0;i1++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i2&#xA0;=&#xA0;0;&#xA0;i2&#xA0;&lt;&#xA0;n;&#xA0;i2++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;+=&#xA0;A[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;A[i2&#xA0;*&#xA0;n&#xA0;+&#xA0;j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;*&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;+=&#xA0;sqrt(sum&#xA0;/&#xA0;double(n)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;/=&#xA0;double(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H[i]&#xA0;=&#xA0;H[i]&#xA0;/&#xA0;apxnorm;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;epsilon&#xA0;&#xA0;=&#xA0;1e-10;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;case&#xA0;where&#xA0;s&#xA0;=&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xk,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;|s|&#xA0;small&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;case&#xA0;where&#xA0;ys&#xA0;=&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gp[0]&#xA0;=&#xA0;gk[0]&#xA0;-&#xA0;ys_sum&#xA0;/&#xA0;(xp[0]&#xA0;-&#xA0;xk[0]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ys&#xA0;small&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gp[0]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;normal&#xA0;case<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ok&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;update&#xA0;equation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sHs&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Hs[i]&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Hs[i]&#xA0;+=&#xA0;H[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;(xp[j]&#xA0;-&#xA0;xk[j]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sHs&#xA0;+=&#xA0;(xp[i]&#xA0;-&#xA0;xk[i])&#xA0;*&#xA0;Hs[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;fabs(&#xA0;Hs[i]&#xA0;-&#xA0;gp[i]&#xA0;+&#xA0;gk[i]&#xA0;&#xA0;)&#xA0;&lt;=&#xA0;epsilon;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;construct&#xA0;a&#xA0;case&#xA0;where&#xA0;H&#xA0;*&#xA0;s&#xA0;is&#xA0;zero<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;-=&#xA0;Hs[i]&#xA0;*&#xA0;Hs[j]&#xA0;/&#xA0;sHs;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;case&#xA0;where&#xA0;sHs&#xA0;=&#xA0;0&#xA0;(up&#xA0;to&#xA0;numerical&#xA0;precision)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;sHs&#xA0;small&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="5" id="5">5: Choosing a Scaled Projected Gradient Convergence Criteria</a>
</big></big></b></center>
<br/>
<b><big><a name="5.a" id="5.a">5.a: Introduction</a></big></b>
<br/>
The <a href="#4"><span style='white-space: nowrap'>QuasiNewton01Box</span>: 4</a>
 optimizer accepts convergence when
the <a href="#7.n"><span style='white-space: nowrap'>scaled&#xA0;projected&#xA0;gradient</span>: 7.n</a>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
</mrow></math>

 is less that <a href="#4.h"><span style='white-space: nowrap'>delta</span>: 4.h</a>
; i.e.,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>p</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">|</mo>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='normal'>&#x003B4;</mi>
</mrow></math>

  for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

.
In this section we discuss some relationships between 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B4;</mi>
</mrow></math>


and other criteria.

<br/>
<br/>
<b><big><a name="5.b" id="5.b">5.b: Objective Bound</a></big></b>
<br/>
Suppose that we are given an 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">&#x02208;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 a local minimizer of 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

.
We define the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">:</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<mo stretchy="false">]</mo>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

 defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">]</mo>
</mrow></math>

It follows from this definition that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msup><mi mathvariant='italic'>g</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">[</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">)</mo>
</mrow></math>

We suppose that the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>

 is convex on the 
line segment between 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>y</mi>
</mrow></math>

 which implies that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>g</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 is monotone. 
It also follows that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02265;</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mrow></math>

 
and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>g</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02265;</mo>
<mn>0</mn>
</mrow></math>

 for
all 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003BB;</mi>
<mo stretchy="false">&#x02208;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<mo stretchy="false">]</mo>
</mrow></math>

.
Thus

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02264;</mo>
</mtd><mtd columnalign="left" >
<msup><mi mathvariant='italic'>g</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02264;</mo>
</mtd><mtd columnalign="left" >
<msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<munderover><mo stretchy='false' minsize='2em'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>n</mi>
</munderover>
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="left" >
<munderover><mo stretchy='false' minsize='2em'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>n</mi>
</munderover>
<mrow><mo stretchy="true">{</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>u</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02264;</mo>
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>l</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02265;</mo>
<mn>0</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true"> </mo></mrow>
</mtd></mtr><mtr><mtd columnalign="right" >
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">|</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02264;</mo>
</mtd><mtd columnalign="left" >
<munderover><mo stretchy='false' minsize='2em'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>n</mi>
</munderover>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>p</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">|</mo>
<mo stretchy="false">=</mo>
<mo stretchy="false">&#x02016;</mo>
<mi mathvariant='italic'>p</mi>
<msub><mo stretchy="false">&#x02016;</mo>
<mn>1</mn>
</msub>
</mtd></mtr></mtable>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
</mrow></math>

 is the scaled projected gradient of

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>

 at 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">&#x02016;</mo>
<mo stretchy="false">&#x000B7;</mo>
<msub><mo stretchy="false">&#x02016;</mo>
<mn>1</mn>
</msub>
</mrow></math>

 is the 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">&#x02113;</mo>
<mn>-1</mn>
</mrow></math>

 norm
(sum of the absolute value of its components).
Thus the 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">&#x02113;</mo>
<mn>-1</mn>
</mrow></math>

 norm of the scaled projected gradient
is a bound on absolute difference between the 
current objective value and its optimum value.

<br/>
<br/>
<b><big><a name="5.c" id="5.c">5.c: Relative Objective</a></big></b>
<br/>
We define the projection function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>P</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>P</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">{</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mn>0</mn>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<msub><mi mathvariant='italic'>z</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="left" >
<msub><mi mathvariant='italic'>z</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mn>0</mn>
<mo stretchy="false">&#x02264;</mo>
<msub><mi mathvariant='italic'>z</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mn>1</mn>
</mtd></mtr><mtr><mtd columnalign="left" >
<mn>1</mn>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mn>1</mn>
<mo stretchy="false">&#x02264;</mo>
<msub><mi mathvariant='italic'>z</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd></mtr></mtable>
</mrow><mo stretchy="true"> </mo></mrow>
</mrow></math>

Let 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>X</mi>
</mrow></math>

 be the set of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">&#x02208;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 such that
the scaled projected gradient at 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>z</mi>
</mrow></math>

 is not zero.
We fix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">&#x02208;</mo>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow></math>

 and define the step function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>S</mi>
<mo stretchy="false">:</mo>
<mi mathvariant='italic'>X</mi>
<mo stretchy="false">&#x02192;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>S</mi>
<mo stretchy="false">+</mo>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>P</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02016;</mo>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">&#x02016;</mo>
<mn>2</mn>
</msub>
<mo stretchy="false">]</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>S</mi>
<mo stretchy="false">-</mo>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>P</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02016;</mo>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">&#x02016;</mo>
<mn>2</mn>
</msub>
<mo stretchy="false">]</mo>
</mtd></mtr></mtable>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 is the scaled projected gradient at 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>z</mi>
</mrow></math>


and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">&#x02016;</mo>
<mo stretchy="false">&#x000B7;</mo>
<msub><mo stretchy="false">&#x02016;</mo>
<mn>2</mn>
</msub>
</mrow></math>

 is the 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">&#x02113;</mo>
<mn>-2</mn>
</mrow></math>

 norm
(square root of the sum of squares of components).
We define the approximate difference function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">:</mo>
<mi mathvariant='italic'>X</mi>
<mo stretchy="false">&#x02192;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mfrac><mrow><mo stretchy="false">|</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">[</mo>
<msub><mi mathvariant='italic'>S</mi>
<mo stretchy="false">+</mo>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">|</mo>
<mo stretchy="false">+</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">[</mo>
<msub><mi mathvariant='italic'>S</mi>
<mo stretchy="false">-</mo>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">|</mo>
</mrow>
<mrow><mn>2</mn>
<mi mathvariant='normal'>&#x003B1;</mi>
</mrow>
</mfrac>
</mrow></math>

This is a rough approximation for the difference of the objective
function over 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

.
Note that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B1;</mi>
</mrow></math>

 should be chosen large enough so that
if the derivative of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>

 is near zero at 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>z</mi>
</mrow></math>


(
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>z</mi>
</mrow></math>

 is near a local minimum),
the forward difference still a reasonable approximation for the 
order of the derivative over 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

.
One might expect (but not be certain of)
a relative accuracy of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>

 for the 
optimal value of the objective at 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 if

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">&#x02016;</mo>
<mi mathvariant='italic'>p</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<msub><mo stretchy="false">&#x02016;</mo>
<mn>1</mn>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='normal'>&#x0025B;</mi>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>z</mi>
<mo stretchy="false">)</mo>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 is any point in 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

; for example,
we could choose 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>z</mi>
</mrow></math>

 as the initial point where the optimization
starts.



<hr/>


<center><b><big><big><a name="6" id="6">6: General Purpose Utilities</a>
</big></big></b></center>
<br/>
<b><big><a name="6.a" id="6.a">6.a: Contents</a></big></b>
<br/>
<table>
<tr><td><a href="#6.1" target="_top">Memory:&#xA0;6.1</a></td><td>A&#xA0;Fast&#xA0;and&#xA0;Simple&#xA0;Memory&#xA0;Management&#xA0;Template&#xA0;Class</td></tr><tr><td><a href="#6.2" target="_top">MaxAbs:&#xA0;6.2</a></td><td>Maximum&#xA0;Absolute&#xA0;Value&#xA0;of&#xA0;an&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector</td></tr><tr><td><a href="#6.3" target="_top">SumAbs:&#xA0;6.3</a></td><td>Sum&#xA0;of&#xA0;Absolute&#xA0;Value&#xA0;of&#xA0;Elements&#xA0;of&#xA0;a&#xA0;Vector</td></tr><tr><td><a href="#6.4" target="_top">PlusInfinity:&#xA0;6.4</a></td><td>Returns&#xA0;the&#xA0;IEEE&#xA0;Floating&#xA0;Point&#xA0;Value&#xA0;Plus&#xA0;Infinity</td></tr><tr><td><a href="#6.5" target="_top">ScaleProjGrad:&#xA0;6.5</a></td><td>Compute&#xA0;the&#xA0;Scaled&#xA0;Projected&#xA0;Gradient</td></tr><tr><td><a href="#6.6" target="_top">PositiveMatrix:&#xA0;6.6</a></td><td>Ensure&#xA0;that&#xA0;A&#xA0;Symmetric&#xA0;Matrix&#xA0;is&#xA0;Positive&#xA0;Definite</td></tr><tr><td><a href="#6.7" target="_top">zero_one_scale:&#xA0;6.7</a></td><td>Zero&#xA0;One&#xA0;Scale&#xA0;a&#xA0;Function's&#xA0;Argument&#xA0;Vector</td></tr><tr><td><a href="#6.8" target="_top">Error:&#xA0;6.8</a></td><td>QN01Box&#xA0;Error&#xA0;Messages&#xA0;and&#xA0;Traps</td></tr></table>
<hr/>
<center><b><big><big><a name="6.1" id="6.1">6.1: A Fast and Simple Memory Management Template Class</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> 
</td><td align='left'  valign='top'>
 <code><font color="blue"><span style='white-space: nowrap'>Memory&lt;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font></code><i><span style='white-space: nowrap'>buffer</span></i><code><font color="blue"><span style='white-space: nowrap'>(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>ntot</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>  </td></tr><tr><td align='left'  valign='top'>

</td><td align='left'  valign='top'>
 <code><font color="blue"></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;*</span></font></code><i><span style='white-space: nowrap'>buffer</span></i><code><font color="blue"><span style='white-space: nowrap'>(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>  </td></tr><tr><td align='left'  valign='top'>

</td></tr>
</table>
<br/>
<b><big><a name="6.1.a" id="6.1.a">6.1.a: Constructor</a></big></b>
<br/>
The operation
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Memory&lt;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font></code><i><span style='white-space: nowrap'>buffer</span></i><code><font color="blue"><span style='white-space: nowrap'>(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>ntot</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>allocates <i>ntot</i> <i>Type</i> objects with the
corresponding default constructor for each object.
Subblocks of this array can be accessed through <i>buffer</i>.

<br/>
<br/>
<b><big><a name="6.1.b" id="6.1.b">6.1.b: Subblocks</a></big></b>
<br/>
The operation
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;*</span></font></code><i><span style='white-space: nowrap'>buffer</span></i><code><font color="blue"><span style='white-space: nowrap'>(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>returns a pointer to an array of <i>m</i> object of
type <i>Type</i>.
Between the constructor for <i>buffer</i> and
its destructor,
the total sum of the arguments <i>m</i> used with
a specific <i>buffer</i> must equal the <i>ntot</i>
used to construct <i>buffer</i> (no more and no less or
an program <a href="#6.8"><span style='white-space: nowrap'>Error</span>: 6.8</a>
 will occur).

<br/>
<br/>
<b><big><a name="6.1.c" id="6.1.c">6.1.c: Destructor</a></big></b>
<br/>
The pointers returned by <code><font color="blue"></font></code><i><span style='white-space: nowrap'>buffer</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code> are valid
until the destructor for the variable <i>buffer</i> is called.


<hr/>



<center><b><big><big><a name="6.2" id="6.2">6.2: Maximum Absolute Value of an Element of a Vector</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>double&#xA0;MaxAbs(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="6.2.a" id="6.2.a">6.2.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">MaxAbs</font></code> is <a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.

<br/>
<br/>
<b><big><a name="6.2.b" id="6.2.b">6.2.b: Description</a></big></b>
<br/>
Returns the maximum with respect to the elements of <i>x</i>
of the absolute value of each element; i.e., the
<a href="#7.f"><span style='white-space: nowrap'>infinity&#xA0;norm</span>: 7.f</a>
 of <i>x</i>.
The argument 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&gt;</mo>
<mn>0</mn>
</mrow></math>

 is the length of the vector <i>x</i>.

<br/>
<br/>
<b><big><a name="6.2.c" id="6.2.c">6.2.c: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/MaxAbs.h&gt;<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
<br/>
bool&#xA0;MaxAbsTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;x[]&#xA0;=&#xA0;{&#xA0;-1.,&#xA0;3.,&#xA0;-2.,&#xA0;2.,&#xA0;-3.,&#xA0;1.,&#xA0;-4.,&#xA0;0.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;&#xA0;&#xA0;=&#xA0;sizeof(x)&#xA0;/&#xA0;sizeof(x[0]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;MaxAbs(n,&#xA0;x)&#xA0;==&#xA0;4.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}&#xA0;&#xA0;&#xA0;&#xA0;<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="6.3" id="6.3">6.3: Sum of Absolute Value of Elements of a Vector</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>double&#xA0;SumAbs(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="6.3.a" id="6.3.a">6.3.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">SumAbs</font></code> is <a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.

<br/>
<br/>
<b><big><a name="6.3.b" id="6.3.b">6.3.b: Description</a></big></b>
<br/>
Returns the sum of the absolute value of the elements of <i>x</i>; i.e., 
the <a href="#7.g"><span style='white-space: nowrap'>L-one&#xA0;norm</span>: 7.g</a>
 of <i>x</i>.
The argument 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&gt;</mo>
<mn>0</mn>
</mrow></math>

 is the length of the vector <i>x</i>.

<br/>
<br/>
<b><big><a name="6.3.c" id="6.3.c">6.3.c: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/SumAbs.h&gt;<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
<br/>
bool&#xA0;SumAbsTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;x[]&#xA0;=&#xA0;{&#xA0;-1.,&#xA0;3.,&#xA0;-2.,&#xA0;2.,&#xA0;-3.,&#xA0;1.,&#xA0;-4.,&#xA0;0.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;&#xA0;&#xA0;=&#xA0;sizeof(x)&#xA0;/&#xA0;sizeof(x[0]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;std::fabs(x[i]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;SumAbs(n,&#xA0;x)&#xA0;==&#xA0;sum;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}&#xA0;&#xA0;&#xA0;&#xA0;<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="6.4" id="6.4">6.4: Returns the IEEE Floating Point Value Plus Infinity</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>
 <code><font color="blue"><span style='white-space: nowrap'>PlusInfinity(const&#xA0;&lt;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>zero</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="6.4.a" id="6.4.a">6.4.a: Description</a></big></b>
<br/>
This routine
returns the ieee value 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">+</mo>
<mo stretchy="false">&#x0221E;</mo>
</mrow></math>

 with the 
same type as <i>zero</i>
(where <i>zero</i> is equal to zero).
Note that passing in <i>zero</i> as an argument avoids
having the compiler detect division by zero 
and warn or generate an error in response.

<br/>
<br/>
<b><big><a name="6.4.b" id="6.4.b">6.4.b: Type</a></big></b>
<br/>
Conversion from integer to this type must be supported.


<hr/>



<center><b><big><big><a name="6.5" id="6.5">6.5: Compute the Scaled Projected Gradient</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>void&#xA0;ScaleProjGrad(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>p</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>g</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>l</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code></td></tr>
</table>
<b><big><a name="6.5.a" id="6.5.a">6.5.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">ScaleProjGrad</font></code> 
is <a href="#7.e"><span style='white-space: nowrap'>exception&#xA0;safe</span>: 7.e</a>
.

<br/>
<br/>
<b><big><a name="6.5.b" id="6.5.b">6.5.b: Description</a></big></b>
<br/>
Computes a 
<a href="#7.n"><span style='white-space: nowrap'>scaled&#xA0;projected&#xA0;gradient</span>: 7.n</a>
.

<br/>
<br/>
<b><big><a name="6.5.c" id="6.5.c">6.5.c: n</a></big></b>
<br/>
specifies the dimension of the domain space for the objective function
in the definition of the scaled projected gradient. 

<br/>
<br/>
<b><big><a name="6.5.d" id="6.5.d">6.5.d: x</a></big></b>
<br/>
the vector <i>x</i> has length <i>n</i> and specifies
the argument value at which we are computing the scaled projected gradient.

<br/>
<br/>
<b><big><a name="6.5.e" id="6.5.e">6.5.e: g</a></big></b>
<br/>
the vector <i>g</i> has length <i>n</i> and contains
the gradient of the objective function a the point <i>x</i>.

<br/>
<br/>
<b><big><a name="6.5.f" id="6.5.f">6.5.f: l</a></big></b>
<br/>
This argument is optional. If it is not
present, the value zero is used for the lower limits.
If it is present,
the vector <i>l</i> has length <i>n</i> and specifies
the lower limits for the argument in the definition of the scaled
projected gradient. 


<br/>
<br/>
<b><big><a name="6.5.g" id="6.5.g">6.5.g: u</a></big></b>
<br/>
This argument is optional. If it is not
present, the value one is used for the upper limits.
If it is present,
the vector <i>u</i> has length <i>n</i> and specifies
the upper limits for the argument in the definition of the scaled
projected gradient.

<br/>
<br/>
<b><big><a name="6.5.h" id="6.5.h">6.5.h: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/ScaleProjGrad.h&gt;<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
<br/>
bool&#xA0;ScaleProjGradTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;n&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;l[]&#xA0;=&#xA0;{&#xA0;-1.,&#xA0;-1.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;u[]&#xA0;=&#xA0;{&#xA0;2.,&#xA0;2.&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;x[]&#xA0;=&#xA0;{&#xA0;.5,&#xA0;.5&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;g[]&#xA0;=&#xA0;{&#xA0;2.,&#xA0;-3.};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;p[2];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;formula&#xA0;for&#xA0;case&#xA0;where&#xA0;g[0]&#xA0;&gt;=&#xA0;0&#xA0;and&#xA0;g[1]&#xA0;&lt;=&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ScaleProjGrad(p,&#xA0;n,&#xA0;x,&#xA0;g,&#xA0;l,&#xA0;u);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;p[0]&#xA0;==&#xA0;(x[0]-l[0])*g[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;p[1]&#xA0;==&#xA0;(u[1]-x[1])*g[1];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;default&#xA0;values&#xA0;for&#xA0;lower&#xA0;and&#xA0;upper&#xA0;limits&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ScaleProjGrad(p,&#xA0;n,&#xA0;x,&#xA0;g);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;l[0]&#xA0;=&#xA0;0.;&#xA0;l[1]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u[0]&#xA0;=&#xA0;1.;&#xA0;u[1]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;p[0]&#xA0;==&#xA0;(x[0]-l[0])*g[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;p[1]&#xA0;==&#xA0;(u[1]-x[1])*g[1];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}&#xA0;&#xA0;&#xA0;&#xA0;<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="6.6" id="6.6">6.6: Ensure that A Symmetric Matrix is Positive Definite</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>void&#xA0;PositiveMatrix(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>eps</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;and&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>H</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="6.6.a" id="6.6.a">6.6.a: Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">PositiveMatrix</font></code> uses
the QN01Box <a href="#6.8"><span style='white-space: nowrap'>error&#xA0;handler</span>: 6.8</a>
 to report errors.

<br/>
<br/>
<b><big><a name="6.6.b" id="6.6.b">6.6.b: n</a></big></b>
<br/>
The argument <i>n</i> specifies 
the number row and column dimension of the matrix <i>H</i>.

<br/>
<br/>
<b><big><a name="6.6.c" id="6.6.c">6.6.c: eps</a></big></b>
<br/>
The argument <i>eps</i> is greater than zero and 
less than one.
It specifies
the minimum value for the ratio of the maximum eigen value
divided by the minimum eigen value for the output value of 
the matrix <i>H</i>.

<br/>
<br/>
<b><big><a name="6.6.d" id="6.6.d">6.6.d: H</a></big></b>
<br/>
We use <i>Hin</i> and <i>Hout</i> for the input
and output value of <i>H</i>.
The reciprocal condition number of <i>Hin</i> is the ratio of its
minimum eigen value divided by its maximum eigenvalue.
If this ratio is greater than or equal <i>eps</i>,
<i>Hout</i> is equal to <i>Hin</i>.
Otherwise, <i>Hout</i> is a matrix that has
its reciprocal condition number greater than or equal to 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>eps</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/&#xA0;2</span></font></code> 
and such that if 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Hin</mi>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>y</mi>
</mrow></math>

 then 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Hout</mi>
<mo stretchy="false">*</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>y</mi>
</mrow></math>

 where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 
is &quot;small&quot; (under the condition number constraint). 

<br/>
<br/>
<b><big><a name="6.6.e" id="6.6.e">6.6.e: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/PositiveMatrix.h&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;math.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/c2dsyev.h&gt;<br/>
<br/>
bool&#xA0;PositiveMatrixTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;k;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;&#xA0;&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;eps&#xA0;=&#xA0;1e-4;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;H[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;0.,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0.,&#xA0;0.&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;PositiveMatrix(n,&#xA0;eps,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;x[2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum_xHx&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum_xx&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;min_ratio&#xA0;=&#xA0;100.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;max_ratio&#xA0;=&#xA0;-100.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;100;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sum_xx&#xA0;+=&#xA0;x[i]&#xA0;*&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum_xHx&#xA0;+=&#xA0;x[i]&#xA0;*&#xA0;H[&#xA0;i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;x[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;min_ratio&#xA0;&gt;&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;min_ratio&#xA0;=&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;max_ratio&#xA0;&lt;&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;max_ratio&#xA0;=&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;min_ratio&#xA0;&gt;=&#xA0;eps&#xA0;*&#xA0;max_ratio;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span>
</font></code>

<hr/>
<center><b><big><big><a name="6.7" id="6.7">6.7: Zero One Scale a Function's Argument Vector</a>
</big></big></b></center>
<br/>
<b><big><a name="6.7.a" id="6.7.a">6.7.a: Constructor</a></big></b>

<br/>
<code><font color="blue"><span style='white-space: nowrap'>zero_one_scale&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>b</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

<br/>
<br/>
<b><big><a name="6.7.b" id="6.7.b">6.7.b: Purpose</a></big></b>
<br/>
Given the object <i>fun</i> that evaluations a function
defined on 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">]</mo>
</mrow></math>

,
<code><font color="blue">zero_one_scale</font></code> creates the object <i>obj</i>
that evaluates a scaled version of the function
defined on 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<mo stretchy="false">]</mo>
</mrow></math>


(so that it can be used with <a href="#4"><span style='white-space: nowrap'>QuasiNewton01Box</span>: 4</a>
).

<br/>
<br/>
<b><big><a name="6.7.c" id="6.7.c">6.7.c: Notation</a></big></b>
<br/>
We are given 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>m</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>m</mi>
</msup>
</mrow></math>

 where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

, 
and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>h</mi>
<mo stretchy="false">:</mo>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

.
We define 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 as the number of indices such that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&lt;</mo>
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mrow></math>

 and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mi mathvariant='italic'>I</mi>
<mo stretchy="false">:</mo>
<mo stretchy="false">{</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
<mn>-1</mn>
<mo stretchy="false">}</mo>
<mo stretchy="false">&#x02192;</mo>
<mo stretchy="false">{</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">-</mo>
<mn>1</mn>
<mo stretchy="false">}</mo>
</mtd></mtr><mtr><mtd columnalign="left" >
<mi mathvariant='italic'>I</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>j</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi>min</mi>
<mrow><mo stretchy="true">{</mo><mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">:</mo>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">&gt;</mo>
<mi mathvariant='italic'>I</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>j</mi>
<mn>-1</mn>
<mo stretchy="false">)</mo>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>and</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&lt;</mo>
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mrow><mo stretchy="true">}</mo></mrow>
</mtd></mtr></mtable>
</mrow></math>

where the expression 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>I</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>j</mi>
<mn>-1</mn>
<mo stretchy="false">)</mo>
</mrow></math>

 is interpreted as minus one 
when 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>j</mi>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow></math>

.
We define the function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B2;</mi>
<mo stretchy="false">:</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>m</mi>
</msup>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='normal'>&#x003B2;</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">{</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>j</mi>
</msub>
<mo stretchy="false">*</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>I</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>j</mi>
<mo stretchy="false">)</mo>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>for</mi>
<mspace width='.3em'/>
<mi mathvariant='normal'>some</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>j</mi>
</mtd></mtr><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>otherwise</mi>
<mo stretchy="false">;</mo>
<mspace width='.3em'/>
<mi mathvariant='normal'>i</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>e</mi>
<mo stretchy="false">.</mo>
<mo stretchy="false">,</mo>
</mstyle></mrow>
<mspace width='.3em'/>
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd></mtr></mtable>
</mrow><mo stretchy="true"> </mo></mrow>
</mrow></math>

for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>m</mi>
<mn>-1</mn>
</mrow></math>

.
The function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<mo stretchy="false">]</mo>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

  is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>h</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003B2;</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">)</mo>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="6.7.d" id="6.7.d">6.7.d: fun</a></big></b>
<br/>
The argument <i>fun</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Fun</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;*</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It is input to the <code><font color="blue">zero_one_scale</font></code> constructor
and must support the 
<a href="#6.7.k"><span style='white-space: nowrap'>function</span>: 6.7.k</a>
,
<a href="#6.7.l"><span style='white-space: nowrap'>gradient</span>: 6.7.l</a>
, and
<a href="#6.7.m"><span style='white-space: nowrap'>Hessian</span>: 6.7.m</a>

operations listed below
(for as long as the object <i>obj</i> exists).

<br/>
<br/>
<b><big><a name="6.7.e" id="6.7.e">6.7.e: m</a></big></b>
<br/>
The argument <i>m</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It specifies the dimension of the argument space for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>h</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="6.7.f" id="6.7.f">6.7.f: n</a></big></b>
<br/>
The argument <i>n</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It must be equal to the number of indices 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>i</mi>
</mrow></math>

 such that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&lt;</mo>
<msub><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="6.7.g" id="6.7.g">6.7.g: a</a></big></b>
<br/>
The argument <i>a</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It is a vector of length <i>m</i> that
specifies the lower limit for the domain of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>h</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="6.7.h" id="6.7.h">6.7.h: b</a></big></b>
<br/>
The argument <i>b</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>b</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It is a vector of length <i>m</i> that
specifies the upper limit for the domain of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>h</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="6.7.i" id="6.7.i">6.7.i: to_zero_one</a></big></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.to_zero_one(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>y_</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>maps a point <i>y_</i>, in the box 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">]</mo>
</mrow></math>

,
to the corresponding point <i>x</i>,
in the box 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

; i.e., 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B2;</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">_</mo>
</mrow></math>

.
The argument <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It is a vector of length <i>n</i>.
The argument <i>y_</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>y_</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It is a vector of length <i>m</i>.

<br/>
<br/>
<b><big><a name="6.7.j" id="6.7.j">6.7.j: from_zero_one</a></big></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.from_zero_one(</span></font></code><i><span style='white-space: nowrap'>x_</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>maps a point <i>x_</i>, in the box 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<msup><mo stretchy="false">]</mo>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
to the corresponding point <i>y</i>, in the box 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">]</mo>
</mrow></math>

; i.e.,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B2;</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">_</mo>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>y</mi>
</mrow></math>

.
The argument <i>x_</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x_</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It is a vector of length <i>n</i>.
The argument <i>y</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It is a vector of length <i>m</i>.

<br/>
<br/>
<b><big><a name="6.7.k" id="6.7.k">6.7.k: function</a></big></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>msg</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.function(</span></font></code><i><span style='white-space: nowrap'>y_</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>h</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>set <i>h</i> to the corresponding value of the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>h</mi>
</mrow></math>

.
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>msg</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function(</span></font></code><i><span style='white-space: nowrap'>x_</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>set <i>f</i> to the corresponding value of the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>

.
The arguments <i>h</i> and <i>f</i> have prototypes
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>h</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>The arguments <i>y_</i> and <i>x_</i> have prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>y_</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>x_</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>Their lengths are <i>m</i> and <i>n</i> respectively.

<br/>
<br/>
<b><big><a name="6.7.l" id="6.7.l">6.7.l: gradient</a></big></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>msg</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.gradient(</span></font></code><i><span style='white-space: nowrap'>h_y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>set <i>h_y</i> to the derivative
of the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>h</mi>
</mrow></math>

 with respect to its argument 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>y</mi>
</mrow></math>


(corresponding to the previous call to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>).
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>msg</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.gradient(</span></font></code><i><span style='white-space: nowrap'>f_x</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>set <i>f_x</i> to the derivative 
of the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>

 with respect to its argument 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>


(corresponding to the previous call to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>).
The arguments <i>f_x</i> and <i>h_y</i> have prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>h_y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>f_x</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>Their lengths are <i>m</i> and <i>n</i> respectively.

<br/>
<br/>
<b><big><a name="6.7.m" id="6.7.m">6.7.m: Hessian</a></big></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>msg</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.Hessian(</span></font></code><i><span style='white-space: nowrap'>h_yy</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>set <i>h_yy</i> to the Hessian
of the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>h</mi>
</mrow></math>

 with respect to its argument 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>y</mi>
</mrow></math>


(corresponding to the previous call to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>fun</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>).
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>msg</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.gradient(</span></font></code><i><span style='white-space: nowrap'>f_xx</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>set <i>f_xx</i> to the Hessian 
of the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>

 with respect to its argument 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>


(corresponding to the previous call to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>obj</span></i><code><font color="blue"><span style='white-space: nowrap'>.function</span></font></code>).
The arguments <i>h_yy</i> and <i>f_xx</i> have prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>h_yy</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*</span></font></code><i><span style='white-space: nowrap'>f_xx</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>Their lengths are 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>m</mi>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 respectively.
It does not matter if the matrices are stored in row major or column
major order because they should be symmetric.

<br/>
<br/>
<b><big><a name="6.7.n" id="6.7.n">6.7.n: msg</a></big></b>
<br/>
The <i>msg</i> results for 
<code><font color="blue">function</font></code>, <code><font color="blue">gradient</font></code> and <code><font color="blue">Hessian</font></code> above
has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*</span></font></code><i><span style='white-space: nowrap'>msg</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>.
In each case,
the <i>msg</i> result for <i>obj</i> is equal
to the corresponding <i>msg</i> result for <i>fun</i>.

<br/>
<br/>
<b><big><a name="6.7.o" id="6.7.o">6.7.o: Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/QuasiNewton01Box.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/zero_one_scale.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;sstream&gt;<br/>
<br/>
//&#xA0;begin&#xA0;empty&#xA0;namespace<br/>
namespace&#xA0;{&#xA0;<br/>
//<br/>
//&#xA0;Function&#xA0;object&#xA0;class<br/>
class&#xA0;Fun&#xA0;{<br/>
private:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;m;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::Memory&lt;double&gt;&#xA0;dmemory;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*y;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;fcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Hcount;<br/>
public:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;constructor&#xA0;for&#xA0;original&#xA0;function&#xA0;object<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Fun(size_t&#xA0;m_)&#xA0;:&#xA0;&#xA0;m(m_),&#xA0;dmemory(m_),&#xA0;fcount(0),&#xA0;gcount(0),&#xA0;Hcount(0)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;=&#xA0;dmemory(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;destructor&#xA0;for&#xA0;a&#xA0;function&#xA0;object<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;~Fun(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;function(const&#xA0;double&#xA0;*y_,&#xA0;double&#xA0;&amp;f)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;m;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y[i]&#xA0;=&#xA0;y_[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;f&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;m;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;f&#xA0;+=&#xA0;.5&#xA0;*&#xA0;(y[i]&#xA0;-&#xA0;i&#xA0;-&#xA0;1.)&#xA0;*&#xA0;(y[i]&#xA0;-&#xA0;i&#xA0;-&#xA0;1.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;++fcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&quot;ok&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;gradient<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;gradient(double&#xA0;*f_y)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;m;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;f_y[i]&#xA0;=&#xA0;y[i]&#xA0;-&#xA0;i&#xA0;-&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;++gcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&quot;ok&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;Hessian<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*&#xA0;Hessian(double&#xA0;*f_yy)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;++Hcount;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&quot;not&#xA0;available&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;function&#xA0;counter<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;functionCount(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;fcount;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;gradient&#xA0;counter<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;gradientCount(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;gcount;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;return&#xA0;Hessian&#xA0;counter<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;HessianCount(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;Hcount;&#xA0;}<br/>
};<br/>
<br/>
}&#xA0;<br/>
//&#xA0;end&#xA0;empty&#xA0;namespace<br/>
<br/>
bool&#xA0;zero_one_scale_(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i,&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dimension&#xA0;of&#xA0;domain&#xA0;of&#xA0;h<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;3;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Fun&#xA0;h(m);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;lower&#xA0;and&#xA0;upper&#xA0;limits&#xA0;for&#xA0;domain&#xA0;of&#xA0;h<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;a[]&#xA0;=&#xA0;{&#xA0;-5.,&#xA0;1.,&#xA0;-4.&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;b[]&#xA0;=&#xA0;{&#xA0;+5.,&#xA0;1.,&#xA0;+4.&#xA0;};<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::ostream&#xA0;&#xA0;&#xA0;&#xA0;&amp;os&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;std::cout;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;level&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;itr_max&#xA0;&#xA0;=&#xA0;50;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;quad_max&#xA0;=&#xA0;40;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;m&#xA0;-&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ConvergeNorm&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;norm&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;GradMaxAbs;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delta&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1e-7;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;zero_one_scale&lt;Fun&gt;&#xA0;obj(&amp;h,&#xA0;m,&#xA0;n,&#xA0;a,&#xA0;b);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sok_cur&#xA0;&#xA0;=&#xA0;false;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;itr_cur&#xA0;&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;quad_cur&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bfgs_cur&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;r_cur&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;.25;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;f_cur;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Memory&lt;double&gt;&#xA0;&#xA0;dmemory(m&#xA0;+&#xA0;n&#xA0;+&#xA0;n&#xA0;+&#xA0;n&#xA0;+&#xA0;n&#xA0;*&#xA0;n&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*y_cur&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dmemory(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*x_cur&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dmemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*s_cur&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dmemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*g_cur&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dmemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*H_cur&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;dmemory(n&#xA0;*&#xA0;n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;m;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;y_cur[i]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y_cur[i]&#xA0;=&#xA0;std::max(y_cur[i],&#xA0;a[i]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y_cur[i]&#xA0;=&#xA0;std::min(y_cur[i],&#xA0;b[i]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;convert&#xA0;from&#xA0;y&#xA0;to&#xA0;x&#xA0;coordinates<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj.to_zero_one(x_cur,&#xA0;y_cur);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;initial&#xA0;objective<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;obj.function(x_cur,&#xA0;f_cur);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ok&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;initial&#xA0;gradient<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;obj.gradient(g_cur);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ok&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initialize&#xA0;Hessian&#xA0;to&#xA0;identity<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H_cur[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H_cur[i&#xA0;*&#xA0;n&#xA0;+&#xA0;i]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;QuasiNewton01Box(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;os,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;level,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;itr_max,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;quad_max,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;norm,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delta,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input+Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sok_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;itr_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;quad_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bfgs_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;r_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;f_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;s_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;g_cur,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H_cur&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;the&#xA0;reutrn&#xA0;message<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;msg&#xA0;==&#xA0;&quot;ok&quot;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;std::ostringstream&#xA0;buf;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;&#xA0;:functionCount&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;h.functionCount();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;&#xA0;:gradientCount&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;h.gradientCount();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;buf.str();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ok&#xA0;=&#xA0;false;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;convert&#xA0;to&#xA0;y&#xA0;coordinates<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj.from_zero_one(x_cur,&#xA0;y_cur);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;m;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;a[i]&#xA0;==&#xA0;b[i]&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;y_cur[1]&#xA0;==&#xA0;a[1]&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ok&#xA0;&amp;=&#xA0;std::fabs(&#xA0;y_cur[i]&#xA0;-&#xA0;i&#xA0;-&#xA0;1.&#xA0;)&#xA0;&lt;=&#xA0;1e-6;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>
<center><b><big><big><a name="6.8" id="6.8">6.8: QN01Box Error Messages and Traps</a>
</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>
 
<code><font color="blue"><span style='white-space: nowrap'>#&#xA0;include&#xA0;&lt;QN01Box/Error.h&gt;</span></font></code>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>LinkErrorHandler(</span></font></code><i><span style='white-space: nowrap'>handler</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>

<code><font color="blue"></font></code><i><span style='white-space: nowrap'>handler</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>line</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>file</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>routine</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>message</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="6.8.a" id="6.8.a">6.8.a: Description</a></big></b>
<br/>
The default <code><font color="blue">QN01Box</font></code> error handler prints messages
to standard error and generates an assert (as an aid to using the debugger).
If you do not want this action you will have to define your own 
error handler and link it to the <code><font color="blue">QN01Box</font></code> package.

<br/>
<br/>
<b><big><a name="6.8.b" id="6.8.b">6.8.b: LinkErrorHandler</a></big></b>
<br/>
The prototype for the argument <i>handler</i> is
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;</span></font></code><i><span style='white-space: nowrap'>handler</span></i><code><font color="blue"><span style='white-space: nowrap'>(int&#xA0;line,&#xA0;char&#xA0;*file,&#xA0;char&#xA0;*routine,&#xA0;char&#xA0;*message)<br/>
</span></font></code>If you define a handler,
you can call <code><font color="blue">LinkErrorHandler</font></code> to link it to the QN01Box package.
You can restore the default error handler using the syntax
<code><font color="blue">
<span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::LinkErrorHandler(QN01Box::defaultErrorHandler);<br/>
</span>
</font></code>
Note that if you are using <code><font color="blue">QN01Box</font></code> namespace,
you need not have it present in the command above.

<br/>
<br/>
<b><big><a name="6.8.c" id="6.8.c">6.8.c: line</a></big></b>
<br/>
The argument <i>line</i> to <i>handler</i> specifies the source
code line number where the error was detected.

<br/>
<br/>
<b><big><a name="6.8.d" id="6.8.d">6.8.d: file</a></big></b>
<br/>
The argument <i>file</i> to <i>handler</i> specifies the source
code file where the error was detected.
It is a <code><font color="blue">'\0'</font></code> terminated character string.

<br/>
<br/>
<b><big><a name="6.8.e" id="6.8.e">6.8.e: routine</a></big></b>
<br/>
The argument <i>routine</i> to <i>handler</i> specifies the routine,
in the <code><font color="blue">QN01Box</font></code> namespace, where the error was detected.

<br/>
<br/>
<b><big><a name="6.8.f" id="6.8.f">6.8.f: message</a></big></b>
<br/>
The argument <i>message</i> to <i>handler</i> is a message
describing the cause of the error (as a misuse of QN01Box).
It is a <code><font color="blue">'\0'</font></code> terminated character string.
If the message is empty, <code><font color="blue"></font></code><i><span style='white-space: nowrap'>message</span></i><code><font color="blue"><span style='white-space: nowrap'>[0]&#xA0;==&#xA0;'\0'</span></font></code>,
the cause of the error is unknown.

<br/>
<br/>
<b><big><a name="6.8.g" id="6.8.g">6.8.g: Example</a></big></b>
<br/>
The file <code><font color="blue">MemoryError.cpp</font></code> 
(source code below) is an example of how to do this replacement:
<code><font color="blue">
<br/>
<span style='white-space: nowrap'>/*<br/>
-----------------------------------------------------------------------<br/>
From:&#xA0;&#xA0;&#xA0;Resource&#xA0;Facility&#xA0;for&#xA0;Population&#xA0;Kinetics<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Department&#xA0;of&#xA0;Bioengineering&#xA0;Box&#xA0;352255<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;University&#xA0;of&#xA0;Washington<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Seattle,&#xA0;WA&#xA0;98195-2255<br/>
<br/>
This&#xA0;file&#xA0;is&#xA0;part&#xA0;of&#xA0;the&#xA0;System&#xA0;for&#xA0;Population&#xA0;Kinetics&#xA0;(SPK),&#xA0;which<br/>
was&#xA0;developed&#xA0;with&#xA0;support&#xA0;from&#xA0;NIH&#xA0;grants&#xA0;RR-12609&#xA0;and&#xA0;P41-<br/>
EB001975.&#xA0;Please&#xA0;cite&#xA0;these&#xA0;grants&#xA0;in&#xA0;any&#xA0;publication&#xA0;for&#xA0;which&#xA0;this<br/>
software&#xA0;is&#xA0;used&#xA0;and&#xA0;send&#xA0;a&#xA0;notification&#xA0;to&#xA0;the&#xA0;address&#xA0;given&#xA0;above.<br/>
<br/>
SPK&#xA0;is&#xA0;Copyright&#xA0;(C)&#xA0;1998-2005,&#xA0;by&#xA0;the&#xA0;University&#xA0;of&#xA0;Washington,<br/>
Resource&#xA0;Facility&#xA0;for&#xA0;Population&#xA0;Kinetics,&#xA0;and&#xA0;is&#xA0;made&#xA0;available&#xA0;as<br/>
free&#xA0;open&#xA0;source&#xA0;software&#xA0;under&#xA0;the&#xA0;terms&#xA0;of&#xA0;the&#xA0;University&#xA0;of<br/>
Washington&#xA0;Free-Fork&#xA0;License&#xA0;as&#xA0;a&#xA0;public&#xA0;service.&#xA0;&#xA0;A&#xA0;copy&#xA0;of&#xA0;the<br/>
License&#xA0;can&#xA0;be&#xA0;found&#xA0;in&#xA0;the&#xA0;COPYING&#xA0;file&#xA0;in&#xA0;the&#xA0;root&#xA0;directory&#xA0;of&#xA0;this<br/>
distribution.<br/>
-----------------------------------------------------------------------<br/>
Author:&#xA0;Brad&#xA0;Bell&#xA0;(brad@apl.washington.edu)<br/>
<br/>
*/<br/>
//&#xA0;BEGIN&#xA0;PROGRAM<br/>
<br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Error.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
<br/>
namespace&#xA0;{<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;handlerCount&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;handler(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;line&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;&#xA0;&#xA0;&#xA0;*file&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;*routine&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;*message&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;handlerCount++;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;MemoryRight(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;proper&#xA0;use&#xA0;of&#xA0;Memory<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n1&#xA0;&#xA0;&#xA0;=&#xA0;10;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n2&#xA0;&#xA0;&#xA0;=&#xA0;20;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;ntot&#xA0;=&#xA0;n1&#xA0;+&#xA0;n2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::Memory&lt;double&gt;&#xA0;buffer(ntot);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*x1&#xA0;=&#xA0;buffer(n1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*x2&#xA0;=&#xA0;buffer(n2);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x1[0]&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x1[n1-1]&#xA0;=&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x2[0]&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x2[n2-1]&#xA0;=&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;MemoryWorng(void)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;improper&#xA0;use&#xA0;of&#xA0;Memory<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n1&#xA0;&#xA0;&#xA0;=&#xA0;10;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n2&#xA0;&#xA0;&#xA0;=&#xA0;20;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;ntot&#xA0;=&#xA0;n1&#xA0;+&#xA0;n2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::Memory&lt;double&gt;&#xA0;buffer(ntot);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*x1&#xA0;=&#xA0;buffer(n1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*(x1-1)&#xA0;&#xA0;&#xA0;=&#xA0;1.;&#xA0;//&#xA0;error&#xA0;1,&#xA0;write&#xA0;before&#xA0;allocated&#xA0;memory<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x1[n1+n2]&#xA0;=&#xA0;2.;&#xA0;//&#xA0;error&#xA0;2,&#xA0;write&#xA0;after&#xA0;allocated&#xA0;memory<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;error&#xA0;3,&#xA0;never&#xA0;ask&#xA0;for&#xA0;the&#xA0;last&#xA0;n2&#xA0;elements&#xA0;from&#xA0;buffer<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
}<br/>
<br/>
bool&#xA0;MemoryError(std::string&amp;Msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MemoryRight();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;switch&#xA0;from&#xA0;default&#xA0;reporting&#xA0;to&#xA0;just&#xA0;counting&#xA0;errors<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::LinkErrorHandler(handler);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;make&#xA0;the&#xA0;mistakes<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MemoryWorng();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;switch&#xA0;back&#xA0;to&#xA0;default&#xA0;error&#xA0;reporting&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;QN01Box::LinkErrorHandler(QN01Box::defaultErrorHandler);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;that&#xA0;3&#xA0;errors&#xA0;occurred&#xA0;during&#xA0;call&#xA0;to&#xA0;MemoryWorng<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;handlerCount&#xA0;==&#xA0;3;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Msg&#xA0;=&#xA0;&quot;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>
<center><b><big><big><a name="7" id="7">7: Glossary</a>
</big></big></b></center>
<br/>
<b><big><a name="7.a" id="7.a">7.a: avg: Euclidean Average</a></big></b>

<br/>
We define 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">|</mo>
<mo stretchy="false">/</mo>
<msqrt><mrow><mi mathvariant='italic'>n</mi>
</mrow>
</msqrt>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mo stretchy="false">&#x000B7;</mo>
<mo stretchy="false">|</mo>
</mrow></math>

 is the 
<a href="#7.d"><span style='white-space: nowrap'>Euclidean&#xA0;norm</span>: 7.d</a>
.
It follows that 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">|</mo>
<mo stretchy="false">=</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>avg</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">|</mo>
</mrow></math>

<br/>
<b><big><a name="7.b" id="7.b">7.b: C: The Complementarity Conditions</a></big></b>
<br/>
Given 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 the corresponding
lower limit complementarity condition 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>a</mi>
</mrow></math>

Given 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 the corresponding
upper limit complementarity condition

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

<br/>
<b><big><a name="7.c" id="7.c">7.c: D: Diagonal Matrix of a Vector</a></big></b>

<br/>
We define 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>


by 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 is the diagonal matrix with 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 along the diagonal.
(It follows that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 is the identity matrix.)

<br/>
<br/>
<b><big><a name="7.d" id="7.d">7.d: Euclidean Norm</a></big></b>
<br/>
Given a vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
the corresponding Euclidean norm is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">|</mo>
<mo stretchy="false">=</mo>
<msup><mrow><mo stretchy="true">(</mo><mrow><munderover><mo stretchy='false' minsize='2em'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>n</mi>
</munderover>
<msubsup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
<mn>2</mn>
</msubsup>
</mrow><mo stretchy="true">)</mo></mrow>
<mrow><mn>1</mn>
<mo stretchy="false">/</mo>
<mn>2</mn>
</mrow>
</msup>
</mrow></math>

<br/>
<b><big><a name="7.e" id="7.e">7.e: Exception Safe</a></big></b>
<br/>
A routine is exception safe provided that it satisfies the following conditions:
<ol type="1"><li>
The routine does not throw or catch any exceptions.
</li><li>

All memory allocated by the routine is freed by calling the destructors
for all the variables that are local to the routine.
</li><li>

All sub-routines that are called by the routine are also exception safe.
</li></ol>



<br/>
<br/>
<b><big><a name="7.f" id="7.f">7.f: Infinity Norm</a></big></b>
<br/>
Given a vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
the corresponding infinity norm is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mo stretchy="false">=</mo>
<mi>max</mi>
<mo stretchy="false">{</mo>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mo stretchy="false">:</mo>
<mspace width='.3em'/>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">}</mo>
</mrow></math>

<br/>
<b><big><a name="7.g" id="7.g">7.g: L-one Norm</a></big></b>
<br/>
Given a vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
the corresponding L-one norm is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>x</mi>
<msub><mo stretchy="false">|</mo>
<mn>1</mn>
</msub>
<mo stretchy="false">=</mo>
<munderover><mo stretchy='false' minsize='2em'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>n</mi>
</munderover>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">|</mo>
</mrow></math>

<br/>
<b><big><a name="7.h" id="7.h">7.h: Matrix and Vector Correspondence</a></big></b>
<br/>
An 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

 
corresponds to a vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
</mrow></math>

 of length 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 
in the following fashion:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>A</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>A</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
</mrow></math>

<br/>
<b><big><a name="7.i" id="7.i">7.i: e: Vector of Ones</a></big></b>

<br/>
The vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>e</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>e</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow></math>

 for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="7.j" id="7.j">7.j: max: Maximum Element of a Vector</a></big></b>

<br/>
We define 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>max</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>max</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi>max</mi>
<mo stretchy="false">{</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">:</mo>
<mspace width='.3em'/>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">}</mo>
</mrow></math>

<br/>
<b><big><a name="7.k" id="7.k">7.k: min: Minimum Element of a Vector</a></big></b>

<br/>
We define 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>min</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>min</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi>min</mi>
<mo stretchy="false">{</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">:</mo>
<mspace width='.3em'/>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">}</mo>
</mrow></math>

<br/>
<b><big><a name="7.l" id="7.l">7.l: L: The Lagrangian</a></big></b>

<br/>
The Lagrangian corresponding to 
<a href="#7.m"><span style='white-space: nowrap'>P(Q,&#xA0;r,&#xA0;l,&#xA0;u)</span>: 7.m</a>

is the function 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>L</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

,
defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>L</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mfrac><mrow><mn>1</mn>
</mrow>
<mrow><mn>2</mn>
</mrow>
</mfrac>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>r</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>a</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>b</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">)</mo>
</mrow></math>

The gradient of the Lagrangian with respect to 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x000D7;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
is given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

<br/>
<b><big><a name="7.m" id="7.m">7.m: P: Quadratic Problem with Box Constraints</a></big></b>

<br/>
Given

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Q</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
the corresponding quadratic problem with box constraints

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>P</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>Q</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>r</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 is

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="right" >
<mfrac><mrow><mn>1</mn>
</mrow>
<mrow><mn>2</mn>
</mrow>
</mfrac>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>Q</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<msup><mi mathvariant='italic'>r</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>x</mi>
</mtd><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>with</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>respect</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mtd></mtr><mtr><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
</mtd><mtd columnalign="right" >
<msub><mi mathvariant='italic'>l</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&#x02264;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&#x02264;</mo>
<msub><mi mathvariant='italic'>u</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>for</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x022EF;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
</mtd></mtr></mtable>
</mrow></math>

<br/>
<b><big><a name="7.n" id="7.n">7.n: p: Scaled Projected Gradient</a></big></b>
<br/>
Suppose we are give a problem of the form

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="right" >
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>with</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>respect</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mtd></mtr><mtr><mtd columnalign="left" >
<mrow><mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mrow>
</mtd><mtd columnalign="right" >
<msub><mi mathvariant='italic'>l</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&#x02264;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">&#x02264;</mo>
<msub><mi mathvariant='italic'>u</mi>
<mi mathvariant='italic'>i</mi>
</msub>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>for</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x022EF;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
</mtd></mtr></mtable>
</mrow></math>

The corresponding scaled projected gradient is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>p</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">{</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>u</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02264;</mo>
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>l</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">(</mo>
<mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">/</mo>
<mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02265;</mo>
<mn>0</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true"> </mo></mrow>
</mrow></math>

<br/>
<b><big><a name="7.o" id="7.o">7.o: Residual Function</a></big></b>

<br/>
We are given an upper limit vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
a lower limit vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
and a reduction multiplier 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>0</mn>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mo stretchy="false">&lt;</mo>
<mn>1</mn>
</mrow></math>

.
For an 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 such that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>l</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='italic'>u</mi>
</mrow></math>

,
a Lagrange multiplier for the lower constraint 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
and 
a Lagrange multiplier for the upper constraint 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
the residual function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

 is define by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">)</mo>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>u</mi>
</msub>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>l</mi>
</msub>
</mrow></math>

 are the 
upper and lower
<a href="#7.b"><span style='white-space: nowrap'>complementarity&#xA0;conditions</span>: 7.b</a>

and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>L</mi>
<mi mathvariant='italic'>x</mi>
</msub>
</mrow></math>

 is the gradient of the
<a href="#7.l"><span style='white-space: nowrap'>Lagrangian</span>: 7.l</a>
.



<hr/>



<center><b><big><big><a name="8" id="8">8: Record of New Features and Bug Fixes For QN01Box</a>
</big></big></b></center>
<br/>
<b><big><a name="8.a" id="8.a">8.a: 06-07-28</a></big></b>
<br/>
Added optional computation of the 
<a href="#4.i.c"><span style='white-space: nowrap'>Hessian</span>: 4.i.c</a>
 argument to
<a href="#4"><span style='white-space: nowrap'>QuasiNewton01Box</span>: 4</a>
.

<br/>
<br/>
<b><big><a name="8.b" id="8.b">8.b: 06-05-04</a></big></b>
<br/>
Fix some standard compliance problems so that QN01Box builds
under gcc 4.1.0 (Red Hat 4.1.0-3).

<br/>
<br/>
<b><big><a name="8.c" id="8.c">8.c: 05-12-12</a></big></b>
<br/>
Change <code><font color="blue">./Build</font></code> script to make debug,
instead of optimized, 
version of library and tests.
Add <code><font color="blue"></font></code><i><span style='white-space: nowrap'>*</span></i><code><font color="blue"><span style='white-space: nowrap'>.o</span></font></code> and <code><font color="blue"></font></code><i><span style='white-space: nowrap'>*</span></i><code><font color="blue"><span style='white-space: nowrap'>.a</span></font></code> to remove list
in <code><font color="blue">./CleanQN01Box</font></code> script.
Add error recovery in <a href="#4.1"><span style='white-space: nowrap'>QuadBox</span>: 4.1</a>
 in the case where
<a href="#4.1.1"><span style='white-space: nowrap'>Next</span>: 4.1.1</a>
 fails.


<br/>
<br/>
<b><big><a name="8.d" id="8.d">8.d: 05-12-08</a></big></b>
<br/>
Separate the routine that ensure positive definite matrices 
<a href="#6.6"><span style='white-space: nowrap'>PositiveMatrix</span>: 6.6</a>
 from the routine that computes the 
<a href="#4.2"><span style='white-space: nowrap'>Bfgs</span>: 4.2</a>
 update. 

<br/>
<br/>
<b><big><a name="8.e" id="8.e">8.e: 05-12-07</a></big></b>
<br/>
The makefiles for the <code><font color="blue">lib</font></code> and <code><font color="blue">Test</font></code> directories
were not properly using the new <code><font color="blue">COMPILE_FLAGS</font></code> configure option.
This has been fixed.
The <code><font color="blue">QuadBox</font></code> function was return an error message when
the maximum number of iterations was reached instead of returning <code><font color="blue">ok</font></code>
together with how accurate an answer it was able to achieve.
This has been fixed.

<br/>
<br/>
<b><big><a name="8.f" id="8.f">8.f: 05-12-05</a></big></b>

<ol type="1"><li>
Add the 
<a href="http://www.itl.nist.gov/div898/strd/nls/data/bennett5.shtml" target="_top"><span style='white-space: nowrap'>Bennet5</span></a>
 (http://www.itl.nist.gov/div898/strd/nls/data/bennett5.shtml) 
test case in the file <code><font color="blue">Test/NLRegression.cpp</font></code>.
This is a very ill-conditioned problem that only seems
to pass when one starts at the solution.

</li><li>

Add the value <code><font color="blue">dxMax</font></code> to tracing output.

</li><li>

Change error criteria in subproblem to be relative to both
current gradient and current Hessian approximation.

</li><li>

Use a fixed minimum step size in Bfgs of 1e-5 (so that very small
steps do not cause large round off errors).

</li><li>

Add compiler flags to list of configure options during <a href="#3"><span style='white-space: nowrap'>Install</span>: 3</a>
.

</li></ol>



<br/>
<br/>
<b><big><a name="8.g" id="8.g">8.g: 05-11-21</a></big></b>
<br/>
The calling sequence to <a href="#4.1"><span style='white-space: nowrap'>QuadBox</span>: 4.1</a>
 has changed to have 
both an input and output error criteria value.

<br/>
<br/>
<b><big><a name="8.h" id="8.h">8.h: 05-11-15</a></big></b>
<br/>
The calling sequence to <a href="#4"><span style='white-space: nowrap'>QuasiNewton01Box</span>: 4</a>
 has been changed.
In particular, a new argument called 
<a href="#4.g"><span style='white-space: nowrap'>norm</span>: 4.g</a>
 has been added.
This allows for different various convergence criteria.
The meaning of 
<a href="#4.e"><span style='white-space: nowrap'>QuadMax</span>: 4.e</a>
 has been changed.
In addition,
some of the norms in the 
<a href="#4.u"><span style='white-space: nowrap'>level&#xA0;=&#xA0;1</span>: 4.u</a>
 tracing
have also been changed (to be the controlled by <i>norm</i>).


<br/>
<br/>
<b><big><a name="8.i" id="8.i">8.i: 05-11-14</a></big></b>
<br/>
The routine <code><font color="blue">QuadFixed</font></code> was no longer being used and has been
removed (it was long ago replaced by <a href="#4.1"><span style='white-space: nowrap'>QuadBox</span>: 4.1</a>
).
Add the <a href="#6.5"><span style='white-space: nowrap'>ScaleProjGrad</span>: 6.5</a>
 and <a href="#6.3"><span style='white-space: nowrap'>SumAbs</span>: 6.3</a>
 utilities.
Use alphabetical order for the test cases in <code><font color="blue">Test/RunTest</font></code>.
Change the <a href="#4.e"><span style='white-space: nowrap'>QuadMax</span>: 4.e</a>
 argument
to <a href="#4"><span style='white-space: nowrap'>QuasiNewton01Box</span>: 4</a>
 to mean maximum number of iterations
per subproblem (instead of total maximum).

<br/>
<br/>
<b><big><a name="8.j" id="8.j">8.j: 05-10-25</a></big></b>
<br/>
The routine 
<a href="#6.8"><span style='white-space: nowrap'>LinkErrorHandler</span>: 6.8</a>
 was added so that the user
could replace the default QN01Box error handler.

<br/>
<br/>
<b><big><a name="8.k" id="8.k">8.k: 05-10-28</a></big></b>
<br/>
A summary message was added at the end of the
<code><font color="blue">Test/RunTest</font></code> program (which is run during
<a href="#3"><span style='white-space: nowrap'>installation</span>: 3</a>
).


<hr/>
<center><b><big><big><a name="9">9: Alphabetic Listing of Cross Reference Tags</a>
</big></big></b></center>
<table>
<tr valign="top"><td>

<b><big><a name="B">B</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#4.2">Bfgs: 4.2</a><br/> </td><td> The Broyden-Fletcher-Goldfarb-Shanno Update </td></tr><tr valign="top"><td>

<b><big><a name="C">C</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#5">Converge: 5</a><br/> </td><td> Choosing a Scaled Projected Gradient Convergence Criteria </td></tr><tr valign="top"><td>

<b><big><a name="D">D</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#4.1.1.1">Delta: 4.1.1.1</a><br/> </td><td> First Order Approximation Step </td></tr><tr valign="top"><td>

<b><big><a name="E">E</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6.8">Error: 6.8</a><br/> </td><td> QN01Box Error Messages and Traps </td></tr><tr valign="top"><td>

<b><big><a name="G">G</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#7">glossary: 7</a><br/> </td><td> Glossary </td></tr><tr valign="top"><td>

<b><big><a name="I">I</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#3">Install: 3</a><br/> </td><td> Install QN01Box </td></tr><tr valign="top"><td>

<b><big><a name="L">L</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#2">License: 2</a><br/> </td><td> Your License To Use This Program </td></tr><tr valign="top"><td>

<b><big><a name="M">M</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6.2">MaxAbs: 6.2</a><br/> </td><td> Maximum Absolute Value of an Element of a Vector </td></tr><tr valign="top"><td>
<a href="#6.1">Memory: 6.1</a><br/> </td><td> A Fast and Simple Memory Management Template Class </td></tr><tr valign="top"><td>

<b><big><a name="N">N</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#4.1.1">Next: 4.1.1</a><br/> </td><td> Next Interior Point Iterate </td></tr><tr valign="top"><td>

<b><big><a name="P">P</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6.4">PlusInfinity: 6.4</a><br/> </td><td> Returns the IEEE Floating Point Value Plus Infinity </td></tr><tr valign="top"><td>
<a href="#6.6">PositiveMatrix: 6.6</a><br/> </td><td> Ensure that A Symmetric Matrix is Positive Definite </td></tr><tr valign="top"><td>

<b><big><a name="Q">Q</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#">QN01Box: </a><br/> </td><td> A Box Constrained, Interior Point, Trust Region, Quasi-Newton Method </td></tr><tr valign="top"><td>
<a href="#4.1">QuadBox: 4.1</a><br/> </td><td> Quadratic Problem with Box Constraints: Approximate Complementarity </td></tr><tr valign="top"><td>
<a href="#4">QuasiNewton01Box: 4</a><br/> </td><td> Nonlinear Optimization with [0, 1] Box Constraints </td></tr><tr valign="top"><td>

<b><big><a name="R">R</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#4.1.2">Residual: 4.1.2</a><br/> </td><td> Central Path Residual </td></tr><tr valign="top"><td>

<b><big><a name="S">S</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6.5">ScaleProjGrad: 6.5</a><br/> </td><td> Compute the Scaled Projected Gradient </td></tr><tr valign="top"><td>
<a href="#6.3">SumAbs: 6.3</a><br/> </td><td> Sum of Absolute Value of Elements of a Vector </td></tr><tr valign="top"><td>

<b><big><a name="U">U</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6">Utility: 6</a><br/> </td><td> General Purpose Utilities </td></tr><tr valign="top"><td>

<b><big><a name="W">W</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#8">WhatsNew: 8</a><br/> </td><td> Record of New Features and Bug Fixes For QN01Box </td></tr><tr valign="top"><td>

<b><big><a name="Z">Z</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6.7">zero_one_scale: 6.7</a><br/> </td><td> Zero One Scale a Function's Argument Vector </td></tr><tr valign="top"><td>
</td></tr></table>

<hr/>
<center><b><big><big><a name="10">10: Keyword Index</a>
</big></big></b></center>

<b><big><a name="A">A</a></big></b>
<br/>
a&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>
&#160;&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
&#160;&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
and&#160;<a href="#7.h">Glossary:&#160;Matrix&#xA0;and&#xA0;Vector&#xA0;Correspondence: 7.h</a><br/>
approximation&#160;<a href="#4.1.1.1">First&#xA0;Order&#xA0;Approximation&#xA0;Step: 4.1.1.1</a><br/>
assert&#160;<a href="#6.8">QN01Box&#xA0;Error&#xA0;Messages&#xA0;and&#xA0;Traps: 6.8</a><br/>
average&#160;<a href="#7.a">Glossary:&#160;avg:&#xA0;Euclidean&#xA0;Average: 7.a</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.a">Glossary:&#160;avg:&#xA0;Euclidean&#xA0;Average: 7.a</a><br/>
avg&#160;<a href="#7.a">Glossary:&#160;avg:&#xA0;Euclidean&#xA0;Average: 7.a</a><br/>
avg<b>:</b>&#160;<a href="#7.a">Glossary:&#160;avg:&#xA0;Euclidean&#xA0;Average: 7.a</a><br/>

<b><big><a name="B">B</a></big></b>
<br/>
box&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
&#160;&#160;&#160;&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>

<b><big><a name="C">C</a></big></b>
<br/>
c<b>:</b>&#160;<a href="#7.b">Glossary:&#160;C:&#xA0;The&#xA0;Complementarity&#xA0;Conditions: 7.b</a><br/>
central&#160;<a href="#4.1.2">Central&#xA0;Path&#xA0;Residual: 4.1.2</a><br/>
complementarity&#160;<a href="#7.b">Glossary:&#160;C:&#xA0;The&#xA0;Complementarity&#xA0;Conditions: 7.b</a><br/>
conditions&#160;<a href="#7.b">Glossary:&#160;C:&#xA0;The&#xA0;Complementarity&#xA0;Conditions: 7.b</a><br/>
constraint&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
constraints&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
correspondence&#160;<a href="#7.h">Glossary:&#160;Matrix&#xA0;and&#xA0;Vector&#xA0;Correspondence: 7.h</a><br/>

<b><big><a name="D">D</a></big></b>
<br/>
D&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>
d<b>:</b>&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>
diagonal&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>

<b><big><a name="E">E</a></big></b>
<br/>
Euclidean&#160;<a href="#7.a">Glossary:&#160;avg:&#xA0;Euclidean&#xA0;Average: 7.a</a><br/>
e&#160;<a href="#7.i">Glossary:&#160;e:&#xA0;Vector&#xA0;of&#xA0;Ones: 7.i</a><br/>
e<b>:</b>&#160;<a href="#7.i">Glossary:&#160;e:&#xA0;Vector&#xA0;of&#xA0;Ones: 7.i</a><br/>
element&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
error<br/>
&#160;&#160;&#160;&#160;&#160;handler&#160;<a href="#6.8">QN01Box&#xA0;Error&#xA0;Messages&#xA0;and&#xA0;Traps: 6.8</a><br/>
euclidean&#160;<a href="#7.d">Glossary:&#160;Euclidean&#xA0;Norm: 7.d</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.a">Glossary:&#160;avg:&#xA0;Euclidean&#xA0;Average: 7.a</a><br/>
exception&#160;<a href="#7.e">Glossary:&#160;Exception&#xA0;Safe: 7.e</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#6.8">QN01Box&#xA0;Error&#xA0;Messages&#xA0;and&#xA0;Traps: 6.8</a><br/>

<b><big><a name="F">F</a></big></b>
<br/>
first&#160;<a href="#4.1.1.1">First&#xA0;Order&#xA0;Approximation&#xA0;Step: 4.1.1.1</a><br/>
function&#160;<a href="#7.o">Glossary:&#160;Residual&#xA0;Function: 7.o</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.o">Glossary:&#160;Residual&#xA0;Function: 7.o</a><br/>

<b><big><a name="G">G</a></big></b>
<br/>
gradient&#160;<a href="#7.n">Glossary:&#160;p:&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 7.n</a><br/>
&#160;&#160;&#160;&#160;&#160;project&#160;<a href="#6.5">Compute&#xA0;the&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 6.5</a><br/>
&#160;&#160;&#160;&#160;&#160;scale&#160;<a href="#6.5">Compute&#xA0;the&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 6.5</a><br/>

<b><big><a name="H">H</a></big></b>
<br/>
handler<br/>
&#160;&#160;&#160;&#160;&#160;error&#160;<a href="#6.8">QN01Box&#xA0;Error&#xA0;Messages&#xA0;and&#xA0;Traps: 6.8</a><br/>

<b><big><a name="I">I</a></big></b>
<br/>
ieee<br/>
&#160;&#160;&#160;&#160;&#160;infinity&#160;<a href="#6.4">Returns&#xA0;the&#xA0;IEEE&#xA0;Floating&#xA0;Point&#xA0;Value&#xA0;Plus&#xA0;Infinity: 6.4</a><br/>
&#160;&#160;&#160;&#160;&#160;plus<b>&#xA0;</b>infinity&#160;<a href="#6.4">Returns&#xA0;the&#xA0;IEEE&#xA0;Floating&#xA0;Point&#xA0;Value&#xA0;Plus&#xA0;Infinity: 6.4</a><br/>
infinity&#160;<a href="#7.f">Glossary:&#160;Infinity&#xA0;Norm: 7.f</a><br/>
&#160;&#160;&#160;&#160;&#160;plus&#160;<a href="#6.4">Returns&#xA0;the&#xA0;IEEE&#xA0;Floating&#xA0;Point&#xA0;Value&#xA0;Plus&#xA0;Infinity: 6.4</a><br/>
interior&#160;<a href="#4.1.1">Next&#xA0;Interior&#xA0;Point&#xA0;Iterate: 4.1.1</a><br/>
iterate&#160;<a href="#4.1.1">Next&#xA0;Interior&#xA0;Point&#xA0;Iterate: 4.1.1</a><br/>

<b><big><a name="L">L</a></big></b>
<br/>
L&#160;<a href="#7.l">Glossary:&#160;L:&#xA0;The&#xA0;Lagrangian: 7.l</a><br/>
Lagrange&#160;<a href="#7.l">Glossary:&#160;L:&#xA0;The&#xA0;Lagrangian: 7.l</a><br/>
l<b>-</b>one&#160;<a href="#7.g">Glossary:&#160;L-one&#xA0;Norm: 7.g</a><br/>
l<b>:</b>&#160;<a href="#7.l">Glossary:&#160;L:&#xA0;The&#xA0;Lagrangian: 7.l</a><br/>
lagrangian&#160;<a href="#7.l">Glossary:&#160;L:&#xA0;The&#xA0;Lagrangian: 7.l</a><br/>

<b><big><a name="M">M</a></big></b>
<br/>
matrix&#160;<a href="#7.h">Glossary:&#160;Matrix&#xA0;and&#xA0;Vector&#xA0;Correspondence: 7.h</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>
max&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
max<b>:</b>&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
maximum&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
min&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
min<b>:</b>&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
minimum&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>

<b><big><a name="N">N</a></big></b>
<br/>
Next&#160;<a href="#4.1.1">Next&#xA0;Interior&#xA0;Point&#xA0;Iterate: 4.1.1</a><br/>
namespace<br/>
&#160;&#160;&#160;&#160;&#160;QN01Box&#160;<a href="#a">A&#xA0;Box&#xA0;Constrained,&#xA0;Interior&#xA0;Point,&#xA0;Trust&#xA0;Region,&#xA0;Quasi-Newton&#xA0;Method:&#160;Namespace: a</a><br/>
norm&#160;<a href="#7.g">Glossary:&#160;L-one&#xA0;Norm: 7.g</a><br/>
&#160;&#160;&#160;&#160;&#160;<a href="#7.f">Glossary:&#160;Infinity&#xA0;Norm: 7.f</a><br/>
&#160;&#160;&#160;&#160;&#160;<a href="#7.d">Glossary:&#160;Euclidean&#xA0;Norm: 7.d</a><br/>

<b><big><a name="O">O</a></big></b>
<br/>
of&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
&#160;&#160;&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
&#160;&#160;&#160;<a href="#7.i">Glossary:&#160;e:&#xA0;Vector&#xA0;of&#xA0;Ones: 7.i</a><br/>
&#160;&#160;&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>
ones&#160;<a href="#7.i">Glossary:&#160;e:&#xA0;Vector&#xA0;of&#xA0;Ones: 7.i</a><br/>
&#160;&#160;&#160;&#160;&#160;<a href="#7.i">Glossary:&#160;e:&#xA0;Vector&#xA0;of&#xA0;Ones: 7.i</a><br/>
order&#160;<a href="#4.1.1.1">First&#xA0;Order&#xA0;Approximation&#xA0;Step: 4.1.1.1</a><br/>

<b><big><a name="P">P</a></big></b>
<br/>
P&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
PlusInfinity&#160;<a href="#6.4">Returns&#xA0;the&#xA0;IEEE&#xA0;Floating&#xA0;Point&#xA0;Value&#xA0;Plus&#xA0;Infinity: 6.4</a><br/>
p<b>:</b>&#160;<a href="#7.n">Glossary:&#160;p:&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 7.n</a><br/>
&#160;&#160;&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
path&#160;<a href="#4.1.2">Central&#xA0;Path&#xA0;Residual: 4.1.2</a><br/>
point&#160;<a href="#4.1.1">Next&#xA0;Interior&#xA0;Point&#xA0;Iterate: 4.1.1</a><br/>
problem&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
project<br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="#6.5">Compute&#xA0;the&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 6.5</a><br/>
&#160;&#160;&#160;&#160;&#160;scale&#160;<a href="#6.5">Compute&#xA0;the&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 6.5</a><br/>
projected&#160;<a href="#7.n">Glossary:&#160;p:&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 7.n</a><br/>

<b><big><a name="Q">Q</a></big></b>
<br/>
QNotBox<br/>
&#160;&#160;&#160;&#160;&#160;namespace&#160;<a href="#a">A&#xA0;Box&#xA0;Constrained,&#xA0;Interior&#xA0;Point,&#xA0;Trust&#xA0;Region,&#xA0;Quasi-Newton&#xA0;Method:&#160;Namespace: a</a><br/>
quadratic&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>

<b><big><a name="R">R</a></big></b>
<br/>
R&#160;<a href="#7.o">Glossary:&#160;Residual&#xA0;Function: 7.o</a><br/>
region&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>
residual&#160;<a href="#7.o">Glossary:&#160;Residual&#xA0;Function: 7.o</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.o">Glossary:&#160;Residual&#xA0;Function: 7.o</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#4.1.2">Central&#xA0;Path&#xA0;Residual: 4.1.2</a><br/>

<b><big><a name="S">S</a></big></b>
<br/>
safe&#160;<a href="#7.e">Glossary:&#160;Exception&#xA0;Safe: 7.e</a><br/>
scale<br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="#6.5">Compute&#xA0;the&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 6.5</a><br/>
&#160;&#160;&#160;&#160;&#160;project&#160;<a href="#6.5">Compute&#xA0;the&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 6.5</a><br/>
scaled&#160;<a href="#7.n">Glossary:&#160;p:&#xA0;Scaled&#xA0;Projected&#xA0;Gradient: 7.n</a><br/>
step&#160;<a href="#4.1.1.1">First&#xA0;Order&#xA0;Approximation&#xA0;Step: 4.1.1.1</a><br/>

<b><big><a name="T">T</a></big></b>
<br/>
the&#160;<a href="#7.l">Glossary:&#160;L:&#xA0;The&#xA0;Lagrangian: 7.l</a><br/>
&#160;&#160;&#160;&#160;<a href="#7.b">Glossary:&#160;C:&#xA0;The&#xA0;Complementarity&#xA0;Conditions: 7.b</a><br/>
trap<br/>
&#160;&#160;&#160;&#160;&#160;error&#160;<a href="#6.8">QN01Box&#xA0;Error&#xA0;Messages&#xA0;and&#xA0;Traps: 6.8</a><br/>
trust&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>

<b><big><a name="V">V</a></big></b>
<br/>
vector&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.k">Glossary:&#160;min:&#xA0;Minimum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.k</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.j">Glossary:&#160;max:&#xA0;Maximum&#xA0;Element&#xA0;of&#xA0;a&#xA0;Vector: 7.j</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.i">Glossary:&#160;e:&#xA0;Vector&#xA0;of&#xA0;Ones: 7.i</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.i">Glossary:&#160;e:&#xA0;Vector&#xA0;of&#xA0;Ones: 7.i</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.h">Glossary:&#160;Matrix&#xA0;and&#xA0;Vector&#xA0;Correspondence: 7.h</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#7.c">Glossary:&#160;D:&#xA0;Diagonal&#xA0;Matrix&#xA0;of&#xA0;a&#xA0;Vector: 7.c</a><br/>

<b><big><a name="W">W</a></big></b>
<br/>
with&#160;<a href="#7.m">Glossary:&#160;P:&#xA0;Quadratic&#xA0;Problem&#xA0;with&#xA0;Box&#xA0;Constraints: 7.m</a><br/>

</body>
</html>
