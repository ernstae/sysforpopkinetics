<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Ensure that A Symmetric Matrix is Positive Definite</title>
<meta name="description" id="description" content="Ensure that A Symmetric Matrix is Positive Definite"/>
<meta name="keywords" id="keywords" content=" "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_positivematrix_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>QN01Box</option>
<option>Utility</option>
<option>PositiveMatrix</option>
</select>
</td>
<td><a href="scaleprojgrad.xml" target="_top">Prev</a>
</td><td><a href="zero_one_scale.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>QN01Box-&gt;</option>
<option>License</option>
<option>Install</option>
<option>QuasiNewton01Box</option>
<option>Converge</option>
<option>Utility</option>
<option>glossary</option>
<option>WhatsNew</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Utility-&gt;</option>
<option>Memory</option>
<option>MaxAbs</option>
<option>SumAbs</option>
<option>PlusInfinity</option>
<option>ScaleProjGrad</option>
<option>PositiveMatrix</option>
<option>zero_one_scale</option>
<option>Error</option>
</select>
</td>
<td>PositiveMatrix</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Exceptions</option>
<option>n</option>
<option>eps</option>
<option>H</option>
<option>Example</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Ensure that A Symmetric Matrix is Positive Definite</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>void&#xA0;PositiveMatrix(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>eps</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;and&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>H</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="Exceptions" id="Exceptions">Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">PositiveMatrix</font></code> uses
the QN01Box <a href="error.xml" target="_top"><span style='white-space: nowrap'>error&#xA0;handler</span></a>
 to report errors.

<br/>
<br/>
<b><big><a name="n" id="n">n</a></big></b>
<br/>
The argument <i>n</i> specifies 
the number row and column dimension of the matrix <i>H</i>.

<br/>
<br/>
<b><big><a name="eps" id="eps">eps</a></big></b>
<br/>
The argument <i>eps</i> is greater than zero and 
less than one.
It specifies
the minimum value for the ratio of the maximum eigen value
divided by the minimum eigen value for the output value of 
the matrix <i>H</i>.

<br/>
<br/>
<b><big><a name="H" id="H">H</a></big></b>
<br/>
We use <i>Hin</i> and <i>Hout</i> for the input
and output value of <i>H</i>.
The reciprocal condition number of <i>Hin</i> is the ratio of its
minimum eigen value divided by its maximum eigenvalue.
If this ratio is greater than or equal <i>eps</i>,
<i>Hout</i> is equal to <i>Hin</i>.
Otherwise, <i>Hout</i> is a matrix that has
its reciprocal condition number greater than or equal to 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>eps</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/&#xA0;2</span></font></code> 
and such that if 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Hin</mi>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>y</mi>
</mrow></math>

 then 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>Hout</mi>
<mo stretchy="false">*</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">+</mo>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>y</mi>
</mrow></math>

 where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x00394;</mi>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 
is &quot;small&quot; (under the condition number constraint). 

<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/PositiveMatrix.h&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;math.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/c2dsyev.h&gt;<br/>
<br/>
bool&#xA0;PositiveMatrixTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;k;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;&#xA0;&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;eps&#xA0;=&#xA0;1e-4;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;H[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;0.,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0.,&#xA0;0.&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;PositiveMatrix(n,&#xA0;eps,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;x[2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum_xHx&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum_xx&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;min_ratio&#xA0;=&#xA0;100.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;max_ratio&#xA0;=&#xA0;-100.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;100;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sum_xx&#xA0;+=&#xA0;x[i]&#xA0;*&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum_xHx&#xA0;+=&#xA0;x[i]&#xA0;*&#xA0;H[&#xA0;i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;x[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;min_ratio&#xA0;&gt;&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;min_ratio&#xA0;=&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;max_ratio&#xA0;&lt;&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;max_ratio&#xA0;=&#xA0;sum_xHx&#xA0;/&#xA0;sum_xx;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;min_ratio&#xA0;&gt;=&#xA0;eps&#xA0;*&#xA0;max_ratio;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span>
</font></code>

<hr/>Input File: lib/PositiveMatrix.cpp

</body>
</html>
