<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>The Broyden-Fletcher-Goldfarb-Shanno Update</title>
<meta name="description" id="description" content="The Broyden-Fletcher-Goldfarb-Shanno Update"/>
<meta name="keywords" id="keywords" content=" "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_bfgs_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>QN01Box</option>
<option>QuasiNewton01Box</option>
<option>Bfgs</option>
</select>
</td>
<td><a href="residual.xml" target="_top">Prev</a>
</td><td><a href="converge.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>QN01Box-&gt;</option>
<option>License</option>
<option>Install</option>
<option>QuasiNewton01Box</option>
<option>Converge</option>
<option>Utility</option>
<option>glossary</option>
<option>WhatsNew</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>QuasiNewton01Box-&gt;</option>
<option>QuadBox</option>
<option>Bfgs</option>
</select>
</td>
<td>Bfgs</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Exceptions</option>
<option>Input Argument</option>
<option>H</option>
<option>Return Value</option>
<option>Remark</option>
<option>Example</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>The Broyden-Fletcher-Goldfarb-Shanno Update</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b> </td><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>const&#xA0;char&#xA0;*&#xA0;Bfgs(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font></code><i><span style='white-space: nowrap'>epsilon</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>xk</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;length&#xA0;n<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>gk</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>xp</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>gp</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;&#xA0;//&#xA0;...<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Input&#xA0;and&#xA0;Output&#xA0;Arguments<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;*</span></font></code><i><span style='white-space: nowrap'>H</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&#xA0;&#xA0;//&#xA0;length&#xA0;n&#xA0;*&#xA0;n<br/>
)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="Exceptions" id="Exceptions">Exceptions</a></big></b>
<br/>
The routine <code><font color="blue">Bfgs</font></code> uses the QN01Box
<a href="error.xml" target="_top"><span style='white-space: nowrap'>error&#xA0;handler</span></a>
 to report errors.

<br/>
<br/>
<b><big><a name="Input Argument" id="Input Argument">Input Argument</a></big></b>
<br/>
Let the positive integer
<i>n</i>,
the positive value	

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>

, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
be the value of the corresponding input arguments.

<br/>
<br/>
<b><big><a name="H" id="H">H</a></big></b>
<br/>
The matrix <i>H</i> is both an input and an output argument.
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

 
to denote the input value of <i>H</i> and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

 to denote its output value.
We define the values 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>s</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mtd></mtr><mtr><mtd columnalign="right" >
<mi mathvariant='italic'>y</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mtd></mtr></mtable>
</mrow></math>

If the following conditions hold:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="right" >
<mi mathvariant='normal'>&#x0025B;</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="right" >
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<msup><mo stretchy="false">|</mo>
<mn>2</mn>
</msup>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
<msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>s</mi>
</mtd><mtd columnalign="center" >
<mo stretchy="false">&#x02265;</mo>
</mtd><mtd columnalign="right" >
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mtd></mtr></mtable>
</mrow></math>

the output value of <i>H</i> is given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">-</mo>
<mfrac><mrow><mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
<msup><mo stretchy="false">)</mo>
<mi mathvariant='italic'>T</mi>
</msup>
</mrow>
<mrow><msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
</mrow>
</mfrac>
<mo stretchy="false">+</mo>
<mfrac><mrow><mi mathvariant='italic'>y</mi>
<msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
</mrow>
<mrow><msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>s</mi>
</mrow>
</mfrac>
</mrow></math>

Otherwise the output value of <i>H</i> is given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="Return Value" id="Return Value">Return Value</a></big></b>
<br/>
The return value of <code><font color="blue">Bfgs</font></code> is
as follows:
<center>
<table><tr><td align='left'  valign='top'>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <b>Condition</b>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <b>Return Value</b>
</td></tr><tr><td align='left'  valign='top'>

if 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>

  
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;|s| small&quot; 
</td></tr><tr><td align='left'  valign='top'>

else if 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&lt;</mo>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<msub><mo stretchy="false">|</mo>
<mo stretchy="false">&#x0221E;</mo>
</msub>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<msup><mo stretchy="false">|</mo>
<mn>2</mn>
</msup>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;sHs small&quot; 
</td></tr><tr><td align='left'  valign='top'>

else if 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
	
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>y</mi>
<mi mathvariant='italic'>T</mi>
</msup>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&lt;</mo>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>y</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mi mathvariant='normal'>&#x0025B;</mi>
</mrow></math>


	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;ys small&quot; 
</td></tr><tr><td align='left'  valign='top'>

else 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 
	</td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 &quot;ok&quot; 
</td></tr>
</table>
</center><b><big><a name="Remark" id="Remark">Remark</a></big></b>
<br/>
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

 is positive definite, 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>H</mi>
<mi mathvariant='italic'>p</mi>
</msub>
</mrow></math>

 is also positive definite.

<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The following example is also a test.
It returns true if it succeeds and false otherwise.
<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Bfgs.h&gt;<br/>
#&#xA0;include&#xA0;&lt;QN01Box/Memory.h&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;iostream&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
#&#xA0;include&#xA0;&lt;math.h&gt;<br/>
<br/>
bool&#xA0;BfgsTest(std::string&#xA0;&amp;msg)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;QN01Box;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;i1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;i2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;sHs;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;&#xA0;&#xA0;=&#xA0;2;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Memory&lt;double&gt;&#xA0;dMemory(2&#xA0;*&#xA0;n&#xA0;*&#xA0;n&#xA0;+&#xA0;5&#xA0;*&#xA0;n);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*A&#xA0;&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*H&#xA0;&#xA0;=&#xA0;dMemory(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*xk&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*gk&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*xp&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*gp&#xA0;=&#xA0;dMemory(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*Hs&#xA0;=&#xA0;dMemory(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;A&#xA0;is&#xA0;a&#xA0;random&#xA0;n&#xA0;x&#xA0;m&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[j]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp&#xA0;are&#xA0;random&#xA0;vectors<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;ys_sum&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;xk[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gk[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;xp[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gk[i]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;0&#xA0;&lt;&#xA0;i&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ys_sum&#xA0;+=&#xA0;(xp[i]&#xA0;-&#xA0;xk[i])&#xA0;*&#xA0;(gp[i]&#xA0;-&#xA0;gk[i]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;H&#xA0;=&#xA0;A&#xA0;*&#xA0;A^T<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;apxnorm&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i1&#xA0;=&#xA0;0;&#xA0;i1&#xA0;&lt;&#xA0;n;&#xA0;i1++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i2&#xA0;=&#xA0;0;&#xA0;i2&#xA0;&lt;&#xA0;n;&#xA0;i2++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;+=&#xA0;A[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;A[i2&#xA0;*&#xA0;n&#xA0;+&#xA0;j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2]&#xA0;*&#xA0;H[i1&#xA0;*&#xA0;n&#xA0;+&#xA0;i2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;+=&#xA0;sqrt(sum&#xA0;/&#xA0;double(n)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;apxnorm&#xA0;/=&#xA0;double(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H[i]&#xA0;=&#xA0;H[i]&#xA0;/&#xA0;apxnorm;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;epsilon&#xA0;&#xA0;=&#xA0;1e-10;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;case&#xA0;where&#xA0;s&#xA0;=&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xk,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;|s|&#xA0;small&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;case&#xA0;where&#xA0;ys&#xA0;=&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gp[0]&#xA0;=&#xA0;gk[0]&#xA0;-&#xA0;ys_sum&#xA0;/&#xA0;(xp[0]&#xA0;-&#xA0;xk[0]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ys&#xA0;small&quot;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gp[0]&#xA0;=&#xA0;rand()&#xA0;/&#xA0;(double)&#xA0;RAND_MAX&#xA0;-&#xA0;.5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;normal&#xA0;case<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;ok&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;update&#xA0;equation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sHs&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Hs[i]&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Hs[i]&#xA0;+=&#xA0;H[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;(xp[j]&#xA0;-&#xA0;xk[j]);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sHs&#xA0;+=&#xA0;(xp[i]&#xA0;-&#xA0;xk[i])&#xA0;*&#xA0;Hs[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;fabs(&#xA0;Hs[i]&#xA0;-&#xA0;gp[i]&#xA0;+&#xA0;gk[i]&#xA0;&#xA0;)&#xA0;&lt;=&#xA0;epsilon;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;construct&#xA0;a&#xA0;case&#xA0;where&#xA0;H&#xA0;*&#xA0;s&#xA0;is&#xA0;zero<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;-=&#xA0;Hs[i]&#xA0;*&#xA0;Hs[j]&#xA0;/&#xA0;sHs;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;case&#xA0;where&#xA0;sHs&#xA0;=&#xA0;0&#xA0;(up&#xA0;to&#xA0;numerical&#xA0;precision)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;Bfgs(n,&#xA0;epsilon,&#xA0;xk,&#xA0;gk,&#xA0;xp,&#xA0;gp,&#xA0;H);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(msg&#xA0;==&#xA0;&quot;sHs&#xA0;small&quot;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;msg&#xA0;=&#xA0;&quot;&quot;;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span>
</font></code>

<hr/>Input File: lib/Bfgs.cpp

</body>
</html>
