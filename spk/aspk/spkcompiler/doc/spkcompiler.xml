<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[
  <!ENTITY uw "University of Washington">
  <!ENTITY dept "Department of Bioengineering">
]>
<article><title>SPK Compiler</title>
  <articleinfo>
    <revhistory>
      <revision>
	<revnumber>1.2</revnumber>
	<date>April 21, 2005</date>
	<authorinitials>sh</authorinitials>
	<revremark>Overall update</revremark>
      </revision>
      <revision>
	<revnumber>1.1</revnumber>
	<date>April 30, 2004</date>
	<authorinitials>sh</authorinitials>
	<revremark>Expression language, IndData</revremark>
      </revision>
      <revision>
	<revnumber>1.0</revnumber>
	<date>August 11, 2003</date>
	<authorinitials>sh</authorinitials>
	<revremark>Initial version.</revremark>
      </revision>
    </revhistory>
    <abstract>
      <para>
<!-- What do i have to tell the others about the compiler if they are to 
take over this project?  purpose, architecture, front- & back- end -->
The purpose of this documentation is to give you an overall architectural view 
of SPK Compiler and links to related documents.
      </para>
    </abstract>
  </articleinfo>
  <sect1>
     <title>Introduction</title>
     <para>
       SPK Compiler, <filename>spkcompiler</filename>, is a command line application
       that compiles information from a pair of an 
       <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/sourceML/sourceML.html">
       SpkSourceML</ulink> document and an 
       <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/dataML/dataML.html">SpkDataML</ulink>
       document and generates a number of C++ source code files that are, as together,
       built as an application of the SPK (computational) Library.
     </para>
     <screen>
     +---------------+    
     |               |                
     |  <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/sourceML/sourceML.html">SpkSourceML</ulink>  |  fed to    /------------------\             &lt;An SPK Application&gt;
     |   document    |----------->|                  |
     |               |            |                  |             +--------------+
     +---------------+            |                  |  generates  |              |-+
                                  |   SPK Compiler   |------------>|  <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/sourceCpp/sourceCpp.html">C++ source</ulink>  | |-+
     +---------------+            |                  |             |              | | |
     |               |  fed to    |                  |             +--------------+ | |
     |   <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/dataML/dataML.html">SpkDataML</ulink>   |----------->|                  |               +--------------+ |
     |   document    |            \------------------/                 +--------------+
     |               |              |             |                           .
     +---------------+              | uses        | uses                       .
                                   \|/           \|/                            .
                                    +             +
                /------------------------\    =================
                |                        |    |               |
                |     Domain specific    |    |   DOM Parser  |
                |  expression language   |    |  (XERCES C++) |
                |        compliler       |    |               |
                |                        |    =================
                \------------------------/

     </screen>
     <para>
       As part of the process, <filename>spkcompiler</filename> uses 
       a DOM parser provided by <ulink url="http://xml.apache.org/xerces-c/">XERCES C++</ulink>
       library to generate a parse tree.  A parse tree is generated
       so that the Compiler can visit elements more freely and repetitively
       as it wishes.  
     </para>
     <para>
       The input information can be categolized into three
       main parts: model(s), a data set and control parameters.
       The user defined model(s) which is essentially a set of expressions
       may invoke a domain specific language compiler within the context
       of SPK Compiler compilation process.  The primary job of the
       domain specific language compiler is to discover new 
       symbols (ie. variable names) and their attributes from the expressions
       written in a language familar with target users (ex. FORTRAN 77)
       and communicates it back to the calling SPK Compiler.
       The calling SPK Compiler, then, merges it with the rest of the information collected
       else where, and generates a complete application of SPK (computational) library.
     </para>
     <sect2>
        <title>Usage of <filename>spkcompiler</filename></title>
        <screen>
        Usage: spkcompiler SOUCE_XML DATA_XML

        SOURCE_XML - a path to an SpkSourceML document instance
        DATA_XML   - a path to an SpkDataML document instance
        </screen>
        <para>
        Note: <filename>spkcompiler</filename> is assumed to be installed in one of
        the system directories (ex. /usr/bin, /usr/local/bin, a directory set by 
        <varname>LD_LIBRARY_PATH</varname>).
        </para>
     </sect2>
  </sect1>
  <sect1>
     <title>Software Components</title>
     <para>
     The unit level specifications of components making up 
     <filename>spkcompiler</filename> are available at
     <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/spkcompiler/html/index.html">
     http://192.168.2.2:8080/soft/v0.1/specs/spkcompiler/html/index.html</ulink>.
     </para>
     <para>
     In a nut shell, the 
     <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/spkcompiler/html/main_8cpp.html">
     main program</ulink> creates an instance of 
     <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/spkcompiler/common/html/classClientTranslator.html">
     <classname>ClientTranslator</classname></ulink>
     specific to the type of user.  For example, an object of 
     <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/spkcompiler/nonmem/html/classNonmemTranslator.html">
     <classname>NonmemTranslator</classname></ulink>
     that is derived from 
     <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/spkcompiler/common/html/classClientTranslator.html">
     <classname>ClientTranslator</classname></ulink> is created for users
     familar with NONMEM.  The object provides a method, among other methods, that initiates
     compilation and generates C++ source code for a complete C++ application.  The caller
     of <filename>spkcompiler</filename>, then, can build the application using
     the Makefile, which is also generated, and run it.</para>
  
     <sect2>
        <title>Domain Specific Expression Language Compiler</title>
        <para>
        A part, if not entirely, of user model specifications is written in a language that permits
        the users to write mathematical expresssions, while the rest may be expressed as parameters
        in expected forms.  The hand-written mathematical expressions
        have to be analyzed by a specialized subtool within SPK Compiler, namely, 
        a domain specific expression language compiler.
        For example, NONMEM users may write an entire model in a subset of FORTRAN 77 language
        when they use $PRED style specification or only a part if they use one of NONMEM
        canned models.
        SAAM II users may need to express rate constants in mathematical equations
        in a SAAM II specific language when they have a non-linear compartment model.
        </para>
        <para>
        We use industorial standard tools, 
        <ulink url="http://www.combo.org/lex_yacc_page/">FLEX</ulink> for generating
        lexcal analyzers (ie. scanners) and 
        <ulink url="http://www.combo.org/lex_yacc_page/">BISON</ulink> 
        for generating compiler-compilers (ie. parsers). FLEX and BISON are a
        GNU version of LEX and YACC, respectively.
        </para>
     </sect2>
  </sect1>
  <sect1>
     <title>Generated C++ Code</title>
     <para>
     SPK Compiler generates a number of C++ source code files and a Makefile.
     The specifications for these files are found at:
     <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/sourceCpp/sourceCpp.html">
     http://192.168.2.2:8080/soft/v0.1/specs/sourceCpp/sourceCpp.html</ulink>.
     </para>
  </sect1>
  <sect1>
     <title>Related Documents</title>
     <itemizedlist>
        <listitem>
           <para>
              <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/dataML/dataML.html">SpkDataML Specification</ulink>
           </para>
        </listitem>
        <listitem>
           <para>
              <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/sourceML/sourceML.html">SpkSourceML Specification</ulink>
           </para>
        </listitem>
        <listitem>
           <para>
              <ulink url="symbolTable.html">Symbol Table Specification</ulink>
           </para>
        </listitem>
        <listitem>
           <para>
              <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/spkcompiler/common/html/index.html">
              SPK Compiler software component specifications</ulink>
           </para>
        </listitem>
        <listitem>
           <para>
             <ulink url="">Generated C++ Source Code</ulink>
           </para>
        </listitem>
        <listitem>
           <para>
              <ulink url="http://192.168.2.2:8080/soft/v0.1/specs/sourceCpp/sourceCpp.html">CSPK Results/Report (xml)</ulink>
           </para>
        </listitem>
     </itemizedlist>
  </sect1>
</article>
