#ifndef NONMEM_TRANSLATOR_H
#define NONMEM_TRANSLATOR_H

/**
 * @file NonmemTranslator.h
 *
 * Declare NonmemTranslator class.
 *
 * @ingroup nonmem
 */
/**
 * @example NonmemTranslatorTest.cpp
 */
#include <vector>
#include <valarray>
#include <map>
#include <xercesc/dom/DOM.hpp>
#include <xercesc/util/XMLChar.hpp>

#include <spk/SpkValarray.h>
#include "../SpkParameters.h"
#include "../SpkMLToCpp.h"
#include "../client.h"
#include "../ClientTranslator.h"
#include "nonmem.h"

/**
 * An instance of ClientTranslator, specialized for interpreting
 * the input generated by NONMEM.
 * @ingroup nonmem
 */
class NonmemTranslator : public ClientTranslator
{
 public:

  NonmemTranslator();
  ~NonmemTranslator();
  
  /**
   * Obtain a pointer to the NonmemParameters data structure object.
   *
   * @return a pointer to the NonmemParameters data structure object
   * whose elements are altered during the translate() process.
   */
  virtual const void * getClientParameters() const;

  /**
   * Objtain a pointer to the SpkParameters data structure object.
   * 
   * @return a pointer to the SpkParameters data structure object
   * whose elements are altered during the translate() process.
   */
  virtual const struct SpkParameters * getSpkParameters() const;

  /**
   * Translate the SpkInML document into C++.
   *
   * @param tree A pointer to the SpkInML document.
   *
   */
  virtual void translate ( xercesc::DOMDocument * tree );

  /**
   * Obtain a list of paths/names of files generated as a result
   * of translation.
   */
  virtual const std::vector< std::string > getFilenameList() const;
  
 protected:

  NonmemTranslator( const NonmemTranslator& right );
  const NonmemTranslator& operator=( const NonmemTranslator& right );

 private:

  enum nonmem::MODEL nonmemModel;
  enum nonmem::TRANS nonmemTrans;

  struct SpkParameters    ourSpk;
  struct NonmemParameters ourNonmem;

  std::vector<std::string> ourGeneratedFileNames;

  std::vector<std::string> emit( 		
		    int nIndividuals,
		    const SymbolTable* table,
		    const std::map<std::string, std::string> & label_alias_mapping,
		    const std::vector< std::map<std::string, SPK_VA::valarray<double> > > &data_for,
		    const std::string order_id_pair[]
		 );
};

#endif

