/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.display;

import uw.rfpk.mda.Plotter;
import uw.rfpk.mda.nonmem.MDAFrame;
import uw.rfpk.mda.nonmem.Output;
import java.awt.Color;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.DefaultListModel;
import javax.help.*;

/** This class's instance displays likelihood vs. parameter relationship.
 *
 * @author  Jiaji
 */
public class LikelihoodShow extends javax.swing.JDialog {
    
    /** Creates new form LikelihoodShow */
    public LikelihoodShow(java.awt.Frame parent, boolean modal, Output output) {
        super(parent, modal);
        initComponents();
        jButton1.addActionListener(new CSH.DisplayHelpFromSource(((MDAFrame)parent).getHelpBroker()));
//        CSH.setHelpIDString(jButton1, "");
        /*        
        dataX = new double[3][8][];
        dataY = new double[3][8][];
        plotData(1.15339 - 0.2, 1.15339, 1.15339 + 0.2, 9.63417, 9.53274, 9.63417,
                 0.202375, 0.20232, 0.202217, dataX[0], dataY[0]);
        plotData(0.338341 - 0.0460517, 0.338341, 0.338341 + 0.0460517, 9.55227, 9.53274, 9.55556,
                 0.202275, 0.20232, 0.202377, dataX[1], dataY[1]);
        plotData(-2.70494 - 0.0460517, -2.70494, -2.70494 + 0.0460517, 9.13116, 9.53274, 10.0175, 
                 0.184555, 0.20232, 0.221676, dataX[2], dataY[2]);
*/
        int nAlpha = output.alpha[0].length;
        dataX = new double[nAlpha][8][];
        dataY = new double[nAlpha][8][];
        double x2, dx, y1, y2, y3, s1, s2, s3;
        for(int i = 0; i < nAlpha; i++)
        {
            String x = output.alpha[0][i];
            x2 = Double.parseDouble(output.alpha[0][i]);
            dx = Double.parseDouble(output.alpha[1][i]);
            y1 = Double.parseDouble(output.likelihood[i][0]);
            y2 = Double.parseDouble(output.likelihood[i][1]);
            y3 = Double.parseDouble(output.likelihood[i][2]);
            s1 = Double.parseDouble(output.likelihood_std[i][0]);
            s2 = Double.parseDouble(output.likelihood_std[i][1]);
            s3 = Double.parseDouble(output.likelihood_std[i][2]);            
            plotData(x2 - dx, x2, x2 + dx, y1, y2, y3, s1, s2, s3, dataX[i], dataY[i]);
        }
        maxY = dataY[0][0][0];
        minY = maxY;
        for(int k = 0; k <dataY.length; k++)
            for(int i = 0; i < dataY[k].length; i++)
                for(int j = 0; j < dataY[k][i].length; j++)
                {
                    maxY = Math.max(maxY, dataY[k][i][j]);
                    minY = Math.min(minY, dataY[k][i][j]);
                }
        for(int i = 0; i < dataX.length; i++)
            model.addElement("Likelihood versus alpha-" + (i + 1));
        name = new String[]{"evaluated at parameter estimate", "evaluated at two bias positions", "parabolic curve fitted likelihood", "estimated standard error bound"};
        symbol = new int[]{0, 1, 10, 12, 12, 11, 11, 11};
        color = new Color[]{Color.red, Color.blue, Color.black, Color.black, Color.black,
                            Color.black, Color.black, Color.black};
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        plotList = new javax.swing.JList(model);
        jPanel1 = new javax.swing.JPanel();
        displayButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plot List");
        setLocationRelativeTo(this);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Please select.");
        jTextField1.setFocusable(false);
        getContentPane().add(jTextField1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(plotList);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        jPanel1.add(displayButton);

        jButton1.setText("Help");
        jButton1.setMaximumSize(new java.awt.Dimension(81, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(81, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(81, 25));
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        int[] selectedIndex = plotList.getSelectedIndices();
        if(selectedIndex.length == 1 && selectedIndex[0] < 0)
            return;
        
        for(int i = 0; i < selectedIndex.length; i++)
        {
            int j = selectedIndex[i];
            JFrame frame = new JFrame(); 
            Plotter plotter = new Plotter(dataX[j],
                                          dataY[j],
                                          "Likelihood Versus Parameter",
                                          "Fixed Effect Parameter alpha-" + (j + 1),
                                          "Negative Log Likelihood",
                                          name, symbol, color,
                                          false, false, false, false, false, true, true,
                                          null, null, null,
                                          "Top",
                                          5, 5, 6, 6, 4, 4, 4, 4,                                          
                                          0, 0, maxY, minY,
                                          new Font("SansSerif", Font.BOLD, 14),
                                          new Font("SansSerif", Font.BOLD, 12),
                                          new Font("SansSerif", Font.BOLD, 11),
                                          new Font("SansSerif", Font.BOLD, 10),
                                          0, 0, 0, 0, true, true, false, false,
                                          2, 2, frame);

            plotter.setToolTipText("");
            frame.getContentPane().add(plotter);
            frame.setLocation(50 * i, 40 * i);
	    frame.setSize(500, 440);
	    frame.setTitle("Model Design Agent Data Plot");	
	    frame.setVisible(true);
        }
    }//GEN-LAST:event_displayButtonActionPerformed

    private void plotData(double x1, double x2, double x3,
                          double y1, double y2, double y3,
                          double s1, double s2, double s3,
                          double[][] dataX, double[][] dataY)
    {
        double left = x1 - (x3 - x1)/8;
        double right = x3 + (x3 - x1)/8;
        double dx = (right - left) / 20;        
        double[] sAll = {s1, s2, s3};
        double[] y1All = {y1, y1 - s1, y1 + s1}; 
        double[] y2All = {y2, y2 - s2, y2 + s2};
        double[] y3All = {y3, y3 - s3, y3 + s3};        
        double a, b, c, x;

        // Evaluated at parameter estimate
        dataX[0] = new double[1];
        dataY[0] = new double[1];
        dataX[0][0] = x2;
        dataY[0][0] = y2;        
        // Evaluated at biased positions
        dataX[1] = new double[2];
        dataY[1] = new double[2];        
        dataX[1][0] = x1;
        dataX[1][1] = x3;
        dataY[1][0] = y1;
        dataY[1][1] = y3;
        // The three curves
        for(int i = 0; i < 3; i++)
        {
            double[] coef = findCoefficents(x1, x2, x3, y1All[i], y2All[i], y3All[i]);
            dataX[i + 2] = new double[21];
            dataY[i + 2] = new double[21];
            a = coef[0];
            b = coef[1];
            c = coef[2];          
            for(int j = 0; j < dataX[i + 2].length; j++)
            {
                x = left + dx * j;
                dataX[i + 2][j] = x;
                dataY[i + 2][j] = a*x*x + b*x + c;
            }            
        }
        // The three vertical lines
        for(int i = 5; i < 8; i++)
        {
            dataX[i] = new double[2];
            dataY[i] = new double[2];
        }
        dataX[5][0] = x1;
        dataY[5][0] = y1 + sAll[0];
        dataX[5][1] = x1;
        dataY[5][1] = y1 - sAll[0];
        dataX[6][0] = x2;
        dataY[6][0] = y2 + sAll[1];
        dataX[6][1] = x2;
        dataY[6][1] = y2 - sAll[1];        
        dataX[7][0] = x3;
        dataY[7][0] = y3 + sAll[2];
        dataX[7][1] = x3;
        dataY[7][1] = y3 - sAll[2];
    }
    
    private double[] findCoefficents(double x1, double x2, double x3, 
                                     double y1, double y2, double y3)
    {
        double[] abc = new double[3];
//        double det = x1*x1*x2 + x2*x2*x3 + x1*x3*x3 - x2*x3*x3 - x3*x1*x1 - x1*x2*x2;
//        abc[0] = (x1*y3 + x2*y1 + x3*y2 - x2*y3 - x3*y1 - x1*y2) / det;
//        abc[1] = (x1*x1*y2 + x3*x3*y1 + x2*x2*y3 - x3*x3*y2 - x2*x2*y1 - x1*x1*y3) / det;
//        abc[2] = (x1*x1*x2*y3 + x2*x2*x3*y1 + x3*x3*x1*y2 - y1*x2*x3*x3 - y2*x3*x1*x1 - y3*x1*x2*x2) / det;        
        double h = x2 - x1;
        abc[0] = (y1 -2*y2 + y3)/2/h/h;
        abc[1] = (y2 - y1)/h - abc[0]*(x1 + x2);
        abc[2] = y1 - (abc[0]*x1 + abc[1])*x1;
        return abc;
    }    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new LikelihoodShow(null, false, null).show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton displayButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList plotList;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel model = new DefaultListModel();
    private double[][][] dataX, dataY;
    private double minY, maxY;
    private String[] name;
    private int[] symbol;
    private Color[] color;
}
