/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.compartment;

import javax.swing.DefaultListModel;
import java.awt.Cursor;
import java.util.*;
import javax.swing.JList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/** This class defines variable dialog.
 *
 * @author  Jiaji Du
 */
public class VariableDialog extends javax.swing.JDialog {
    
    /** Creates new form VariableDialog.
     * @param parent DesignTool object.
     */
    public VariableDialog(DesignTool parent) {
        super(parent, false);
        initComponents();
        tool = parent;
        setSize(400, 350);
    }
    
    /** Set variable list */
    protected void setVariableList()
    {
        String value;
        listModel.removeAllElements();
        if(Model.variableList != null)
            for(String key : Model.variableList)
            {
                value = Model.variables.getProperty(key);
                if(value != null)
                {
                    if(value.indexOf("\n") != -1)
                        value = value.substring(value.lastIndexOf("\n") + 1);
                    listModel.addElement(value);
                }
            }
        jList1.setModel(listModel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        modelButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("User Defined Variable Models");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Select item to model or to change order");
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(259, 200));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/wizard/icons/up.png")));
        upButton.setPreferredSize(new java.awt.Dimension(50, 25));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        jPanel1.add(upButton);

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/wizard/icons/down.png")));
        downButton.setPreferredSize(new java.awt.Dimension(50, 25));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        jPanel1.add(downButton);

        modelButton.setText("Model");
        modelButton.setPreferredSize(new java.awt.Dimension(75, 25));
        modelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelButtonActionPerformed(evt);
            }
        });

        jPanel1.add(modelButton);

        helpButton.setText("Help");
        helpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        jPanel1.add(helpButton);

        jButton1.setText("Close");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Help is not currently available for this topic.");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void modelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int index = jList1.getSelectedIndex();
        String variable = Model.variableList.get(index);
        String[] model = new String[1];
        model[0] = Model.variables.getProperty(variable);
        if(tool.iterator.analysis.equals("population"))
            new MixedModelDialog(null, model, variable, tool.object.getDataLabels());
        else
            new IndModelDialog(null, model, variable, tool.object.getDataLabels());
        if(model[0].equals(""))
        {
            JOptionPane.showMessageDialog(null, "The variable's model has not been defined.",
                                          "Error Message", JOptionPane.ERROR_MESSAGE);
            setCursor(null);
            return;
        }
        String value = model[0];
        Model.variables.setProperty(variable, value);
        setVariableList();
        tool.setRecords();
        setCursor(null);
    }//GEN-LAST:event_modelButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int index = jList1.getSelectedIndex();
        if(index < listModel.size() - 1)
        {
            String variable = Model.variableList.get(index);
            Model.variableList.set(index, Model.variableList.get(index + 1));
            Model.variableList.set(index + 1, variable);
            setVariableList();
            jList1.setSelectedIndex(index + 1);
            tool.setRecords();
        }
        setCursor(null);
    }//GEN-LAST:event_downButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int index = jList1.getSelectedIndex();
        if(index > 0)
        {
            String variable = Model.variableList.get(index);
            Model.variableList.set(index, Model.variableList.get(index - 1));
            Model.variableList.set(index - 1, variable);
            setVariableList();
            jList1.setSelectedIndex(index - 1);
            tool.setRecords();
        }
        setCursor(null);
    }//GEN-LAST:event_upButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /** Main method.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new VariableDialog(new DesignTool()).setVisible(true);
    }
    
    /** Update variable list and variable map.
     * return true if any new variable was added, otherwise false.
     */
    protected boolean updateVariableList()
    {
        String model, token;
        StringTokenizer tokenizer;
        Properties parameters;
        Enumeration keys;
        Model.variableList.clear();
        for(int i = 0; i < Model.fluxes.size(); i++)
        {
            if(Model.fluxes.get(i).element1 instanceof Element.Compartment)
            {
                model = Model.fluxes.get(i).flowRate.trim().replaceAll(" ", "").replaceAll("\n", "");
                if(model.split("=").length == 2)
                {
                    tokenizer = new StringTokenizer(model.split("=")[1], "+-*/()");
                    while(tokenizer.hasMoreTokens())
                    {
                        token = tokenizer.nextToken();
                        if(Model.variableList.indexOf(token) == -1 && checkVariableName(token))
                            Model.variableList.add(token);
                    }
                }
            }
        }
        for(int i = 0; i < Model.elements.size(); i++)
        {
            if(Model.elements.get(i) instanceof Element.Compartment)
            {
                parameters = ((Element.Compartment)Model.elements.get(i)).parameters;
                keys = parameters.keys();
                while(keys.hasMoreElements())
                {
                    model = parameters.getProperty((String)keys.nextElement()).trim().replaceAll(" ", "").replaceAll("\n", "").split("=")[1];
                    tokenizer = new StringTokenizer(model, "+-*/()");
                    while(tokenizer.hasMoreTokens())
                    {
                        token = tokenizer.nextToken();
                        if(Model.variableList.indexOf(token) == -1 && checkVariableName(token))
                            Model.variableList.add(token);
                    }
                }
            }
            else
            {
                model = ((Element.Delay)Model.elements.get(i)).delayTime;
                tokenizer = new StringTokenizer(model, "+-*/()");
                while(tokenizer.hasMoreTokens())
                {
                    token = tokenizer.nextToken();
                    if(Model.variableList.indexOf(token) == -1 && checkVariableName(token))
                        Model.variableList.add(token);
                }
            }
        }
        keys = Model.variables.keys();
        while(keys.hasMoreElements())
        {
            String key = (String)keys.nextElement();
                if(Model.variableList.indexOf(key) == -1)
                    Model.variables.remove(key);                
        }
        boolean isNewVariableAdded = false;
        for(String variable : Model.variableList)
            if(!variable.equals("") && !Model.variables.containsKey(variable))
            {
                Model.variables.setProperty(variable, variable + "=");
                isNewVariableAdded = true;
            }
        return isNewVariableAdded;
    }
    
    private boolean checkVariableName(String name)
    {
        name = name.toUpperCase();
        String[] functions = {"ABS", "ACOS", "ASIN", "ATAN", "ATAN2", "COSH",
                              "MAX", "MIN", "MOD", "SINH", "TAN", "TANH", "THETA", "ETA"};
        for(String function : functions)
            if(name.equals(function))
                return false;
        if(name.matches("TLAG\\d+") || name.matches("[S|F|R|D]\\d+") ||
           name.matches("ALAG\\d+") || name.matches("\\d\\w*") ||
           name.matches("K\\d+") || name.matches("K\\d+T\\d+"))
            return false;
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modelButton;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel listModel = new DefaultListModel();
    private DesignTool tool;
}
