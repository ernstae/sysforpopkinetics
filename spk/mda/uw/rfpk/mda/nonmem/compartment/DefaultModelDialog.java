/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.compartment;

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;
import javax.help.*;
import uw.rfpk.mda.nonmem.MDAFrame;

/** This class defines default model dialog.
 *
 * @author  Jiaji Du
 */

public class DefaultModelDialog extends javax.swing.JDialog implements TableModelListener {
    
    /**
     * Creates new form DefaultModelDialog.
     * 
     * @param parent DesignTool object.
     */
    public DefaultModelDialog(DesignTool parent) {
        super(parent, false);
        tool = parent;
        initComponents();
        helpButton.addActionListener(new CSH.DisplayHelpFromSource(MDAFrame.getHelpBroker()));
        CSH.setHelpIDString(helpButton, "Defaults");
        
        // Count number of parameters excluding FF
        int rows = 0;
        for(Parameter parameter : Model.parameterList)
            if(!parameter.name.matches("FF\\d+"))
                rows++;
        int nParam = Model.parameterList.size();
        String name;
        int j = 0;
        if(tool.iterator.analysis.equals("population"))
        {
            data = new Object[rows][6];
            for(int i = 0; i < nParam; i++)
            {
                name = Model.parameterList.get(i).name;
                if(name.matches("FF\\d+"))
                    continue;
                data[j][0] = name;
                data[j][1] = new Boolean(true);
                data[j][2] = new Boolean(false);
                data[j][3] = new Boolean(false);
                data[j][4] = new Boolean(false);
                data[j][5] = new Boolean(false);
                j++;
            }
            setSize(660, 350);
        }
        else
        {
            data = new Object[rows][3];
            for(int i = 0; i < nParam; i++)
            {
                name = Model.parameterList.get(i).name;
                if(name.matches("FF\\d+"))
                    continue;
                data[j][0] = name;
                data[j][1] = new Boolean(true);
                data[j][2] = new Boolean(false);
                j++;
            }
            setSize(300, 350);
        }
        ATableModel model = new ATableModel();
        jTable1.setModel(model);
        model.addTableModelListener(this);
        JTableHeader header = jTable1.getTableHeader();
        header.setDefaultRenderer(new HeaderRenderer());
        setLocationRelativeTo(tool.defaultsButton);
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        OKButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Default Parameter Model Selection");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Select a default model for each parameter");
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(259, 200));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 12));

        OKButton.setText("OK");
        OKButton.setPreferredSize(new java.awt.Dimension(75, 25));
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        jPanel1.add(OKButton);

        helpButton.setText("Help");
        helpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel1.add(helpButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel1.add(cancelButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        int j = 0;
        int k = 0;
        Parameter parameter;
        int nParam = Model.parameterList.size();
        if(tool.iterator.analysis.equals("population"))
        {
            int l = 0;
            for(int i = 0; i < nParam; i++)
            {
                parameter = Model.parameterList.get(i);
                if(parameter.name.matches("FF\\d+"))
                    continue;
                if(data[j][2].toString().equals("true"))
                    parameter.value = parameter.name + "=THETA(" + ++k + ")";
                if(data[j][3].toString().equals("true"))
                    parameter.value = parameter.name + "=THETA(" + ++k + ")+ETA(" + ++l + ")";
                if(data[j][4].toString().equals("true"))
                    parameter.value = parameter.name + "=THETA(" + ++k + ")+THETA(" + k + ")*ETA(" + ++l + ")";
                if(data[j][5].toString().equals("true"))
                    parameter.value = parameter.name + "=THETA(" + ++k + ")*EXP(ETA(" + ++l + "))";
                j++;
            }
        }
        else
        {
            for(int i = 0; i < nParam; i++)
            {
                parameter = Model.parameterList.get(i);
                if(parameter.name.matches("FF\\d+"))
                    continue;
                if(data[j][2].toString().equals("true"))
                    parameter.value = parameter.name + "=THETA(" + ++k + ")";
                j++;
            }
        }
        tool.setRecords();
        setVisible(false);
        setCursor(null);
    }//GEN-LAST:event_OKButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    /** Main method.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        DefaultModelDialog defaultModel = new DefaultModelDialog(new DesignTool());
    }
    
    private class ATableModel extends AbstractTableModel 
    {
        public String getColumnName(int c)
        {
            if(tool.iterator.analysis.equals("population"))
                return columnNames1[c];
            return columnNames2[c];
	}
        public Class getColumnClass(int c)
        {
            return data[0][c].getClass();
        }
        public int getColumnCount()
        {
            return data[0].length;
        }
        public int getRowCount()
        {
            return data.length;
        }
        public Object getValueAt(int r, int c)
        {
            return data[r][c];
        }
        public boolean isCellEditable(int r,int c)
        {
            return true;
        }
        public void setValueAt(Object value,int r,int c)
        {
            data[r][c] = value;
            fireTableCellUpdated(r, c);
        }
    }

    /** Table model change handler.
     * 
     * @param event table model change event.
     */
    public void tableChanged(TableModelEvent event) {
        int row = event.getFirstRow();
        int column = event.getColumn();
        ATableModel model = (ATableModel)event.getSource();
        if(model.getValueAt(row, column).toString() == "true")
        {
            for(int i = 1; i < data[0].length; i++)
                if(column != i)
                    data[row][i] = new Boolean(false);
        }
        else
            data[row][column] = new Boolean(true);
        repaint();
    }  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private DesignTool tool;
    private Object[][] data = {
        {"S1", new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)},
        {"K10", new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)},
        {"K12", new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)}
    };
    private String[] columnNames1 = {"Parameter\nName", "No Change\n", "No Mixed Effects\nTHETA", "Additive\nTHETA+ETA",
                                    "Proportional\nTHETA*(1+ETA)", "Exponential\nTHETA*EXP(ETA)"};
    private String[] columnNames2 = {"Parameter\nName", "No Change\n", "Direct Equal\nTHETA"};
}

class HeaderRenderer extends JPanel implements TableCellRenderer
{
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
    {
        string = (String)value;
        return this;
    }
    
    public void paintComponent(Graphics g)
    {
        String[] lines = string.split("\n");
        for(int i = 0; i < lines.length; i++)
            g.drawString(lines[i], 0, 12 * (i + 1) + 4);
    }
    
    public Dimension getPreferredSize()
    {
        String[] lines = string.split("\n");
        return new Dimension(0, lines.length * 12 + 12);
    }
    
    private String string;
}
