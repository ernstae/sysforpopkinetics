/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.compartment;

import java.awt.Font;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.Cursor;
import java.awt.BasicStroke;
import java.util.Vector;
import java.util.Enumeration;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import uw.rfpk.mda.nonmem.Utility;
import uw.rfpk.mda.nonmem.MDAFrame;
import javax.swing.DefaultListModel;
import javax.help.*;

/** This class defines diagram of the compartment model.
 *
 * @author  Jiaji Du
 */
public class Diagram extends javax.swing.JPanel {
    
    /** Creates new form Diagram.
     * @param tool DesignTool object.
     */
    public Diagram(DesignTool tool) {
        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.EtchedBorder());
        initComponents();
        compHelpButton.addActionListener(new CSH.DisplayHelpFromSource(MDAFrame.getHelpBroker()));
        CSH.setHelpIDString(compHelpButton, "Prepare_Input_Residual_Unknown_Variability_Model");
        area = new Dimension(0, 0);
        this.tool = tool;
        model = new Model(tool);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        deleteMenuItem = new javax.swing.JMenuItem();
        attributeMenuItem = new javax.swing.JMenuItem();
        compDialog = new javax.swing.JDialog();
        compNameLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        compOKButton = new javax.swing.JButton();
        compCancelButton = new javax.swing.JButton();
        compHelpButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        forceButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        paramList = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        compEqTextArea = new javax.swing.JTextArea();
        compNameTextField = new javax.swing.JTextField();
        jCheckBox5 = new javax.swing.JCheckBox();
        delayDialog = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        delayNameLabel = new javax.swing.JLabel();
        delayNameTextField = new javax.swing.JTextField();
        delayModelTextField = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        fractionList = new javax.swing.JList();
        nDelayCompsComboBox = new javax.swing.JComboBox();
        delayMixedRadioButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        delayTimeRadioButton = new javax.swing.JRadioButton();
        delayTimeTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        fluxDialog = new javax.swing.JDialog();
        fluxNameLabel = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fluxEqTextArea = new javax.swing.JTextArea();
        fluxVariableTextField = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        fluxOKButton = new javax.swing.JButton();
        fluxCancelButton = new javax.swing.JButton();
        fluxHelpButton = new javax.swing.JButton();
        fluxValueTextField = new javax.swing.JTextField();
        fluxFixedRadioButton = new javax.swing.JRadioButton();
        fluxModelRadioButton = new javax.swing.JRadioButton();
        fluxRedefinedRadioButton = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fluxModelTextField = new javax.swing.JTextField();
        inputDialog = new javax.swing.JDialog();
        jLabel16 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        forceDialog = new javax.swing.JDialog();
        compLabel = new javax.swing.JLabel();
        turnOffRadioButton = new javax.swing.JRadioButton();
        associateDataRadioButton = new javax.swing.JRadioButton();
        forceEqRadioButton = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        ffOKButton = new javax.swing.JButton();
        ffCancelButton = new javax.swing.JButton();
        ffHelpButton = new javax.swing.JButton();
        forceNameLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        forceEqTextArea = new javax.swing.JTextArea();
        dataNameComboBox = new javax.swing.JComboBox();
        paramDialog = new javax.swing.JDialog();
        paramNameLabel = new javax.swing.JLabel();
        paramFixedRadioButton = new javax.swing.JRadioButton();
        paramMixedRadioButton = new javax.swing.JRadioButton();
        paramRedefinedRadioButton = new javax.swing.JRadioButton();
        paramNameLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paramEqTextArea = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        paramVariableTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        paramValueTextField = new javax.swing.JTextField();
        paramNameLabel1 = new javax.swing.JLabel();
        paramModelTextField = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();

        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });

        jPopupMenu1.add(deleteMenuItem);

        attributeMenuItem.setText("Attributes");
        attributeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeMenuItemActionPerformed(evt);
            }
        });

        jPopupMenu1.add(attributeMenuItem);

        compDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        compDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        compDialog.setTitle("Compatment Attributes");
        compDialog.setModal(true);
        compNameLabel.setText("Compartment name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 8, 12);
        compDialog.getContentPane().add(compNameLabel, gridBagConstraints);

        compOKButton.setText("OK");
        compOKButton.setPreferredSize(new java.awt.Dimension(75, 25));
        compOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compOKButtonActionPerformed(evt);
            }
        });

        jPanel1.add(compOKButton);

        compCancelButton.setText("Cancel");
        compCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compCancelButtonActionPerformed(evt);
            }
        });

        jPanel1.add(compCancelButton);

        compHelpButton.setText("Help");
        compHelpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel1.add(compHelpButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        compDialog.getContentPane().add(jPanel1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Select forcing function:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        compDialog.getContentPane().add(jLabel1, gridBagConstraints);

        forceButton.setText("Forcing Function");
        forceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 12);
        compDialog.getContentPane().add(forceButton, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel2.setText("Select optional compartment specific parameters:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 2, 12);
        compDialog.getContentPane().add(jLabel2, gridBagConstraints);

        jCheckBox1.setText("INITIALOFF");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        compDialog.getContentPane().add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("NOOFF");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        compDialog.getContentPane().add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText("DEFDOSE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        compDialog.getContentPane().add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setText("DEFOBSERVATION");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        compDialog.getContentPane().add(jCheckBox4, gridBagConstraints);

        paramList.setBackground(new java.awt.Color(235, 235, 235));
        paramList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        paramList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paramListMouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(paramList, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel7.setText("Select compartment attributes:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 2, 12);
        compDialog.getContentPane().add(jLabel7, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel12.setText("Define equations:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 2, 12);
        compDialog.getContentPane().add(jLabel12, gridBagConstraints);

        jScrollPane6.setViewportView(compEqTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 60;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jScrollPane6, gridBagConstraints);

        compNameTextField.setMaximumSize(new java.awt.Dimension(100, 19));
        compNameTextField.setMinimumSize(new java.awt.Dimension(100, 19));
        compNameTextField.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 8, 12);
        compDialog.getContentPane().add(compNameTextField, gridBagConstraints);

        jCheckBox5.setText("NODOSE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        compDialog.getContentPane().add(jCheckBox5, gridBagConstraints);

        delayDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        delayDialog.setTitle("Delay Attributes");
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        delayNameLabel.setText("Delay name  ");
        jPanel3.add(delayNameLabel);

        delayNameTextField.setPreferredSize(new java.awt.Dimension(100, 19));
        jPanel3.add(delayNameTextField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 3, 0);
        delayDialog.getContentPane().add(jPanel3, gridBagConstraints);

        delayModelTextField.setEditable(false);
        delayModelTextField.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 12);
        delayDialog.getContentPane().add(delayModelTextField, gridBagConstraints);

        jLabel28.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel28.setText("Select number of compartments:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 2, 19);
        delayDialog.getContentPane().add(jLabel28, gridBagConstraints);

        jLabel31.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel31.setText("Equations defining fractional distribution:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 12, 2, 12);
        delayDialog.getContentPane().add(jLabel31, gridBagConstraints);

        jButton2.setText("OK");
        jButton2.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel9.add(jButton2);

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel9.add(jButton3);

        jButton4.setText("Help");
        jButton4.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel9.add(jButton4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 12, 12);
        delayDialog.getContentPane().add(jPanel9, gridBagConstraints);

        jScrollPane4.setPreferredSize(new java.awt.Dimension(259, 120));
        fractionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fractionList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fractionListMouseClicked(evt);
            }
        });

        jScrollPane4.setViewportView(fractionList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        delayDialog.getContentPane().add(jScrollPane4, gridBagConstraints);

        nDelayCompsComboBox.setPreferredSize(new java.awt.Dimension(60, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        delayDialog.getContentPane().add(nDelayCompsComboBox, gridBagConstraints);

        buttonGroup6.add(delayMixedRadioButton);
        delayMixedRadioButton.setText("Specify a mixed effect model for the delay");
        delayMixedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delayMixedRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 9, 0, 12);
        delayDialog.getContentPane().add(delayMixedRadioButton, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setText("TLAG1=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        delayDialog.getContentPane().add(jLabel4, gridBagConstraints);

        buttonGroup6.add(delayTimeRadioButton);
        delayTimeRadioButton.setSelected(true);
        delayTimeRadioButton.setText("The delay time is fixed at:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
        delayDialog.getContentPane().add(delayTimeRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        delayDialog.getContentPane().add(delayTimeTextField, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel8.setText("Select modeling options:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 0, 12);
        delayDialog.getContentPane().add(jLabel8, gridBagConstraints);

        fluxDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        fluxDialog.setTitle("Transfer Attributes");
        fluxNameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 6, 12);
        fluxDialog.getContentPane().add(fluxNameLabel, gridBagConstraints);

        jLabel34.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel34.setText("List any new  variables below (separated by space):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 2, 12);
        fluxDialog.getContentPane().add(jLabel34, gridBagConstraints);

        jScrollPane3.setViewportView(fluxEqTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 60;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 12);
        fluxDialog.getContentPane().add(jScrollPane3, gridBagConstraints);

        fluxVariableTextField.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 4, 12);
        fluxDialog.getContentPane().add(fluxVariableTextField, gridBagConstraints);

        fluxOKButton.setText("OK");
        fluxOKButton.setPreferredSize(new java.awt.Dimension(75, 25));
        fluxOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxOKButtonActionPerformed(evt);
            }
        });

        jPanel11.add(fluxOKButton);

        fluxCancelButton.setText("Cancel");
        fluxCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxCancelButtonActionPerformed(evt);
            }
        });

        jPanel11.add(fluxCancelButton);

        fluxHelpButton.setText("Help");
        fluxHelpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel11.add(fluxHelpButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 12, 12);
        fluxDialog.getContentPane().add(jPanel11, gridBagConstraints);

        fluxValueTextField.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 12);
        fluxDialog.getContentPane().add(fluxValueTextField, gridBagConstraints);

        buttonGroup4.add(fluxFixedRadioButton);
        fluxFixedRadioButton.setSelected(true);
        fluxFixedRadioButton.setText("Transfer coefficient is fixed at");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
        fluxDialog.getContentPane().add(fluxFixedRadioButton, gridBagConstraints);

        buttonGroup4.add(fluxModelRadioButton);
        fluxModelRadioButton.setText("Use mixed effect model (e.g. THETA(1)+ETA(1))");
        fluxModelRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxModelRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
        fluxDialog.getContentPane().add(fluxModelRadioButton, gridBagConstraints);

        buttonGroup4.add(fluxRedefinedRadioButton);
        fluxRedefinedRadioButton.setText("Redefine transfer coefficient as: (e.g. CL/V)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
        fluxDialog.getContentPane().add(fluxRedefinedRadioButton, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel3.setText("K10=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 4, 0);
        fluxDialog.getContentPane().add(jLabel3, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel6.setText("Select a modeling option:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 12, 3, 12);
        fluxDialog.getContentPane().add(jLabel6, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel5.setText("K10=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        fluxDialog.getContentPane().add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        fluxDialog.getContentPane().add(fluxModelTextField, gridBagConstraints);

        inputDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        inputDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        inputDialog.setTitle("Input Attributes");
        inputDialog.setModal(true);
        inputDialog.setResizable(false);
        jLabel16.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        inputDialog.getContentPane().add(jLabel16, gridBagConstraints);

        jLabel20.setText("Units:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        inputDialog.getContentPane().add(jLabel20, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 12, 12);
        inputDialog.getContentPane().add(jTextField2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridLayout(4, 1));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setText("Bolus");
        jPanel4.add(jRadioButton1);

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setText("Infusion");
        jPanel4.add(jRadioButton2);

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setText("Primed Infusion");
        jPanel4.add(jRadioButton3);

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setText("Equation");
        jPanel4.add(jRadioButton4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        inputDialog.getContentPane().add(jPanel4, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridLayout(6, 2));

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel21.setText("Amount:");
        jPanel6.add(jLabel21);

        jPanel6.add(jTextField3);

        jLabel22.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel22.setText("Constant Rate:");
        jPanel6.add(jLabel22);

        jPanel6.add(jTextField4);

        jLabel23.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel23.setText("Event Start:");
        jPanel6.add(jLabel23);

        jPanel6.add(jTextField5);

        jLabel24.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel24.setText("Event Stop:");
        jPanel6.add(jLabel24);

        jPanel6.add(jTextField6);

        jLabel25.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel25.setText("Repeat Every:");
        jPanel6.add(jLabel25);

        jPanel6.add(jTextField7);

        jLabel26.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel26.setText("No. of Repeats:");
        jPanel6.add(jLabel26);

        jPanel6.add(jTextField8);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        inputDialog.getContentPane().add(jPanel6, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridLayout(4, 1));

        jButton1.setText("Save");
        jPanel7.add(jButton1);

        jButton5.setText("Edit");
        jPanel7.add(jButton5);

        jButton6.setText("Add");
        jPanel7.add(jButton6);

        jButton7.setText("Delete");
        jPanel7.add(jButton7);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 12);
        inputDialog.getContentPane().add(jPanel7, gridBagConstraints);

        jLabel27.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel27.setText("Equation:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 2, 0);
        inputDialog.getContentPane().add(jLabel27, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        inputDialog.getContentPane().add(jTextField9, gridBagConstraints);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        inputDialog.getContentPane().add(jSeparator1, gridBagConstraints);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(453, 103));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setPreferredScrollableViewportSize(new java.awt.Dimension(450, 100));
        jTable1.setPreferredSize(new java.awt.Dimension(300, 100));
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 12);
        inputDialog.getContentPane().add(jScrollPane2, gridBagConstraints);

        jButton9.setText("OK");
        jButton9.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel8.add(jButton9);

        jButton10.setText("Cancel");
        jPanel8.add(jButton10);

        jButton11.setText("Help");
        jButton11.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel8.add(jButton11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(12, 11, 12, 12);
        inputDialog.getContentPane().add(jPanel8, gridBagConstraints);

        forceDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        forceDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        forceDialog.setTitle("Forcing Function");
        forceDialog.setModal(true);
        forceDialog.setResizable(false);
        compLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 7, 12);
        forceDialog.getContentPane().add(compLabel, gridBagConstraints);

        buttonGroup1.add(turnOffRadioButton);
        turnOffRadioButton.setSelected(true);
        turnOffRadioButton.setText("Turned Off");
        turnOffRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOffRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        forceDialog.getContentPane().add(turnOffRadioButton, gridBagConstraints);

        buttonGroup1.add(associateDataRadioButton);
        associateDataRadioButton.setText("Associate with data name:");
        associateDataRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                associateDataRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        forceDialog.getContentPane().add(associateDataRadioButton, gridBagConstraints);

        buttonGroup1.add(forceEqRadioButton);
        forceEqRadioButton.setText("Equation for the forcing function:");
        forceEqRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceEqRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 2, 12);
        forceDialog.getContentPane().add(forceEqRadioButton, gridBagConstraints);

        ffOKButton.setText("OK");
        ffOKButton.setPreferredSize(new java.awt.Dimension(75, 25));
        ffOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffOKButtonActionPerformed(evt);
            }
        });

        jPanel2.add(ffOKButton);

        ffCancelButton.setText("Cancel");
        ffCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffCancelButtonActionPerformed(evt);
            }
        });

        jPanel2.add(ffCancelButton);

        ffHelpButton.setText("Help");
        ffHelpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel2.add(ffHelpButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        forceDialog.getContentPane().add(jPanel2, gridBagConstraints);

        forceNameLabel.setText("FF1=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 18, 0, 2);
        forceDialog.getContentPane().add(forceNameLabel, gridBagConstraints);

        forceEqTextArea.setRows(4);
        jScrollPane7.setViewportView(forceEqTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        forceDialog.getContentPane().add(jScrollPane7, gridBagConstraints);

        dataNameComboBox.setPreferredSize(new java.awt.Dimension(80, 21));
        dataNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataNameComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        forceDialog.getContentPane().add(dataNameComboBox, gridBagConstraints);

        paramDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        paramDialog.setTitle("Parameter Dialog");
        paramDialog.setModal(true);
        paramNameLabel.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 6, 12);
        paramDialog.getContentPane().add(paramNameLabel, gridBagConstraints);

        buttonGroup5.add(paramFixedRadioButton);
        paramFixedRadioButton.setText("The parameter is fixed at");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 0);
        paramDialog.getContentPane().add(paramFixedRadioButton, gridBagConstraints);

        buttonGroup5.add(paramMixedRadioButton);
        paramMixedRadioButton.setText("Use mixed effect model (e.g. THETA(1)+ETA(1))");
        paramMixedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paramMixedRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 12);
        paramDialog.getContentPane().add(paramMixedRadioButton, gridBagConstraints);

        buttonGroup5.add(paramRedefinedRadioButton);
        paramRedefinedRadioButton.setText("Redefine the parameter as: (e.g. CL/V)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 12);
        paramDialog.getContentPane().add(paramRedefinedRadioButton, gridBagConstraints);

        paramNameLabel2.setFont(new java.awt.Font("Dialog", 0, 12));
        paramNameLabel2.setText("S1=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 0);
        paramDialog.getContentPane().add(paramNameLabel2, gridBagConstraints);

        jScrollPane1.setViewportView(paramEqTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 60;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 12);
        paramDialog.getContentPane().add(jScrollPane1, gridBagConstraints);

        jButton15.setText("OK");
        jButton15.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton15);

        jButton16.setText("Cancel");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton16);

        jButton17.setText("Help");
        jButton17.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel5.add(jButton17);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        paramDialog.getContentPane().add(jPanel5, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel9.setText("List any new variables below (separated by space):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 14, 2, 14);
        paramDialog.getContentPane().add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        paramDialog.getContentPane().add(paramVariableTextField, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel11.setText("Select a modeling option:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 3, 12);
        paramDialog.getContentPane().add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        paramDialog.getContentPane().add(paramValueTextField, gridBagConstraints);

        paramNameLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        paramNameLabel1.setText("S1=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        paramDialog.getContentPane().add(paramNameLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        paramDialog.getContentPane().add(paramModelTextField, gridBagConstraints);

        setLayout(new java.awt.BorderLayout());

        setToolTipText("");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

    }// </editor-fold>//GEN-END:initComponents

    private void dataNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataNameComboBoxActionPerformed
        forceEqTextArea.setText((String)dataNameComboBox.getSelectedItem());
    }//GEN-LAST:event_dataNameComboBoxActionPerformed

    private void fractionListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fractionListMouseClicked
        Element.Delay delay = (Element.Delay)model.selectedElement;
        String fraction = JOptionPane.showInputDialog(fractionList, "Enter fraction.");
        int index = fractionList.getSelectedIndex();
        fractListModel.setElementAt("Compartment " + ((Element.Compartment)delay.compartments.get(index)).number + 
                               ": " + fraction, index);
    }//GEN-LAST:event_fractionListMouseClicked

    private void delayMixedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delayMixedRadioButtonActionPerformed
        Element.Delay delay = (Element.Delay)model.selectedElement;
        String[] model = new String[2];
        model[0] = delayTimeTextField.getText();
        model[1] = Model.equations;
        new MixedModelDialog(null, model, delay.name, tool.object.getDataLabels());
        delayModelTextField.setText(model[0]);
        Model.equations = model[1];
    }//GEN-LAST:event_delayMixedRadioButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        delayDialog.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Element.Delay delay = (Element.Delay)model.selectedElement;
        delay.name = delayNameTextField.getText();
        if(delayTimeRadioButton.isSelected())
            if(Utility.isPosIntNumber(delayTimeTextField.getText()))
                delay.delayTime = delayTimeTextField.getText();
            else
            {
                JOptionPane.showMessageDialog(null, "Delay time must be a positive integer.",
                                              "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        else
            delay.delayTime = delayModelTextField.getText();
        delay.nDelayComps = nDelayCompsComboBox.getSelectedIndex() + 2;
        for(int i = 0; i < fractListModel.size(); i++)
            delay.fractions.setElementAt(((String)fractListModel.get(i)).split(": ")[1], i);
        tool.setRecords();
        delayDialog.setVisible(false);
        repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void fluxModelRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxModelRadioButtonActionPerformed
        if(!tool.iterator.getIsInd() && !tool.iterator.getIsTwoStage() && !tool.iterator.isNonparam)
        {
            Element.Flux flux = (Element.Flux)model.selectedElement;
            String[] model = new String[2];
            model[0] = fluxModelTextField.getText();
            model[1] = Model.equations;
            new MixedModelDialog(null, model, flux.name, tool.object.getDataLabels());
            fluxModelTextField.setText(model[0]);
            Model.equations = model[1];
        }
        else
            if(fluxModelTextField.getText().trim().length() == 0)
                fluxModelTextField.setText("THETA()");
    }//GEN-LAST:event_fluxModelRadioButtonActionPerformed

    private void paramMixedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paramMixedRadioButtonActionPerformed
        Element.Compartment comp = (Element.Compartment)model.selectedElement;
        String param = "";
        if(paramList.getSelectedIndex() == 0) param = "S" + comp.number;
        if(paramList.getSelectedIndex() == 1) param = "F" + comp.number;
        if(paramList.getSelectedIndex() == 2) param = "R" + comp.number;
        if(paramList.getSelectedIndex() == 3) param = "D" + comp.number;
        if(paramList.getSelectedIndex() == 4) param = "ALAG" + comp.number;
        String[] model = new String[2];
        model[0] = paramModelTextField.getText();
        model[1] = Model.equations;
        new MixedModelDialog(null, model, param, tool.object.getDataLabels());
        paramModelTextField.setText(model[0]);
        Model.equations = model[1];
    }//GEN-LAST:event_paramMixedRadioButtonActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        paramDialog.setVisible(false);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        Element.Compartment comp = (Element.Compartment)model.selectedElement;
        String param = "";
        int n = comp.number;
        int i = paramList.getSelectedIndex();
        updateVariableList(paramVariableTextField.getText());
        String value;
        if(paramFixedRadioButton.isSelected()) 
            value = paramValueTextField.getText();
        else if(paramMixedRadioButton.isSelected())
            value = paramModelTextField.getText();          
        else if(paramRedefinedRadioButton.isSelected())
            value = paramEqTextArea.getText();
        else
        {
            JOptionPane.showMessageDialog(null, "Parameter option was not selected.",
                                          "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(i == 0)
        {
            param = "S" + n;
            paramListModel.setElementAt("Scaling: " + param + "=" + value, i);
        }
        if(i == 1)
        {
            param = "F" + n;
            paramListModel.setElementAt("Bioavailability: " + param + "=" + value, i);
        }
        if(i == 2)
        {
            param = "R" + n;
            paramListModel.setElementAt("Infusion Rate: " + param + "=" + value, i);
        }
        if(i == 3)
        {
            param = "D" + n;
            paramListModel.setElementAt("Infusion Duration: " + param + "=" + value, i);
        }
        if(i == 4)
        {
            param = "ALAG" + n;
            paramListModel.setElementAt("Absorption Lag: " + param + "=" + value, i);
        }
        comp.parameters.setProperty(param, value);        
        tool.variableDialog.setVariableList();
        tool.setRecords();
        paramDialog.setVisible(false);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void paramListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paramListMouseClicked
        Element.Compartment comp = (Element.Compartment)model.selectedElement;
        paramMixedRadioButton.setEnabled(!tool.iterator.getIsInd() && !tool.iterator.getIsTwoStage() &&
                                         !tool.iterator.isNonparam);
        String param = "";
        if(paramList.getSelectedIndex() == 0) param = "S" + comp.number;
        if(paramList.getSelectedIndex() == 1) param = "F" + comp.number;
        if(paramList.getSelectedIndex() == 2) param = "R" + comp.number;
        if(paramList.getSelectedIndex() == 3) param = "D" + comp.number;
        if(paramList.getSelectedIndex() == 4) param = "ALAG" + comp.number;
        paramNameLabel.setText("Name: " + param);
        paramNameLabel1.setText(param + "=");
        paramNameLabel2.setText(param + "=");
        paramValueTextField.setText("");
        paramModelTextField.setText("");
        paramEqTextArea.setText("");
        if(comp.parameters.containsKey(param))
        {
            String value = comp.parameters.getProperty(param);
            int type = getModelType(value);
            if(type == 1)
            {
                paramFixedRadioButton.doClick();
                paramValueTextField.setText(value);
            }
            if(type == 2)
            {
                paramMixedRadioButton.setSelected(true);
                paramModelTextField.setText(value);
            }
            if(type == 3)
            {
                paramRedefinedRadioButton.doClick();
                paramEqTextArea.setText(value);
            }
        }
        Enumeration keys = Model.variables.keys();
        String variables = "";
        while(keys.hasMoreElements())
            variables += (String)keys.nextElement() + " ";
        paramVariableTextField.setText(variables.trim());
        paramDialog.setSize(350, 350);
        paramDialog.setVisible(true);
    }//GEN-LAST:event_paramListMouseClicked

    private void associateDataRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_associateDataRadioButtonActionPerformed
        forceEqTextArea.setEnabled(false);
        dataNameComboBox.setEnabled(true);
    }//GEN-LAST:event_associateDataRadioButtonActionPerformed

    private void fluxOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxOKButtonActionPerformed
        Element.Flux flux = (Element.Flux)model.selectedElement;
        updateVariableList(fluxVariableTextField.getText());
        if(fluxRedefinedRadioButton.isSelected())
            flux.flowRate = fluxEqTextArea.getText();
        else if(fluxModelRadioButton.isSelected())
            flux.flowRate = fluxModelTextField.getText();
        else
            flux.flowRate = fluxValueTextField.getText();
        tool.variableDialog.setVariableList();
        tool.setRecords();
        fluxDialog.setVisible(false);
    }//GEN-LAST:event_fluxOKButtonActionPerformed

    private void fluxCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxCancelButtonActionPerformed
        fluxDialog.setVisible(false);
    }//GEN-LAST:event_fluxCancelButtonActionPerformed

    private void ffCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffCancelButtonActionPerformed
        forceDialog.setVisible(false);
    }//GEN-LAST:event_ffCancelButtonActionPerformed

    private void ffOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffOKButtonActionPerformed
        isForcingFunctionOK = true;
        forceDialog.setVisible(false);
    }//GEN-LAST:event_ffOKButtonActionPerformed

    private void compCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compCancelButtonActionPerformed
        compDialog.setVisible(false);
    }//GEN-LAST:event_compCancelButtonActionPerformed

    private void forceEqRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceEqRadioButtonActionPerformed
        forceEqTextArea.setEnabled(true);
        dataNameComboBox.setEnabled(false);
    }//GEN-LAST:event_forceEqRadioButtonActionPerformed

    private void turnOffRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOffRadioButtonActionPerformed
        forceEqTextArea.setText("");
        forceEqTextArea.setEnabled(false);
        dataNameComboBox.setEnabled(false);
    }//GEN-LAST:event_turnOffRadioButtonActionPerformed

    private void forceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceButtonActionPerformed
        String[] dataLabels = tool.object.getDataLabels();
        Element.Compartment comp = (Element.Compartment)model.selectedElement;
        for(int i = 0; i < dataLabels.length; i++)
            if(!Utility.isStdItem(dataLabels[i]) && !dataLabels[i].equals("ID"))
                dataNameComboBox.addItem(dataLabels[i]);
        compLabel.setText("Name:  " + comp.name);
        forceNameLabel.setText("FF" + comp.number + "=");
        forceEqTextArea.setText(comp.force);
        forceEqRadioButton.setSelected(true);
        isForcingFunctionOK = false;
        forceDialog.setSize(310, 255);
        forceDialog.setVisible(true);
    }//GEN-LAST:event_forceButtonActionPerformed

    private void compOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compOKButtonActionPerformed
        Element.Compartment comp = (Element.Compartment)model.selectedElement;
        comp.name = compNameTextField.getText();
        comp.attributes.clear();
        if(jCheckBox1.isSelected()) comp.attributes.add(jCheckBox1.getText());
        if(jCheckBox2.isSelected()) comp.attributes.add(jCheckBox2.getText());
        if(jCheckBox3.isSelected()) comp.attributes.add(jCheckBox3.getText());
        if(jCheckBox4.isSelected()) comp.attributes.add(jCheckBox4.getText());
        if(jCheckBox5.isSelected()) comp.attributes.add(jCheckBox5.getText());
        if(isForcingFunctionOK)
        {
            if(turnOffRadioButton.isSelected())
                comp.force = null;
            else if(associateDataRadioButton.isSelected())
                comp.force = (String)dataNameComboBox.getSelectedItem();
            else if(forceEqRadioButton.isSelected())
                comp.force = forceEqTextArea.getText();
            else
            {
                JOptionPane.showMessageDialog(null, "Forcing function option was not selected.",
                                              "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        Model.equations = compEqTextArea.getText();
        tool.setRecords();
        compDialog.setVisible(false);
        repaint();
    }//GEN-LAST:event_compOKButtonActionPerformed

    private void attributeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeMenuItemActionPerformed
        if(model.selectedElement == null) return;
        if(model.selectedElement instanceof Element.Compartment)
        {
            Element.Compartment comp = (Element.Compartment)model.selectedElement;
            compNameTextField.setText(comp.name);
            jCheckBox1.setSelected(comp.attributes.indexOf("INITIALOFF") != -1);
            jCheckBox2.setSelected(comp.attributes.indexOf("NOOFF") != -1);
            jCheckBox3.setSelected(comp.attributes.indexOf("DEFDOSE") != -1);
            jCheckBox4.setSelected(comp.attributes.indexOf("DEFOBSERVATION") != -1);
            jCheckBox5.setSelected(comp.attributes.indexOf("NODOSE") != -1);
            jCheckBox3.setEnabled(false);
            jCheckBox4.setEnabled(false);
            for(int i = 0; i < tool.models.size(); i++)
            {
                Vector inputs = ((Model)tool.models.get(i)).inputs;               
                for(int j = 0; j < inputs.size(); j++)
                {
                    Vector compartments = ((Element.Input)inputs.get(j)).compartments;
                    if((Element.Compartment)compartments.get(0) == comp)
                    {
                        jCheckBox3.setEnabled(true);
                        break;
                    }
                }
                Vector samples = ((Model)tool.models.get(i)).samples;
                for(int j = 0; j < samples.size(); j++)
                {
                    Vector compartments = ((Element.Sample)samples.get(j)).compartments;
                    if((Element.Compartment)compartments.get(0) == comp)
                    {
                        jCheckBox4.setEnabled(true);
                        break;
                    }
                }
            }
            compEqTextArea.setText(Model.equations);
            final int n = comp.number;
            paramListModel.clear();
            if(comp.parameters.containsKey("S" + n))
                paramListModel.addElement("Scaling: S" + n + "=" + comp.parameters.getProperty("S" + n));
            else
                paramListModel.addElement("Scaling: S" + n);
            if(comp.parameters.containsKey("F" + n))
                paramListModel.addElement("Bioavailability: F" + n + "=" + comp.parameters.getProperty("F" + n));
            else
                paramListModel.addElement("Bioavailability: F" + n);
            if(comp.parameters.containsKey("R" + n))
                paramListModel.addElement("Infusion Rate: R" + n + "=" + comp.parameters.getProperty("R" + n));
            else
                paramListModel.addElement("Infusion Rate: R" + n);
            if(comp.parameters.containsKey("D" + n))
                paramListModel.addElement("Infusion Duration: D" + n + "=" + comp.parameters.getProperty("D" + n));
            else
                paramListModel.addElement("Infusion Duration: D" + n);
            if(comp.parameters.containsKey("ALAG" + n))
                paramListModel.addElement("Absorption Lag: ALAG" + n + "=" + comp.parameters.getProperty("ALAG" + n));
            else
                paramListModel.addElement("Absorption Lag: ALAG" + n);
            paramList.setModel(paramListModel);
            compDialog.setSize(332, 470);
            compDialog.setLocation(x + 200, y + 100);
            compDialog.setVisible(true);
        }
        if(model.selectedElement instanceof Element.Delay)
        {
            Element.Delay delay = (Element.Delay)model.selectedElement;
            delayMixedRadioButton.setEnabled(!tool.iterator.getIsInd() && !tool.iterator.getIsTwoStage() &&
                                             !tool.iterator.isNonparam);
            for(int i = 2; i <= 50; i++)
                nDelayCompsComboBox.addItem(String.valueOf(i));
            delayNameTextField.setText(delay.name);
            nDelayCompsComboBox.setSelectedIndex(delay.nDelayComps - 2);
            int type = getModelType(delay.delayTime);
            if(type == 1)
            {
                delayTimeTextField.setText(delay.delayTime);
                delayModelTextField.setText("");
                delayTimeRadioButton.setSelected(true);
            }
            else if(type == 2)
            {
                delayTimeTextField.setText("");
                delayModelTextField.setText(delay.delayTime);
                delayMixedRadioButton.setSelected(true);
            }
            else {}
            fractionList.setModel(fractListModel);
            fractListModel.clear();
            for(int i = 0; i < delay.fractions.size(); i++)
            {
                int number = ((Element.Compartment)delay.compartments.get(i)).number;
                fractListModel.addElement("Compartment " + number + ": " + (String)delay.fractions.get(i));
            }
            delayDialog.setSize(356, 390);
            delayDialog.setLocation(x + 200, y + 100);
            delayDialog.setVisible(true);
        }
        if(model.selectedElement instanceof Element.Flux)
        {
            Element.Flux flux = (Element.Flux)model.selectedElement;
            if(!tool.iterator.getIsInd() && !tool.iterator.getIsTwoStage() && !tool.iterator.isNonparam)
                fluxModelRadioButton.setText("Use mixed effect model (e.g. THETA(1)+ETA(1))");
            else
                fluxModelRadioButton.setText("Use model: (THETA must be included)");
            fluxNameLabel.setText("Name:  " + flux.name);           
            int type = getModelType(flux.flowRate);
            if(type == 1)
            {
                fluxValueTextField.setText(flux.flowRate);
                fluxModelTextField.setText("");
                fluxEqTextArea.setText("");
                fluxFixedRadioButton.setSelected(true);
            }
            if(type == 2)
            {
                fluxValueTextField.setText("");
                fluxModelTextField.setText(flux.flowRate);
                fluxEqTextArea.setText("");
                fluxModelRadioButton.setSelected(true);
            }
            if(type == 3)
            {
                fluxValueTextField.setText("");
                fluxModelTextField.setText("");
                fluxEqTextArea.setText(flux.flowRate);
                fluxRedefinedRadioButton.setSelected(true);
            }
            String variables = "";
            Enumeration keys = Model.variables.keys();
            while(keys.hasMoreElements())
                variables += (String)keys.nextElement() + " ";
            fluxVariableTextField.setText(variables.trim());
            jLabel3.setText(model.selectedElement.name + "=");
            jLabel5.setText(model.selectedElement.name + "=");
            fluxDialog.setSize(360, 360);
            fluxDialog.setLocation(x + 200, y + 100);
            fluxDialog.setVisible(true);
        }
        if(model.selectedElement instanceof Element.Input)
        {
            if(model.selectedElement == null) return;
            String name = JOptionPane.showInputDialog(null, "Enter new name.", model.selectedElement.name);
            if(name != null && !name.trim().equals(""))
            {
                model.selectedElement.name = name;
                tool.saveModel();
                repaint();
            }
        }
        if(model.selectedElement instanceof Element.Sample)
        {
            Element.Sample sample = (Element.Sample)model.selectedElement;
            String[] model = new String[3];
            model[0] = sample.errorModel;
            model[1] = Model.errorEqns;
            model[2] = sample.name;
            ErrorModelDialog errorDialog = new ErrorModelDialog(null, model,!tool.iterator.getIsInd() && 
                                           !tool.iterator.getIsTwoStage() && !tool.iterator.isNonparam);
            sample.errorModel = model[0];
            Model.errorEqns = model[1];
            sample.name = model[2];
            tool.saveModel();
            repaint();
        }
    }//GEN-LAST:event_attributeMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        if(model.selectedElement == null) return;
        model.remove(model.selectedElement);
        tool.saveModel();
        repaint();
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(tempElement != null && (evt.getModifiers() & evt.BUTTON1_MASK) != 0 && start != null)
        {            
            last = evt.getPoint();
            last.setLocation(last.getX() / tool.scale, last.getY() / tool.scale);           
            tempElement.xCenter += (last.getX() - start.getX());
            tempElement.yCenter += (last.getY() - start.getY());
            start = last;
            repaint();
        }        
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(!tool.pickedElement.equals("")) return;
        start = evt.getPoint();
        start.setLocation(start.getX() / tool.scale, start.getY() / tool.scale);        
        x = (int)start.getX();
        y = (int)start.getY();

        if(evt.isPopupTrigger() && model.selectedElement != null)
        {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
            if((model.selectedElement instanceof Element.Flux &&
               ((Element.Flux)model.selectedElement).element1 instanceof Element.Delay))
                attributeMenuItem.setEnabled(false);
            else
                attributeMenuItem.setEnabled(true);
        }
        if((evt.getModifiers() & evt.BUTTON1_MASK) != 0)
            gc2D.setXORMode(Color.white);
      
        for(int i = 0; i < Model.elements.size(); i++)
        {
            if(((Element)Model.elements.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)Model.elements.get(i);
                if(!evt.isPopupTrigger())
                    tempElement = (Element)model.selectedElement.clone();
                else
                    tempElement = null;
                return;
            }
        }
        for(int i = 0; i < Model.fluxes.size(); i++)
        {
            if(((Element)Model.fluxes.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)Model.fluxes.get(i);
                return;
            }
        }
        for(int i = 0; i < model.inputs.size(); i++)
        {
            if(((Element)model.inputs.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)model.inputs.get(i);
                if(!evt.isPopupTrigger())
                    tempElement = (Element)model.selectedElement.clone();
                else
                    tempElement = null;
                return;
            }
        }
        for(int i = 0; i < model.samples.size(); i++)
        {
            if(((Element)model.samples.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)model.samples.get(i);
                if(!evt.isPopupTrigger())
                    tempElement = (Element)model.selectedElement.clone();
                else
                    tempElement = null;
                return;
            }
        }
        model.selectedElement = null;
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if(tempElement != null && (evt.getModifiers() & evt.BUTTON1_MASK) != 0 && start != null && last != null)
        {
            last = null;
            gc2D.setPaintMode();
            isMouseDragged = false;
            model.selectedElement.xCenter = tempElement.xCenter;
            model.selectedElement.yCenter = tempElement.yCenter;
            tempElement = null;
            tool.saveModel();
            repaint();
        }
        if (evt.isPopupTrigger()) 
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        final int W = 50;
        final int H = 50;
        boolean changed = false;
        if (SwingUtilities.isRightMouseButton(evt)) 
        {

        } 
        else 
        {
            int x = evt.getX() - W/2;
            int y = evt.getY() - H/2;
            if (x < 0) x = 0;
            if (y < 0) y = 0;
            Rectangle rect = new Rectangle(x, y, W, H);
            scrollRectToVisible(rect);

            int this_width = (x + W + 2);
            if (this_width > area.width) {
                area.width = this_width; changed=true;
            }

            int this_height = (y + H + 2);
            if (this_height > area.height) {
                area.height = this_height; changed=true;
            }
        }
        if (changed) {
            //Update client's preferred size because
            //the area taken up by the graphics has
            //gotten larger or smaller (if cleared).
            setPreferredSize(area);

            //Let the scroll pane know to update itself
            //and its scrollbars.
            revalidate();
        }
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(!isDrawable)
        {
            tool.pickedElement = "";
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            repaint();
            return;
        }
        x = (int)(evt.getX() / tool.scale);
        y = (int)(evt.getY() / tool.scale);
        if(tool.pickedElement.equals("compartment"))
        {
            Element.Compartment compartment = new Element.Compartment(x, y, model);
            Model.elements.add(compartment);
            tool.pickedElement = "";
            tool.setRecords();
            repaint();
        }
        else if(tool.pickedElement.equals("delay"))
        {
            Element.Delay delay = new Element.Delay(x, y, model);
            Model.elements.add(delay);                
            tool.pickedElement = "";
            tool.setRecords();
            repaint();
        }
        else if(tool.pickedElement.equals("flux"))
        {     
            if(startElement == null)
            {
                startElement = getSelectedElement();
                if(startElement == null)
                {
                    tool.pickedElement = "";
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
                return;   
            }
/*
            if(startElement == null && !isBackgroundClicked)  // This code block is for the feature of
            {                                                 // constant input.  To resume it, replace  
                startElement = getSelectedElement();          // it with the above if block and recover
                if(startElement == null)                      // the class field isBackgroundClicked.
                    isBackgroundClicked = true;
                return;   
            }
            else if(startElement == null && isBackgroundClicked)
            {
                endElement = getSelectedElement();
                isBackgroundClicked = false;
                tool.pickedElement = "";
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                if(endElement != null)
                    addFlux();                                               
                return;   
            }
 **/
            else
            {
                endElement = getSelectedElement();
                if(startElement instanceof Element.Delay)
                {
                    if(endElement instanceof Element.Delay && startElement != endElement)
                    {
                        JOptionPane.showMessageDialog(null, "A flux from a Delay to another Delay is not allowed.",
                                                      "Input Error", JOptionPane.ERROR_MESSAGE);
                        startElement = null;
                        tool.pickedElement = "";
                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        return;
                    }
                    if(endElement == null)
                    {
                        addFlux();
                        startElement = null;
                        tool.pickedElement = "";
                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        return;
                    }
                }
                if(startElement instanceof Element.Compartment && startElement == endElement)
                {
                    startElement = null;
                    endElement = null;
                    tool.pickedElement = "";
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    return;                    
                }
            }
            if(startElement != null && endElement != startElement)
            {
                addFlux();
                startElement = null;
            }
            tool.pickedElement = "";
            tool.setRecords();
        }
        else if(tool.pickedElement.equals("input"))
        {
            Element element = getSelectedElement();
            if(element instanceof Element.Compartment)
            {
//                inputElement.add(element);         // This is the original code.
                if(inputElement.size() == 0)         // This is temporarily to limit each input to
                    inputElement.add(element);       // connect to only one compartment.
                else                                 // If one compartment has already been clicked
                {                                    // clean everyting up and then return.
                    tool.pickedElement = "";
                    inputElement = new Vector<Element>();
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
                return;
            }
            else
            {
                // Limit one input on each compartment
                if(inputElement.size() == 1)
                {
                    for(int i = 0; i < model.inputs.size(); i++)
                    {
                        Vector compartments = ((Element.Input)model.inputs.get(i)).compartments;
                        if(compartments.size() == 1 && compartments.get(0) == inputElement.get(0))
                        {
                            tool.pickedElement = "";
                            inputElement = new Vector<Element>();
                            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                            return;
                        }
                    }
                }
                if(inputElement.size() > 0)
                {
                    Element.Input input = new Element.Input(inputElement, x, y, model);
                    inputElement = new Vector<Element>();
                    model.inputs.add(input);
                    tool.saveModel();
                    repaint();
                }
            }
            tool.pickedElement = "";
        }
        else if(tool.pickedElement.equals("sample"))
        {
            Element element = getSelectedElement();
            if(element instanceof Element.Compartment)
            {
//                inputElement.add(element);         // This is the original code.
                if(inputElement.size() == 0)         // This is temporarily to limit each sample to
                    inputElement.add(element);       // connect to only one compartment.
                else                                 // If a compartment has already been clicked
                {                                    // clean everyting up and then return.
                    tool.pickedElement = "";
                    inputElement = new Vector<Element>();
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }                
                return;
            }
            else
            {
                // Limit one sample on each compartment
                if(inputElement.size() == 1)
                {
                    for(int i = 0; i < model.samples.size(); i++)
                    {
                        Vector compartments = ((Element.Sample)model.samples.get(i)).compartments;
                        if(compartments.size() == 1 && compartments.get(0) == inputElement.get(0))
                        {
                            tool.pickedElement = "";
                            inputElement = new Vector<Element>();
                            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                            return;
                        }
                    }
                }
                if(inputElement.size() > 0)
                {
                    Element.Sample sample = new Element.Sample(inputElement, x, y, model);
                    inputElement = new Vector<Element>();
                    model.samples.add(sample);
                    tool.saveModel();
                    repaint();
                }                              
            }
            tool.pickedElement = "";
            tool.setRecords();
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_formMouseClicked
    
    private Element getSelectedElement()
    {
        for(int i = 0; i < model.elements.size(); i++)
        {
            Element element = (Element)model.elements.get(i);
            if(element.contains(x, y))
                return element;
        }
        return null;
    }
    
    private void addFlux()
    {
        boolean isExist = false;
        for(int i = 0; i < model.fluxes.size(); i++)
        {
            Element.Flux flux = (Element.Flux)model.fluxes.get(i);
            if(flux.element1 == startElement && flux.element2 == endElement)
            {
                isExist = true;
                break;
            }
        }
        if(!isExist)
        {
            Element.Flux flux = new Element.Flux(startElement, endElement, model);
            Model.fluxes.add(flux);               
            startElement = null;
            endElement = null;
            repaint();
        }    
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton associateDataRadioButton;
    private javax.swing.JMenuItem attributeMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JButton compCancelButton;
    private javax.swing.JDialog compDialog;
    private javax.swing.JTextArea compEqTextArea;
    private javax.swing.JButton compHelpButton;
    private javax.swing.JLabel compLabel;
    private javax.swing.JLabel compNameLabel;
    private javax.swing.JTextField compNameTextField;
    private javax.swing.JButton compOKButton;
    private javax.swing.JComboBox dataNameComboBox;
    private javax.swing.JDialog delayDialog;
    private javax.swing.JRadioButton delayMixedRadioButton;
    private javax.swing.JTextField delayModelTextField;
    private javax.swing.JLabel delayNameLabel;
    private javax.swing.JTextField delayNameTextField;
    private javax.swing.JRadioButton delayTimeRadioButton;
    private javax.swing.JTextField delayTimeTextField;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JButton ffCancelButton;
    private javax.swing.JButton ffHelpButton;
    private javax.swing.JButton ffOKButton;
    private javax.swing.JButton fluxCancelButton;
    private javax.swing.JDialog fluxDialog;
    private javax.swing.JTextArea fluxEqTextArea;
    private javax.swing.JRadioButton fluxFixedRadioButton;
    private javax.swing.JButton fluxHelpButton;
    private javax.swing.JRadioButton fluxModelRadioButton;
    private javax.swing.JTextField fluxModelTextField;
    private javax.swing.JLabel fluxNameLabel;
    private javax.swing.JButton fluxOKButton;
    private javax.swing.JRadioButton fluxRedefinedRadioButton;
    private javax.swing.JTextField fluxValueTextField;
    private javax.swing.JTextField fluxVariableTextField;
    private javax.swing.JButton forceButton;
    private javax.swing.JDialog forceDialog;
    private javax.swing.JRadioButton forceEqRadioButton;
    private javax.swing.JTextArea forceEqTextArea;
    private javax.swing.JLabel forceNameLabel;
    private javax.swing.JList fractionList;
    private javax.swing.JDialog inputDialog;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JComboBox nDelayCompsComboBox;
    private javax.swing.JDialog paramDialog;
    private javax.swing.JTextArea paramEqTextArea;
    private javax.swing.JRadioButton paramFixedRadioButton;
    private javax.swing.JList paramList;
    private javax.swing.JRadioButton paramMixedRadioButton;
    private javax.swing.JTextField paramModelTextField;
    private javax.swing.JLabel paramNameLabel;
    private javax.swing.JLabel paramNameLabel1;
    private javax.swing.JLabel paramNameLabel2;
    private javax.swing.JRadioButton paramRedefinedRadioButton;
    private javax.swing.JTextField paramValueTextField;
    private javax.swing.JTextField paramVariableTextField;
    private javax.swing.JRadioButton turnOffRadioButton;
    // End of variables declaration//GEN-END:variables
    /** Paint the diagram.
     * @param gc Graphics.
     */    
    public void paintComponent(Graphics gc) 
    {
        super.paintComponent(gc);
        gc2D = ((Graphics2D)gc);
        if(!isDrawable)
            return;
        gc2D.setBackground(Color.white);
        gc2D.setFont(new Font("SansSerif", Font.BOLD, 10));
        gc2D.setStroke(new BasicStroke(2.0f));
        gc2D.setPaintMode();
        gc2D.scale(tool.scale, tool.scale);
        model.draw(gc2D, 0, 0);
        if(tempElement != null) tempElement.drawBoundary(gc2D);
    }
   
    private int getModelType(String text)
    {
        if(text.length() == 0) return 1;
        int type = 1;
        if(!Utility.isFloatNumber(text))
            if(text.indexOf("THETA(") != -1)
                type = 2;
            else type = 3;    
        return type;
    }
 
    private void updateVariableList(String newList)
    {
        Enumeration keys = Model.variables.keys();
        while(keys.hasMoreElements())
        {
            String key = (String)keys.nextElement();
            newList = " " + newList.trim() + " ";
            if(newList.indexOf(" " + key + " ") == -1)
                Model.variables.remove(key);                
        }
        String[] variables = newList.trim().split(" ");
        for(int i = 0; i < variables.length; i++)
            if(!variables[i].equals("") && !Model.variables.containsKey(variables[i]))
                Model.variables.setProperty(variables[i], "");
    }
       
    private DesignTool tool;
    private Graphics2D gc2D;
    private Point2D start, last;
    private int x,y;
    private Dimension area;
    /** Model in the diagram */ 
    protected Model model;
    /** Starting element */
    protected Element startElement = null;
    /** Ending element */
    protected Element endElement = null;
    /** Temporary element */
    protected Element tempElement;
    private boolean isMouseDragged = false;
//    private boolean isBackgroundClicked = false;
    private boolean isForcingFunctionOK = false;
    private Vector<Element> inputElement = new Vector<Element>();
    private DefaultListModel fractListModel = new DefaultListModel();
    private DefaultListModel paramListModel = new DefaultListModel();
    /** Is drawablw */
    protected boolean isDrawable = true;
}
