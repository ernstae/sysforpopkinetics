/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.compartment;

import java.awt.Dimension;
import java.util.regex.*;
import javax.swing.JOptionPane;
import javax.help.*;
import uw.rfpk.mda.nonmem.MDAFrame;

/** This class defines error model dialog.
 *
 * @author  Jiaji Du
 */
public class ErrorModelDialog extends javax.swing.JDialog {
    
    /** Creates new form ErrorModelDialog.
     * @param parent parent of this dialog.
     * @param modelExpression a String array containing model expression, equations and name.
     * @param isPopulation true for population analysis, false for otherwise.
     */
    public ErrorModelDialog(java.awt.Frame parent, String[] modelExpression, boolean isPopulation)
    {
        super(parent, true);
        this.modelExpression = modelExpression;
        this.isPopulation = isPopulation;
        initComponents();
        helpButton.addActionListener(new CSH.DisplayHelpFromSource(MDAFrame.helpBroker));
        CSH.setHelpIDString(helpButton, "Prepare_Input_Residual_Unknown_Variability_Model");
        if(!isPopulation)
            jTextArea1.setText("Select a residual unknown variability (RUV) model:\n  - F denotes the model function vector\n  - DV denotes the observed data vector\n  - Y, a random variable, represents the predcted observation\n  - Model must contain RUV parameter ETA\n  - Enter appropriate number in () following ETA (e.g. ETA(1))");
        if(isPopulation)
        {
          jLabel5.setText("F + EPS");
          jLabel8.setText("F + F * EPS");
          jLabel11.setText("F + DV * EPS");
          jLabel9.setText("F + F * EPS + EPS");
        }
        else
        {
          jLabel5.setText("F + ETA");
          jLabel8.setText("F + F * ETA");
          jLabel11.setText("F + DV * ETA");
          jLabel9.setText("F + F * ETA + ETA");            
        }
        nameTextField.setText(modelExpression[2]);
        userDefinedTextField.setText(modelExpression[0]);
        eqnTextArea.setText(modelExpression[1]);
        userDefinedRadioButton.setSelected(true);
        Dimension wndSize = getToolkit().getScreenSize();
        setLocation(wndSize.width/2, wndSize.height/3);
        setSize(410, 550);
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        nameLabel = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        additiveRadioButton = new javax.swing.JRadioButton();
        proportionalRadioButton = new javax.swing.JRadioButton();
        exponentialRadioButton = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        userDefinedRadioButton = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        userDefinedTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eqnTextArea = new javax.swing.JTextArea();
        nameTextField = new javax.swing.JTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Residual Unknown Variability Model");
        setLocationRelativeTo(this);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        nameLabel.setText("Observation Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        getContentPane().add(nameLabel, gridBagConstraints);

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setText("Select a residual unknown variability (RUV) model:\n  - F denotes the model function vector\n  - DV denotes the observed data vector\n  - Y, a random variable, represents the predcted observation\n  - Model must contain RUV parameter EPS\n  - Enter appropriate number in () following EPS (e.g. EPS(1))");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 8, 12);
        getContentPane().add(jTextArea1, gridBagConstraints);

        jLabel2.setText("Model Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        additiveRadioButton.setText("Additive");
        buttonGroup1.add(additiveRadioButton);
        additiveRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additiveRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        getContentPane().add(additiveRadioButton, gridBagConstraints);

        proportionalRadioButton.setText("Model-based Proportional");
        buttonGroup1.add(proportionalRadioButton);
        proportionalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proportionalRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 6);
        getContentPane().add(proportionalRadioButton, gridBagConstraints);

        exponentialRadioButton.setText("Data-Based Proportional");
        buttonGroup1.add(exponentialRadioButton);
        exponentialRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exponentialRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        getContentPane().add(exponentialRadioButton, gridBagConstraints);

        jLabel3.setText("Expression");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("Weight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel5.setText("F + EPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel5, gridBagConstraints);

        userDefinedRadioButton.setText("User Defined");
        buttonGroup1.add(userDefinedRadioButton);
        userDefinedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userDefinedRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 4, 0);
        getContentPane().add(userDefinedRadioButton, gridBagConstraints);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/compartment/fixed.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 12);
        getContentPane().add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel8.setText("F + F * EPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel8, gridBagConstraints);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/compartment/prop.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 12);
        getContentPane().add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel11.setText("F + DV * EPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel11, gridBagConstraints);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/compartment/prop.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 12);
        getContentPane().add(jLabel13, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel14.setText("Note: EPS is a zero-mean Normal random variable.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 12, 4, 12);
        getContentPane().add(jLabel14, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        getContentPane().add(userDefinedTextField, gridBagConstraints);

        jButton1.setText("OK");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2);

        helpButton.setText("Help");
        helpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel1.add(helpButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel9.setText("F + F * EPS + EPS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(jLabel9, gridBagConstraints);

        jRadioButton1.setText("Model-based Mixed");
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        getContentPane().add(jRadioButton1, gridBagConstraints);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/compartment/mixed.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 12);
        getContentPane().add(jLabel12, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Enter additional equations used to define the RUV model");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 2, 12);
        getContentPane().add(jLabel1, gridBagConstraints);

        jScrollPane1.setViewportView(eqnTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 60;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(nameTextField, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        if(isPopulation) userDefinedTextField.setText("Y=F+F*EPS()+EPS()");
        else userDefinedTextField.setText("Y=F+F*ETA()+ETA()");
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String text = userDefinedTextField.getText();
        String eqns = eqnTextArea.getText();
        String name = nameTextField.getText();
        if(isPopulation)
        {
            if(!Pattern.compile("\\bEPS\\b", Pattern.UNIX_LINES).matcher(text).find())
            {
                JOptionPane.showMessageDialog(null, "EPS is missing in the RUV model.",
                                              "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else
            {
                if(!Pattern.compile("\\bEPS\\(\\d+\\)", Pattern.UNIX_LINES).matcher(text).find())
                {
                    JOptionPane.showMessageDialog(null, "EPS Number is missing.",
                                                  "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }
        else
        {
            if(!Pattern.compile("\\bETA\\b", Pattern.UNIX_LINES).matcher(text).find())
            {
                JOptionPane.showMessageDialog(null, "ETA is missing in the RUV model.",
                                              "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else
            {
                if(!Pattern.compile("\\bETA\\(\\d+\\)", Pattern.UNIX_LINES).matcher(text).find())
                {
                    JOptionPane.showMessageDialog(null, "EPA Number is missing.",
                                                  "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }            
        }
        if(Pattern.compile("\\bTHETA\\b", Pattern.UNIX_LINES).matcher(eqns).find())
        {
            JOptionPane.showMessageDialog(null, "THETA cannot be in any equation.",
                                          "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(name.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "Name is missing.",
                                          "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        modelExpression[0] = text;
        modelExpression[1] = eqns;
        modelExpression[2] = name;
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void userDefinedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userDefinedRadioButtonActionPerformed
        userDefinedTextField.setText("");
    }//GEN-LAST:event_userDefinedRadioButtonActionPerformed

    private void exponentialRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exponentialRadioButtonActionPerformed
        if(isPopulation) userDefinedTextField.setText("Y=F+DV*EPS()");
        else userDefinedTextField.setText("Y=F+DV*ETA()");
    }//GEN-LAST:event_exponentialRadioButtonActionPerformed

    private void proportionalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proportionalRadioButtonActionPerformed
        if(isPopulation) userDefinedTextField.setText("Y=F+F*EPS()");
        else userDefinedTextField.setText("Y=F+F*ETA()");
    }//GEN-LAST:event_proportionalRadioButtonActionPerformed

    private void additiveRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_additiveRadioButtonActionPerformed
        if(isPopulation) userDefinedTextField.setText("Y=F+EPS()");
        else userDefinedTextField.setText("Y=F+ETA()");
    }//GEN-LAST:event_additiveRadioButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /** The main function to test the dialog.
     * @param args the command line arguments which are not being used.
     */
    public static void main(String args[]) {
        String[] model = {"expression", "equations", "name"};
        String[] dataLabels = {"ID", "TIME", "DV", "AMT"};
        new ErrorModelDialog(new DesignTool(), model, false);
        System.out.println(model[0]);
        System.out.println(model[1]);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton additiveRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea eqnTextArea;
    private javax.swing.JRadioButton exponentialRadioButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JRadioButton proportionalRadioButton;
    private javax.swing.JRadioButton userDefinedRadioButton;
    private javax.swing.JTextField userDefinedTextField;
    // End of variables declaration//GEN-END:variables
    
    private String[] modelExpression;
    private boolean isPopulation;
}
