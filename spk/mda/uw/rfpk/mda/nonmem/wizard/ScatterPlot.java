/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.wizard;

import uw.rfpk.mda.nonmem.Utility;
import org.netbeans.ui.wizard.*;
import java.util.Vector;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * This class defines a step to create the $SCATTERPLOT record.
 * @author  Jiaji Du
 */
public class ScatterPlot extends javax.swing.JPanel implements WizardStep { 
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this; 
    private MDAIterator iterator = null;
    private DefaultListModel model = null; 
    private JWizardPane wizardPane = null;
    private boolean isValid = false;
    private String scatterPlot = "";
    private int list = 0;
    private int index = -1;
    private long nDataRow = 0;
    private DefaultListModel[] listModels = null;
    private javax.swing.JList[] lists = null;
    private String xLine = " NOABS0";
    private String yLine = " NOORD0";
    private String slopeLine = "";
    private String which = "ESTIMATION";
    private Vector dimList = new Vector();
    private static int nPlotEst = 0;
    private static int nPlotSim = 0;
    private static final int maxNPlot = 20;  
    private int nPlotAllowed = 20;

    /** Creates new form ScatterPlot.
     * @param iter A MDAIterator object to initialize the field iterator.
     */
    public ScatterPlot(MDAIterator iter) { 
        initComponents();
        iterator = iter;
        nPlotEst = 0;
        nPlotSim = 0;
    }
    
    /** Set which output, table or scatterplot, is required.
     * @param s a String object to initialize field which.
     */    
    public void setWhich(String s) { which = s; }
 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jButton2 = new javax.swing.JButton();
        jTextPane3 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        centerList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        leftList = new javax.swing.JList();
        jTextPane4 = new javax.swing.JTextPane();
        jTextPane5 = new javax.swing.JTextPane();
        jComboBox1 = new javax.swing.JComboBox();
        addItemButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();
        changeItemButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jTextPane6 = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        rightList = new javax.swing.JList();
        jSeparator4 = new javax.swing.JSeparator();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        changeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Item Lists");
        jDialog1.setBackground(java.awt.Color.white);
        jDialog1.setLocationRelativeTo(jButton1);
        jDialog1.setModal(true);
        jDialog1.setResizable(false);
        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 39, 12, 4);
        jDialog1.getContentPane().add(jButton2, gridBagConstraints);

        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setEditable(false);
        jTextPane3.setText("Select items from the comboBox and add them to the lists.  The buttons are shared.  You need to select a current list to work on.");
        jTextPane3.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 6, 12);
        jDialog1.getContentPane().add(jTextPane3, gridBagConstraints);

        centerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(centerList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        jDialog1.getContentPane().add(jScrollPane2, gridBagConstraints);

        leftList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(leftList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jScrollPane3, gridBagConstraints);

        jTextPane4.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane4.setText("List 1: ordinate Y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 12, 12);
        jDialog1.getContentPane().add(jTextPane4, gridBagConstraints);

        jTextPane5.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane5.setText("List 2: abscissa X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 12, 12);
        jDialog1.getContentPane().add(jTextPane5, gridBagConstraints);

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 13, 12);
        jDialog1.getContentPane().add(jComboBox1, gridBagConstraints);

        addItemButton.setText("Add");
        addItemButton.setPreferredSize(new java.awt.Dimension(81, 25));
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(14, 14, 14, 2);
        jDialog1.getContentPane().add(addItemButton, gridBagConstraints);

        deleteItemButton.setText("Delete");
        deleteItemButton.setEnabled(false);
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 14, 12);
        jDialog1.getContentPane().add(deleteItemButton, gridBagConstraints);

        changeItemButton.setText("Change");
        changeItemButton.setEnabled(false);
        changeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 14, 1);
        jDialog1.getContentPane().add(changeItemButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jSeparator3, gridBagConstraints);

        jRadioButton3.setSelected(true);
        jRadioButton3.setText("List 1");
        buttonGroup1.add(jRadioButton3);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 23, 0, 0);
        jDialog1.getContentPane().add(jRadioButton3, gridBagConstraints);

        jRadioButton4.setText("List 2");
        buttonGroup1.add(jRadioButton4);
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jDialog1.getContentPane().add(jRadioButton4, gridBagConstraints);

        jRadioButton5.setText("List 3");
        buttonGroup1.add(jRadioButton5);
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jDialog1.getContentPane().add(jRadioButton5, gridBagConstraints);

        jLabel4.setText("Select current  list");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 16, 2, 0);
        jDialog1.getContentPane().add(jLabel4, gridBagConstraints);

        jTextPane6.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane6.setText("List 3: splitted by");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 12, 12);
        jDialog1.getContentPane().add(jTextPane6, gridBagConstraints);

        jScrollPane4.setViewportView(rightList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jScrollPane4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 9, 12);
        jDialog1.getContentPane().add(jSeparator4, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField1.setText("1");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 11, 10);
        add(jTextField1, gridBagConstraints);

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 16, 7, 16);
        add(addButton, gridBagConstraints);

        upButton.setText("Up");
        upButton.setEnabled(false);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(16, 16, 7, 16);
        add(upButton, gridBagConstraints);

        downButton.setText("Down");
        downButton.setEnabled(false);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 56, 16);
        add(downButton, gridBagConstraints);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Enter the range of the data for plotting.  The default starting number is 1.  \nUp to 900 data points may be plotted.  Lines along X = 0, Y = 0 or X = Y\nmay be added to the plot.  Select items for X, Y and parameters to plot.");
        jTextPane1.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 12);
        add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setText("List of the  \nplotting \noptions\nyou have \nselected in \nNONMEM syntax");
        jTextPane2.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 17, 6);
        add(jTextPane2, gridBagConstraints);

        changeButton.setText("Change");
        changeButton.setEnabled(false);
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 6, 16);
        add(changeButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 16);
        add(deleteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        add(jSeparator2, gridBagConstraints);

        model = new DefaultListModel();
        jList1 = new javax.swing.JList(model);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFixedCellHeight(15);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 88;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 12, 16);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Plot Data From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 18, 12, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 19, 11, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Select Data Items For Plotting.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(9, 18, 21, 12);
        add(jLabel3, gridBagConstraints);

        jButton1.setText("Make Selection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 17, 16);
        add(jButton1, gridBagConstraints);

        jTextField2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 11, 16);
        add(jTextField2, gridBagConstraints);

        jCheckBox1.setText("X = 0 Line");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 7, 12);
        add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("Y = 0 Line");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 6, 7, 0);
        add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText("X = Y Line");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 13, 7, 16);
        add(jCheckBox3, gridBagConstraints);

    }//GEN-END:initComponents

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // Check FROM
        String from = jTextField1.getText().trim();
        if(Utility.isPosIntNumber(from))
        {
            long max = Long.parseLong(from) + 899;
            if(max > nDataRow)
                max = nDataRow;
            jTextField2.setText(String.valueOf(max)); 
        }
        else
        {
            JOptionPane.showMessageDialog(null, 
                                          "The beginning data record number is not a " +
                                          "positive integer number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
        }
    }//GEN-LAST:event_jTextField1FocusLost

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        index = jList1.getSelectedIndex();
        
        // Reload selected value
        String element = (String)jList1.getSelectedValue() + " ";        
        jCheckBox1.setSelected(element.indexOf(" NOABS0") == -1);
        jCheckBox2.setSelected(element.indexOf(" NOORD0") == -1);        
        jCheckBox3.setSelected(element.indexOf(" UNIT") != -1);        
        int beginIndex = element.indexOf(" TO ") + 4;
        int endIndex = element.indexOf(" ", beginIndex);
        jTextField2.setText(element.substring(beginIndex, endIndex));
        beginIndex = element.indexOf(" FROM ") + 6;
        endIndex = element.indexOf(" ", beginIndex);
        jTextField1.setText(element.substring(beginIndex, endIndex));
        
        // Find list1,list2 and list3
        String lists = element.substring(13, beginIndex - 6);
        String[] list1 = null;
        String[] list2 = null;
        String[] list3 = null;
        for(int i = 0; i < 3; i++)
            listModels[i].removeAllElements();
        Vector items = new Vector();
        for(int i = 0; i < jComboBox1.getItemCount(); i++)
            items.addElement(jComboBox1.getItemAt(i));
        int indVs = lists.indexOf(" VS ");        
        int indBy = lists.indexOf(" BY ");
        list1 = lists.substring(0, indVs).split(" ");
        for(int i = 0; i < list1.length; i++)
        {
            if(items.indexOf(list1[i]) != -1)
                listModels[0].addElement(list1[i]);
            else
                JOptionPane.showMessageDialog(null, "Item '" + list1[i] + "' has been removed " +
                                              "because it is not available in the current setting.",
                                              "Warning Message", JOptionPane.WARNING_MESSAGE);
        }        
        if(indBy != -1)
        {
            list2 = lists.substring(indVs + 4, indBy).split(" ");
            for(int i = 0; i < list2.length; i++)
            {
                if(items.indexOf(list2[i]) != -1)
                    listModels[1].addElement(list2[i]);
                else
                    JOptionPane.showMessageDialog(null, "Item '" + list1[i] + "' has been removed " +
                                                  "because it is not available in the current setting.",
                                                  "Warning Message", JOptionPane.WARNING_MESSAGE);
            }            
            list3 = lists.substring(indBy + 4).split(" ");
            for(int i = 0; i < list3.length; i++)
            {
                if(items.indexOf(list3[i]) != -1)
                    listModels[2].addElement(list3[i]);
                else
                    JOptionPane.showMessageDialog(null, "Item '" + list1[i] + "' has been removed " +
                                                  "because it is not available in the current setting.",
                                                  "Warning Message", JOptionPane.WARNING_MESSAGE);
            }            
        }        
        else
        {
            list2 = lists.substring(indVs + 4).split(" ");
            for(int i = 0; i < list2.length; i++)
            {
                if(items.indexOf(list2[i]) != -1)
                    listModels[1].addElement(list2[i]);
                else
                    JOptionPane.showMessageDialog(null, "Item '" + list1[i] + "' has been removed " +
                                                  "because it is not available in the current setting.",
                                                  "Warning Message", JOptionPane.WARNING_MESSAGE);
            }            
        }
        
        changeItemButton.setEnabled(true);
        deleteItemButton.setEnabled(true);        
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);        
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_jList1MouseClicked

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if(jCheckBox3.isSelected())
            slopeLine = " UNIT";
        else
            slopeLine = "";
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if(jCheckBox2.isSelected())
            yLine = "";
        else
            yLine = " NOORD0";
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
            xLine = "";
        else
            xLine = " NOABS0";
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        list = 2;
        int size = listModels[2].getSize();
        changeItemButton.setEnabled(size != 0);
        deleteItemButton.setEnabled(size != 0);
        addItemButton.setEnabled(size < 2); 
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        list = 1;
        int size = listModels[1].getSize();
        changeItemButton.setEnabled(size != 0);
        deleteItemButton.setEnabled(size != 0);
        addItemButton.setEnabled((size + 1)* listModels[0].getSize() <= nPlotAllowed); 
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        list = 0;
        int size = listModels[0].getSize();
        changeItemButton.setEnabled(size != 0);
        deleteItemButton.setEnabled(size != 0);
        addItemButton.setEnabled((size + 1)* listModels[1].getSize() <= nPlotAllowed); 
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void changeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeItemButtonActionPerformed
        int index = lists[list].getSelectedIndex();
        if(index < 0 || listModels[list].indexOf(jComboBox1.getSelectedItem()) != -1) return;
        listModels[list].removeElement(lists[list].getSelectedValue());
        listModels[list].add(index, jComboBox1.getSelectedItem());      
        lists[list].setSelectedIndex(index);
    }//GEN-LAST:event_changeItemButtonActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        int index = lists[list].getSelectedIndex();
        listModels[list].removeElement(lists[list].getSelectedValue());
        lists[list].setSelectedIndex(index - 1);
        addItemButton.setEnabled(true);
        if(listModels[list].getSize() == 0)
        {
            changeItemButton.setEnabled(false);
            deleteItemButton.setEnabled(false);
            if(list != 2) jButton2.setEnabled(false);
        }
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        int index = lists[list].getSelectedIndex() + 1;
        if(listModels[list].indexOf(jComboBox1.getSelectedItem()) != -1)
            return;

        listModels[list].add(index, jComboBox1.getSelectedItem());     
        lists[list].setSelectedIndex(index);  
        if((list == 2 && listModels[2].getSize() == 2) || (list != 2 && 
           ((listModels[0].getSize() + 1) * listModels[1].getSize() > nPlotAllowed ||
            (listModels[1].getSize() + 1) * listModels[0].getSize() > nPlotAllowed))) 
            addItemButton.setEnabled(false);  
        deleteItemButton.setEnabled(true);
        changeItemButton.setEnabled(true);
        if(listModels[0].getSize() > 0 && listModels[1].getSize() > 0)
            jButton2.setEnabled(true);
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Create a scatterplot 
        scatterPlot = ""; 
        for(int i = 0; i < listModels[0].getSize(); i++)
            scatterPlot = scatterPlot + " " + (String)listModels[0].get(i);
        scatterPlot = scatterPlot + " VS";
        for(int i = 0; i < listModels[1].getSize(); i++)
            scatterPlot = scatterPlot + " " + (String)listModels[1].get(i);             
        if(listModels[2].getSize() > 0) scatterPlot = scatterPlot + " BY";
        for(int i = 0; i < listModels[2].getSize(); i++)
            scatterPlot = scatterPlot + " " + (String)listModels[2].get(i);             
        addButton.setEnabled(true);
        jDialog1.setVisible(false);
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for(int i = 0; i < 3; i++)
            lists[i].setSelectedIndex(listModels[i].size() - 1);
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setSize(440,370);            
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Remove the scatterplot recored
        model.removeElement(jList1.getSelectedValue());
        dimList.removeElementAt(index);
        jList1.setSelectedIndex(--index);
        
        // Set buttons
        if(model.getSize() == 0)
        {
            isValid = false;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        }
        addButton.setEnabled(true);
        if(model.getSize() == 0)
        {
            changeButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // Remove the scatterplot record
        model.removeElement(jList1.getSelectedValue());
        dimList.removeElementAt(index);

        // Check number of scatterplot against maximum limit
        int nFamily = listModels[0].getSize() * listModels[1].getSize();
        int dimSum = nFamily;
        for(int i = 0; i < dimList.size(); i++)
            dimSum = dimSum + ((Integer)dimList.get(i)).intValue();  
        if(dimSum > nPlotAllowed) 
        {
            JOptionPane.showMessageDialog(null, 
                                          "Too many families of scatterplots > "
                                          + nPlotAllowed + ".",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Add the scaterplot record
        String element = "$SCATTERPLOT" + scatterPlot +                         
                         " FROM " + jTextField1.getText().trim() + 
                         " TO " + jTextField2.getText().trim() +
                         slopeLine + xLine + yLine;
        model.add(index, element);     
        jList1.setSelectedIndex(index);
        
        // Set button
        if(dimSum == nPlotAllowed)
            addButton.setEnabled(false);       
    }//GEN-LAST:event_changeButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        jList1.setSelectedIndex(++index);
        if(index == 0)
        {
            changeButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
                
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);        
    }//GEN-LAST:event_downButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
         // Check number of scatterplot against maximum limit
        int nFamily = listModels[0].getSize() * listModels[1].getSize();
        int dimSum = nFamily;
        for(int i = 0; i < dimList.size(); i++)
            dimSum = dimSum + ((Integer)dimList.get(i)).intValue();  
        if(dimSum > nPlotAllowed)
        {
            JOptionPane.showMessageDialog(null, 
                                          "Too many families of scatterplots > " 
                                          + nPlotAllowed + ".",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Check FROM and TO
        String from = jTextField1.getText().trim();
        if(!Utility.isPosIntNumber(from))
        {
            JOptionPane.showMessageDialog(null, 
                                          "The beginning data record number is not a " +
                                          "positive integer number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return;
        }
        String to = jTextField2.getText().trim();
        if(!Utility.isPosIntNumber(to))
        {
            JOptionPane.showMessageDialog(null, 
                                          "The ending data record number is not a " +
                                          "positive integer number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return;
        }
        if(Long.parseLong(to) - Long.parseLong(from) > 899) 
        {
            JOptionPane.showMessageDialog(null, 
                                          "The number of data records is too big.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return;
        }
        if(Long.parseLong(to) > nDataRow)
        {
            JOptionPane.showMessageDialog(null, 
                                          "The ending data record number is bigger than, " +
                                          nDataRow + ", the total number of data records.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return;
        }
        
        // Add the scatterplot record       
        String element = "$SCATTERPLOT" + scatterPlot + " FROM " + from + 
                         " TO " + to + slopeLine + xLine + yLine;
        if(model.indexOf(element) != -1) return;
        model.add(++index, element);  
        dimList.add(index, new Integer(nFamily));
        jList1.setSelectedIndex(index);
        
        // set buttons
        isValid = true;
        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());
     
        if(dimSum == nPlotAllowed) 
            addButton.setEnabled(false);
        deleteButton.setEnabled(true);
        changeButton.setEnabled(true);
        
         // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);       
    }//GEN-LAST:event_addButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        jList1.setSelectedIndex(--index);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);        
    }//GEN-LAST:event_upButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addItemButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JList centerList;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton changeItemButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    private javax.swing.JTextPane jTextPane5;
    private javax.swing.JTextPane jTextPane6;
    private javax.swing.JList leftList;
    private javax.swing.JList rightList;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is to return the StepDescriptor object.
     * @return a StepDescriptor object.
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
            return "Plot Output";
  	}

	public String getStepTitle(){
	    return "Plot Output - Following " + which + " Step";
	}

	public void showingStep(JWizardPane wizard){
            wizardPane = wizard;
            MDAObject object = (MDAObject)wizard.getCustomizedObject();
            Vector data = ((MDAObject)wizard.getCustomizedObject()).getData();
            if(data != null)
            {
                nDataRow = 0;
                for(int i = 0; i < data.size(); i++)
                    nDataRow += ((Vector)data.get(i)).size(); 
            }
            if(nDataRow < 900)
                jTextField2.setText(String.valueOf(nDataRow));
            else
                jTextField2.setText("900");
            
            // Fill available items into the ComboBox
            jComboBox1.removeAllItems();
            String[] input = object.getRecords().getProperty("Input").split(" ");
            for(int i = 1; i < input.length; i++)
            {
                String item = null;
                String[] tokens = input[i].split("=");
                if(tokens.length == 2 && Utility.isStdItem(tokens[0])) 
                    item = tokens[1];
                else
                    item = tokens[0];                

                if(!iterator.getIsInd())
                {
                    jComboBox1.addItem(item);
                }
                else
                {
                    if(!item.equals("ID")) 
                        jComboBox1.addItem(item);
                }                
            } 
            
            jComboBox1.addItem("PRED");
            jComboBox1.addItem("RES");
            jComboBox1.addItem("WRES");
            
            boolean isInd = iterator.getIsInd();
            boolean isMetod1 = iterator.getIsMethod1OrPosthoc();
            
            if(!iterator.getIsInd() && which.equals("ESTIMATION") && iterator.getIsMethod1OrPosthoc())
                for(int i = 0; i < iterator.getNEta(); i++)
                    jComboBox1.addItem("ETA(" + (i + 1) +")");

            String record = null;
            if(!iterator.getIsPred())
                record = object.getRecords().getProperty("PK");
            else
                record = object.getRecords().getProperty("Pred");
            String[] p = Utility.eliminateComments(record).split("\n");  
            for(int i = 1; i < p.length; i++)
            {
                if(p[i].indexOf("=") > 0)
                {
                    String[] leftItems = p[i].split("=")[0].trim().split(" "); 
                    jComboBox1.addItem(leftItems[leftItems.length - 1]); 
                }
            }            
            
            // Set models for list1 and list2
            listModels = new DefaultListModel[3];
            listModels[0] = new DefaultListModel();
            listModels[1] = new DefaultListModel();
            listModels[2] = new DefaultListModel();
            lists = new javax.swing.JList[3];
            lists[0] = leftList;
            lists[1] = centerList;
            lists[2] = rightList;
            for(int i = 0; i < 3; i++)
                lists[i].setModel(listModels[i]);
                    
            // Initialize the list
            index = -1;
            if(iterator.getIsReload())
            {
                String text = null;
                if(which.equals("ESTIMATION"))
                {
                    text = iterator.getReload().getProperty("SCATTERPLOTEST");
                    if(text != null)
                    {
                        iterator.getReload().remove("SCATTERPLOTEST");
                        model.removeAllElements();
                        String[] values = text.trim().split(",");
                        for(int i = 0; i < values.length; i++)
                        {
                            text = values[i].substring(12).trim();
                            String element = checkItem("$SCATTERPLOT " + text, i);
                            if(element != null)
                            {
                                model.addElement(element);
                                index++;
                            }
                        }
                    }
                    else
                    {
                        for(int i = 0; i < model.size(); i++)
                        {
                            String element = checkItem((String)model.get(i), i);
                            if(element != null)
                                model.set(++index, element);
                            else
                                model.remove(i--);
                        }
                    }
                }
                else
                {
                    text = iterator.getReload().getProperty("SCATTERPLOTSIM");
                    if(text != null)
                    {
                        iterator.getReload().remove("SCATTERPLOTSIM");
                        model.removeAllElements();
                        dimList.removeAllElements();
                        String[] values = text.trim().split(",");
                        for(int i = 0; i < values.length; i++)
                        {
                            text = values[i].substring(12).trim();
                            String element = checkItem("$SCATTERPLOT " + text, i);
                            if(element != null)
                            {
                                model.addElement(element);
                                index++;
                            }
                        }
                    }
                    else
                    {
                        for(int i = 0; i < model.size(); i++)
                        {
                            String element = checkItem((String)model.get(i), i);
                            if(element != null)
                                model.set(++index, element);
                            else
                                model.remove(i--);
                        }
                    }
                }
            }                 
            else
            {
                for(int i = 0; i < model.size(); i++)
                {
                    String element = checkItem((String)model.get(i), i);
                    if(element != null)
                        model.set(++index, element);
                    else
                        model.remove(i--);
                }
            }

            // Check the number of plots
            dimList.removeAllElements();
            int nFamily = 0;
            if(which.equals("ESTIMATION")) 
                nPlotEst = 0;
            else
                nPlotSim = 0;
            for(int i = 0; i < model.size(); i++)
            {
                nFamily = getNPlots(((String)model.get(i)).substring(13).trim());
                dimList.add(new Integer(nFamily));
                if(which.equals("ESTIMATION"))
                    nPlotEst += nFamily;
                else
                    nPlotSim += nFamily;
            }
            
            isValid = index >= 0 ? true : false;                   
            if(nPlotSim + nPlotEst == maxNPlot)
            {
                JOptionPane.showMessageDialog(null, "The number of plots has reached\n" +
                                              "its limit, " + maxNPlot + ".",    
                                              "Information for Input",               
                                              JOptionPane.INFORMATION_MESSAGE);
             addButton.setEnabled(false);   
             isValid = true;
            }
            if(nPlotSim + nPlotEst > maxNPlot)
            {
                JOptionPane.showMessageDialog(null, "The number of plots has exceeded\n" +
                                              "its limit, " + maxNPlot + ".",    
                                              "Information for Input",               
                                              JOptionPane.INFORMATION_MESSAGE);
             addButton.setEnabled(false);   
             isValid = false;
            }
            
            // Set selected index
            jList1.setSelectedIndex(index);
            
            // Set delete button
            deleteButton.setEnabled(index >= 0);
                        
            // Set left options
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());
                        
            // Set up and down buttons
            Utility.setUpDownButton(index, model, upButton, downButton);            
            
            // Request focus
            jTextField1.requestFocusInWindow();
	}
        
        private String checkItem(String record, int n)
        {
            String element = record;
            element = element.replaceAll(" NOORD0", "").replaceAll(" NOABS0", "").replaceAll(" UNIT", "")
                      .replaceAll(" BY", "").replaceAll(" VS", "");
            if(element.indexOf(" FROM ") != -1)
                element = element.substring(13, element.indexOf(" FROM "));
            else
                element = element.substring(13);       
            String[] items = element.trim().split(" ");
            Vector availableItems = new Vector();
            for(int i = 0; i < jComboBox1.getItemCount(); i++)
                availableItems.addElement(jComboBox1.getItemAt(i));
            int nItem = items.length;
            for(int i = 0; i < items.length; i++)
                if(availableItems.indexOf(items[i]) == -1)
                {
                    nItem--;
                    record = record.replaceAll(" " + items[i], "");
                    JOptionPane.showMessageDialog(null, "The item '" + items[i] + "' has been removed from 'Plot " + (n + 1) + "'\n" +
                                                  "because it is not available in the current setting.", 
                                                  "Input Error", JOptionPane.ERROR_MESSAGE);                       
                }
            if(nItem == 0)
            {
                record = null;
                JOptionPane.showMessageDialog(null, "The plot 'Plot " + (n + 1) + "' has been removed from the list\n" +
                                              "because all its items are not available in the current setting.", 
                                              "Input Error", JOptionPane.ERROR_MESSAGE);                
            }
            return record;
        }
        
        private int getNPlots(String text)
        {
            String[] items = text.trim().split(" ");
            ArrayList list = new ArrayList();
            for(int j = 0; j < items.length; j++)
                list.add(items[j]);
            int n1 = list.indexOf("VS");
            int n2 = 0;
            if(list.indexOf("BY") != -1)
                n2 = list.indexOf("BY") - n1 - 1;
            else
                n2 = list.indexOf("FROM") - n1 - 1;
            return n1 * n2;
        }
        
	public void hidingStep(JWizardPane wizard){
            if(iterator.getIsBack())
            {
                iterator.setIsBack(false);
                return;
            }            
            int size = model.getSize();
            if(size == 0)
                return;
            MDAObject object = (MDAObject)wizard.getCustomizedObject(); 
            // Create and save record
            String record = (String)model.get(0);
            int nPlot = getNPlots(record.substring(13));
            for(int i = 1; i < size; i++)
            {
                record = record + "\n" + model.get(i);
                nPlot += getNPlots(((String)model.get(i)).substring(13));
            }
            if(which.equals("ESTIMATION"))
            {
                nPlotEst = nPlot;
                object.getRecords().setProperty("ScatterPlotEst", record); 
            }
            if(which.equals("SIMULATION"))
            {
                nPlotSim = nPlot;
                object.getRecords().setProperty("ScatterPlotSim", record);
            }
            
            String[][][] splots = new String[size][4][];
            for(int i = 0; i < size; i++)
            {                            
                splots[i][0] = new String[5]; 
                String element = (String)model.get(i);
                int ind = element.indexOf(" NOORD0"); 
                if(ind != -1)
                {
                    splots[i][0][4] = "hide";
                    element = element.replaceAll(" NOORD0", "");
                }
                else
                {
                    splots[i][0][4] = "show";
                }
                ind = element.indexOf(" NOABS0"); 
                if(ind != -1)
                {
                    splots[i][0][3] = "hide";
                    element = element.replaceAll(" NOABS0", "");                    
                }
                else
                {
                    splots[i][0][3] = "show";
                }                
                ind = element.indexOf(" UNIT");
                if(ind != -1)
                {
                    splots[i][0][2] = "show";
                    element = element.replaceAll(" UNIT", "");                    
                }
                else
                {
                    splots[i][0][2] = "hide";
                }                
                ind = element.indexOf(" TO ");
                if(ind != -1)
                {
                    splots[i][0][1] = element.substring(ind + 1).split(" ")[1];
                    element = element.substring(0, ind);
                }
                else
                {
                    splots[i][0][1] = null;
                }                                
                ind = element.indexOf(" FROM ");
                if(ind != -1)
                {
                    splots[i][0][0] = element.substring(ind + 1).split(" ")[1]; 
                    element = element.substring(0, ind);
                }
                else
                {
                    splots[i][0][0] = null;
                }
                int indVs = element.indexOf(" VS ");
                int indBy = element.indexOf(" BY ");
                element = element.trim();
                splots[i][1] = element.substring(13, indVs).split(" ");
                if(indBy != -1)
                {
                    splots[i][2] = element.substring(indVs + 4, indBy).split(" ");
                    splots[i][3] = element.substring(indBy + 4).split(" ");                    
                }
                else
                {
                    splots[i][2] = element.substring(indVs + 4, ind).split(" ");
                    splots[i][3] = null;                                      
                }
            }
                                
            if(which.equals("ESTIMATION"))
                object.getSource().splotEst = splots; 
            if(which.equals("SIMULATION")) 
                object.getSource().splotSim = splots;  
	}

	public boolean isValid(){
            return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    if(!iterator.getIsOnline()) 
                        new Help("Help for SCATTERPLOT Record", 
                                 ScatterPlot.class.getResource("/uw/rfpk/mda/nonmem/help/ScatterPlot.html"));
                    else
                        Utility.openURL("https://" + iterator.getServerName() + 
                                        ":" + iterator.getServerPort() + "/user/help/ScatterPlot.html");  
                }
            };
	}
    }
}
