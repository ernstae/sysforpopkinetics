/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.wizard;

import uw.rfpk.mda.nonmem.Utility;
import org.netbeans.ui.wizard.*;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.table.*;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.SwingConstants;
import java.awt.Dimension;
import java.awt.Color;

/**
 * This class defines a step to create the $ESTIMATION record.
 * @author  Jiaji Du
 */
public class Estimation extends javax.swing.JPanel implements WizardStep {
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this;
    private MDAIterator iterator = null;
    private boolean first = true;
    private boolean isValid = false;
    private JWizardPane wizardPane = null;
    private String method = "METHOD=0 ";
    private String posthoc = "";
    private String interaction = "";
    private String centering = "";
    private String noabort = "";
    private String map = "";
    private Object[][] data;
    private TableModel tableModel = new ATableModel();
    private String covTheta = null;
    
    /** Creates new form Estimation.
     * @param iter a MDAIterator object to initialize the field iterator.     
     */
    public Estimation(MDAIterator iter) {
        initComponents();
        iterator = iter;
    }
     
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextArea2 = new javax.swing.JTextArea();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        jTextPane3 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });

        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        jDialog1.getContentPane().add(jScrollPane2, gridBagConstraints);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        jDialog1.getContentPane().add(jButton1, gridBagConstraints);

        jTextArea2.setEditable(false);
        jTextArea2.setText("This form allow you to enter initial estimates of the covariance matrix for the random\neffect parameters.  Enter data values for the lower triangle elements.  Click the cell\nto enter data.  Please press the \"Enter\" key after typing in the last element.\n");
        jTextArea2.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 11);
        jDialog1.getContentPane().add(jTextArea2, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Select estimation method and available option(s).");
        jTextPane1.setMaximumSize(new java.awt.Dimension(377, 21));
        jTextPane1.setMinimumSize(new java.awt.Dimension(377, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setText("Enter or select values for the following options.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jTextPane2, gridBagConstraints);

        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setEditable(false);
        jTextPane3.setText("Method and options expressed in NONMEM syntax");
        jTextPane3.setFocusable(false);
        jTextPane3.setMaximumSize(new java.awt.Dimension(360, 20));
        jTextPane3.setMinimumSize(new java.awt.Dimension(360, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 12, 0, 12);
        add(jTextPane3, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(400, 30));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 30));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 30));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(2);
        jTextArea1.setText("$ESTIMATION METHOD=0 NOPOSTHOC SIGDIGITS=3 MAXEVALS=450 PRINT=5");
        jTextArea1.setFocusable(false);
        jTextArea1.setMaximumSize(new java.awt.Dimension(400, 30));
        jTextArea1.setMinimumSize(new java.awt.Dimension(400, 30));
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jScrollPane1, gridBagConstraints);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 4, 4);
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setMaximumSize(new java.awt.Dimension(350, 2));
        jSeparator2.setMinimumSize(new java.awt.Dimension(350, 2));
        jSeparator2.setPreferredSize(new java.awt.Dimension(350, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jSeparator2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout(6, 1));

        jPanel1.setPreferredSize(new java.awt.Dimension(180, 128));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("First Order");
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jRadioButton1);

        jRadioButton2.setText("Expected Hessian");
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jRadioButton2);

        jRadioButton3.setText("Laplace Approximation");
        buttonGroup1.add(jRadioButton3);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jPanel1.add(jRadioButton3);

        jRadioButton4.setText("Standard Two-Stage");
        buttonGroup1.add(jRadioButton4);
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jPanel1.add(jRadioButton4);

        jRadioButton5.setText("Iterative Two-Stage");
        buttonGroup1.add(jRadioButton5);
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jPanel1.add(jRadioButton5);

        jRadioButton6.setText("Global Two-Stage");
        buttonGroup1.add(jRadioButton6);
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jPanel1.add(jRadioButton6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 3);
        add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setMaximumSize(new java.awt.Dimension(200, 92));
        jPanel2.setMinimumSize(new java.awt.Dimension(200, 92));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 92));
        jCheckBox1.setText("Obtain individual estimates");
        jCheckBox1.setMargin(new java.awt.Insets(1, 2, 1, 2));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("RUV depends on random effects");
        jCheckBox2.setMargin(new java.awt.Insets(1, 2, 1, 2));
        jCheckBox2.setEnabled(false);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText("Center random effects");
        jCheckBox3.setMargin(new java.awt.Insets(1, 2, 1, 2));
        jCheckBox3.setEnabled(false);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setText("Make automatic error recovery");
        jCheckBox4.setMargin(new java.awt.Insets(1, 2, 1, 2));
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jCheckBox4, gridBagConstraints);

        jCheckBox5.setText("Use MAP Bayesian Objective");
        jCheckBox5.setMargin(new java.awt.Insets(1, 2, 1, 2));
        jCheckBox5.setEnabled(false);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jCheckBox5, gridBagConstraints);

        jButton2.setText("Enter Cov for THETA");
        jButton2.setMargin(new java.awt.Insets(1, 5, 1, 5));
        jButton2.setMaximumSize(new java.awt.Dimension(145, 19));
        jButton2.setMinimumSize(new java.awt.Dimension(145, 19));
        jButton2.setPreferredSize(new java.awt.Dimension(145, 19));
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        jPanel2.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 6);
        add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Significant digits (stopping criterion)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 5, 8);
        jPanel3.add(jLabel2, gridBagConstraints);

        jLabel1.setText("Maximum number of iterations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 18, 4, 8);
        jPanel3.add(jLabel1, gridBagConstraints);

        jLabel3.setText("Summary print iteration interval");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 18, 4, 8);
        jPanel3.add(jLabel3, gridBagConstraints);

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8" }));
        jComboBox1.setSelectedIndex(2);
        jComboBox1.setMaximumSize(new java.awt.Dimension(100, 24));
        jComboBox1.setMinimumSize(new java.awt.Dimension(100, 24));
        jComboBox1.setPreferredSize(new java.awt.Dimension(100, 24));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 12);
        jPanel3.add(jComboBox1, gridBagConstraints);

        jTextField1.setText("450");
        jTextField1.setMaximumSize(new java.awt.Dimension(60, 20));
        jTextField1.setMinimumSize(new java.awt.Dimension(60, 20));
        jTextField1.setPreferredSize(new java.awt.Dimension(80, 20));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 2);
        jPanel3.add(jTextField1, gridBagConstraints);

        jTextField2.setText("5");
        jTextField2.setMaximumSize(new java.awt.Dimension(60, 20));
        jTextField2.setMinimumSize(new java.awt.Dimension(60, 20));
        jTextField2.setPreferredSize(new java.awt.Dimension(60, 20));
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 4, 2);
        jPanel3.add(jTextField2, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setForeground(java.awt.Color.red);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/right.png")));
        jLabel4.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/wrong.png")));
        jLabel4.setPreferredSize(new java.awt.Dimension(11, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        jPanel3.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel5.setForeground(java.awt.Color.red);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/right.png")));
        jLabel5.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/wrong.png")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 12);
        jPanel3.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        add(jPanel3, gridBagConstraints);

    }//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(jCheckBox5.isSelected())
        {
            int dimension = iterator.getNTheta();
            data = new Object[dimension][dimension + 1];
            String[] values = null;
            if(covTheta != null)
            {
                values = covTheta.split(" ");
                covTheta = null;
            }
            int k = 0;
            for(int i = 0; i < dimension; i++)
            {
                data[i][0] = String.valueOf(i + 1);
                for(int j = 1; j <= dimension; j++)
                {
                    if(j - i > 1) 
                    {
                        data[i][j] = "          ...";
                    }
                    else 
                    {
                        if(values != null) data[i][j] = values[k++];
                        else data[i][j] = "";
                    }
                }
            }
            
            // Create a column model for the main table.  
            TableColumnModel cm = new DefaultTableColumnModel() {
            boolean first = true;
            public void addColumn(TableColumn tc) {
                // Drop the first column that will be the row header.
                if(first) {first = false; return; }
                tc.setMinWidth(100);
                super.addColumn(tc);
            }
            };
            
            // Create a column model that will serve the row header table.
            TableColumnModel rowHeaderModel = new DefaultTableColumnModel() {
            boolean first = true; 
            public void addColumn(TableColumn tc) {
                if(first) {
                    tc.setMaxWidth(100);
                    super.addColumn(tc);
                    first = false;
                }
                // Drop the rest of the columns.
            }
            };
        
            jDialog1.setSize(560,300);   
            jScrollPane2.setMinimumSize(new Dimension(510, 120));
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); 
            jDialog1.setTitle("Full Matrix Entry Form");
            jTable1.setModel(tableModel);  
            jTable1.setColumnModel(cm);
        
            // Set up the header column and get it hooked up to everything.
            JTable headerColumn = new JTable(tableModel, rowHeaderModel); 
            jTable1.createDefaultColumnsFromModel();
            headerColumn.createDefaultColumnsFromModel();
            jTable1.setSelectionModel(headerColumn.getSelectionModel());
            jTable1.setRowSelectionAllowed(false);
            rowHeaderModel.getColumn(0).setCellRenderer(new HeaderCellRenderer()); 
        
            // Make the header column look pretty.
            headerColumn.setMaximumSize(new Dimension(100,  dimension));
            headerColumn.setBackground(new Color(204, 204, 204));
            headerColumn.setColumnSelectionAllowed(false);
            headerColumn.setCellSelectionEnabled(false);

            // Put it in a viewport.
            JViewport jv = new JViewport();
            jv.setView(headerColumn);
            jv.setPreferredSize(headerColumn.getMaximumSize());

            // Shut off autoResizeMode.
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            // Attach the row headers.
            jScrollPane2.setRowHeader(jv);
        
            // Display the dialog
            jDialog1.setLocationRelativeTo(this);
            jDialog1.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        jButton1.setEnabled(evt.getKeyCode() == 10);
    }//GEN-LAST:event_jTable1KeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int dimension = iterator.getNTheta();
        covTheta = "";
        for(int i = 0; i < dimension; i++)
        {
            for(int j = 1; j < i + 2; j++)
            {
                String value = ((String)tableModel.getValueAt(i, j)).trim();
                if(!Utility.isFloatNumber(value))
                {
                    JOptionPane.showMessageDialog(null, 
                                          "The element [" + (i + 1) + "," + j + 
                                          "] is not a floating point number.",
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                          
                    return; 
                }
                if(j == i + 1 && Double.parseDouble(value) <= 0)
                {
                    JOptionPane.showMessageDialog(null, 
                                          "The element [" + j + "," + j + 
                                          "] is not a positive number.",
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                       
                    return;
                }
                covTheta += " " + value;                
            }
        }
        covTheta = covTheta.trim();
        
        // Close the dialog
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        if(jCheckBox5.isSelected())
        {
            jButton2.setEnabled(true);
        }
        else
        {
            jButton2.setEnabled(false);
            data = null;
            covTheta = "";
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        method = "METHOD=0 ";
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox4.setEnabled(false);
        jCheckBox5.setEnabled(false);      // true temporary
        jButton2.setEnabled(false);      // true temporary
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        posthoc = "";
        noabort = "";
        interaction = "";
        centering = "";
        setRecord();
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        method = "METHOD=0 ";
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox4.setEnabled(false);
        jCheckBox5.setEnabled(false);  // true temporary
        jButton2.setEnabled(false);      // true temporary
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        posthoc = "";
        noabort = "";
        interaction = "";
        centering = "";
        setRecord();
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        method = "METHOD=0 ";
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox4.setEnabled(false);
        jCheckBox5.setEnabled(false);  // true temporary
        jButton2.setEnabled(false);      // true temporary
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        posthoc = "";
        noabort = "";
        interaction = "";
        centering = "";
        setRecord();
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void grayOutNoabort()
    {
        jCheckBox4.setEnabled(false);
        jCheckBox4.setSelected(false);
    }
    
    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        setRecord();
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        setRecord();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        setRecord();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        if (jCheckBox4.isSelected()) noabort = "NOABORT ";
        else noabort = "";
        setRecord();
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if (jCheckBox3.isSelected()) centering = "CENTERING ";
        else centering = "";
        setRecord();
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (jCheckBox2.isSelected()) interaction = "INTERACTION ";
        else interaction = "";
        setRecord();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) posthoc = "POSTHOC ";
        else posthoc = "";
        setRecord();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        method = "METHOD=1 LAPLACIAN ";
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(true);
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox5.setEnabled(false);
        jButton2.setEnabled(false);
        posthoc = "";
        interaction = "";
        map = "";
        setRecord();
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        method = "METHOD=1 ";
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(true);
        jCheckBox3.setEnabled(true);
        jCheckBox1.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox5.setEnabled(false);
        jButton2.setEnabled(false);
        posthoc = "";
        map = "";
        setRecord();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        method = "METHOD=0 ";
        jCheckBox1.setEnabled(true);
        jCheckBox2.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox5.setEnabled(false);
        jButton2.setEnabled(false);
        interaction = "";
        centering = "";
        map = "";
        setRecord();
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void setRecord()
    {
        isValid = true;
        String maxEvals = jTextField1.getText();
        if(maxEvals.startsWith("+"))
            maxEvals = maxEvals.substring(1).trim(); 
        if(!Utility.isNonNegIntNumber(maxEvals))
        {
            jLabel4.setEnabled(false);
            jLabel4.setToolTipText("It must be a >= 0 integer.");
            isValid = false;
        }
        else
        {
            jLabel4.setEnabled(true);
            jLabel4.setToolTipText(null);
        }
        String print = jTextField2.getText().trim();
        if(print.startsWith("+"))
            print = print.substring(1); 
        if(!Utility.isPosIntNumber(print))
        {
            jLabel5.setEnabled(false);
            jLabel5.setToolTipText("It must be a positive integer.");
            isValid = false;
        }
        else if(Utility.isPosIntNumber(print) && Integer.parseInt(print) > 9999)
        {
            jLabel5.setEnabled(false);
            jLabel5.setToolTipText("It must be smaller than 10000.");
            isValid = false;
        }
        else
        {
            jLabel5.setEnabled(true);
            jLabel5.setToolTipText(null);
        }
        if(isValid)
            jTextArea1.setText("$ESTIMATION " + method + posthoc + interaction + 
                               centering + noabort + map +
                               "SIGDIGITS=" + (String)jComboBox1.getSelectedItem() 
                               + " MAXEVALS=" + maxEvals + " PRINT=" + print);   

        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());
        grayOutNoabort();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    // End of variables declaration//GEN-END:variables
    
    /**
     * This method is to return the StepDescriptor object.
     * @return a StepDescriptor object.
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
  	    return "Estimation Method Selection";
  	}

	public String getStepTitle(){
	    return "Estimation Method Selection";
	}

	public void showingStep(JWizardPane wizard){
            wizardPane = wizard;
            if(iterator.getIsReload())
            {
                String text = iterator.getReload().getProperty("ESTIMATION");
                if(text != null)
                {
                    iterator.getReload().remove("ESTIMATION");
                    text = text.trim() + " ";
                    // Initialize method
                    if(iterator.getIsTwoStage())
                    {
                        jTextPane1.setText("Select a two-stage method and MAP Bayesian objective");
                        jRadioButton1.setEnabled(false);
                        jRadioButton2.setEnabled(false);
                        jRadioButton3.setEnabled(false);
                        jRadioButton4.setEnabled(true);
                        jRadioButton5.setEnabled(true);
                        jRadioButton6.setEnabled(true);
                        jCheckBox5.setEnabled(false);  // true temporary
                        jButton2.setEnabled(false);  // true temporary
                        String method = iterator.getReload().getProperty("METHOD");
                        if(method != null)
                        {                           
                            if(method.endsWith("std_two_stage"))
                                jRadioButton4.doClick();
                            if(method.endsWith("iterative_two_stage"))
                                jRadioButton5.doClick();     
                            if(method.endsWith("global_two_stage"))
                                jRadioButton6.doClick();
                            if(method.startsWith("map"))
                            {
                                covTheta = iterator.getReload().getProperty("COVTHETA");
                                jCheckBox5.setSelected(true);
                            }
                            else
                                jCheckBox5.setSelected(false);
                        }
                        else
                        {
                            jRadioButton4.doClick();
                            jCheckBox5.setSelected(false);
                        }
                    }
                    else
                    {
                        jRadioButton4.setEnabled(false);
                        jRadioButton5.setEnabled(false);
                        jRadioButton6.setEnabled(false);
                        jCheckBox5.setEnabled(false);
                        jButton2.setEnabled(false);
                        jCheckBox5.setSelected(false);
                        if(iterator.getIsInd())
                        {
                            jTextPane1.setText("");
                            jRadioButton1.setEnabled(false);
                            jRadioButton2.setEnabled(false);
                            jRadioButton3.setEnabled(false);
                            jCheckBox1.setEnabled(false);
                            jCheckBox2.setEnabled(false);
                            jCheckBox3.setEnabled(false);
                            jCheckBox4.setEnabled(false);                   
                            jSeparator1.setEnabled(false);
                            jRadioButton1.doClick();
                        }
                        else
                        {
                            jTextPane1.setText("Select an estimation method and available option(s) on the right.");
                            jRadioButton1.setEnabled(true);
                            jRadioButton2.setEnabled(true);
                            jRadioButton3.setEnabled(true);
                            jCheckBox1.setEnabled(jRadioButton1.isSelected());
                            jCheckBox2.setEnabled(jRadioButton2.isSelected());
                            jCheckBox3.setEnabled(!jRadioButton1.isSelected());
                            jCheckBox4.setEnabled(true);
                            jSeparator1.setEnabled(true);
       
                            if(text.indexOf("METHOD") == -1 || text.indexOf("METHOD=0") != -1) 
                                jRadioButton1.doClick();
                            if(text.indexOf("METHOD=1") != -1 && text.indexOf("METHOD=1 LAPLACIAN") == -1)
                                jRadioButton2.doClick();
                            if(text.indexOf("METHOD=1 LAPLACIAN") != -1)
                                jRadioButton3.doClick();
                        }
                    }
                    // Remove two-stage method
                    iterator.getReload().remove("METHOD");                    
                    // Initialize sigdigits
                    int ind= text.indexOf("SIGDIGITS");
                    if(ind != -1)
                        jComboBox1.setSelectedItem(text.substring(ind + 10, ind + 11)); 
                    else
                        jComboBox1.setSelectedItem("3");
                    // Initialize maxevals
                    ind = text.indexOf("MAXEVALS");
                    if(ind != -1)
                        jTextField1.setText(text.substring(ind + 9, text.indexOf(" ", ind)));
                    else
                        jTextField1.setText("450");     // A generous number
                    // Initialize print
                    ind = text.indexOf("PRINT");
                    if(ind != -1)
                        jTextField2.setText(text.substring(ind + 6, text.indexOf(" ", ind)));
                    else
                        jTextField2.setText("9999");      // A generous number
                    // Initialize noabort
                    if(text.indexOf("NOABORT") != -1)
                    {
                        jCheckBox4.setSelected(true);
                        noabort = "NOABORT ";
                    }
                    else
                    {
                        jCheckBox4.setSelected(false);
                        noabort = "";
                    }       
                    // Initialize posthoc
                    if(text.indexOf("POSTHOC") != -1)
                    {
                        jCheckBox1.setSelected(true);
                        posthoc = "POSTHOC ";
                    }
                    else
                    {
                        jCheckBox1.setSelected(false);
                        posthoc = "";
                    }
                    // Initialize centering
                    if(text.indexOf("CENTERING") != -1)
                    {
                        jCheckBox3.setSelected(true);
                        centering = "CENTERING ";
                    }
                    else
                    {
                        jCheckBox3.setSelected(false);
                        centering = "";
                    }
                    // Initialize interaction
                    if(text.indexOf("INTERACTION") != -1)
                    {
                        jCheckBox2.setSelected(true);
                        interaction = "INTERACTION ";
                    }
                    else
                    {
                        jCheckBox2.setSelected(false);
                        interaction = "";
                    }
    
                    if(text.indexOf("METHOD=1") != -1 || text.indexOf("POSTHOC") != -1)
                        iterator.setIsMethod1OrPosthoc(true);          
//                    jTextArea1.setText("$ESTIMATION " + text.substring(11).trim());
                    setRecord();
                }
            }
            else if(first)
            {
                if(iterator.getIsTwoStage())
                {
                    jTextPane1.setText("Select a two-stage method and MAP Bayesian objective");
                    jRadioButton1.setEnabled(false);
                    jRadioButton2.setEnabled(false);
                    jRadioButton3.setEnabled(false);
                    jRadioButton4.setEnabled(true);
                    jRadioButton5.setEnabled(true);
                    jRadioButton6.setEnabled(true);
                    jCheckBox5.setEnabled(false);  // true temporary
                    jButton2.setEnabled(false);  // true temporary
                    jRadioButton4.doClick();
                }
                else
                {
                    jRadioButton4.setEnabled(false);
                    jRadioButton5.setEnabled(false);
                    jRadioButton6.setEnabled(false);
                    jCheckBox5.setEnabled(false);
                    jButton2.setEnabled(false);
                    jCheckBox5.setSelected(false);
                    if(iterator.getIsInd())
                    {
                        jTextPane1.setText("");
                        jRadioButton1.setEnabled(false);
                        jRadioButton2.setEnabled(false);
                        jRadioButton3.setEnabled(false);
                        jCheckBox1.setEnabled(false);
                        jCheckBox2.setEnabled(false);
                        jCheckBox3.setEnabled(false);
                        jCheckBox4.setEnabled(false);                   
                        jSeparator1.setEnabled(false);
                    }
                    else
                    {
                        jTextPane1.setText("Select an estimation method and available option(s) on the right.");
                        jRadioButton1.setEnabled(true);
                        jRadioButton2.setEnabled(true);
                        jRadioButton3.setEnabled(true);
                        jCheckBox1.setEnabled(jRadioButton1.isSelected());
                        jCheckBox2.setEnabled(jRadioButton2.isSelected());
                        jCheckBox3.setEnabled(!jRadioButton1.isSelected());
                        jCheckBox4.setEnabled(true);                       
                        jSeparator1.setEnabled(true);
                        jRadioButton1.doClick();                  
                    }
                }
            }
            first = false;
            isValid = true;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());
            grayOutNoabort();
     	}

	public void hidingStep(JWizardPane wizard){
            if(iterator.getIsBack())
            {
                iterator.setIsBack(false);
                return;
            }            
            if(method.equals("METHOD=1 ") || posthoc.equals("POSTHOC "))
                iterator.setIsMethod1OrPosthoc(true);
            MDAObject object = (MDAObject)wizard.getCustomizedObject();
            String record = jTextArea1.getText().trim();
            object.getRecords().setProperty("Estimation", record); 
            
            String[] estimation = new String[8];
            // Find method
            if(iterator.getIsTwoStage())
            {
                if(jRadioButton4.isSelected())
                    if(jCheckBox5.isSelected())
                        estimation[0] = "map_bayes_std_two_stage";
                    else
                        estimation[0] = "std_two_stage";
                if(jRadioButton5.isSelected())
                    if(jCheckBox5.isSelected())
                        estimation[0] = "map_bayes_iterative_two_stage";
                    else
                        estimation[0] = "iterative_two_stage";
                if(jRadioButton6.isSelected())
                    if(jCheckBox5.isSelected())
                        estimation[0] = "map_bayes_global_two_stage";
                    else
                        estimation[0] = "global_two_stage";
            }
            else
            {
                if(record.indexOf("METHOD") == -1 || record.indexOf("METHOD=0") != -1) 
                    estimation[0] = "fo";
                if(record.indexOf("METHOD=1") != -1 && record.indexOf("METHOD=1 LAPLACIAN") == -1)
                    estimation[0] = "foce";
                if(record.indexOf("METHOD=1 LAPLACIAN") != -1)
                    estimation[0] = "laplace";
            }
            
            // Find sigdigits
            int ind= record.indexOf("SIGDIGITS");
            if(ind != -1)
                estimation[1] = record.substring(ind + 10, ind + 11); 
            else
                estimation[1] = "3";
            record += " ";
            // Find maxevals
            ind = record.indexOf("MAXEVALS");
            if(ind != -1)
                estimation[2] = record.substring(ind + 9, record.indexOf(" ", ind));
            else
                estimation[2] = "450";      // A generous number
            // Find print
            ind = record.indexOf("PRINT");
            if(ind != -1)
                estimation[3] = record.substring(ind + 6, record.indexOf(" ", ind));
            else
                estimation[3] = "9999";      // A generous number
            // Find noabort
            if(record.indexOf("NOABORT") != -1)
                estimation[4] = "no";
            else
                estimation[4] = "yes";
            // Find posthoc
            if(record.indexOf("POSTHOC") != -1)
                estimation[5] = "yes";
            else
                estimation[5] = "no";
            // Find centering
            if(record.indexOf("CENTERING") != -1)
                estimation[6] = "yes";
            else
                estimation[6] = "no";
            // Find interaction
            if(record.indexOf("INTERACTION") != -1)
                estimation[7] = "yes";
            else
                estimation[7] = "no";

            object.getSource().estimation = estimation;
            if(estimation[0].startsWith("map"))
                object.getSource().covTheta = covTheta.split(" ");
            else
                object.getSource().covTheta = null;
	}

	public boolean isValid(){
	    return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    if(!iterator.getIsOnline()) 
                        new Help("Help for $ESTIMATION Record", 
                                 Estimation.class.getResource("/uw/rfpk/mda/nonmem/help/Estimation.html"));
                    else
                        Utility.openURL("https://" + iterator.getServerName() + 
                                        ":" + iterator.getServerPort() + "/user/help/Estimation.html");  
                }
            };
	}
        
        public String getHelpID() {
            return "Prepare_Input_Method_Selection";
        }        
    }
    
        private class ATableModel extends AbstractTableModel {
        public String getColumnName(int c) {
            String name = null;
            if(c == 0) 
                name = "Index";
            else
                name = String.valueOf(c);
            return name;
        }
        public Class getColumnClass(int c) {
            return data[0][c].getClass();
        }
        public int getColumnCount() {
            return data.length + 1; 
        }
        public int getRowCount() {
            return data.length;
        }
        public Object getValueAt(int r, int c) {
            return data[r][c];
        }
        public boolean isCellEditable(int r, int c) {
            if(jRadioButton1.isSelected()) return c - r == 1;
            else return !(c == 0 || c - r > 1);
        }
        public void setValueAt(Object value, int r, int c) {
            data[r][c] = value;
        }
    }

    private class HeaderCellRenderer extends DefaultTableCellRenderer 
    {
        public Component getTableCellRendererComponent(JTable table,
            Object value, boolean isSelected, boolean hasFocus, int row, int col) 
        {
            super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,col);
            setHorizontalAlignment(SwingConstants.CENTER);
            return this;
	}
    }    
}
