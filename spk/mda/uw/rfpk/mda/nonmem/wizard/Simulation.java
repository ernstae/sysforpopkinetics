/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.wizard;

import uw.rfpk.mda.nonmem.Utility;
import org.netbeans.ui.wizard.*;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * This class defines a step to create the $SIMULATION record.
 * @author  Jiaji Du
 */
public class Simulation extends javax.swing.JPanel implements WizardStep {
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this;
    private MDAIterator iterator = null;

    /** Creates new form Simulation.
     * @param iter a MDAIterator object to initialize the field iterator.
     */
    public Simulation(MDAIterator iter) {
        iterator = iter;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextPane1 = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jTextPane2 = new javax.swing.JTextPane();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextPane3 = new javax.swing.JTextPane();
        jTextPane4 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jTextPane1.setBackground(new java.awt.Color(238, 238, 238));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Enter an integer number as the seed for the random source.  \nThe number should be between 0 and 21474836447. ");
        jTextPane1.setFocusCycleRoot(false);
        jTextPane1.setFocusable(false);
        jTextPane1.setMaximumSize(new java.awt.Dimension(420, 35));
        jTextPane1.setMinimumSize(new java.awt.Dimension(420, 35));
        jTextPane1.setPreferredSize(new java.awt.Dimension(420, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jTextPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 12);
        add(jSeparator1, gridBagConstraints);

        jLabel1.setText("Seed Number for Random Source");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 36, 12, 12);
        add(jLabel1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(238, 238, 238));
        jTextPane2.setEditable(false);
        jTextPane2.setText("The $SIMULATION record you have entered.");
        jTextPane2.setPreferredSize(new java.awt.Dimension(420, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        add(jTextPane2, gridBagConstraints);

        jTextField1.setText("889215690");
        jTextField1.setMaximumSize(new java.awt.Dimension(100, 19));
        jTextField1.setMinimumSize(new java.awt.Dimension(100, 19));
        jTextField1.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 12, 36);
        add(jTextField1, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(420, 33));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(2);
        jTextArea1.setText("$SIMULATION (889215690)");
        jTextArea1.setMaximumSize(new java.awt.Dimension(420, 50));
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 12, 12);
        add(jScrollPane1, gridBagConstraints);

        jLabel2.setText("Number of Sub-Problems to Run\n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 36, 12, 12);
        add(jLabel2, gridBagConstraints);

        jTextField2.setText("1");
        jTextField2.setMaximumSize(new java.awt.Dimension(100, 19));
        jTextField2.setMinimumSize(new java.awt.Dimension(100, 19));
        jTextField2.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 12, 36);
        add(jTextField2, gridBagConstraints);

        jTextPane3.setBackground(new java.awt.Color(238, 238, 238));
        jTextPane3.setEditable(false);
        jTextPane3.setText("Click the \"Enter\" button to continue.");
        jTextPane3.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 13, 2, 0);
        add(jTextPane3, gridBagConstraints);

        jTextPane4.setBackground(new java.awt.Color(238, 238, 238));
        jTextPane4.setEditable(false);
        jTextPane4.setText("Repeatedly run the problem.  In each run, use the simulated data\nobtained from the previous run as the current random source.\nIf you want the parameters to be estimated from each simulated\ndataset, select the  \"Parameter Estimation\" option in the first step. ");
        jTextPane4.setFocusable(false);
        jTextPane4.setMaximumSize(new java.awt.Dimension(420, 35));
        jTextPane4.setMinimumSize(new java.awt.Dimension(420, 35));
        jTextPane4.setPreferredSize(new java.awt.Dimension(320, 64));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jTextPane4, gridBagConstraints);

        jButton1.setText("Enter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        add(jButton1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String seed = jTextField1.getText().trim();
        if(seed.startsWith("+"))
            seed = seed.substring(1);
        if(!Utility.isPosIntNumber(seed))
        {
            JOptionPane.showMessageDialog(null, 
                                          "The seed number is not a positive " +
                                          "integer number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return;
        }
        else if(Long.parseLong(seed) > 21474836447L) 
        {
            JOptionPane.showMessageDialog(null, 
                                          "The seed number is too big.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                
            return;
        }
        String subProblems = " SUBPROBLEMS=1";
        String nProblem = jTextField2.getText().trim();
        if(!nProblem.equals(""))
        {
            if(nProblem.startsWith("+"))
                nProblem = nProblem.substring(1);        
            if(!Utility.isPosIntNumber(nProblem))
            {
                JOptionPane.showMessageDialog(null, 
                                              "The number of sub-problems to run " +
                                              "is not a positive integer number.",   
                                              "Input Error",    
                                              JOptionPane.ERROR_MESSAGE);                
                return;
            }
            if(Integer.parseInt(nProblem) > 1)
                subProblems = " SUBPROBLEMS=" + nProblem;
        }
        jTextArea1.setText("$SIMULATION (" + seed + ")" + subProblems);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is to return the StepDescriptor object.
     * @return a StepDescriptor object.
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
  	    return "Simulation";
  	}

	public String getStepTitle(){
	    return "Simulation";
	}

	public void showingStep(JWizardPane wizard){        
            if(iterator.getIsReload())
            {
                String text = iterator.getReload().getProperty("SIMULATION");
                if(text != null)
                {
                    iterator.getReload().remove("SIMULATION");
                    jTextField1.setText(text.substring(text.indexOf("(") + 1, text.indexOf(")")));
                    if(text.indexOf(" SUBPROBLEMS") != -1)
                        jTextField2.setText(text.substring(text.indexOf("=") + 1).trim());
                    else
                        jTextField2.setText("1");
                    jTextArea1.setText("$SIMULATION " + text.substring(11).trim());
                }
            }
     	}

        public boolean checkingStep(JWizardPane wizard){
            return true;
        }
        
	public void hidingStep(JWizardPane wizard){
            if(iterator.getIsBack())
            {
                iterator.setIsBack(false);
                return;
            }            
            String record = jTextArea1.getText();
            MDAObject object = (MDAObject)wizard.getCustomizedObject();
            object.getRecords().setProperty("Simulation", record);
            String[] simu = new String[2];
            simu[0] = record.substring(record.indexOf("(") + 1, record.indexOf(")"));
            if(record.indexOf(" SUBPROBLEMS") != -1)
                simu[1] = record.substring(record.indexOf("=") + 1);
            else
                simu[1] = "1";
            object.getSource().simulation = simu;
	}

	public boolean isValid(){
	    return true;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    if(!iterator.getIsOnline()) 
                        new Help("Help for $SIMULATION Record", 
                                 Simulation.class.getResource("/uw/rfpk/mda/nonmem/help/Simulation.html"));
                    else
                        Utility.openURL("https://" + iterator.getServerName() + 
                                        ":" + iterator.getServerPort() + "/user/help/Simulation.html");  
                }
            };
	}
        
        public String getHelpID() {
            return "Prepare_Input_Simulation";
        }
        
    }
}
