/*
 * Model.java
 *
 * Created on August 15, 2003, 1:17 PM
 */

package uw.rfpk.mda.nonmem.wizard;

import org.netbeans.ui.wizard.*;
import javax.swing.JComponent;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane; 
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * This class defines a step to create the $MODEL record
 * @author  jiaji
 */
public class Model extends javax.swing.JPanel implements WizardStep {
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this; 
    private MDAIterator iterator = null;
    private DefaultListModel model = null; 
    private String attributes = "";
    private JWizardPane wizardPane = null;
    private boolean isValid = false;
    private int index = -1;

    /** Creates new form Model
     * @param iter A MDAIterator object to initialize the field iterator
     */
    public Model(MDAIterator iter) { 
        initComponents();
        iterator = iter; 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jTextPane3 = new javax.swing.JTextPane();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        help = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        changeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Attributes");
        jDialog1.setBackground(java.awt.Color.white);
        jDialog1.setLocationRelativeTo(jButton1);
        jDialog1.setModal(true);
        jDialog1.setResizable(false);
        jCheckBox1.setText("INITIALOFF");
        jCheckBox1.setToolTipText("Compartment is initially off");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 24, 1, 12);
        jDialog1.getContentPane().add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("NOOFF");
        jCheckBox2.setToolTipText("Compartment may not be turned on or off.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 24, 1, 12);
        jDialog1.getContentPane().add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText("NODOSE");
        jCheckBox3.setToolTipText("Compartment may not receive a dose.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 24, 1, 12);
        jDialog1.getContentPane().add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setText("EQUILIBRIUM");
        jCheckBox4.setToolTipText("Compartment is an equilibrium compartment (implies NODOSE).");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 24, 1, 12);
        jDialog1.getContentPane().add(jCheckBox4, gridBagConstraints);

        jCheckBox5.setText("EXCLUDE");
        jCheckBox5.setToolTipText("Compartment amount is excluded from the amount of the output compartment.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 24, 1, 12);
        jDialog1.getContentPane().add(jCheckBox5, gridBagConstraints);

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(4, 54, 4, 54);
        jDialog1.getContentPane().add(jButton2, gridBagConstraints);

        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setText("Multiple attributes may be selected.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 6, 12);
        jDialog1.getContentPane().add(jTextPane3, gridBagConstraints);

        jCheckBox6.setText("DEFOBSERVATION");
        jCheckBox6.setToolTipText("Compartment is the default observation compartment.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 24, 1, 12);
        jDialog1.getContentPane().add(jCheckBox6, gridBagConstraints);

        jCheckBox7.setText("DEFDOSE");
        jCheckBox7.setToolTipText("Compartment is the default dose compartment.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 24, 1, 12);
        jDialog1.getContentPane().add(jCheckBox7, gridBagConstraints);

        jDialog2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        help.setEditable(false);
        jScrollPane2.setViewportView(help);

        jDialog2.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        setLayout(new java.awt.GridBagLayout());

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 34;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 5, 16);
        add(jComboBox1, gridBagConstraints);

        jTextField2.setText(" ");
        jTextField2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 20, 5);
        add(jTextField2, gridBagConstraints);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 16, 7, 16);
        add(addButton, gridBagConstraints);

        upButton.setText("Up");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(16, 16, 7, 16);
        add(upButton, gridBagConstraints);

        downButton.setText("Down");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 56, 16);
        add(downButton, gridBagConstraints);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Enter the number of equilibrium compartments, the number of basic PK \nparameters and press the \"Enter\" key.  Then enter the definition of the\ncompartments, which includes compartment's name and its attributes.  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setText("List of the  \ncompart-\nments\nyou have \nentered.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 44, 0);
        add(jTextPane2, gridBagConstraints);

        changeButton.setText("Change");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 6, 16);
        add(changeButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 16);
        add(deleteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jSeparator2, gridBagConstraints);

        model = new DefaultListModel();
        jList1 = new javax.swing.JList(model);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFixedCellHeight(15);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 88;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 12, 12, 16);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Number of equilibrium compartments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 12, 12, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Number of basic PK parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 48, 9, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Name");
        jLabel3.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(9, 54, 21, 0);
        add(jLabel3, gridBagConstraints);

        jButton1.setText("Attributes");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 17, 16);
        add(jButton1, gridBagConstraints);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(9, 12, 9, 16);
        add(jTextField1, gridBagConstraints);

    }//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        if(Utility.isPosIntNumber(jTextField1.getText()))
        {
            jLabel3.setEnabled(true);
            jTextField2.setEnabled(true);
            jButton1.setEnabled(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, 
                                          "The number of basic PK parameters is " +
                                          "not a positive integer.",
                                          "Input Error",  
                                          JOptionPane.ERROR_MESSAGE);         
            return;
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        index = jList1.getSelectedIndex();    
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);        
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_jList1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        attributes = "";
        if(jCheckBox1.isSelected())
            attributes = attributes + " " + "INITIALOFF";
        if(jCheckBox2.isSelected())
            attributes = attributes + " " + "NOOFF";
        if(jCheckBox3.isSelected())
            attributes = attributes + " " + "NODOSE";
        if(iterator.getAdvan() == 9 && jCheckBox4.isSelected())
            attributes = attributes + " " + "EQUILIBRIUM";
        if(iterator.getAdvan() == 9 && jCheckBox5.isSelected())
            attributes = attributes + " " + "EXCLUDE";
        if(jCheckBox6.isSelected())
            attributes = attributes + " " + "DEFOBSERVATION";
        if(jCheckBox7.isSelected())
            attributes = attributes + " " + "DEFDOSE";
        jDialog1.setVisible(false);
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jCheckBox4.setEnabled(iterator.getAdvan() == 9);
        jCheckBox5.setEnabled(iterator.getAdvan() == 9);
        jDialog1.setSize(250,280);            
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(index == -1) return;
        // Update the name of the followed compartments
        for(int i = index + 1; i < model.getSize(); i++)
        {
            String comp = (String)model.get(i);
            if(comp.startsWith("COMP=(COMP " + (i + 1)))
                model.setElementAt("COMP=(COMP " + i + comp.substring(12), i);
        }
        // Remove element
        model.removeElement(jList1.getSelectedValue());
        jList1.setSelectedIndex(--index);
        
        // Set add button
        addButton.setEnabled(true);
        
        // Set left options
        if(model.getSize() == 0)
        {
            isValid = false;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        }
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // Construct element
        String name = jTextField2.getText().trim();
        if(name.equals(""))
            name = "COMP" + String.valueOf(index + 1);
        String element = "COMP=(" + name + attributes + ")";
        // Check if changeable
        for(int i = 0; i < model.getSize(); i++)
            if(i != index && 
               ((String)model.get(i)).split(" ")[0].equals(element.split(" ")[0])) 
                return; 
        model.setElementAt(element, index);     
        jList1.setSelectedIndex(index);
    }//GEN-LAST:event_changeButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        jList1.setSelectedIndex(++index);
        if(index == 0)
        {
            changeButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
                
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_downButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Construct element
        String name = jTextField2.getText().trim();
        if(name.equals(""))
            name = "COMP" + String.valueOf(index + 2);
        String element = "COMP=(" + name + attributes + ")";
        // Check if addable
        for(int i = 0; i < model.getSize(); i++)
        {
            if(element.split(" ")[0].equals(((String)model.get(i)).split(" ")[0])) 
                return;    
        }
        // Update the name of the followed compartments
        for(int i = index + 1; i < model.getSize(); i++)
        {
            String comp = (String)model.get(i);
            if(comp.startsWith("COMP=(COMP " + (i + 1)))
                model.setElementAt("COMP=(COMP " + (i + 2) + comp.substring(12), i);
        }
        // Add element
        model.add(++index, element);     
        jList1.setSelectedIndex(index);
        
        // Check the limit
        if(model.getSize() == 9)
            addButton.setEnabled(false);
        
        // Set left options
        isValid = true;
        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_addButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        jList1.setSelectedIndex(--index);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_upButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JTextArea help;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is to return the StepDescriptor object 
     * @return A StepDescriptor object
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
  	    return "$MODEL Record";
  	}

	public String getStepTitle(){
	    return "$MODEL Record";
	}

	public void showingStep(JWizardPane wizard){
            wizardPane = wizard;
	}

	public void hidingStep(JWizardPane wizard){
            int size = model.getSize();
            if(size == 0)
                return;
            MDAObject object = (MDAObject)wizard.getCustomizedObject();
            String record = " NEQUILIBRIUM=" + (String)jComboBox1.getSelectedItem();
            if(Utility.isPosIntNumber(jTextField1.getText()))
                record = record + " NPARAMETERS=" + jTextField1.getText();
            else
                
                return;
            for(int i = 0; i < size; i++)
                record = record + "\n" + model.get(i);
            object.getRecords().setProperty("Model", "$MODEL" + record); 
            String[][] compartments = new String[size + 1][];
            compartments[0] = new String[3]; 
            compartments[0][0] = String.valueOf(size);
            compartments[0][1] = (String)jComboBox1.getSelectedItem();
            compartments[0][2] = jTextField1.getText();
            for(int i = 1; i <= size; i++)
            {
                String compartment = (String)model.get(i - 1);
                String name = compartment.substring(6, compartment.length() - 1).split(" ")[0];                
                compartments[i] = new String[8];
                if(name.startsWith("\"") || name.startsWith("'"))
                {
                    name = name.substring(1, name.length() - 1);                    
                }
                compartments[i][0] = name; 
                if(compartment.indexOf(" INITIALOFF") != -1)
                    compartments[i][1] = "yes";
                else
                    compartments[i][1] = "no";
                
                if(compartment.indexOf(" NOOFF") != -1)
                    compartments[i][2] = "yes";
                else
                    compartments[i][2] = "no";
                if(compartment.indexOf(" NODOSE") != -1)
                    compartments[i][3] = "yes";
                else
                    compartments[i][3] = "no";
                if(compartment.indexOf(" EQUILIBRIUM") != -1)
                    compartments[i][4] = "yes";
                else
                    compartments[i][4] = "no";
                if(compartment.indexOf(" EXCLUDE") != -1)
                    compartments[i][5] = "yes";
                else
                    compartments[i][5] = "no";
                if(compartment.indexOf(" DEFOBSERVATION") != -1)
                    compartments[i][6] = "yes";
                else
                    compartments[i][6] = "no";
                if(compartment.indexOf(" DEFDOSE") != -1)
                    compartments[i][7] = "yes";
                else
                    compartments[i][7] = "no";
            }
            object.getControl().model = compartments;
	}

	public boolean isValid(){
            return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    jDialog2.setTitle("Help for " + getStepTitle());
                    jDialog2.setSize(600, 500);
                    jDialog2.setVisible(true);
                    jDialog2.show();
                }
            };
	}
    }
}
