/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.testtool;

import java.io.*;
import javax.swing.*;
import java.util.StringTokenizer;
import java.text.DecimalFormat;
import uw.rfpk.mda.nonmem.*;
import uw.rfpk.mda.*;
import javax.print.*;
import javax.print.attribute.*;
import java.awt.print.*;

/**
 * This class formats nonmem data files.
 * @author  Jiaji Du
 */
public class DataFormater extends javax.swing.JFrame {
    
    /** Creates new form DataFormater */
    public DataFormater() {
        initComponents();
        setSize(700,  500);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButton1.setText("Open");
        jButton1.setPreferredSize(new java.awt.Dimension(78, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        jButton2.setText("Format");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2);

        jButton3.setText("Save");
        jButton3.setPreferredSize(new java.awt.Dimension(78, 25));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton3);

        jButton4.setText("Print");
        jButton4.setPreferredSize(new java.awt.Dimension(78, 25));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton4);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jTextArea1.setFont(new java.awt.Font("Courier", 0, 12));
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String text = jTextArea1.getText();
        if(!text.endsWith("\n"))
            text += "\n";
        Printer printable = new Printer(text);
			
	// Get a PrinterJob object
        PrinterJob printerJob = PrinterJob.getPrinterJob();

        // Display print dialog,if user return OK, setPrintable and print
        PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet(); 
//        PageFormat pageFormat = printerJob.pageDialog(attributes);
//        if(pageFormat != null)
        if(printerJob.printDialog(attributes))
        {
            printerJob.setPrintable(printable);
//            Book book = new Book();
//            book.append(printable, pageFormat, printable.getPageCount());   
//            printerJob.setPageable(book);
            try
	    {
                printerJob.print(attributes);
            }
            catch(PrinterException pe)
	    {
                JOptionPane.showMessageDialog(null, "Error printing " + pe,  // Display printing 
                                              "Printer Error",               // error message
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String ls = System.getProperty("line.separator");
        String[] lines = jTextArea1.getText().split(ls);
        String text = "";
        for(int i = 0; i < lines.length; i++)
        {
            StringTokenizer lineToken = new StringTokenizer(lines[i], " ");
            int nTokens = lineToken.countTokens();
            text += formatString(lineToken.nextToken());
            for(int j = 1; j < nTokens; j++)
                text += formatNumeric(lineToken.nextToken());
            text += ls;
        }
        jTextArea1.setText(text);
        jTextArea1.setCaretPosition(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    // Format the data of type string
    private static String formatString(String number)
    {
        String string = "";
        for(int i = 0; i < 10 - number.length(); i++)
            string +=" ";
        return string + number;
    }
    
    // Format the data of type numeric 
    private static String formatNumeric(String number)
    {
        if(number.equals("."))
            number += "0";
        DecimalFormat f = new DecimalFormat("0.0000E00");
        return Utility.formatData(8, f.format(Double.parseDouble(number)));  
    }    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "There is no text to save.", "Input Error",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        JFileChooser files = new JFileChooser();
        int result = files.showSaveDialog(null);
        if(result == files.APPROVE_OPTION)
	{
            File file = files.getSelectedFile();
            try
            {
                BufferedWriter out = new BufferedWriter(new FileWriter(file));
                out.write(jTextArea1.getText());
                out.close();
            }
            catch(IOException e )
            {
                JOptionPane.showMessageDialog(null, e, "IOException", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser files = new JFileChooser();
        int result = files.showOpenDialog(null);
        if(result != files.APPROVE_OPTION) 
	    return;
        File file = files.getSelectedFile();
        StringBuffer buffer = new StringBuffer();        
        try
        {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            boolean done = false;
            while(!done)
            {
                // Read a line
                String line = reader.readLine();                            
                if(line == null) 
                    done = true;
                else
                    buffer.append(line).append("\n");
            }	    
            reader.close(); 
            
            // Display the file text
            jTextArea1.setText(buffer.toString());
            jTextArea1.setCaretPosition(0);
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(null, e, "IOException", JOptionPane.ERROR_MESSAGE);        
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new DataFormater().show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
}
