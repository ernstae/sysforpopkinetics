# ---------------------------------------------------------------------
# File: ExpectedHessian.oms
#
#
# This is a copy of the file expectedhessian.oms with a new 
# argument that allows the terms involving D to be left out.
#
# Author: Mitch Watrous
# 
# ---------------------------------------------------------------------

begin # blocking for automatic include

#begin##
$begin ExpectedHessian$$
$escape #$$

$spell
	ok
	Htilde
	Hessian
$$

$section Expected Hessian Approximation$$

$index ExpectedHessian$$
$cindex expected hessian approximation$$

$table
$bold Syntax:$$ $cend
$syntax/ExpectedHessian( ...
function /Model/, ...
/alp/, ...
/b/, /bStep/, ...
/HtildeOut/, /Htilde_alpOut/, /Htilde_bOut/, ...
/withD/ ...
)/$$

$tend


$fend 25$$


$head Description$$
If $math%alp%$$ and $math%b%$$ are equal to the
true fixed and random population parameter values respectively,
the expected value of the Hessian of Lambda $comment Cross reference (mref/Lambda) turned off for now$$ with
respect to $math%b%$$ is
$math%
            -1                   T  -1
H(alp, b) = D (alp) + f_b (alp, b)  R (alp, b) f_b (alp, b)

            1            T        -1           -1
          + - R_b(alp, b)  kron[ R  (alp, b), R (alp, b) ] R_b(alp, b)
            2
%$$
(The equation above uses
$xref/glossary/Individual Notation/individual notation/$$.)
The approximate expected Hessian, $math%Htilde(alp, b)%$$,
has the same definition as above
except that the derivatives are replaced by central difference approximations.
$pre 

$$
For a description of routines that are used by the ExpectedHessian
function, see Expected Hessian Routines $comment Cross reference (tref expectedhessianroutines) turned off for now$$.

$head Reference$$
$italic
Approximating The Maximum Likelihood Estimate For Models With Random Parameter
$$

$head Arguments$$
The return value of $italic Model$$ is true if it succeeds and false otherwise.
The return value of $code ExpectedHessian$$ is true, if it succeeds,
and false otherwise.
$syntax/

/Model/(/alp/, /b/, /fOut/, /f_alpOut/, /f_bOut/, /ROut/, /R_alpOut/, /R_bOut/, /DOut/, /D_alpOut/)
/$$
All the arguments to this routine have real or double-precision values. In addition,
the arguments that end in $italic Out$$ are $xref/glossary/Output Value/output values/$$.
$table
$bold Argument$$
	$cend $bold Value$$ 
	$cend $bold Comments$$ $rend
$italic alp$$
	$cend $math%alp%$$ 
	$cend fixed population parameter vector $rend
$italic b$$
	$cend $math%b%$$ 
	$cend random population parameter vector $rend
$italic fOut$$
	$cend $math%f(alp, b)%$$ 
	$cend model for the mean of $math%y%$$ given $math%b%$$ $rend
$italic f_alpOut$$ 
	$cend $math%f_alp(alp, b)%$$ 
	$cend derivative of $math%f(alp, b)%$$ with respect to $math%alp%$$ $rend
$italic f_bOut$$ 
	$cend $math%f_b(alp, b)%$$ 
	$cend derivative of $math%f(alp, b)%$$ with respect to $math%b%$$ $rend
$italic ROut$$ 
	$cend $math%R(alp, b)%$$ 
	$cend model for the variance of $math%y%$$ given $math%b%$$ $rend
$italic R_alpOut$$
	$cend $math%R_alp(alp, b)%$$ 
	$cend derivative of $math%R(alp, b)%$$ with respect to $math%alp%$$ $rend
$italic R_bOut$$
	$cend $math%R_b(alp, b)%$$ 
	$cend derivative of $math%R(alp, b)%$$ with respect to $math%b%$$ $rend
$italic DOut$$ 
	$cend $math%D(alp)%$$ 
	$cend model for the variance of $math%b%$$ $rend
$italic D_alpOut$$
	$cend $math%D_alp(alp)%$$ 
	$cend derivative of $math%D(alp)%$$ with respect to $math%alp%$$
$tend
$syntax/

/alp/
/$$
The double-precision column vector $italic alp$$
specifies a value for the fixed population parameter vector.
$syntax/

/b/
/$$
The double-precision column vector $italic b$$
specifies a value for the random population parameter vector.
$syntax/

/bStep/
/$$
is a column vector with the same type and dimension as $italic b$$
specifying the step size for the central difference approximations
with respect to $math%b%$$.
$syntax/

/HtildeOut/
/$$
the output value $italic HtildeOut$$
is a scalar containing the value of $math%Htilde(alp, b)%$$.
$syntax/

/Htilde_alpOut/
/$$
the output value $italic Htilde_alpOut$$
is a row vector containing the derivative of
$math%Htilde(alp, b)%$$ with respect to $math%alp%$$.
$syntax/

/Htilde_bOut/
/$$
the output value $italic Htilde_bOut$$
is a row vector containing the derivative of
$math%Htilde(alp, b)%$$ with respect to $math%b%$$.

$syntax/

/withD/
/$$
This value is true if the terms involving $math%D%$$ should 
be included in the expressions for $math%Htilde(alp, b)%$$ 
and $math%Htilde_alp(alp, b)%$$.

$head Example$$
Suppose that
$math%
	            /  b(1)     0  \
	R(alp, b) = |              |
	            \  0      b(1) /

	            / 1/alp(1)  0 \
	D(alp)    = |             |
	            \ 0  1/alp(1) /

	            / alp(2) + b(2) \
	f(alp, b) = |               |
	            \ alp(2) + b(2) /

	            / 1 \
	y         = |   |
	            \ 1 /
%$$
It follows that for this case
$math%
                 / alp(1)  0   \    / 0      0     \
H(alp, b)      = |             | +  |              |
                 \   0  alp(1) /    \ 0   2 / b(1) /

                 1  / 2 / b(1)^2   0 \
               + -  |                |
                 2  \    0         0 /


                 / alp(1) + 1 / b(1)^2    0     \
H(alp, b)      = |                              |
                 \ 0          alp(1) + 2 / b(1) /

                 / 1  0 \
H_alp(alp, b) =  | 0  0 |
                 | 0  0 |
                 \ 1  0 /

                 / -2 / b(1)^3   0 \
H_b(alp, b)   =  | 0             0 |
                 | 0             0 |
                 \ -2 / b(1)^2   0 /


%$$
You can run this example by entering
$codep

clear
#
function Model(alp, b, fOut, f_alpOut, f_bOut, ROut, R_alpOut, R_bOut, DOut, D_alpOut) begin
	if fOut then ...
		fOut = {alp(2) + b(2), alp(2) + b(2)}
	if f_alpOut then ...
		f_alpOut = { ...
		[ 0 , 1 ], ...
		[ 0 , 1 ] ...
	}
	if f_bOut then ...
		f_bOut = { ...
		[ 0 , 1 ], ...
		[ 0 , 1 ] ...
	}
	if ROut then ...
		ROut = { ...
		[ b(1) ,   0   ], ...
		[ 0    ,  b(1) ] ...
	}
	if R_alpOut then ...
		R_alpOut = { ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ] ...
	}
	if R_bOut then ...
		R_bOut = { ...
		[ 1 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 1 , 0 ] ...
		}
	if DOut then ...
		DOut = { ...
		[ alp(1)^(-1) ,   0   ], ...
		[ 0    ,  alp(1)^(-1) ] ...
	}
	if D_alpOut then ...
		D_alpOut = { ...
		[ -alp(1)^(-2) , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ -alp(1)^(-2) , 0 ] ...
	}
	return true
end
alp           = {1., 1.}
b             = {1., 1.}
bStep         = {.1, .1}
HtildeOut     = true
Htilde_alpOut = true
Htilde_bOut   = true
ok = ExpectedHessian( ...
	function Model, ...
	alp, ...
	b, bStep, ...
	HtildeOut, Htilde_alpOut, Htilde_bOut ...
)
print "ok             =", ok
print "HtildeOut      =", HtildeOut
print "Htilde_alpOut' =", Htilde_alpOut'
print "Htilde_bOut'    =", Htilde_bOut'

$$
O-Matrix will respond
$codep
	ok              = T
	Htilde          = {
	[ 2 , 0 ],
	[ 0 , 3 ]
	}
	Htilde_alpOut'  = {
	[ 1 , 0 , 0 , 1 ]
	[ 0 , 0 , 0 , 0 ]
	}
	Htilde_bOut     = {
	[ -2 , 0 , 0 , -2 ]
	[  0 , 0 , 0 ,  0 ]
	}
$$

$end
-------------------------------------------------------------------------
#end##
include AkronBtimesC.oms
include ABADerivative.oms
include symUTransposeTimesVKronVTimesU_der.oms
include symUTransposeTimesVKronVTimesU.oms
#
#
local Ok = novalue
local Nf = novalue



local function Fun(function Model, alp, b) begin
	#
	# evalute the model functions
	f      = true
	f_alp  = false
	f_b    = false
	R      = true
	R_alp  = false
	R_b    = false
	D      = false
	D_alp  = false
	if Ok then ...
		Ok = Model(alp, b, f, f_alp, f_b, R, R_alp, R_b, D, D_alp)
	if Ok then ...
		return {rvec(f), rvec(R)}
	else	return fill(0, (Nf + 1) *  Nf , 1)
end
#
local function Fun_f_alp(function Model, alp, b) begin
	nalp   = rowdim(alp)
	#
	# evalute the model functions
	f      = false
	f_alp  = true
	f_b    = false
	R      = false
	R_alp  = false
	R_b    = false
	D      = false
	D_alp  = false
	if Ok then ...
		Ok = Model(alp, b, f, f_alp, f_b, R, R_alp, R_b, D, D_alp)
	if Ok then ...
		return f_alp
	else	return fill(0, Nf, nalp)
end

local function Fun_R_alp(function Model, alp, b) begin
	nalp   = rowdim(alp)
	#
	# evalute the model functions
	f      = false
	f_alp  = false
	f_b    = false
	R      = false
	R_alp  = true
	R_b    = false
	D      = false
	D_alp  = false
	if Ok then ...
		Ok = Model(alp, b, f, f_alp, f_b, R, R_alp, R_b, D, D_alp)
	if Ok then ...
		return rvec(R_alp)
	else	return fill(0, Nf *  Nf, nalp)
end

#
local function Fun_f_b(function Model, alp, b) begin
	nb     = rowdim(b)
	#
	# evalute the model functions
	f      = false
	f_alp  = false
	f_b    = true
	R      = false
	R_alp  = false
	R_b    = false
	D      = false
	D_alp  = false
	if Ok then ...
		Ok = Model(alp, b, f, f_alp, f_b, R, R_alp, R_b, D, D_alp)
	if Ok then ...
		return f_b
	else	return fill(0,  Nf, nb)
end

local function Fun_R_b(function Model, alp, b) begin
	nb     = rowdim(b)
	#
	# evalute the model functions
	f      = false
	f_alp  = false
	f_b    = false
	R      = false
	R_alp  = false
	R_b    = true
	D      = false
	D_alp  = false
	if Ok then ...
		Ok = Model(alp, b, f, f_alp, f_b, R, R_alp, R_b, D, D_alp)
	if Ok then ...
		return  rvec(R_b)
	else	return fill(0, Nf * Nf, nb)
end
#

local function matrixdim( s , A ) begin
	print s , rowdim(A), coldim(A)
end

function ExpectedHessian( ...
	function Model, ...
	alp, ...
	b, bStep, ...
	HtildeOut, ...
	Htilde_alpOut, ...
	Htilde_bOut, ...
	withD ...
) begin
	# special do nothing case
	if not (HtildeOut or Htilde_alpOut or Htilde_bOut) then ...
		return true
	#
	# some constants
	nalp   = rowdim(alp)
	nb     = rowdim(b)
	#
	# evalute the model functions
	f      = true
	f_alp  = false
	f_b    = false
	R      = true
	R_alp  = Htilde_alpOut
	R_b    = Htilde_bOut
	if withD then begin
		D      = true
		D_alp  = Htilde_alpOut
	end	else begin
		D      = false
		D_alp  = false
	end
	Ok     = Model(alp, b, f, f_alp, f_b, R, R_alp, R_b, D, D_alp)
	if not Ok then begin
		stop
		return false
	end
	Nf     = rowdim(f)
	Rinv   = inv(R)
	if withD then begin
		Dinv   = inv(D)
	end
	#
	# approximation for f_b and R_b
	function H =  Fun(Model, alp)
	both       = cendiff(function H, b, bStep)
	if not Ok then begin
		stop
		return false
	end
	ftilde_b   = both.row(1, Nf)
	Rtilde_b   = both.row(Nf + 1, Nf * Nf)
	#
	# expected Hessian calculation
	if HtildeOut then begin
		term1     = ftilde_b' * Rinv * ftilde_b
		[ term2 , UVList ]     = symUTransposeTimesVKronVTimesU( Rtilde_b , Rinv )   
		HtildeOut = term1 + .5 * term2
		if withD then begin
			HtildeOut = HtildeOut + Dinv
		end
		if not (Htilde_alpOut or Htilde_bOut) then ...
			return true
	end
	#
	if Htilde_alpOut then begin
		function fi_alp = Fun_f_alp(Model, alp)
		ftilde_b_alp = TranCenDiff(function fi_alp, b, bStep)
		if not Ok then begin
			stop
			return false
		end

#matrixdim( "ftilde_b_alp = " , ftilde_b_alp )

		function Ri_alp = Fun_R_alp(Model, alp )
		Rcen_b_alp = cendiff(function Ri_alp, b, bStep)
		if not Ok then begin
			stop
			return false
		end

#matrixdim( "Rcen_b_alp  = " , Rcen_b_alp  )


		Rinv_alp      = - AkronBtimesC(Rinv, Rinv, R_alp)
		term1_alp     = ABADerivative(ftilde_b, Rinv, ftilde_b_alp, Rinv_alp)
		term2_alp     = symUTransposeTimesVKronVTimesU_der(  ...
					Rtilde_b , Rinv , UVList , Rinv_alp , Rcen_b_alp )

		Htilde_alpOut = term1_alp + .5 * term2_alp
		if withD then begin
			Htilde_alpOut = Htilde_alpOut - AkronBtimesC(Dinv, Dinv, D_alp)
		end
	end
	#
	if Htilde_bOut then begin
		function fi_b = Fun_f_b(Model, alp)
		ftilde_b_b = TranCenDiff(function fi_b, b, bStep)
		if not Ok then begin
			stop
			return false
		end

#matrixdim( "ftilde_b_b = " , ftilde_b_b  )

		function Ri_b = Fun_R_b(Model, alp )
		Rcen_b_b = cendiff(function Ri_b, b, bStep)
		if not Ok then begin
			stop
			return false
		end

#matrixdim( "Rcen_b_b = " , Rcen_b_b  )


		Rinv_b      = - AkronBtimesC(Rinv, Rinv, R_b)
		term1_b     = ABADerivative(ftilde_b, Rinv, ftilde_b_b, Rinv_b)
		term2_b     =  symUTransposeTimesVKronVTimesU_der(  ...
					Rtilde_b , Rinv , UVList , ...
                              Rinv_b , Rcen_b_b )
		Htilde_bOut = term1_b + .5 * term2_b
	end
	return true
end

end # blocking for automatic include
