clear
format double "e10.2"
include CompChamberMuscle.oms
#
# The following parameters can be changed.
# The local in front of the assignments to make them local to this file
# and visible to all the routines in this file.
#
local InputFile = "MuscleSet1.txt" # input data file
local N    = 20      # number of eigen functions in representation of F(t)
local M    = 100      # maximum number of input values (average to get this many)
#
# This flag needs to agree with its value in SmoothSpline
local BradsVersion = true # using Brads version of the theta optimizer
#
Fe    = 0.0125       # consumption rate for electrode, nmoles/sec
Fb    = 0.00048      # initial estimate of baseline muscle consumption, nmoles/sec
Vc    = 5.4          # volume of chamber, mL
C0    = 1119.41/Vc   # initial estimate of initial concentration in chamber, nmoles/mL
#
#------------------------------------------
# Read data file
[Time, Mass] = ReadCalibration(InputFile)
if( rowdim(Time) < M ) then ...
	M = rowdim(Time)
else begin
	Navg  = int( rowdim(Time) / M )
	Time  = Time(1 :: (Navg * M))
	Mass  = Mass(1 :: (Navg * M))
	dim Time(Navg, M)
	dim Mass(Navg, M)
	Time = colmean(Time)'
	Mass = colmean(Mass)'
end
#------------------------------------------
function [Fval] = F(Tf, a, t) begin
	N      = rowdim(a)
	angle  =   (PI * t / Tf) * (seq(N)' - 0.5d0)
	Fval   =  exp(  sqrt(2d0 / Tf) * sin(angle) * a  )
end
#------------------------------------------
# arguments to SmoothSpline
#
T            = Time(end)
y            = Mass / Vc
aIn          = zeros(N, 1)
aMax         = sqrt( T ) * log( 40d0 )
aEpsilon     = 1d-4 * aMax
aMitr        = 10
aLevel       = 0
thetaIn      = {  1d0 / T^2 , C0, Fb}
thetaStep    = 1d-1 * thetaIn
thetaLevel   = 3
loopMax      = 4
converge     = false
sumItr       = 0
thetaMitr    = 1
while thetaMitr < loopMax and not converge begin
	#
	function callback = CompChamberMuscle(Fe, Vc, Time, y)
	if BradsVersion then ...
		thetaMax = thetaMitr * 5 * rowdim(thetaIn)^2
	else	thetaMax = thetaMitr
	[aOut, aNitrOut, thetaOut, thetaNOut] = SmoothSpline( ...
		function callback, ...
		T, ...
		y, ...
		aIn, ...
		aEpsilon, ...
		aMax, ...
		aMitr, ...
		aLevel, ...
		thetaIn, ...
		thetaStep, ...
		thetaMax, ...
		thetaLevel ...
		)
		converge  = thetaNOut <= thetaMax
		if thetaNOut <= thetaMax then ...
			sumItr = sumItr + thetaNOut
		else	sumItr = sumItr + thetaMax
		# --------------------------------------------
		ginit
		#
		gaddwin;
		Tf    = T(end)
		title = [ "Muscle O2 Consumption Rate: Itr =", ntoa(sumItr) ]
		gtitle(title)
		gxtitle("Seconds")
		gytitle("Nanomoles / Second")
		gplot(Time, F(Tf, aOut, Time))
		gyaxis("log")
		#
		gaddwin;
		title = [ "Chamber O2 Concentration: Itr =", ntoa(sumItr) ]
		gtitle(title)
		gxtitle("Seconds")
		gytitle("Nanomoles / Ml")
		Psi = callback(thetaOut, aOut)
		gcolor("black")
		gplot(Time, Psi)
		gstyle("circle", 1, 20)
		gplot(Time, y)
		#
		gupdate
		# --------------------------------------------
		thetaIn   = thetaOut
		thetaMitr = thetaMitr + 1
end