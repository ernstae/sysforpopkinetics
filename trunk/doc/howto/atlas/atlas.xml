<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[
  <!ENTITY uw "University of Washington">
  <!ENTITY dept "Department of Bioengineering">
]>
<article><title>BLAS and CLAPACK Installation</title>
 <articleinfo>
    <revhistory>
      <revision>
	<revnumber>1.0</revnumber>
	<date>March 9, 2004</date>
	<authorinitials>sh</authorinitials>
	<revremark>Initial version.</revremark>
      </revision>
    </revhistory>
  <abstract>
      <para>
      The SPK core library uses a few linear algebra routines from the
BLAS and from the small subset of C LAPACK standard implemented by the ATLAS project.  
This C implementation
should not be confused with the full C implementation of LAPACK 
that is widely distributed (ex. it is included in RedHat Linux distributions).  
The ATLAS's implementation of C LAPACK has different routine names and 
prototypes from the CLAPACK.
      </para>
  </abstract>
 </articleinfo>
  <sect1>
    <title>Background</title>
    <para>
    </para>
    <sect2>
      <title>ATLAS</title>
      <para>
ATLAS stands for Automatically Tuned Linear Algebra Software. ATLAS is both a research project and a software package. This FAQ describes the software package. ATLAS's purpose is to provide portably optimal linear algebra software. The current version provides a complete BLAS API (for both C and Fortran77), and a very small subset of the LAPACK API. For all supported operations, ATLAS achieves performance on par with machine-specific tuned libraries.  (<ulink url="http://www.netlib.org/atlas/">ATLAS homepage</ulink>)
      </para>
    </sect2>
    <sect2>
      <title>BLAS</title>
      <para>
The BLAS (Basic Linear Algebra Subprograms) are high quality "building block" routines for performing basic vector and matrix operations. Level 1 BLAS do vector-vector operations, Level 2 BLAS do matrix-vector operations, and Level 3 BLAS do matrix-matrix operations.  (<ulink url="http://www.netlib.org/blas/">BLAS homepage</ulink>)
      </para>
    </sect2>
    <sect2>
      <title>LAPACK</title>
      <para>
LAPACK (Linear Algebra PACKage) provides routines for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems. The associated matrix factorizations (LU, Cholesky, QR, SVD, Schur, generalized Schur) are also provided, as are related computations such as reordering of the Schur factorizations and estimating condition numbers. Dense and banded matrices are handled, but not general sparse matrices. In all areas, similar functionality is provided for real and complex matrices, in both single and double precision. (<ulink url="http://www.netlib.org/lapack/">LAPACK homepage</ulink> | <ulink url="http://www.netlib.org/clapack/">CLAPACK homepage</ulink>)
      </para>    
    </sect2>
  </sect1>
  <sect1>
    <title>Preparation</title>
    <para>
    The SPK core library uses a few linear algebra routines from the BLAS and the small subset 
of C LAPACK standard implemented by the ATLAS project.  The full LAPACK library is
implemented by CLAPACK as well.  However, we want the two LAPACK implementations to co-exist
peacefully.  The two have different interfaces. We use both implementations because:
1) the SPK core library needs only a few functions from the standard, which is covered by the ATLAS's,
2) the ATLAS's functions directly take column major order matrices, which 
keeps our code clean & simple & efficient, but
3) unfortunately the optimizer later developed by Brad uses eigen value functions
which are not yet implemented by ATLAS but provided by CLAPACK.
So, in our source code files, we would like to be able to include their headers 
(something) like this:
      <screen>
extern "C"{
  // ATLAS interfaces
  #include &lt;atlas/cblas.h&gt;
  #include &lt;atlas/clapack.h&gt;

  // CLAPACK interfaces
  #include &lt;lapack/f2c.h&gt;
  #include &lt;lapack/blaswrap.h&gt;
  #include &lt;lapack/clapack.h&gt;
}
      </screen>
      Here is the outline of what you have to do:
      <orderedlist>
        <listitem>
          <para>
Uninstall existing BLAS and CLAPACK if any.
          </para>
        </listitem>
        <listitem>
          <para>
Build and install the new ATLAS.
          </para>
        </listitem>
        <listitem>
          <para>
Build and install the new CLAPACK.
          </para>
        </listitem>
      </orderedlist>
    </para>
  </sect1>
  <sect1>
    <title>ATLAS Installation for The Entire Set of BLAS and a Subset of LAPACK</title>
    <para>
      <orderedlist>
        <listitem>
          <para>
          Go to <ulink url="http://www.netlib.org/atlas/">
          www.netlib.org/atlas</ulink> and download <filename>atlas3.6.0.tgz
          </filename> into <literal>/tmp/</literal> on your machine.
          </para>
        </listitem>
        <listitem>
          <para>
          Unpack the tarball as follows:
            <screen>
> cd /tmp/
> tar xvzf atlas3.6.0.tgz
            </screen>
          This will unpack the package into a new subdirectory, 
          <literal>ATLAS</literal>.  
          </para>
          <para>Then, change directory to <literal>ATLAS</literal>.
            <screen>
> cd ATLAS
            </screen>
          </para>
        </listitem>
        <listitem>
          <para>
          Collect information for the complilation/linkage/installation process by
          specifying a target, <literal>config</literal> which takes an 
          argument that tells the system which ANSII C compiler to use.
          Enter the following:
            <screen>
> make config CC=gcc
            </screen>
          The size of a display page will be asked.  Type in an appropriate value.
            <screen>
Enter number at top left of screen [0]: &lt;your answer&gt;
            </screen>
          Say "yes" to the following three questions unless you strongly disagree:
            <screen>
Have you scoped the errata file? [y]: y
Are you ready to continue? [y]: y
use express setup? [y]: y
            </screen>
          A information gathering process will begin.  
          At the end, you will be asked if you want to proceed
          with the values that are automatically collected.  Inspect
          the values displayed on screen and let it proceed in building
          (note: they use "installation" to mean "build") the libraries
          unless you find something obviously wrong.
          If you have said "no" to the last question "use express setup?", 
          you'd be prompted to answer to the questions like these:
            <screen>
   Enter Architecture name (ARCH) [Linux_P4]:
   Enter File creation delay in seconds [0]:
   Enter Top level ATLAS directory: [/home/Honda/downloads/ATLAS]:
   Enter Directory to build libraries in [$(TOPdir)/lib/$(ARCH)]:
   Enter Library name for ATLAS primitives [libatlas.a]:
   Enter Library name for the C interface to BLAS [libcblas.a]:
   Enter Library name for the Fortan77 interface to BLAS [libf77blas.a]:
   Enter F77 Linker [$(F77)]: 
   Enter F77 Link Flags [$(F77FLAGS)]:
   Enter ANSI C compiler (CC) [/usr/bin/gcc]:
   Enter C Flags (CCFLAGS) [-fomit-frame-pointer -O3 -funroll-all-loops]:
   Enter C compiler for generated code (MCC) [/usr/bin/gcc]:
   Enter C FLAGS (MMFLAGS) [-fomit-frame-pointer -O]:
   Enter C Linker [$(CC)]:
   Enter C Link Flags [$(CCFLAGS)]:
   Enter Archiver [ar]:
   Enter ARchiver flags [r]:
   Enter Ranlib [echo]:
   Enter BLAS library []:
   Enter General and system libs [-lm]:
            </screen>
          </para>
          <para>
          Upon the completion, you'll see a message like this:
            <screen>
Configuration completed successfully.  You may want to examine the make include
file (Make.Linux_P4) for accuracy before starting the install with the command:   
make install arch=Linux_P4
            </screen>
          </para>
        </listitem>
        <listitem>
          <para>
          Build the library by entering the following:
            <screen>
> make install arch=Linux_P4
            </screen>
          The string on the right hand side of <literal>arch</literal>
          assignment is arbitrary.  If you want to change it to something else,
          do it, but the consequent instructions will assume you replace
          the text "Linux_P$" with the string you chose here.
          </para>
        </listitem>
        <listitem>
          <para>
          Install the package (ie. libraries and headers).
            <screen>
> mv lib/Linux_P4/liblapack.a lib/Linux_P/libatlas_lapack.a
> su  (stay in the directory)
> 
> mkdir /usr/local/lib/atlas
> mkdir /usr/local/include/atlas
> cp lib/Linux_P4/libatlas.a /usr/local/lib/atlas
> cp lib/Linux_P4/libcblas.a /usr/local/lib/atlas
> cp lib/Linux_P4/libatlas_lapack.a /usr/local/lib/atlas
> cp lib/Linux_P4/libf77blas.a /usr/local/lib/atlas
> cp include/cblas.h /usr/local/include/atlas
> cp include/clapack.h /usr/local/include/atlas
> ln -s /usr/local/lib/atlas/libatlas.a /usr/local/lib/libatlas.a
> ln -s /usr/local/lib/atlas/libcblas.a /usr/local/lib/libcblas.a
> ln -s /usr/local/lib/atlas/libatlas_lapack.a /usr/local/lib/libatlas_lapack.a
> ln -s /usr/local/lib/atlas/libf77blas.a /usr/local/lib/libf77blas.a
            </screen>
          </para>
          <para>
          If gcc failed to find the libraries, that's probably
          because <literal>/usr/local/lib</literal> is not in the linker's
          normal search path.  You can fix this problem by including the
          library directory in the searc path.  Enter the following
          from the terminal.
            <screen>
> export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
            </screen>
          </para>
        </listitem>
        <listitem>
          <para>
          We want to test the above installation as well as testing
          the sanity of the built libraries.  To do that, let's make
          changes to a base Make input file so that the subsequent
          tests will be attempted to use libraries in the installed directory
          rather than the ones in /tmp/ATLAS/.
          Open <filename>ATLAS/Make.Linux_P4</filename> with an editor 
          and edit the lines where <literal>ATLASlib</literal>,
          <literal>CBLASlib</literal> and <literal>LAPACKlib</literal>
          variables are set to the followings:
            <screen>
ATLASlib  = -latlas
CBLASlib  = -lcblas
LAPACKlib = -latlas_lapack
            </screen>
          </para>
        </listitem>
        <listitem>
          <para>
          Run the tests included in the disctribution:
            <screen>
> make sanity_test arch=Linux_P4
            </screen>
          If all things go well, you'll see messages like these:
            <screen>
DONE BUILDING TESTERS, RUNNING:
SCOPING FOR FAILURES IN BIN TESTS:
fgrep -e fault -e FAULT -e error -e ERROR -e fail -e FAIL \
        bin/Linux_PII/sanity.out
8 cases: 8 passed, 0 skipped, 0 failed
4 cases: 4 passed, 0 skipped, 0 failed
8 cases: 8 passed, 0 skipped, 0 failed
4 cases: 4 passed, 0 skipped, 0 failed
8 cases: 8 passed, 0 skipped, 0 failed
4 cases: 4 passed, 0 skipped, 0 failed
8 cases: 8 passed, 0 skipped, 0 failed
4 cases: 4 passed, 0 skipped, 0 failed
DONE
SCOPING FOR FAILURES IN CBLAS TESTS:
fgrep -e fault -e FAULT -e error -e ERROR -e fail -e FAIL \
        interfaces/blas/C/testing/Linux_PII/sanity.out | \
                fgrep -v PASSED
make[1]: [sanity_test] Error 1 (ignored)
DONE
SCOPING FOR FAILURES IN F77BLAS TESTS:
fgrep -e fault -e FAULT -e error -e ERROR -e fail -e FAIL \
        interfaces/blas/F77/testing/Linux_PII/sanity.out | \
                fgrep -v PASSED
make[1]: [sanity_test] Error 1 (ignored)
DONE
            </screen>
          </para>
        </listitem>
        <listitem>
          <para>
          Done.  You may remove <filename>/tmp/ATLAS/</filename> entirely.
          </para>
        </listitem>
      </orderedlist>
    </para>
  </sect1>
  <sect1>
    <title>CLAPACK Installation for The Entire Set of LAPACK</title>
    <orderedlist>
      <listitem>
        <para>
        Go to <ulink url="http:/www.netlib.org/clapack/">www.netlib.org/clapack</ulink>
        and download <filename>clapack.tgz</filename>.
        </para>
      </listitem>
      <listitem>
        <para>
        Unpack <filename>clapack.tgz</filename> in /tmp.
          <screen>
> cd /tmp
> tar xvzf clapack.tgz
          </screen>
        This will unpack the package into a new subdirectory, <literal>CLAPACK</literal>.
        </para>
        <para>
        Then, change the directory to <literal>CLAPACK</literal>.
          <screen>
> cd CLAPACK
          </screen>
        </para>
      </listitem>
      <listitem>
        <para>
        The C binding for <literal>LAPACK</literal> (ie. <filename>libcbalswr.a</filename>)
        has to be built.  
        You are not allowed to access <emphasis>C</emphasis><literal>LAPACK</literal>
        without going though the wrappers.  
          <screen>
> cd BLAS/WRAP
> make
          </screen>
        Edit an input file to Make so that the ATLAS's BLAS library is
        referenced via the wrapper you just built in the previous step
        for the subsequent builts.
          <screen>
> cd ../.. (now you should be in /tmp/CLAPACK/)
> cp INSTALL/make.inc.LINUX make.inc
> vi make.inc
          </screen>
        Modify the <literal>BLASlib</literal> setting so that the followings
        libraries are linked exactly as they appear in the line:
          <screen>
BLASlib = ../WRAP/libcblaswr.a -lcblas -latlas
          </screen>
        </para>
      </listitem>
      <listitem>
        <para>
        Build the CLAPACK library, <filename>libclapack.a</filename>,
        incorporating the ATLAS's BLAS library.
          <screen>
> cd SRC
> make
> cd ..
          </screen>
        At this point, you have all libraries built:
        <filename>libclapack.a</filename>, <filename>libcblaswr.a</filename>,
        <filename>libF77.a</filename>, and <filename>libI77.a</filename>.
        You may skip the following step and jump ahead to installation
        if you are sure or do not care testing the builts.
        </para>
      </listitem>
      <listitem>
        <para>
        To test the built CLAPACK libraries, you first generate
        the matrix generation software.
          <screen>
> cd TESTING/MATGEN
> make
          </screen>
        Next, built the driver and run it.
          <screen>
> cd .. (in <filename>/tmp/CLAPACK/TESTING</filename>)
> make
          </screen>
        It has run the test and produced many <filename>.out</filename>
        output files.  Inspect the output files and verify nothing serious
        has occured.
        </para>
        <para>
        Build the archive containing the eigensystem routines, compile
        eigenroutine TIMING code, and the linear system TIMING code
        by doing:
          <screen>
> cd ../TIMING (in <filename>/tmp/CLAPACK/TIMING/</filename>).
> make
          </screen>
        Then, run the timing tests by doing:
          <screen>
> xlintims < sblasa.in > sblasa.out
> xlintims < sblasb.in > sblasb.out
> xlintims < sblasc.in > sblasc.out
          </screen>
        Inspect the <filename>.out</filename> output files.
        </para>
      </listitem>
      <listitem>
        <para>
        Install the libraries and headers.
          <screen>
> cd /tmp/CLAPACK
> su
> mkdir /usr/local/lib/lapack
> cp lapack_LINUX.a /usr/local/lib/lapack/liblapack.a
> cp F2CLIBS/libF77.a /usr/local/lib/lapack
> cp F2CLIBS/libI77.a /usr/local/lib/lapack
> cp BLAS/WRAP/libcblaswr.a /usr/local/lapack
> cd /usr/local/lib/
> ln -s lapack/liblapack.a .
> ln -s lapack/libF77.a .
> ln -s lapack/libI77.a .
> ln -s lapack/libcblaswr.a .

> mkdir /usr/local/include/lapack
> cp clapack.h /usr/local/include/lapack/
> cp BLAS/WRAP/f2c.h /usr/local/include/lapack
> cp BLAS/WRAP/blaswrap.h /usr/local/include/lapack
> cp BLAS/WRAP/fblaswrap.h /usr/local/include/lapack
         </screen>
        </para>
      </listitem>
      <listitem>
        <para>
        Done.  You may remove /tmp/CLAPACK/ entirely.
        </para>
      </listitem>
    </orderedlist>
  </sect1>
</article>
