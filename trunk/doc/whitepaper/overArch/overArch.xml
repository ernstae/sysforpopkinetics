<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
     "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[
  <!ENTITY uw "University of Washington">
  <!ENTITY dept "Department of Bioengineering">
]>
<article><title>An Architectural Overview of SPK</title>
  <articleinfo>
    <revhistory>
      <revision>
	<revnumber>1.0</revnumber>
	<date>July 4, 1776</date>
	<authorinitials>afw</authorinitials>
	<revremark>Initial version.</revremark>
      </revision>
    </revhistory>
    <abstract>
      <para>
      </para>
    </abstract>
  </articleinfo>
  <sect1>
    <title>What the Architecture Supports</title>
    <para>
      The System for Population Kinetics (SPK) is software being developed
      by the RFPK Laboratory, in the Bioengineering Department of the 
      University of Washington, under a grant from the National Institutes
      of Health (NIH) of the U.S. Department of Health and Human Services.
    </para>
    <sect2>
      <title>The Problem to be Solved</title>
      <para>
	To better understand and to predict the operation of biological
	systems, researchers design mathematical models which they 
	believe will closely conform to the observational data.  The
	equations that comprise these models contain parameters whose
	values must be determined by "fitting" the equations to real-world
	data.  In the biomedical field of population kinetics (PK), a methodology
	known as <emphasis>nonlinear mixed-effects modeling</emphasis>,
	has been very successful.  This technique, when properly applied,
	can provide models which
	accurately project the behavior of an entire population from
	a small number of observations collected from a small sample 
	of individuals.  This makes this technology 
	very attactive in medicine and pharmaceutical 
	development, because collecting data from living subjects is a
	difficult, time-consuming, sometimes risky and, inevitably, expensive procedure.
      </para>
    </sect2>
    <sect2>
      <title>The Computational Challenge</title>
      <para>
	From a computational stand-point, the process of developing
	non-parametric mixed-effects models presents some interesting challenges.
	<itemizedlist>
	  <listitem>
	    <para>
	      Computing the parameters is highly processor intensive. In 
	      developing a model, it may be necessary
	      to perform the computation many times.  On a 
	      very fast workstation, each recalculation of the
	      model can take a week.  On a typical single processor workstation,
	      only one such calculation can be performed at a time.
	      Clearly, it would be desirable to offload the 
	      calculation to a specialized computational engine.
	      Going even further, it would be highly desirable
	      to distribute the calculation over a cluster of
	      processors, for parallel computation.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Although a high performance cluster is the ideal 
	      platform for model computation, it is unacceptable,
	      by itself, as a platform for model design and
	      results analysis.  Model design is a creative 
	      process, and the user needs appropriate tools to 
	      enhance this process.  The preferred platform
	      to support these tools is the same one the user
	      employs for other creative work, such as 
	      writing papers, preparing presentations, 
	      communicating with colleagues, etc.  In nearly
	      every case, this platform will be a personal computer
	      workstation or laptop running the user's preferred
	      operating system, whether Windows, Mac,or Linux.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Internet connectivity is just as important to the creative
	      designer of PK models as is the workstation or laptop
	      of her choice.  While a model's parameters are 
	      being computed, the user will be working on other models
	      or other unrelated work, but will need to monitor
	      the progress of her PK jobs in progress, as they are processed
	      to completion.  The user should be able, for example,
	      to submit a job
	      for computation at her office, obtain results and
	      submit a modified model at an airport enroute to a 
	      conference, and receive the completed work upon arrival
	      at her destination.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </sect2>
    <sect2>
      <title>SPK is a Web Service</title>
      <para>
	SPK is a service delivered to researchers via the world wide
	web, which enables them to develop PK models quickly and
	efficiently. The service is offered to a designated set of 
	users by an SPK service provider.  At the present time, the
	only SPK service provider is RPFK itself, but in the future
	there will, in all probability, be additional service providers
	located at both academic and commercial research laboratories.
      </para>
      <para>
	Although SPK can run on a single machine, its real power can
	only be realized when a high performance computational cluster
	is involved. Computer resources cost money, hence the SPK
	service will not be free. We believe that competition between
	service providers will, however, insure that pricing will 
	be fair.  In part to encourage the establishment of as many
	SPK installations as possible, SPK software will be distributed 
	free-of-charge under an open source license.
      </para>
    </sect2>
    <sect2>
      <title id="mda">The User Perspective</title>
      <para>
	The user's access to SPK is provided by two graphical user interface
	(GUI) programs.  One of these is simply the web browser of the user's
	choice, such as Internet Explorer, Mozilla, or Opera. 
	The other is a component of SPK called the Model
	Design Agent (MDA).
      </para>
      <para>
	The MDA is written in the Java language, so that
	it works under nearly any operating system, including 
	Windows, Linux, Macintosh.  The first time the user 
	accesses an SPK installation with her browser,
	she is lead through the downloading and installation 
	of the MDA and, if required,
	the Java runtime environment.  This only takes a few 
	minutes.  At the beginning of subsequent sessions, she
	does not need to download any software, unless updated 
	versions are available, in which case, the download and 
	installation occur automatically.
      </para>
      <para>
	The following is an abbreviated list of functions that a 
	user can perform with the assistance of the MDA:
	<itemizedlist>
	  <listitem>
	    <para>
	      Specify a new model and save it in a central database
	      maintained by the service provider.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Update an existing model to create a new version.
	      The new version does not destroy its predecessor.
	      Instead, all versions are preserved by means of a 
	      revision control system.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Import or create a dataset and save it in the central
	      database.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Update a dataset, creating a new version.  Datasets
	      are also maintained by the revision control system.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Combine a model, dataset or dataset simulation parameters.
	      initial estimates of model parameters
	      and some additional information to create a job and
	      submit it for transformation into an executable program and
	      subsequent running on the computational engine.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Check the status of all jobs that the user has submitted.
	      At a given moment in time, a job can be
	      <itemizedlist>
		<listitem>
		  <para>
		    In a queue, waiting to be transformed into a C++
		    program by the SPK compiler.
		  </para>
		</listitem>
		<listitem>
		  <para>
		    Being processed by the SPK compiler.
		  </para>
		</listitem>
		<listitem>
		  <para>
		    In queue, waiting to be transformed from C++ into
		    executable binary code and then run on the computational
		    engine.
		  </para>
		</listitem>
		<listitem>
		  <para>
		    Being processed by the computational engine.
		  </para>
		</listitem>
		<listitem>
		  <para>
		    At end.  Report available.
		  </para>
		</listitem>
	      </itemizedlist>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Provide a simple and convenient presentation of results.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Export results in forms required by other analysis and
	      visualization tools.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Create a new job by cloning a previous job, changing 
	      initial arguments, run parameters, method or dataset.
	      For example,  SPK currently supports four methods of 
	      calculation, including 
	      <emphasis>first order </emphasis>,
	      <emphasis>expected Hessian </emphasis>,
	      <emphasis>Laplace approximation </emphasis> and
	      <emphasis>Monte Carlo likelihood </emphasis>, 
	      sorted in order of increasing computational cost.
	      The user might want to start with a quick 
	      computation using the first order method, then
	      follow with one of the more expensive methods,
	      using as initial estimates the first order results.
	      The MDA makes this very convenient for users.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </sect2>
    <sect2>
      <title>The Service Provider Perspective</title>
      <para>
	The MDA, described in the section 
	<link linkend="mda">above</link>, is the
	<emphasis>client side</emphasis> of
	SPK.  Everything else is on the 
	<emphasis>server side</emphasis>, which is provided 
	by an <emphasis>SPK service provider</emphasis>.
        A service provider might simply be
	a function within an academic department. It might be a function 
	assumed by a campus-wide department of academic computing. The
	service provider might be part of the IT department of a commercial
	lab or pharmaceutical company.  It might be a function provided
	by a consulting organization to its clients. 
      </para>
      <para>
	There are, inevitably, costs involved with providing SPK service.
	In some cases, these costs are simply absorbed in departmental
	budgets or research grants.  In other cases, costs will be billed
	back to users. Commercial operations may want to build a profit in to the
	fees that they charge. At present, SPK software does not contain
	any functions that directly support billing.
      </para>
      <para>
	SPK does not require any predetermined set of computers.  It
	is, in fact, possible to run the entire system on a single 
	machine.  Other than for demonstration purposes, however,
	using a single machine does not make sense, because this
	brings insufficient computational power to bear. At RFPK,
	the server side consists of two server machines, plus a
	computational cluster.
      </para>
      <para>
	In discussing Internet software, one is just as likely to 
	apply the designation of <emphasis>server</emphasis> to a 
	program as to a machine. For example, the Apache Web Server
	is software, not hardware.  It is common for more than one
	software server to run on a single machine.  It is also common
	for a software server which requires a lot of resources to
	be replicated on multiple machines in order to share the
	load.
      </para>
      <para>
	From a software point of view,
	the server side of SPK consists of an
	application server, computational server, a web server and
	a database server. At RFPK, the web server is a separate 
	machine for security reasons, the application and database
	server share a machine, and the computational server a 
	computational cluster.
      </para>
      <para>
	All SPK server-side software is developed using the GNU software
	development tools to be portable to any
	Linux or Unix environment.  Unlike the client-side MDA,
	the server side cannot
	be run on Windows and Macintosh systems.
      </para>
      <para>
	Installing and operating
	the server side is non-trivial.  In the development of SPK,
	a strategic decision was made to move as much of the inherent
	complexity of the system onto the server side as possible, in 
	order to maximize the convenience to the end user.  The server side
	is no more complex, however, than comparable web-based applications,
	and well within the competence of system administrators typically
	found in university departments or commercial research facilities.
      </para>
      <para>
        SPK is distributed free-of-charge under an open source license.  
	This distribution stragegy reduces the risk to service providers,
	because they can modify or continue the development of SPK 
	independent of RFPK, if necessary.  On the other hand, RPFK 
	eagerly encourages collaborative development by all other 
	interested parties.
      </para>
    </sect2>
    <sect2>
      <title>The Software Developer Perspective</title>
      <para>
	RFPK uses the GNU Gcc compiler and many related tools to develop
	SPK server-side software, and the Standard Edition of Sun Java-2
	for the MDA. The MySQL relational database management system
	is a key component. Programming languages include C, C++,
	Perl, and Java. Source code is managed by the CVS revision control
	system.  All of the computers used in software development at
	RFPK run RedHat Enterprise Linux, version 3.
      </para>
      <para>
	One of the reasons for distributing SPK under an open source license
	is to encourage cooperative development of the software.  Any
	organization or individual has access to the source code and 
	the same open source development tools used by RFPK. A 
	development and test environment can be set up very inexpensively
	on a few PCs.  RPFK is eager to work with any serious co-developers.
      </para>
    </sect2>
    <sect2>
      <title>Current Status and Future Directions</title>
      <para>
	At the present time (June, 2004), SPK would have to be classed as 
	a <emphasis>beta</emphasis> product.  The only service provider is
	RFPK itself, and the only users are scientists associated with the
	lab.  It will be at least nine months before source code be well
	enough organized for general release.  The system is being tested
	in end-to-end mode and the initial results look good.
      </para>
      <para>
	In the coming months, these are some of the capabilities that
	will be added:
	<itemizedlist>
	  <listitem>
	    <para>
	      Support for model functions expressed as differential
	      equations. (At present, only algebraic functions are supported).
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Support for parallel computation.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Open source distribution of the software, via the
	      Internet.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Architectural Strategy</title>
    <para>
      The design of SPK is guided by certain architectural 
      principals:
      <orderedlist>
	<listitem>
	  <para>
	    <emphasis>Minimize dependencies between major modules</emphasis>.
	    It must be  possible to modify
	    a module with little or no impact on other
	    modules.  In practical terms, this means that all communication
	    between modules must be tightly controlled, fully documented,
	    and narrow-band.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <emphasis>Employ existing technologies whenever possible</emphasis>.
	    Among the technologies employed are the MySQL relational database
	    management system as the channel for all inter-server communication;
	    the Gnu versions of Lex and Yacc for building the SPK compiler;
	    the Xerces XML parser; the NetBeans IDE for building the graphical
	    user interface; Java WebStart for rich-client java technology;
	    the secure socket layer (SSL) to encrypt Internet communications;
	    RCS for version control.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <emphasis>Build security into every stage</emphasis>. Employ 
	    secure socket layer (SSL) security for connections across the
	    public internet; password security and session security for the
	    MDA; firewall security for the server network.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <emphasis>Incorporate only open source software</emphasis>.  
	    This is, or course, a requirement for open source distribution.  
	    Just as important, however, is that development resources are 
	    are not wasted on licensing issues and cost considerations.
	  </para>
	</listitem>
      </orderedlist>
    </para>
  </sect1>
  <sect1>
    <title>Software Architecture</title>
    <sect2>
      <title>The Database</title>
      <para>
	Architecturally, SPK software is built around a relational database.
	Every significant change in the state of the system is recorded there.
	For instance, a user's models and datasets are stored there. One 
	implication of this is the user can employ one workstation at the office,
	another at home and a third on the road without ever having to 
	"synchronize" them.  Because models and datasets are stored
	in a version control format, all versions of a model or dataset,
	from the first to the most recent, are available. 
      </para>
      <para>
	To have SPK compute model parameters, a user <emphasis>submits</emphasis>
	a job. Behind the scenes, the MDA passes a request to the web server
	which, in turn, creates a new row in the <emphasis>job table</emphasis> 
	of the database.  From that point onward, the application server and
	the computational server access the database for all of their inputs and
	outputs concerning that job. Finally, the computational results are accessed by the
	MDA via the web server
      </para>
      <para>
	<figure>
	  <title>Software Architecture</title>
	  <graphic scale="100" fileref="logical.png"/>
	</figure>
      </para>
      <para>
	The use of a database as the sole medium of communication between the 
	web server, the application server and the computational server is a
	powerful expression of the concept that inter-module communication paths
	should be very narrow and well defined, so that the modules themselves
	can be as independent as possible.
      </para>
      <para>
	The most important database fields concerning a job are formatted in
	XML, and conform precisely to specifications that SPK has developed 
	and which are  part of the open source release.  This is an example of the
	leverage obtained from the use of widely accepted techniques and
	standards.  Because SPK employs XML, it was not necessary to 
	develop a special-purpose parser.  Instead, the widely used
	Xerces parser is employed.
      </para>
    </sect2>
    <sect2>
      <title>The Lifecycle of a Job</title>
      <para>
	Central to the architecture of SPK is the concept of job lifecycle.
	Milestones in the life of a job are implemented as events in a
	finite state automaton, implemented by the three servers and the database.
      </para>
      <para>
	As shown in the following diagram, the web server submits a job that it
	has received from the MDA by adding a new row to the 
	<emphasis>job</emphasis> table of the database and entering the
	value <emphasis>queued to compile</emphasis> in the the <emphasis>state</emphasis>
	field of that row.
      </para>
      <para>
	Meanwhile the <emphasis>compiler daemon</emphasis>, which is a part of the
	application server, will have noticed the appearance of a new job with
	<emphasis>queued to compile</emphasis> status. When sufficent resources
	become available to the application server so that it can compile another
	job, the daemon will start an instance of the SPK compiler to transform
	the job specifications in the database into C++ code.  If the compilation
	completes without error, the daemon stores the resulting code in the
	job's database row and changes the job state to <emphasis>queued to run</emphasis>.
      </para>
      <para>
	As soon as the entry is changed in the database, another daemon, which is
	part of the computational server, will notice it. In due time, when resources
	become available and when the job is the highest priority job waiting with
	<emphasis>queued to run</emphasis> status, the <emphasis>run-time daemon</emphasis>
	will have the C++ code compiled and linked to form an executable binary and
	will start it running on the computational cluster.
      </para>
      <para>
	When the job's run is complete, the run-time daemon will store the results
	into the database and will change the job state to <emphasis>end</emphasis>.
      </para>
      <para>
	The next time the user checks the status of his jobs, either on his personal
	SPK web page or with the MDA, he will notice that a job has results available.
	He will use the MDA to transfer a copy of the results to his workstation
	for analysis, presentation, or export to other tools.
      </para>
      <para>
	<figure>
	  <title>Job State Diagram</title>
	  <graphic scale="100" fileref="job_state.png"/>
	</figure>
	
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title></title>
    <para>
    </para>
  </sect1>
  <sect1>
    <title></title>
    <para>
    </para>
  </sect1>
</article>
