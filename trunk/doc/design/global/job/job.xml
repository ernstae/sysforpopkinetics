<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "/usr/share/sgml/docbook/xml-dtd-4.2-1.0-14/docbookx.dtd" [
  <!ENTITY uw "University of Washington">
  <!ENTITY dept "Department of Bioengineering">
]>
<article><title>Job Life Cycle Model</title>
 <articleinfo>
    <revhistory>
      <revision>
	<revnumber>1.0</revnumber>
	<date>July 31, 2003</date>
	<authorinitials>afw</authorinitials>
	<revremark>Initial version.</revremark>
      </revision>
    </revhistory>
  <abstract>
      <para>
	The life cycle of an SPK job is represented as a
	finite state automaton.
      </para>
  </abstract>
 </articleinfo>
  <sect1>
    <title>Introduction</title>
    <para>
      A job is created when the user combines a model with data and
      submits this package to be run by Spk.  Submitting jobs is one
      of the functions of the Model Design Agent (MDA), the graphical
      interface that runs on the user's workstation.  The job is 
      sent via the Internet to the Application Server (ASPK) to be
      translated into computer source code.  Once compiled, it is 
      sent onward, via the Internet to the Computational Server (CSPK)
      to be translated into machine code and executed.
    </para>
    <para>
      The life cycle of a job can be represented as a sequence of
      states.  When a user inquires about the status of one of her
      outstanding jobs, the answer is based on its current state.
      The history
      of a job is the sequences of states it has assumed, along
      with the times of transition from one state to another and
      any outputs that have occurred.  The purpose of this document
      is to define the set of states that a job may pass through,
      and the rules governing transitions from one state to the
      next.
    </para>
  </sect1>
  <sect1>
    <title>Job State Diagram</title>
    <para>
      The following diagram represents the life cycle of a job as
      a finite state automaton.  Four kinds of elements are present:
      <itemizedlist>
	<listitem>
	  <para>
	    States are represented by boxes.  
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Transitions are represented by arrows.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    An event is represented by text appearing near the 
	    beginning of the arrow representing the transition 
	    caused by the event.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    An output is represented by text appearing near the
	    end of a transition arrow.  Not every transition 
	    produces output.  To further distinguish an output
	    from an event, the name of the output is preceded by
	    the '&gt;' character.
	  </para>
	</listitem>
      </itemizedlist>
      <figure>
	<title>Job State Diagram</title>
	<graphic fileref="job_state.png"/>
      </figure>
    </para>
  </sect1>
  <sect1>
    <title>Description of Elements</title>
    <para>
      <glosslist>
	<glossentry>
	  <glossterm>Begin</glossterm>
	  <glossdef>
	    <para>
	      This state is purely formal.  The job is in this state
	      until it is submitted.
	    </para>
	    <para>
	      <glosslist>
		<glossentry>
		  <glossterm>submitted</glossterm>
		  <glossdef>
		    <para>
		      This event occurs when the user commands the MDA
		      to submit the job.  At that time, the job enters
		      the <emphasis>Submitting</emphasis> state.
		    </para>
		  </glossdef>
		</glossentry>
	      </glosslist>
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>Submitting</glossterm>
	  <glossdef>
	    <para>
	      In this state, the job is in a sort of "limbo", which
	      persists until it has been received by the ASPK.
	      <glosslist>
		<glossentry>
		  <glossterm>received by ASPK</glossterm>
		  <glossdef>
		    <para>
		      This event occurs when the job has been received
		      by the ASPK.  It then makes the transition to the
		      <emphasis>Queued to compile</emphasis> state.
		    </para>
		    <para>
		      The transition produces <emphasis>output</emphasis>:
		      a job number and a priority.
		      The job number is unique for this
		      Spk installation for all time.
		    </para>
		  </glossdef>
		</glossentry>
	      </glosslist>
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>Queued to compile</glossterm>
	  <glossdef>
	    <para>
	      The job is waiting in a prioritized queue until sufficient
	      resources become available for the compiler to translate
	      it from model specifications to computer source code.
	      <glosslist>
		<glossentry>
		  <glossterm>selected</glossterm>
		  <glossdef>
		    <para>
		      occurs when compilation resources
		      are available, there is no job of higher priority
		      and there is no job of equal priority that has
		      been waiting longer.
		    </para>
		  </glossdef>
		</glossentry>
	      </glosslist>
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>Compiling</glossterm>
	  <glossdef>
	    <para>
	      The compiler is processing the model specification.<glosslist>
		<glossentry>
		  <glossterm>compiled error-free</glossterm>
		  <glossdef>
		    <para>
		      When this event occurs, the job is ready to be
		      queued for running
		    </para>
		  </glossdef>
		</glossentry>
		<glossentry>
		  <glossterm>compiled with errors</glossterm>
		  <glossdef>
		    <para>
		      If there are errors in the compilation, the
		      job cannot be queued to run.  Instead, the
		      next state is <emphasis>End</emphasis>.
		    </para>
		    <para>
		      An error report is output on this transition.
		    </para>
		  </glossdef>
		</glossentry>
	      </glosslist>
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>Queued to run</glossterm>
	  <glossdef>
	    <para>
	      The job is waiting in a prioritized queue for resources
	      to assigned to it so that it can run.
	      <glosslist>
		<glossentry>
		  <glossterm>selected to run</glossterm>
		  <glossdef>
		    <para>
		      The job is selected when sufficient resources
		      become available for it to run, there is no job
		      of higher priority in the queue, and there is 
		      no job of equal priority that has been waiting
		      longer.
		    </para>
		  </glossdef>
		</glossentry>
		<glossentry>
		  <glossterm>priority changed</glossterm>
		  <glossdef>
		    <para>
		      The priority of the job is changed.  It makes
		      the transition back to the same state, but with
		      the new priority.
		    </para>
		  </glossdef>
		</glossentry>
	      </glosslist>
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>Running</glossterm>
	  <glossdef>
	    <para>
	      The Computational Server (CSPK) is executing the job.
	      <glosslist>
		<glossentry>
		  <glossterm>finished</glossterm>
		  <glossdef>
		    <para>
		      When finished (whether the problem converges
		      satisfactorily or not) the job comes to 
		      its <emphasis>End</emphasis> state. 
		    </para>
		    <para>
		      A report is output on this final transition.
		    </para>
		  </glossdef>
		</glossentry>
	      </glosslist>
	    </para>
	  </glossdef>
	</glossentry>
	<glossentry>
	  <glossterm>End</glossterm>
	  <glossdef>
	    <para>
	      This is the final state of every job.
	    </para>
	  </glossdef>
	</glossentry>
      </glosslist>
    </para>
  </sect1>
</article>
