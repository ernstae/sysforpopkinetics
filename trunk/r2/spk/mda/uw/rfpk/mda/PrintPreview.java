/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda;

import java.awt.*;
import java.awt.print.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.geom.*;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;

/**
 * This class defines a print preview dialog.
 * @author  jiaji
 */
public class PrintPreview extends javax.swing.JDialog {
    
    /** Creates new form PrintPreview.
     * @param parent the owner of the dialog.
     * @param printer the Printable object whose print() method draws the graph.
     * @param pageFormat the PageFormat object that defins the page format. 
     */
    public PrintPreview(JFrame parent, Printable printer, PageFormat pageFormat) 
    {
        super(parent, "Print Preview", true);
        initComponents();
        this.printer = printer;
        this.pageFormat = pageFormat;
        Container contentPane = getContentPane();
        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
        JPanel thePage = new PrintPreviewPanel();
        int width = 500;
        int height = (int)(width * (pageFormat.getHeight() / pageFormat.getWidth()));
        thePage.setPreferredSize(new Dimension(width, height));
        contentPane.add(thePage);
        
        JButton printButton = new JButton("Print");
        JButton closeButton = new JButton("Close");
        printButton.addActionListener(new PagePrinter(true));
        closeButton.addActionListener(new PagePrinter(false));
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(printButton);
        buttonPanel.add(closeButton);
        buttonPanel.setAlignmentX(1.0f);
        contentPane.add(buttonPanel);
        
        Point windowCorner = parent.getLocationOnScreen();
        setLocation(windowCorner.x + 50, windowCorner.y + 30);
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        
        pack();
    }//GEN-END:initComponents
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        isCancelled = true;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    private class PrintPreviewPanel extends JPanel
    {
        public void paintComponent(Graphics gc) 
        {
            // Ask the superclass to do its work first, then set our 
            // basic color scheme
            super.paintComponent(gc);
            Graphics2D gc2D = ((Graphics2D)gc);        
        
            double xOff;
            double yOff;
            double scale;
            
            double px = pageFormat.getWidth();
            double py = pageFormat.getHeight();
            double sx = getWidth() - 1;
            double sy = getHeight() - 1;
            
            if(px / py > sx / sy)
            {
                scale = sy / py;
                xOff = 0.5 * (sx - scale *px);
                yOff = 0;
            }
            else
            {
                scale = sx / px;
                xOff = 0;
                yOff = 0.5 * (sy - scale *py);
            }
            
            gc2D.translate((float)xOff, (float)yOff);
            gc2D.scale((float)scale, (float)scale);
            
            // Draw page outline
            Rectangle2D pageArea = new Rectangle2D.Double(0, 0, px, py);
            gc2D.setPaint(Color.white);
            gc2D.fill(pageArea);
            gc2D.setPaint(Color.black);
            gc2D.draw(pageArea);
            
            Stroke oldStroke = gc2D.getStroke();
            Rectangle2D printArea = new Rectangle2D.Double(pageFormat.getImageableX(), 
                                                           pageFormat.getImageableY(),
                                                           pageFormat.getImageableWidth(), 
                                                           pageFormat.getImageableHeight());
            gc2D.setStroke(new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL,
                                           1.0f, new float[]{4.0f, 4.0f}, 0.0f));
            gc2D.draw(printArea);
            gc2D.setStroke(oldStroke);
            gc2D.setClip(printArea);
            
            try
            {
                printer.print(gc2D, pageFormat, 0);
            }
            catch(PrinterException e)
            {
                JOptionPane.showMessageDialog(null, "Error in printing", "Printing Error", 
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private class PagePrinter implements ActionListener
    {
        public PagePrinter(boolean isPrint)
        {
            this.isPrint = isPrint;
        }
        
        public void actionPerformed(ActionEvent e) 
        {
            isCancelled = !isPrint;
            setVisible(false);
            dispose();
        }
        
        private boolean isPrint;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private Printable printer;
    private PageFormat pageFormat;
    /** Is the printing cancelled */ 
    protected boolean isCancelled = false;
}
