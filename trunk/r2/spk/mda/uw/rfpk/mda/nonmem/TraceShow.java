/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem;

import uw.rfpk.mda.Plotter;
import uw.rfpk.mda.nonmem.MDAFrame;
import uw.rfpk.mda.nonmem.Output;
import java.awt.Color;
import java.awt.Font;
import java.awt.Cursor;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import java.util.regex.*;
import java.util.Vector;
import javax.help.*;

/** This class displays trace.
 *
 * @author  Jiaji Du
 */
public class TraceShow extends javax.swing.JDialog {
    
    /**
     * Creates new form TraceShow.
     * @param parent the MDA frame.
     * @param jobId the ID number of the job.
     */
    public TraceShow(MDAFrame parent, long jobId) {
        super(parent, false);
        frame = parent;
        frame.jobInfo.jButton16.setEnabled(false);
        for(int i = 0; i < name.length; i++)
            model.addElement(name[i]);
        initComponents();
//        helpButton.addActionListener(new CSH.DisplayHelpFromSource(((MDAFrame)parent).getHelpBroker()));
//        CSH.setHelpIDString(helpButton, "")
        this.jobId = jobId;
      
        frames = new JFrame[5];
        dataX = new double[5][1][];
        dataY = new double[5][1][];
        
        ActionListener taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) 
            {
                display();
            }
        };
        timer = new Timer(30000, taskPerformer);
        timer.setRepeats(true);
        
        setTitle("Trace for job " + jobId);
        setSize(300, 200);
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        plotList = new javax.swing.JList(model);
        jPanel1 = new javax.swing.JPanel();
        displayButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plot List");
        setLocationRelativeTo(this);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Please select.");
        jTextField1.setFocusable(false);
        getContentPane().add(jTextField1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(plotList);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        jPanel1.add(displayButton);

        helpButton.setText("Help");
        helpButton.setMaximumSize(new java.awt.Dimension(81, 25));
        helpButton.setMinimumSize(new java.awt.Dimension(81, 25));
        helpButton.setPreferredSize(new java.awt.Dimension(81, 25));
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        jPanel1.add(helpButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Help is not currently available for this topic.");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        selectedIndices = plotList.getSelectedIndices();
        if(selectedIndices.length == 0)
            return;
        
        for(int i = 0; i < 5; i++)
        {
            if(frames[i] != null)
            {
                frames[i].setVisible(false);
                frames[i].dispose();
                frames[i] = null;
            }
        }
        for(int i = 0; i < selectedIndices.length; i++)
        {
            final int j = selectedIndices[i];
            frames[j] = new JFrame();
            frames[j].setLocation(50 * i, 40 * i);
	    frames[j].setSize(500, 440);
	    frames[j].setTitle("Optimization Trace Job ID: " + jobId);
            frames[j].setFocusableWindowState(false);
            frames[j].addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(j);
            }
        });
        }
            
        timer.start();
        display();
        setCursor(null);
    }//GEN-LAST:event_displayButtonActionPerformed
    
    private void exitForm(int j)
    {
        int[] indices = new int[selectedIndices.length - 1];
        int k = 0;
        for(int i = 0; i < selectedIndices.length; i++)
            if(selectedIndices[i] != j)
                indices[k++] = selectedIndices[i];
        selectedIndices = indices;
        if(selectedIndices.length == 0)  timer.stop();
    }
    
    private void display()
    {
        String trace = frame.server.getTrace(jobId);
        if(trace != null)
        {
            frame.setEditorTitle("Optimization Trace: Job-" + jobId);
            frame.setEditorText(trace);
//            frame.setEditorCaretPosition(0);
            parse(trace);
            plot();
            if(trace.indexOf("Optimal parameter values found.") != -1)
            {
                timer.stop();
                JOptionPane.showMessageDialog(null, "Optimal parameter values found.");
            }
            else if(trace.indexOf("exit code:") != -1)
            {
                timer.stop();
                JOptionPane.showMessageDialog(null, "The optimization has ended.");
            }
        }
        else
        {
            timer.stop();
            JOptionPane.showMessageDialog(null, "The job optimization trace was not found.");
        }
    }
    
    private void parse(String trace)
    {
        int n = selectedIndices.length;
        Vector<Vector<String>> lists = new Vector<Vector<String>>();
        for(int i = 0; i < n; i++)
            lists.add(new Vector<String>());
        if(trace.indexOf("Optimal") != -1)
            trace = trace.substring(0, trace.indexOf("Optimal"));
        String[] lines = trace.substring(trace.indexOf("k = 1")).trim().split("\n");
        for(int i = 0; i < lines.length; i++)
        {
            if(!lines[i].startsWith("k = "))
            {
                String[] items = lines[i].split(", ");
                for(int j = 0; j < items.length; j++)
                {
                    for(int k = 0; k < n; k++)
                    {
                        if(items[j].startsWith(code[selectedIndices[k]] + " = "))
                        {
                            lists.get(k).add(items[j].split(" = ")[1]);
                        }
                    }
                }
            }
        }
        for(int i = 0; i < n; i++)
        {
            int j = selectedIndices[i];
            int length = lists.get(i).size();
            dataX[j][0] = new double[length];
            dataY[j][0] = new double[length];
            int l = 0;
            for(int k = 0; k < length; k++)
            {
                double value = Double.parseDouble(lists.get(i).get(k));
                if(value != 0 || !isLog[j])
                {
                    if(isLog[j]) value = Math.abs(value);
                    dataY[j][0][l] = value;
                    dataX[j][0][l++] = (double)k + 1;
                }
            }
            if(l < length)
            {
                if(l > 0)
                {
                    double[] x = new double[l];
                    double[] y = new double[l];
                    for(int k = 0; k < length; k++)
                    {
                        x[k] = dataX[j][0][k];
                        y[k] = dataY[j][0][k];
                    }
                    dataY[j][0] = y;
                    dataX[j][0] = x;
                }
                else
                {
                    dataY[j] = null;
                    dataX[j] = null;
                }
            }
        }
    }
    
    private void plot()
    {
        
        for(int i = 0; i < selectedIndices.length; i++)
        {
            int j = selectedIndices[i]; 
            if(dataX[j] == null)
            {
                JOptionPane.showMessageDialog(null, "No valid data were found for the plot.");
                return;
            }
            Plotter plotter = new Plotter(dataX[j],
                                          dataY[j],
                                          name[j],
                                          "Iteration Number",
                                          label[j],
                                          new String[]{name[j]}, symbol, color,
                                          false, false, false, false, false, true, true,
                                          0, 0, null, null, null, null,
                                          5, 5, 6, 6, 4, 4, 4, 4, 0, 0, 0, 0,
                                          new Font("SansSerif", Font.BOLD, 14),
                                          new Font("SansSerif", Font.BOLD, 12),
                                          new Font("SansSerif", Font.BOLD, 11),
                                          new Font("SansSerif", Font.BOLD, 10),
                                          0, 0, 0, 0, true, true, false, isLog[j],
                                          false, 0, false, null,
                                          2, 2, frame, null);

            plotter.setToolTipText("");
            frames[j].getContentPane().add(plotter);
	    frames[j].setVisible(true);
        }
    }
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        timer.stop();
        frame.jobInfo.jButton16.setEnabled(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new TraceShow(null, 1).setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton displayButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList plotList;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel model = new DefaultListModel();
    private double[][][] dataX, dataY;
    private String[] code = new String[]{"f", "df", "r", "|s|", "dxMax"};
    private String[] name = new String[]{" f: current objective function ", " df: difference of objective function ", " r: value of trust regon radius ", 
                                         " |s|: norm of distance from solution ", " dxMax: norm of difference of solution "};
    private String[] label = new String[]{"f", "Log10 ( |df| )", "Log10 ( r )", "Log10 ( |s| )", "Log10 ( dxMax )"};
    private boolean[] isLog = new boolean[]{false, true, true, true, true};
    private int[] symbol = new int[]{0};
    private Color[] color = new Color[]{Color.red};
    private Timer timer;
    private long jobId;
    private int[] selectedIndices;
    private JFrame[] frames;
    private MDAFrame frame;
}
