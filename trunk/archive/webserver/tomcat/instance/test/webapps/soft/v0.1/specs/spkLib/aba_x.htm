<html><head>
<title>Derivative of A' * B * A</title>
<meta name="description" id="description" content="Derivative of A' * B * A">
<meta name="keywords" id="keywords" content=" Aba_x expected hessian ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_aba_x_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://depts.washington.edu/rfpk" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>main</option>
<option>general</option>
<option>ABA_x</option>
</select>
</td>
<td><a href="general.htm" target="_top">Prev</a>
</td><td><a href="aba_xva.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>main-&gt;</option>
<option>Notes</option>
<option>SpkModel</option>
<option>individual</option>
<option>population</option>
<option>statistical</option>
<option>simulation</option>
<option>general</option>
<option>glossary</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>general-&gt;</option>
<option>ABA_x</option>
<option>ABA_xVA</option>
<option>addition</option>
<option>AkronBtimesC</option>
<option>AkronBtimesCRef</option>
<option>AkronBtimesCVA</option>
<option>AkronItimesC</option>
<option>AkronItimesCVA</option>
<option>allTrue</option>
<option>allZero</option>
<option>backDiv</option>
<option>BlockAlloc</option>
<option>blockDiagonalDerivative</option>
<option>centdiff</option>
<option>centdiffVA</option>
<option>cholesky</option>
<option>countTrues</option>
<option>CovarianceClasses</option>
<option>elsq</option>
<option>elsqVA</option>
<option>elsqFuncOb</option>
<option>elsq_x</option>
<option>elsq_xVA</option>
<option>elsq_xDiag</option>
<option>elsq_xBlockDiag</option>
<option>DBL_EPS_EQUAL_MULT</option>
<option>det</option>
<option>detVA</option>
<option>divByScalar</option>
<option>DMclass</option>
<option>elementwiseAnd</option>
<option>elementwiseOr</option>
<option>File</option>
<option>FpErrorChecker</option>
<option>ModelFunction</option>
<option>ModelDerivative</option>
<option>getCol</option>
<option>getMulCols</option>
<option>getMulRows</option>
<option>getRow</option>
<option>getSubblock</option>
<option>identityNum</option>
<option>identityVA</option>
<option>IkronBtimesC</option>
<option>IkronBtimesCVA</option>
<option>inverse</option>
<option>inverseVA</option>
<option>inxToMax</option>
<option>isDblEpsEqual</option>
<option>isDmatEpsEqual</option>
<option>isGreaterThanOrEqualTo</option>
<option>isLessThanOrEqualTo</option>
<option>isSymmetric</option>
<option>matabs</option>
<option>matmaxScalar</option>
<option>matmaxMatrices</option>
<option>matminScalar</option>
<option>matminMatrices</option>
<option>mulByScalar</option>
<option>multiply</option>
<option>norm</option>
<option>Optimizer</option>
<option>pi</option>
<option>placeRows</option>
<option>printInMatrix</option>
<option>quasinewtonanybox</option>
<option>replaceIth</option>
<option>replaceJth</option>
<option>replaceSubblockDoubleMatrix</option>
<option>replaceSubblockValarray</option>
<option>rvec</option>
<option>rvecVA</option>
<option>rvecInverse</option>
<option>SpkError</option>
<option>SpkException</option>
<option>SpkValarray</option>
<option>subtraction</option>
<option>symmetrize</option>
<option>symmetrizeVA</option>
<option>System</option>
<option>transpose</option>
<option>transposeRef</option>
<option>transposeVA</option>
<option>transposeDerivative</option>
<option>transposeDerivativeVA</option>
<option>transposeRowBlocks</option>
<option>transposeRowBlocksVA</option>
<option>UTranTimesSymKronSymTimesU</option>
<option>UTranTimesSymKronSymTimesU_x</option>
<option>WarningsManager_constructor</option>
<option>WarningsManager_addWarning</option>
<option>WarningsManager_addWarningList</option>
<option>WarningsManager_clearAllWarnings</option>
<option>WarningsManager_anyWarnings</option>
<option>WarningsManager_getWarningList</option>
<option>WarningsManager_getAllWarnings</option>
</select>
</td>
<td>ABA_x</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Description</option>
<option>Arguments</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>Derivative of A' * B * A</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Prototype:</b>   </td><td align='left'  valign='top'>
  
<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;DoubleMatrix&nbsp;ABA_x(const&nbsp;DoubleMatrix&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;DoubleMatrix&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>B</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;DoubleMatrix&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>A_x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;DoubleMatrix&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>B_x</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code> </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>void&nbsp;ABA_x(const&nbsp;DoubleMatrix&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;DoubleMatrix&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>B</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;DoubleMatrix&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>A_x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;DoubleMatrix&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>B_x</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>C</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code> </td></tr><tr><td align='left'  valign='top'>


</td></tr>
</table>
<br>
<center><i>Copyright (C) 2002, University of Washington, Resource Facility for Population Kinetics. All Rights Reserved.

</i>
</center><code><span style='white-space: nowrap'><br>
</span></code><b><big><a name="Description" id="Description">Description</a></big></b>
<br>
Returns the derivative of 
<code><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>A</i>(<i>x</i>)'&nbsp;*&nbsp;<i>B</i>(<i>x</i>)&nbsp;*&nbsp;<i>A</i>(<i>x</i>)<br>
</span></code>where * denotes matrix multiplication and the prime ' denotes transpose. 
The values of A(x) and B(x) for the particular value of x are specified by A and B respectively. 
The derivatives of A(x) and B(x) for the particular value of x are specified by A_x and B_x respectively.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The resulting matrix has n*n by p dimensions.
<br>
<br>
<b><big><a name="Arguments" id="Arguments">Arguments</a></big></b>

<code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a m by n matrix.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>B</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a m by m matrix.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>A_x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a m*n by p matrix that represents a value of a derivative of A(x) with respect x.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>B_x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a m*m by p matrix that represents a value of a derivative of B(x) with respect x.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>C</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a n*n by p matrix that will hold the resulting matrix value.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
If you compile, link, and run the following program:
<code><font color="blue">
<span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;iostream&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;DoubleMatrix.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;ABA_x.h&quot;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;main()<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;std;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;double&nbsp;x[]&nbsp;=&nbsp;{1.0,&nbsp;2.0};<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Set&nbsp;A&nbsp;to:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[1]&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;x[0]&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;A(2,2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A.data()[0]&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A.data()[1]&nbsp;=&nbsp;x[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A.data()[2]&nbsp;=&nbsp;x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A.data()[3]&nbsp;=&nbsp;1.0;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Set&nbsp;B&nbsp;to:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;x[1]&nbsp;&nbsp;x[1]*x[1]&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;B(2,2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.data()[0]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.data()[1]&nbsp;=&nbsp;x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.data()[2]&nbsp;=&nbsp;x[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B.data()[3]&nbsp;=&nbsp;x[1]*x[1];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Therefore&nbsp;A_x&nbsp;is:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;A_x(4,2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A_x.fill(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A_x.data()[2]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A_x.data()[5]&nbsp;=&nbsp;1.0;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Therefore&nbsp;B_x&nbsp;is:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;&nbsp;2*x[1]&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;B_x(4,2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B_x.fill(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B_x.data()[1]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B_x.data()[6]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B_x.data()[7]&nbsp;=&nbsp;2.0*x[1];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;C=ABA_x&nbsp;should&nbsp;be:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1]^2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;*&nbsp;x[0]^2&nbsp;*&nbsp;x[1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[1]^2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1]&nbsp;+&nbsp;x[1]^2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]^2&nbsp;+&nbsp;2&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1]&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;[&nbsp;x[1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;*&nbsp;x[1]&nbsp;+&nbsp;x[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;expectedC(4,2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[0]&nbsp;=&nbsp;2.0&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1]*x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[1]&nbsp;=&nbsp;2.0&nbsp;*&nbsp;x[1]*x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[2]&nbsp;=&nbsp;2.0&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1]&nbsp;+&nbsp;x[1]*x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[3]&nbsp;=&nbsp;x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[4]&nbsp;=&nbsp;2.0&nbsp;*&nbsp;x[0]*x[0]&nbsp;*&nbsp;x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[5]&nbsp;=&nbsp;4.0&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[6]&nbsp;=&nbsp;x[0]*x[0]&nbsp;+&nbsp;2.0&nbsp;*&nbsp;x[0]&nbsp;*&nbsp;x[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedC.data()[7]&nbsp;=&nbsp;6.0&nbsp;*&nbsp;x[1]&nbsp;+&nbsp;x[0];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;C&nbsp;=&nbsp;ABA_x(A,&nbsp;B,&nbsp;A_x,&nbsp;B_x);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;C=&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
</span>
</font></code>
then it will display the following when it is run:
<code><font color="blue">
<span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;C=<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;8&nbsp;&nbsp;4&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;8&nbsp;&nbsp;8&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;8&nbsp;&nbsp;5&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;&nbsp;13&nbsp;]<br>
<br>
</span>
</font></code>

<hr>Input File: ../../spk/ABA_x.cpp

</body>
</html>
