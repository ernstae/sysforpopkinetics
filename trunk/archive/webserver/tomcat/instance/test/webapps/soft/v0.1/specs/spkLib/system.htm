<html><head>
<title>System Utilities Class</title>
<meta name="description" id="description" content="System Utilities Class">
<meta name="keywords" id="keywords" content=" System class Os system utilities platform dependent utility ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_system_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://depts.washington.edu/rfpk" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>main</option>
<option>general</option>
<option>System</option>
</select>
</td>
<td><a href="symmetrizeva.htm" target="_top">Prev</a>
</td><td><a href="transpose.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>main-&gt;</option>
<option>Notes</option>
<option>SpkModel</option>
<option>individual</option>
<option>population</option>
<option>statistical</option>
<option>simulation</option>
<option>general</option>
<option>glossary</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>general-&gt;</option>
<option>ABA_x</option>
<option>ABA_xVA</option>
<option>addition</option>
<option>AkronBtimesC</option>
<option>AkronBtimesCRef</option>
<option>AkronBtimesCVA</option>
<option>AkronItimesC</option>
<option>AkronItimesCVA</option>
<option>allTrue</option>
<option>allZero</option>
<option>backDiv</option>
<option>BlockAlloc</option>
<option>blockDiagonalDerivative</option>
<option>centdiff</option>
<option>centdiffVA</option>
<option>cholesky</option>
<option>countTrues</option>
<option>CovarianceClasses</option>
<option>elsq</option>
<option>elsqVA</option>
<option>elsqFuncOb</option>
<option>elsq_x</option>
<option>elsq_xVA</option>
<option>elsq_xDiag</option>
<option>elsq_xBlockDiag</option>
<option>DBL_EPS_EQUAL_MULT</option>
<option>det</option>
<option>detVA</option>
<option>divByScalar</option>
<option>DMclass</option>
<option>elementwiseAnd</option>
<option>elementwiseOr</option>
<option>File</option>
<option>FpErrorChecker</option>
<option>ModelFunction</option>
<option>ModelDerivative</option>
<option>getCol</option>
<option>getMulCols</option>
<option>getMulRows</option>
<option>getRow</option>
<option>getSubblock</option>
<option>identityNum</option>
<option>identityVA</option>
<option>IkronBtimesC</option>
<option>IkronBtimesCVA</option>
<option>inverse</option>
<option>inverseVA</option>
<option>inxToMax</option>
<option>isDblEpsEqual</option>
<option>isDmatEpsEqual</option>
<option>isGreaterThanOrEqualTo</option>
<option>isLessThanOrEqualTo</option>
<option>isSymmetric</option>
<option>matabs</option>
<option>matmaxScalar</option>
<option>matmaxMatrices</option>
<option>matminScalar</option>
<option>matminMatrices</option>
<option>mulByScalar</option>
<option>multiply</option>
<option>norm</option>
<option>Optimizer</option>
<option>pi</option>
<option>placeRows</option>
<option>printInMatrix</option>
<option>quasinewtonanybox</option>
<option>replaceIth</option>
<option>replaceJth</option>
<option>replaceSubblockDoubleMatrix</option>
<option>replaceSubblockValarray</option>
<option>rvec</option>
<option>rvecVA</option>
<option>rvecInverse</option>
<option>SpkError</option>
<option>SpkException</option>
<option>SpkValarray</option>
<option>subtraction</option>
<option>symmetrize</option>
<option>symmetrizeVA</option>
<option>System</option>
<option>transpose</option>
<option>transposeRef</option>
<option>transposeVA</option>
<option>transposeDerivative</option>
<option>transposeDerivativeVA</option>
<option>transposeRowBlocks</option>
<option>transposeRowBlocksVA</option>
<option>UTranTimesSymKronSymTimesU</option>
<option>UTranTimesSymKronSymTimesU_x</option>
<option>WarningsManager_constructor</option>
<option>WarningsManager_addWarning</option>
<option>WarningsManager_addWarningList</option>
<option>WarningsManager_clearAllWarnings</option>
<option>WarningsManager_anyWarnings</option>
<option>WarningsManager_getWarningList</option>
<option>WarningsManager_getAllWarnings</option>
</select>
</td>
<td>System</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Description</option>
<option>Constructors</option>
<option>Public Methods</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>System Utilities Class</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Prototype:</b>  N/A (All members are static)
</td></tr>
</table>
<br>
<center><i>Copyright (C) 2002, University of Washington, Resource Facility for Population Kinetics. All Rights Reserved.

</i>
</center><code><span style='white-space: nowrap'><br>
</span></code><b><big><a name="Description" id="Description">Description</a></big></b>

<code><font color="blue"><br>
System</font></code> class provides safe environment to execute system dependent utilities.

<br>
<br>
<b><big><a name="Constructors" id="Constructors">Constructors</a></big></b>
<br>
No constructors.  All members are static.

<br>
<br>
<b><big><a name="Public Methods" id="Public Methods">Public Methods</a></big></b>

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;std::string&nbsp;machine()<br>
</span></font></code>returns an all-lower-case string object indicating the name assigned to the machine.
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;std::string&nbsp;whoami()<br>
</span></font></code>returns a case-sensitive string object indicating the current user's login name.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;int&nbsp;howmanyCPU()<br>
</span></font></code>returns the number of processors built in to the current machine.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>Implementation Notes:  This method originally had a name <code><font color="blue">howmany</font></code>.
It turned out that G++ uses this name internally.  So, to make our life easier
when it comes to port the library, we changed the name to something else
that is more specific.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;char&nbsp;pathDelimiter()<br>
</span></font></code>returns a character used as the path delimiter on the current OS.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;File&nbsp;pwd();<br>
</span></font></code>returns the current directory as a <a href="file.htm" target="_top"><span style='white-space: nowrap'>File</span></a>
 object.
The File object will contain the directory path as its path and
empty string as its filename.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;void&nbsp;del(&nbsp;const&nbsp;File&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>target</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
</span></font></code><code><font color="blue"><span style='white-space: nowrap'><br>
static&nbsp;void&nbsp;del(&nbsp;const&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>target</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
</span></font></code>deletes a file specified by <i>target</i>.  If the file does not exist or the write
privilege to the file is not granted to the user, <code><font color="blue">del</font></code> throws 
a <code><font color="blue">SpkException</font></code> exception with the error code set to <code><font color="blue">SPK_STD_ERR</font></code> 
(see <a href="spkexception.htm" target="_top">SpkException Class</a> for details).

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;void&nbsp;ren(&nbsp;const&nbsp;File&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>source</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>after</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>changes the name of the file specified by <i>source</i> to <i>after</i>.
<i>after</i> must be a string object only specifying a new filename 
(ie. no path).  If <i>after</i> already exists, the existing file is
overwritten.  If the existing file is not writable by the user or
the path in which <i>after</i> (will) resides is
not, this method throws a SpkException whose last error code is 
set to <code><font color="blue">SpkError::SPK_STD_ERR</font></code>.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;std::string&nbsp;findfirst(const&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>filter</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>returns the filename of the file containing the specified string
found first in the directory embedded in <i>filter</i>. 
For example, the filename part of <i>filter</i> can contain wildcards (*)
or a specific filename.  If no file is found, an empty string is returned.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;bool&nbsp;exist(const&nbsp;char*&nbsp;fullname)<br>
</span></font></code>return true if <i>fullname</i> exists.  <i>fullname</i> can be
a filename alone, a path alone or a full path name.  This method does not 
check the access permission on the file.  It merely checks the
existence of <i>fullname</i>.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;int&nbsp;pid()<br>
</span></font></code>returns the current process id.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;int&nbsp;beginthread(&nbsp;void(&nbsp;__cdecl&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>start_address</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)(&nbsp;void&nbsp;*&nbsp;),&nbsp;unsigned&nbsp;</span></font></code><i><span style='white-space: nowrap'>stack_size</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;void&nbsp;*&nbsp;</span></font></code><i><span style='white-space: nowrap'>arg</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
</span></font></code>starts a new thread for a function located at <i>start_address</i> with the <code><font color="blue">void*</font></code> argument.  
It returns a non-negative number if successful.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;void&nbsp;endthread()<br>
</span></font></code>forcefully terminates all threads created with <code><font color="blue">System::beginthread(...)</font></code>.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;unsigned&nbsp;sleep(&nbsp;unsigned&nbsp;int&nbsp;</span></font></code><i><span style='white-space: nowrap'>sec</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
</span></font></code>suspends the calling thread until either the number of realtime seconds specified by <i>sec</i>
has elapsed or a signal is delivered to the calling thread and its action is to invoke a 
signal-catching function or to terminate the process.  
If sleep() returns because the requested time has elapsed, the value returned shall be 0. 
If sleep() returns due to delivery of a signal, the return 
value shall be the &quot;unslept&quot; amount (the requested time minus the time actually slept) in seconds.


<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;int&nbsp;spawnAsyncProcess(&nbsp;const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>executable_name</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>argv</span></i><code><font color="blue"><span style='white-space: nowrap'>[]&nbsp;)<br>
</span></font></code>creates a new asynchronous process running with the calling process.
It returns immediately after a new process is created (no wait till completion).
<code><span style='white-space: nowrap'><br>
<br>
</span></code><i>executable_name</i> is an executable (not a function) file name and
<i>argv[]</i> is a null-terminated list of pointers to c-style strings that are passed to
<i>executable_name</i>.  Note, however, argv[0] corresponds to the executable's name itself.
For example, if <i>executable_name</i> = <i>MyProgram.exe</i>, then
argv[0] = <i>MyProgram.exe</i> and argv[1..n] are arguments to the program.
argv[n+1] = NULL.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>If failed to spawn a new process and executes <i>executable_name</i>, 
this method returns a negated <code><font color="blue">errno</font></code>.  If succeeds, it 
returns a non-negative number.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;int&nbsp;spawnSyncProcess(&nbsp;const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>executable_name</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>argv</span></i><code><font color="blue"><span style='white-space: nowrap'>[]&nbsp;)<br>
</span></font></code>creates a new process running with the calling process and returns when the running
process completes.
<code><span style='white-space: nowrap'><br>
<br>
</span></code><i>executable_name</i> is an executable (not a function) file name and
<i>argv[]</i> is a null-terminated list of pointers to c-style strings that are passed to
<i>executable_name</i>.  Note, however, argv[0] corresponds to the executable's name itself.
For example, if <i>executable_name</i> = <i>MyProgram.exe</i>, then
argv[0] = <i>MyProgram.exe</i> and argv[1..n] are arguments to the program.
argv[n+1] = NULL.

<code><span style='white-space: nowrap'><br>
<br>
</span></code>If failed to spawn a new process and executes <i>executable_name</i>, 
this method returns a negated <code><font color="blue">errno</font></code>.  If succeeds, it 
returns a non-negative number.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
DEPLICATED!&nbsp;&nbsp;static&nbsp;int&nbsp;System::exec(const&nbsp;std::string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>cmd</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>executes <i>cmd</i> at the command line.  It returns 0 if succeeds or non zero if fails.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
static&nbsp;int&nbsp;System::createDirectory(&nbsp;const&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>path</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;);<br>
</span></font></code>creates a new directory with the directory name specified by <i>path</i>.
If the function succeeds, the return value is nonzero.  otherwise it is zero.
There is a default string size limit for paths of 248 characters.


<hr>Input File: ../../spk/System.cpp

</body>
</html>
