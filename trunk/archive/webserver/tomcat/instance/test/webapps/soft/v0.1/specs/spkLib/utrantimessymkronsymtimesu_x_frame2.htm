<html><head>
<title>Derivative of U^T (V kron V) U With Respect to x</title>
<meta name="description" id="description" content="Derivative of U^T (V kron V) U With Respect to x">
<meta name="keywords" id="keywords" content=" Utrantimessymkronsymtimesu_x expected hessian derivative "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="utrantimessymkronsymtimesu_x.htm" target="_top">section</a>, <a href="utrantimessymkronsymtimesu_x_frame2.htm" target="_top">frame</a></div>

<center><i>Copyright (C) 2002, University of Washington, Resource Facility for Population Kinetics. All Rights Reserved.

</i>
</center><code><span style='white-space: nowrap'><br>
</span></code><b><big><a name="Description" id="Description">Description</a></big></b>
<br>
Computes the derivative of U^T (V kron V) U with respect to x, 
where V denotes a square m by m matrix and U denotes
a m^2 by k matrix, for a special case where <b>V is symmetric</b>.  m must be greater
than zero and k must be greater than or equal to zero. x contains p number of variables.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>Upon a successful completion, the resulting array of matrix, <i>C_x[]</i> will
contain values based upon the following computation:
<code><font color="blue">
<span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<br>
&nbsp;&nbsp;&nbsp;&nbsp;Cij_x&nbsp;=&nbsp;(rvec(Ui&nbsp;*&nbsp;V))&nbsp;&nbsp;{rvec(V&nbsp;*&nbsp;Uj_x}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;{(rvec(Ui&nbsp;*&nbsp;V_x))&nbsp;&nbsp;+&nbsp;(rvec(Ui_x&nbsp;*&nbsp;V))&nbsp;&nbsp;}&nbsp;*&nbsp;rvec(V&nbsp;Uj)<br>
<br>
</span>
</font></code>
where Ui is a m by m matrix such that U[i] = rvec(Ui), where i points to the i-th column of U.  
Similarly, Uj is a matrix retrieved from the j-th column of U. 

<br>
<br>
<b><big><a name="Arguments" id="Arguments">Arguments</a></big></b>


<code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code><i><span style='white-space: nowrap'>V</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a m by m symmetric matrix.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>V_x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a m^2 times p matrix, where each column represents a rvec of a derivative of V with respect the i-th component of x.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>U</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is m * m by k matrix, where each column represents a rvec of a symmetric matrix.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>U_xTran</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a m^2*p by k matrix such that if dUi is the i-th column of U_xTran, rvecInverse(U_xTran, p) = Ui_x, where Ui_x is
a m*m by p matrix that denotes a rvec of the derivative of rvecInverse(U[i],m) with respect to x.
In the case that U = f(x,y)_y, for example, the argument U_xTran is f(x,y)_<b>x_y</b>, not f(x,y)_y_x.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>p</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>indicates the number of components in x.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'>[]<br>
</span></font></code>is a k sized array of matrices <code><span style='white-space: nowrap'><i>Uj</i>&nbsp;*&nbsp;<i>V</i></span></code>, for 0 &lt; j &lt;= k, formed during the calculation of the original function.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font></code><i><span style='white-space: nowrap'>C_x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a k*k by p matrix that will hold the resulting derivatives upon the successful completion of the calculation.
The ith column of C_x will contain a rvec of the derivative of C=U^T(V kron V)U with respect to x(1).

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
If you compile, link, and run the following program:

<code><font color="blue">
<span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;vector&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;cmath&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;transpose.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;multiply.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;replaceJth.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;DBL_EPS_EQUAL_MULT.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;symmetrize.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;add.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;rvecInverse.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;getCol.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;subtract.h&quot;<br>
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;UTranTimesSymKronSymTimesU_xTest::testUTranTimesSymKronSymTimesU_xEx()<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;std;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i,j,l,o;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;m&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;k&nbsp;=&nbsp;2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;p&nbsp;=&nbsp;2;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Initialize&nbsp;V:symmetric&nbsp;m&nbsp;by&nbsp;m&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;V(m,m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V.fill(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;j=0;&nbsp;j&lt;m;&nbsp;j++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i=j;&nbsp;i&lt;m;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V.data()[i+j*m]&nbsp;=&nbsp;i+j*m;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symmetrize(V,V);<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;V:&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Initialize&nbsp;U:&nbsp;m*m&nbsp;(rvec&nbsp;of&nbsp;symmetric)&nbsp;by&nbsp;k&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;U(m*m,&nbsp;k);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;Ui(m,m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;l=0;&nbsp;l&lt;k;&nbsp;l++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;j=0;&nbsp;j&lt;m;&nbsp;j++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i=j;&nbsp;i&lt;m;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ui.resize(m,m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ui.data()[i+j*m]&nbsp;=&nbsp;i+j*m+l;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symmetrize(Ui,&nbsp;Ui);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;replaceJth(U,&nbsp;l,&nbsp;rvec(Ui));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;U:&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Create&nbsp;C:&nbsp;k&nbsp;by&nbsp;k<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;C(k,k);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C.fill(0);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Create&nbsp;A[]:&nbsp;k&nbsp;number&nbsp;of&nbsp;m&nbsp;by&nbsp;m<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;DoubleMatrix&gt;&nbsp;A(k);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTranTimesSymKronSymTimesU(V,&nbsp;U,&nbsp;k,&nbsp;C,&nbsp;A.begin());<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;C:&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;A:&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i=0;&nbsp;i&lt;A.size();&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;A[&quot;&nbsp;&lt;&lt;&nbsp;i&nbsp;&lt;&lt;&nbsp;&quot;]=&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i].print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Initialize&nbsp;V_x:&nbsp;m*m&nbsp;(rvec&nbsp;of&nbsp;symmetric)&nbsp;by&nbsp;p&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;V_x(m*m,p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;V_xi(m,m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(l=0;&nbsp;l&lt;p;&nbsp;l++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;j=0;&nbsp;j&lt;m;&nbsp;j++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i=j;&nbsp;i&lt;m;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V_xi.resize(m,m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V_xi.data()[i+j*m]&nbsp;=&nbsp;i+j*m-l;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symmetrize(V_xi,&nbsp;V_xi);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;replaceJth(V_x,&nbsp;l,&nbsp;rvec(V_xi));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;V_x:&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V_x.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Initialize&nbsp;U_x:&nbsp;m*m*k&nbsp;by&nbsp;p&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;U_x(m*m*k,p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;U_xi(m*m,k);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;Ui_x(m*m,k);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;Ui_xj(m,m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(o=0;&nbsp;o&lt;p;&nbsp;o++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(l=0;&nbsp;l&lt;k;&nbsp;l++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;j=0;&nbsp;j&lt;m;&nbsp;j++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i=j;&nbsp;i&lt;m;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ui_xj.resize(m,m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ui_xj.data()[i+j*m]&nbsp;=&nbsp;i+j*m-2*l;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symmetrize(Ui_xj,&nbsp;Ui_xj);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;replaceJth(Ui_x,&nbsp;l,&nbsp;rvec(Ui_xj));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;replaceJth(U_x,&nbsp;o,&nbsp;rvec(Ui_x));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;U_x:&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U_x.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Create&nbsp;C_x:&nbsp;k*k&nbsp;by&nbsp;p<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;C_x(k*k,&nbsp;p);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Finally,&nbsp;call&nbsp;the&nbsp;derivative&nbsp;function.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTranTimesSymKronSymTimesU_x(V,V_x,&nbsp;U,&nbsp;U_x,&nbsp;p,&nbsp;A.begin(),&nbsp;C_x);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;C_x:&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C_x.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
</span>
</font></code>
then it will display the following when it is run:
<code><font color="blue">
<span style='white-space: nowrap'><br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;V:<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;1&nbsp;2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;4&nbsp;5&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;5&nbsp;8&nbsp;]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;U:<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;3&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;4&nbsp;5&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;5&nbsp;6&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;3&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;5&nbsp;6&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;8&nbsp;9&nbsp;]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;C:<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;19400&nbsp;23340&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;23340&nbsp;28064&nbsp;]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;A:<br>
&nbsp;&nbsp;&nbsp;&nbsp;A[0]=<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;5&nbsp;14&nbsp;21&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;14&nbsp;42&nbsp;62&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;21&nbsp;62&nbsp;93&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;A[1]=<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;8&nbsp;24&nbsp;&nbsp;36&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;17&nbsp;52&nbsp;&nbsp;77&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;24&nbsp;72&nbsp;108&nbsp;]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;V_x:<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;0&nbsp;-1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;1&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;4&nbsp;&nbsp;3&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;5&nbsp;&nbsp;4&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;2&nbsp;&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;5&nbsp;&nbsp;4&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;8&nbsp;&nbsp;7&nbsp;]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;U_x:<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;-2&nbsp;-2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;-1&nbsp;-1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;-1&nbsp;-1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;5&nbsp;&nbsp;5&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;3&nbsp;&nbsp;3&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;5&nbsp;&nbsp;5&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;3&nbsp;&nbsp;3&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;8&nbsp;&nbsp;8&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;6&nbsp;&nbsp;6&nbsp;]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;C_x:<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;77600&nbsp;53960&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;89420&nbsp;62208&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;89420&nbsp;62208&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;103026&nbsp;71520&nbsp;]<br>
<br>
<br>
</span>
</font></code>

<hr>Input File: ../../spk/UTranTimesSymKronSymTimesU_x.cpp

</body>
</html>
