<html><head>
<title>Equivalent Individual Model Class</title>
<meta name="description" id="description" content="Equivalent Individual Model Class">
<meta name="keywords" id="keywords" content=" Eqindmodel Individual Model Class "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'><a href="fitpopulation.htm" target="_top">previous</a>
&nbsp;&nbsp;<a href="eqindmodel_eqindmodel.htm" target="_top">next</a>
&nbsp;&nbsp;<a href="_contents.htm" target="_top">contents</a>
&nbsp;&nbsp;<a href="_reference.htm" target="_top">reference</a>
&nbsp;&nbsp;<a href="_index.htm" target="_top">index</a>
&nbsp;&nbsp;<a href="_search.htm" target="_top">search</a>
&nbsp;&nbsp;<a href="_external.htm" target="_top">external</a>
&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="eqindmodel.htm" target="_top">section</a>, <a href="eqindmodel_frame1.htm" target="_top">frame</a></div>
<hr><center><b><big><big>Equivalent Individual Model Class</big></big></b></center>
<br>
<b><big><a name="Description" id="Description">Description</a></big></b>

<code><font color="blue"><br>
EqIndModel</font></code> is a sub-class of <a href="spkmodel.htm" target="_top"><span style='white-space: nowrap'>SpkModel</span></a>
 class.
It is declared in <code><font color="blue">EqIndModel.h</font></code>.

   
and used in the function firstOrderOpt in Spk library for  
population analysis.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>This class is an equivalent individual Spk model class constructed from a 
population Spk model class.  The construction of the class is based on 
first-order approximation for the mean and the data variance functions by

<code><span style='white-space: nowrap'><br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~<br>
<i>f</i>&nbsp;&nbsp;(<i>alp</i>,&nbsp;<i>b</i>)&nbsp;=&nbsp;<i>f</i>(<i>alp</i>,&nbsp;0)&nbsp;+&nbsp;<i>d</i>&nbsp;<i>f</i>(<i>alp</i>,&nbsp;0)<i>b</i>,<br>
&nbsp;<i>FO</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>b</i>&nbsp;<br>
<br>
<i>R</i>&nbsp;&nbsp;(<i>alp</i>,&nbsp;<i>b</i>)&nbsp;=&nbsp;<i>R</i>(<i>alp</i>,&nbsp;0).<br>
&nbsp;<i>FO</i><br>
<br>
</span></code><b><big><a name="Reference" id="Reference">Reference</a></big></b>
<br>
B. M. Bell, <i>Approximating The Marginal Likelihood Estimate 
For Models With Random Parameters</i>, Applied Mathematics and Computation, 
119 (2001) 57-75.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="eqindmodel_eqindmodel.htm" target="_top">EqIndModel_EqIndModel</a></td><td>Constructor</td></tr><tr><td><a href="eqindmodel_setindpar.htm" target="_top">EqIndModel_setIndPar</a></td><td>Set&nbsp;Individual&nbsp;Parameter</td></tr><tr><td><a href="eqindmodel_datamean.htm" target="_top">EqIndModel_dataMean</a></td><td>Model&nbsp;for&nbsp;the&nbsp;Data&nbsp;Mean</td></tr><tr><td><a href="eqindmodel_datamean_indpar.htm" target="_top">EqIndModel_dataMean_indPar</a></td><td>Model&nbsp;for&nbsp;the&nbsp;Derivative&nbsp;of&nbsp;Data&nbsp;Mean&nbsp;with&nbsp;respect&nbsp;to&nbsp;Individual&nbsp;Parameter</td></tr><tr><td><a href="eqindmodel_datavariance.htm" target="_top">EqIndModel_dataVariance</a></td><td>Model&nbsp;for&nbsp;the&nbsp;Data&nbsp;Variance</td></tr><tr><td><a href="eqindmodel_datavariance_indpar.htm" target="_top">EqIndModel_dataVariance_indPar</a></td><td>Model&nbsp;for&nbsp;the&nbsp;Derivative&nbsp;of&nbsp;Data&nbsp;Variance&nbsp;with&nbsp;respect&nbsp;to&nbsp;Individual&nbsp;Parameter</td></tr></table><br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The following code demonstrates an application of the EqIndModel class.
If you enter

<code><font color="blue">
<span style='white-space: nowrap'><br>
<br>
#include&nbsp;&quot;DoubleMatrix.h&quot;<br>
#include&nbsp;&quot;EqIndModel.h&quot;<br>
#include&nbsp;&quot;SpkModel.h&quot;<br>
#include&nbsp;&lt;iostream&gt;<br>
#include&nbsp;&lt;iomanip&gt;<br>
#include&nbsp;&lt;cmath&gt;<br>
<br>
using&nbsp;namespace&nbsp;std;&nbsp;<br>
<br>
/*************************************************************************<br>
&nbsp;*<br>
&nbsp;*&nbsp;Class&nbsp;of&nbsp;the&nbsp;population&nbsp;level&nbsp;original&nbsp;SpkModel&nbsp;object<br>
&nbsp;*<br>
&nbsp;*************************************************************************/<br>
<br>
class&nbsp;TestModel&nbsp;:&nbsp;public&nbsp;SpkModel<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;valarray&lt;double&gt;&nbsp;_a,&nbsp;_b;<br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;_i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;_nA;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;_nB;<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;_nYi;<br>
public:<br>
&nbsp;&nbsp;&nbsp;&nbsp;TestModel(int&nbsp;nA,&nbsp;int&nbsp;nB,&nbsp;int&nbsp;nYi)&nbsp;:&nbsp;_nA(nA),&nbsp;_nB(nB),&nbsp;_nYi(nYi)&nbsp;{};&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;~TestModel(){};<br>
private:<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;doSelectIndividual(int&nbsp;inx)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_i&nbsp;=&nbsp;inx;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;doSetPopPar(const&nbsp;valarray&lt;double&gt;&amp;&nbsp;aval)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_a&nbsp;=&nbsp;aval;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;doSetIndPar(const&nbsp;valarray&lt;double&gt;&amp;&nbsp;bval)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_b&nbsp;=&nbsp;bval;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;doIndParVariance(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;D&nbsp;=&nbsp;[&nbsp;alp[1]&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nB&nbsp;*&nbsp;_nB);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;_a[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;doIndParVariance_popPar(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;D_alp&nbsp;=&nbsp;[&nbsp;0&nbsp;&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nB&nbsp;*&nbsp;_nB&nbsp;*&nbsp;_nA);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;0.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[1]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;doDataMean(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;f&nbsp;=&nbsp;[&nbsp;alp[0]&nbsp;+&nbsp;exp(&nbsp;b[0]&nbsp;)&nbsp;+&nbsp;i&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nYi);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;(&nbsp;_a[0]&nbsp;+&nbsp;exp(&nbsp;_b[0]&nbsp;)&nbsp;+&nbsp;_i&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;doDataMean_popPar(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;f_alp&nbsp;=&nbsp;[&nbsp;1&nbsp;&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nYi&nbsp;*&nbsp;_nA);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[1]&nbsp;=&nbsp;0.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;doDataMean_indPar(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;f_b&nbsp;=&nbsp;[&nbsp;exp(&nbsp;b[0]&nbsp;)&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nYi&nbsp;*&nbsp;_nB);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;exp(&nbsp;_b[0]&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;doDataVariance(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;R&nbsp;=&nbsp;[&nbsp;b[0]&nbsp;-&nbsp;i&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nYi&nbsp;*&nbsp;_nYi);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;_b[0]&nbsp;-&nbsp;_i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;doDataVariance_popPar(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;R_alp&nbsp;=&nbsp;[&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nYi&nbsp;*&nbsp;_nYi&nbsp;*&nbsp;_nA);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;0.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[1]&nbsp;=&nbsp;0.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;doDataVariance_indPar(&nbsp;valarray&lt;double&gt;&amp;&nbsp;ret&nbsp;)&nbsp;const<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;R_b&nbsp;=&nbsp;[&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.resize(_nYi&nbsp;*&nbsp;_nYi&nbsp;*_nB);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[0]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
};<br>
<br>
/*************************************************************************<br>
&nbsp;*<br>
&nbsp;*&nbsp;Function:&nbsp;main<br>
&nbsp;*<br>
&nbsp;*************************************************************************/<br>
<br>
<br>
int&nbsp;main()<br>
{<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Preliminaries.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;//&nbsp;Number&nbsp;of&nbsp;individuals.<br>
&nbsp;&nbsp;const&nbsp;int&nbsp;nInd&nbsp;=&nbsp;2;<br>
<br>
&nbsp;&nbsp;//&nbsp;Number&nbsp;of&nbsp;measurements&nbsp;per&nbsp;individual&nbsp;(same&nbsp;for&nbsp;all)<br>
&nbsp;&nbsp;const&nbsp;int&nbsp;nYi&nbsp;=&nbsp;1;<br>
<br>
&nbsp;&nbsp;//&nbsp;Number&nbsp;of&nbsp;measurements&nbsp;for&nbsp;all&nbsp;individuals<br>
&nbsp;&nbsp;const&nbsp;int&nbsp;nY&nbsp;=&nbsp;nInd&nbsp;*&nbsp;nYi;<br>
<br>
&nbsp;&nbsp;//&nbsp;Number&nbsp;of&nbsp;pop&nbsp;parameter<br>
&nbsp;&nbsp;const&nbsp;int&nbsp;nAlp&nbsp;=&nbsp;2;<br>
<br>
&nbsp;&nbsp;//&nbsp;Number&nbsp;of&nbsp;ind&nbsp;parameter<br>
&nbsp;&nbsp;const&nbsp;int&nbsp;nB&nbsp;=&nbsp;1;<br>
<br>
<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Create&nbsp;a&nbsp;TestModel&nbsp;instance.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;TestModel&nbsp;testModel(&nbsp;nAlp,&nbsp;nB,&nbsp;nYi&nbsp;);<br>
<br>
&nbsp;&nbsp;valarray&lt;double&gt;&nbsp;a(&nbsp;nAlp&nbsp;);<br>
&nbsp;&nbsp;a[0]&nbsp;=&nbsp;1.0;<br>
&nbsp;&nbsp;a[1]&nbsp;=&nbsp;2.0;<br>
&nbsp;&nbsp;testModel.setPopPar(&nbsp;a&nbsp;);<br>
<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Create&nbsp;a&nbsp;EqIndModel&nbsp;instance.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;valarray&lt;int&gt;&nbsp;N(&nbsp;1.0,&nbsp;nInd&nbsp;);<br>
&nbsp;&nbsp;valarray&lt;double&gt;&nbsp;bStep(&nbsp;.01,&nbsp;nB&nbsp;);<br>
<br>
&nbsp;&nbsp;EqIndModel&nbsp;eqIndModel(&nbsp;&amp;testModel,&nbsp;N,&nbsp;bStep,&nbsp;nAlp&nbsp;);<br>
<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Prepare&nbsp;tests.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;setiosflags(ios::scientific)&nbsp;&lt;&lt;&nbsp;setprecision(15);<br>
&nbsp;&nbsp;//&nbsp;bStep&nbsp;=&nbsp;.01&nbsp;&nbsp;Define<br>
&nbsp;&nbsp;double&nbsp;C&nbsp;=&nbsp;(&nbsp;exp(&nbsp;.01&nbsp;)&nbsp;-&nbsp;exp(&nbsp;-.01&nbsp;)&nbsp;)&nbsp;/&nbsp;2&nbsp;/&nbsp;.01;<br>
&nbsp;&nbsp;C&nbsp;=&nbsp;C&nbsp;*&nbsp;C;<br>
&nbsp;&nbsp;double&nbsp;e&nbsp;=&nbsp;1e-13;<br>
&nbsp;&nbsp;cout&lt;&lt;&nbsp;endl&nbsp;&lt;&lt;&nbsp;endl&nbsp;&lt;&lt;&nbsp;&quot;C&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;C&nbsp;&lt;&lt;&nbsp;endl&nbsp;&lt;&lt;&nbsp;endl;<br>
<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Test&nbsp;dataMean.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;valarray&lt;double&gt;&nbsp;f;<br>
&nbsp;&nbsp;eqIndModel.dataMean(&nbsp;f&nbsp;);<br>
<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;alp[&nbsp;0&nbsp;]&nbsp;+&nbsp;1&nbsp;\<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;f(alp)&nbsp;=&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;alp[&nbsp;0&nbsp;]&nbsp;+&nbsp;2&nbsp;/<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;DoubleMatrix&nbsp;dmatF(&nbsp;f&nbsp;);<br>
&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;f&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;dmatF.print();&nbsp;<br>
<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Test&nbsp;dataMean_indPar.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;valarray&lt;double&gt;&nbsp;f_b;<br>
&nbsp;&nbsp;eqIndModel.dataMean_indPar(&nbsp;f_b&nbsp;);<br>
<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;1&nbsp;\<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;f_b(alp)&nbsp;=&nbsp;|&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;1&nbsp;/<br>
<br>
&nbsp;&nbsp;DoubleMatrix&nbsp;dmatF_b(&nbsp;f_b,&nbsp;nAlp&nbsp;);<br>
&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;f_b&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;dmatF_b.print();&nbsp;<br>
<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Test&nbsp;dataVariance.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;valarray&lt;double&gt;&nbsp;R;<br>
&nbsp;&nbsp;eqIndModel.dataVariance(&nbsp;R&nbsp;);<br>
<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;C&nbsp;*&nbsp;a[&nbsp;1&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;\<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;R(alp)&nbsp;=&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C&nbsp;*&nbsp;a[&nbsp;1&nbsp;]&nbsp;-&nbsp;1&nbsp;/<br>
<br>
&nbsp;&nbsp;DoubleMatrix&nbsp;dmatR(&nbsp;R,&nbsp;nY&nbsp;);<br>
&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;R&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;dmatR.print();&nbsp;<br>
<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
&nbsp;&nbsp;//&nbsp;Test&nbsp;dataVariance_indPar.<br>
&nbsp;&nbsp;//------------------------------------------------------------<br>
<br>
&nbsp;&nbsp;valarray&lt;double&gt;&nbsp;R_b;<br>
&nbsp;&nbsp;eqIndModel.dataVariance_indPar(&nbsp;R_b&nbsp;);<br>
<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;C&nbsp;\<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;R_b(alp)&nbsp;=&nbsp;|&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;|<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;|<br>
&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;C&nbsp;/<br>
<br>
&nbsp;&nbsp;DoubleMatrix&nbsp;dmatR_b(&nbsp;R_b,&nbsp;nAlp&nbsp;);<br>
&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;R_b&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;dmatR_b.print();&nbsp;<br>
<br>
&nbsp;&nbsp;return&nbsp;0;<br>
}<br>
</span>
</font></code>
then it will display the following when it is run:
<code><font color="blue">
<span style='white-space: nowrap'><br>
<br>
C&nbsp;=&nbsp;1.000033333777770e+000<br>
<br>
f&nbsp;=<br>
[&nbsp;2.000000000000000e+000&nbsp;]<br>
[&nbsp;3.000000000000000e+000&nbsp;]<br>
f_b&nbsp;=<br>
[&nbsp;1.000000000000000e+000&nbsp;0.000000000000000e+000&nbsp;]<br>
[&nbsp;1.000000000000000e+000&nbsp;0.000000000000000e+000&nbsp;]<br>
R&nbsp;=<br>
[&nbsp;2.000066667555529e+000&nbsp;0.000000000000000e+000&nbsp;]<br>
[&nbsp;0.000000000000000e+000&nbsp;1.000066667555485e+000&nbsp;]<br>
R_b&nbsp;=<br>
[&nbsp;0.000000000000000e+000&nbsp;1.000033333777765e+000&nbsp;]<br>
[&nbsp;0.000000000000000e+000&nbsp;0.000000000000000e+000&nbsp;]<br>
[&nbsp;0.000000000000000e+000&nbsp;0.000000000000000e+000&nbsp;]<br>
[&nbsp;0.000000000000000e+000&nbsp;1.000033333777743e+000&nbsp;]<br>
<br>
</span>
</font></code>
<code><span style='white-space: nowrap'><br>
<br>
</span></code><center><i>Copyright (C) 2002, University of Washington, Resource Facility for Population Kinetics. All Rights Reserved.


</i>
</center>
<hr>Input File: EqIndModel.omh

</body>
</html>
