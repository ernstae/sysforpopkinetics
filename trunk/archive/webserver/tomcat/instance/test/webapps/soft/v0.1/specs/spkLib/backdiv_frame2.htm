<html><head>
<title>Solve a system of equations: A x = B</title>
<meta name="description" id="description" content="Solve a system of equations: A x = B">
<meta name="keywords" id="keywords" content=" backdiv matrix division back "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="backdiv.htm" target="_top">section</a>, <a href="backdiv_frame2.htm" target="_top">frame</a></div>

<center><i>Copyright (C) 2002, University of Washington, Resource Facility for Population Kinetics. All Rights Reserved.

</i>
</center><code><span style='white-space: nowrap'><br>
</span></code><b><big><a name="Description" id="Description">Description</a></big></b>
<br>
Solve <code><span style='white-space: nowrap'><i>A</i>&nbsp;<i>x</i>&nbsp;=&nbsp;<i>B</i></span></code> for <i>x</i>, which is often expressed as <code><span style='white-space: nowrap'><i>A</i>&nbsp;&nbsp;<i>B</i>&nbsp;=&nbsp;<i>x</i></span></code>,
using LU decomposition for A being a positive definite matrix.
Given A as a <code><span style='white-space: nowrap'><i>m</i>&nbsp;<i>by</i>&nbsp;<i>n</i></span></code> matrix and B as <code><span style='white-space: nowrap'><i>m</i>&nbsp;<i>by</i>&nbsp;<i>l</i></span></code> where <code><span style='white-space: nowrap'><i>m</i>&nbsp;=&nbsp;<i>n</i></span></code>,
the solution <code><span style='white-space: nowrap'><i>x</i></span></code> has <code><span style='white-space: nowrap'><i>m</i>&nbsp;<i>by</i>&nbsp;<i>l</i></span></code> dimensions.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>If either A or B is empty, an empty matrix will be returned.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>This routine assumes the input <i>A</i> matrix is positive definite.  If not
it will throw a SpkException exception.

<br>
<br>
<b><big><a name="Arguments" id="Arguments">Arguments</a></big></b>


<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
&amp;</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is a <code><span style='white-space: nowrap'><i>m</i>&nbsp;<i>by</i>&nbsp;<i>n</i></span></code> positive definite matrix (i.e. <code><span style='white-space: nowrap'><i>m</i>&nbsp;=&nbsp;<i>n</i></span></code>) 
that represents the system of
<code><span style='white-space: nowrap'><i>m</i></span></code> equations with <code><span style='white-space: nowrap'><i>n</i></span></code> variables.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
&amp;</span></font></code><i><span style='white-space: nowrap'>B</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is the right hand side quantities represented in the form of <code><span style='white-space: nowrap'><i>m</i>&nbsp;<i>by</i>&nbsp;<i>l</i></span></code> matrix.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
If you compile, link, and run the following program:
<code><font color="blue">
<span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;iostream&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;DoubleMatrix.h&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&quot;backDiv.h&quot;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;void&nbsp;main(){<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;std;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;m&nbsp;=&nbsp;1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;int&nbsp;n&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;A(n,n);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;A&nbsp;must&nbsp;be&nbsp;positive&nbsp;definite<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;B(n,m);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;B&nbsp;could&nbsp;be&nbsp;anything<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoubleMatrix&nbsp;x(n,m);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;unknown&nbsp;parameter&nbsp;we&nbsp;want&nbsp;to&nbsp;solve<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;*pdA&nbsp;=&nbsp;A.data();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;*pdB&nbsp;=&nbsp;B.data();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Set&nbsp;A&nbsp;to&nbsp;a&nbsp;matrix:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;[&nbsp;1&nbsp;&nbsp;4&nbsp;&nbsp;2&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;[&nbsp;2&nbsp;&nbsp;5&nbsp;&nbsp;3&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;[&nbsp;3&nbsp;&nbsp;1&nbsp;&nbsp;4&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i=0;&nbsp;i&lt;n*n;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pdA[i]&nbsp;=&nbsp;i&nbsp;%&nbsp;5&nbsp;+&nbsp;1;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Set&nbsp;B&nbsp;to&nbsp;a&nbsp;vector:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;[&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;[&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;[&nbsp;1&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(&nbsp;i=0;&nbsp;i&lt;m*n;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pdB[i]&nbsp;=&nbsp;1;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;backDiv(A,B);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;A&nbsp;\\&nbsp;B&nbsp;=&nbsp;x&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;&quot;A&nbsp;x&nbsp;(should&nbsp;be&nbsp;equal&nbsp;to&nbsp;B)&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;endl;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(A*x).print();<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
</span>
</font></code>
then it will display the following when it is run:
<code><font color="blue">
<span style='white-space: nowrap'><br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;\&nbsp;B&nbsp;=&nbsp;x&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;[-1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[1]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;x&nbsp;(should&nbsp;be&nbsp;equal&nbsp;to&nbsp;B)&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[1]<br>
<br>
</span>
</font></code>

<hr>Input File: ../../spk/backDiv.cpp

</body>
</html>
