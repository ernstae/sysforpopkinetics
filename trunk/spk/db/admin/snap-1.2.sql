-- MySQL dump 9.10
--
-- Host: localhost    Database: spktest
-- ------------------------------------------------------
-- Server version	4.0.17-standard

--
-- Table structure for table `dataset`
--

CREATE TABLE dataset (
  dataset_id int(10) unsigned NOT NULL auto_increment,
  name varchar(20) NOT NULL default '',
  abstract varchar(100) NOT NULL default '',
  archive longblob,
  user_id int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (dataset_id),
  UNIQUE KEY user_id (user_id,name)
) TYPE=InnoDB;

--
-- Dumping data for table `dataset`
--

INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (1,'THEO 1','test dataset 1','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.05.13.22.41;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"5\" rows=\"133\">\n      <description>THEO</description>\n      <row position=\"1\">\n         <value type=\"string\">ID</value>\n         <value type=\"string\">AMT</value>\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n         <value type=\"string\">WT</value>\n      </row>\n      <row position=\"2\">\n         <value type=\"string\">1</value>\n         <value>4.02</value>\n         <value>0.</value>\n         <value>.74</value>\n         <value>79.6</value>\n      </row>\n      <row position=\"3\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.25</value>\n         <value>2.84</value>\n         <value>.</value>\n      </row>\n      <row position=\"4\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.57</value>\n         <value>6.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"5\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>1.12</value>\n         <value>10.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"6\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"7\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>3.82</value>\n         <value>8.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"8\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>5.1</value>\n         <value>8.36</value>\n         <value>.</value>\n      </row>\n      <row position=\"9\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>7.47</value>\n         <value>.</value>\n      </row>\n      <row position=\"10\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>9.05</value>\n         <value>6.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"11\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>5.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"12\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>24.37</value>\n         <value>3.28</value>\n         <value>.</value>\n      </row>\n      <row position=\"13\">\n         <value type=\"string\">2</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.4</value>\n      </row>\n      <row position=\"14\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"15\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>7.91</value>\n         <value>.</value>\n      </row>\n      <row position=\"16\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>8.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"17\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.92</value>\n         <value>8.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"18\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>6.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"19\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"20\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>5.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"21\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.55</value>\n         <value>.</value>\n      </row>\n      <row position=\"22\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>3.01</value>\n         <value>.</value>\n      </row>\n      <row position=\"23\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>24.3</value>\n         <value>.90</value>\n         <value>.</value>\n      </row>\n      <row position=\"24\">\n         <value type=\"string\">3</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"25\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>4.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"26\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>6.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"27\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>8.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"28\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.8</value>\n         <value>.</value>\n      </row>\n      <row position=\"29\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>3.62</value>\n         <value>7.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"30\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>5.08</value>\n         <value>6.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"31\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>5.3</value>\n         <value>.</value>\n      </row>\n      <row position=\"32\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"33\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>12.15</value>\n         <value>3.7</value>\n         <value>.</value>\n      </row>\n      <row position=\"34\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>24.17</value>\n         <value>1.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"35\">\n         <value type=\"string\">4</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.7</value>\n      </row>\n      <row position=\"36\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.35</value>\n         <value>1.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"37\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.6</value>\n         <value>4.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"38\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>1.07</value>\n         <value>8.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"39\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>2.13</value>\n         <value>8.38</value>\n         <value>.</value>\n      </row>\n      <row position=\"40\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>7.54</value>\n         <value>.</value>\n      </row>\n      <row position=\"41\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"42\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>5.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"43\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>9.02</value>\n         <value>5.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"44\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>11.98</value>\n         <value>4.19</value>\n         <value>.</value>\n      </row>\n      <row position=\"45\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>24.65</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"46\">\n         <value type=\"string\">5</value>\n         <value>5.86</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>54.6</value>\n      </row>\n      <row position=\"47\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>2.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"48\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>5.63</value>\n         <value>.</value>\n      </row>\n      <row position=\"49\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>11.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"50\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"51\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>8.74</value>\n         <value>.</value>\n      </row>\n      <row position=\"52\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"53\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"54\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>9.1</value>\n         <value>5.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"55\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>4.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"56\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>24.35</value>\n         <value>1.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"57\">\n         <value type=\"string\">6</value>\n         <value>4.</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>80.</value>\n      </row>\n      <row position=\"58\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.29</value>\n         <value>.</value>\n      </row>\n      <row position=\"59\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>3.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"60\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>1.15</value>\n         <value>6.44</value>\n         <value>.</value>\n      </row>\n      <row position=\"61\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>2.03</value>\n         <value>6.32</value>\n         <value>.</value>\n      </row>\n      <row position=\"62\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>3.57</value>\n         <value>5.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"63\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>4.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"64\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>7.</value>\n         <value>4.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"65\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>9.22</value>\n         <value>3.46</value>\n         <value>.</value>\n      </row>\n      <row position=\"66\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>2.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"67\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>23.85</value>\n         <value>.92</value>\n         <value>.</value>\n      </row>\n      <row position=\"68\">\n         <value type=\"string\">7</value>\n         <value>4.95</value>\n         <value>0.</value>\n         <value>.15</value>\n         <value>64.6</value>\n      </row>\n      <row position=\"69\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"70\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>2.35</value>\n         <value>.</value>\n      </row>\n      <row position=\"71\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>5.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"72\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"73\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>3.48</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"74\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>6.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"75\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>6.98</value>\n         <value>5.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"76\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.39</value>\n         <value>.</value>\n      </row>\n      <row position=\"77\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>3.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"78\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>24.22</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"79\">\n         <value type=\"string\">8</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"80\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"81\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>0.52</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"82\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>7.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"83\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"84\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"85\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>5.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"86\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>7.15</value>\n         <value>4.73</value>\n         <value>.</value>\n      </row>\n      <row position=\"87\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>9.07</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"88\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>3.</value>\n         <value>.</value>\n      </row>\n      <row position=\"89\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>24.12</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"90\">\n         <value type=\"string\">9</value>\n         <value>3.1</value>\n         <value>.0</value>\n         <value>.0</value>\n         <value>86.4</value>\n      </row>\n      <row position=\"91\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>7.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"92\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.63</value>\n         <value>9.03</value>\n         <value>.</value>\n      </row>\n      <row position=\"93\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>1.05</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"94\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"95\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>5.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"96\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.67</value>\n         <value>.</value>\n      </row>\n      <row position=\"97\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>7.17</value>\n         <value>4.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"98\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>8.8</value>\n         <value>4.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"99\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>11.6</value>\n         <value>3.16</value>\n         <value>.</value>\n      </row>\n      <row position=\"100\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>24.43</value>\n         <value>1.12</value>\n         <value>.</value>\n      </row>\n      <row position=\"101\">\n         <value type=\"string\">10</value>\n         <value>5.5</value>\n         <value>0.</value>\n         <value>.24</value>\n         <value>58.2</value>\n      </row>\n      <row position=\"102\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.37</value>\n         <value>2.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"103\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.77</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"104\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>6.41</value>\n         <value>.</value>\n      </row>\n      <row position=\"105\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>2.05</value>\n         <value>7.83</value>\n         <value>.</value>\n      </row>\n      <row position=\"106\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>3.55</value>\n         <value>10.21</value>\n         <value>.</value>\n      </row>\n      <row position=\"107\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>9.18</value>\n         <value>.</value>\n      </row>\n      <row position=\"108\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>7.08</value>\n         <value>8.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"109\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>9.38</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"110\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>5.68</value>\n         <value>.</value>\n      </row>\n      <row position=\"111\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>23.7</value>\n         <value>2.42</value>\n         <value>.</value>\n      </row>\n      <row position=\"112\">\n         <value type=\"string\">11</value>\n         <value>4.92</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>65.</value>\n      </row>\n      <row position=\"113\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>4.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"114\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>7.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"115\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>8.</value>\n         <value>.</value>\n      </row>\n      <row position=\"116\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>1.98</value>\n         <value>6.81</value>\n         <value>.</value>\n      </row>\n      <row position=\"117\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>3.6</value>\n         <value>5.87</value>\n         <value>.</value>\n      </row>\n      <row position=\"118\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"119\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>4.45</value>\n         <value>.</value>\n      </row>\n      <row position=\"120\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>3.62</value>\n         <value>.</value>\n      </row>\n      <row position=\"121\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>2.69</value>\n         <value>.</value>\n      </row>\n      <row position=\"122\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>24.08</value>\n         <value>.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"123\">\n         <value type=\"string\">12</value>\n         <value>5.3</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>60.5</value>\n      </row>\n      <row position=\"124\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"125\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>3.96</value>\n         <value>.</value>\n      </row>\n      <row position=\"126\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>7.82</value>\n         <value>.</value>\n      </row>\n      <row position=\"127\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>2.</value>\n         <value>9.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"128\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>3.52</value>\n         <value>9.75</value>\n         <value>.</value>\n      </row>\n      <row position=\"129\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>5.07</value>\n         <value>8.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"130\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"131\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>6.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"132\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"133\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>24.15</value>\n         <value>1.17</value>\n         <value>.</value>\n      </row>\n   </table>\n</spkdata>\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (2,'THEO 2','test dataset 2','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.05.13.26.49;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"5\" rows=\"133\">\n      <description>THEO</description>\n      <row position=\"1\">\n         <value type=\"string\">ID</value>\n         <value type=\"string\">AMT</value>\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n         <value type=\"string\">WT</value>\n      </row>\n      <row position=\"2\">\n         <value type=\"string\">1</value>\n         <value>4.02</value>\n         <value>0.</value>\n         <value>.74</value>\n         <value>79.6</value>\n      </row>\n      <row position=\"3\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.25</value>\n         <value>2.84</value>\n         <value>.</value>\n      </row>\n      <row position=\"4\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.57</value>\n         <value>6.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"5\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>1.12</value>\n         <value>10.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"6\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"7\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>3.82</value>\n         <value>8.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"8\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>5.1</value>\n         <value>8.36</value>\n         <value>.</value>\n      </row>\n      <row position=\"9\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>7.47</value>\n         <value>.</value>\n      </row>\n      <row position=\"10\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>9.05</value>\n         <value>6.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"11\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>5.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"12\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>24.37</value>\n         <value>3.28</value>\n         <value>.</value>\n      </row>\n      <row position=\"13\">\n         <value type=\"string\">2</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.4</value>\n      </row>\n      <row position=\"14\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"15\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>7.91</value>\n         <value>.</value>\n      </row>\n      <row position=\"16\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>8.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"17\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.92</value>\n         <value>8.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"18\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>6.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"19\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"20\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>5.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"21\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.55</value>\n         <value>.</value>\n      </row>\n      <row position=\"22\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>3.01</value>\n         <value>.</value>\n      </row>\n      <row position=\"23\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>24.3</value>\n         <value>.90</value>\n         <value>.</value>\n      </row>\n      <row position=\"24\">\n         <value type=\"string\">3</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"25\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>4.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"26\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>6.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"27\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>8.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"28\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.8</value>\n         <value>.</value>\n      </row>\n      <row position=\"29\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>3.62</value>\n         <value>7.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"30\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>5.08</value>\n         <value>6.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"31\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>5.3</value>\n         <value>.</value>\n      </row>\n      <row position=\"32\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"33\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>12.15</value>\n         <value>3.7</value>\n         <value>.</value>\n      </row>\n      <row position=\"34\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>24.17</value>\n         <value>1.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"35\">\n         <value type=\"string\">4</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.7</value>\n      </row>\n      <row position=\"36\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.35</value>\n         <value>1.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"37\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.6</value>\n         <value>4.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"38\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>1.07</value>\n         <value>8.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"39\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>2.13</value>\n         <value>8.38</value>\n         <value>.</value>\n      </row>\n      <row position=\"40\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>7.54</value>\n         <value>.</value>\n      </row>\n      <row position=\"41\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"42\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>5.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"43\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>9.02</value>\n         <value>5.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"44\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>11.98</value>\n         <value>4.19</value>\n         <value>.</value>\n      </row>\n      <row position=\"45\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>24.65</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"46\">\n         <value type=\"string\">5</value>\n         <value>5.86</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>54.6</value>\n      </row>\n      <row position=\"47\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>2.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"48\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>5.63</value>\n         <value>.</value>\n      </row>\n      <row position=\"49\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>11.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"50\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"51\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>8.74</value>\n         <value>.</value>\n      </row>\n      <row position=\"52\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"53\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"54\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>9.1</value>\n         <value>5.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"55\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>4.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"56\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>24.35</value>\n         <value>1.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"57\">\n         <value type=\"string\">6</value>\n         <value>4.</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>80.</value>\n      </row>\n      <row position=\"58\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.29</value>\n         <value>.</value>\n      </row>\n      <row position=\"59\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>3.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"60\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>1.15</value>\n         <value>6.44</value>\n         <value>.</value>\n      </row>\n      <row position=\"61\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>2.03</value>\n         <value>6.32</value>\n         <value>.</value>\n      </row>\n      <row position=\"62\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>3.57</value>\n         <value>5.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"63\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>4.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"64\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>7.</value>\n         <value>4.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"65\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>9.22</value>\n         <value>3.46</value>\n         <value>.</value>\n      </row>\n      <row position=\"66\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>2.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"67\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>23.85</value>\n         <value>.92</value>\n         <value>.</value>\n      </row>\n      <row position=\"68\">\n         <value type=\"string\">7</value>\n         <value>4.95</value>\n         <value>0.</value>\n         <value>.15</value>\n         <value>64.6</value>\n      </row>\n      <row position=\"69\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"70\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>2.35</value>\n         <value>.</value>\n      </row>\n      <row position=\"71\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>5.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"72\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"73\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>3.48</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"74\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>6.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"75\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>6.98</value>\n         <value>5.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"76\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.39</value>\n         <value>.</value>\n      </row>\n      <row position=\"77\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>3.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"78\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>24.22</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"79\">\n         <value type=\"string\">8</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"80\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"81\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>0.52</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"82\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>7.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"83\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"84\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"85\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>5.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"86\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>7.15</value>\n         <value>4.73</value>\n         <value>.</value>\n      </row>\n      <row position=\"87\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>9.07</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"88\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>3.</value>\n         <value>.</value>\n      </row>\n      <row position=\"89\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>24.12</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"90\">\n         <value type=\"string\">9</value>\n         <value>3.1</value>\n         <value>.0</value>\n         <value>.0</value>\n         <value>86.4</value>\n      </row>\n      <row position=\"91\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>7.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"92\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.63</value>\n         <value>9.03</value>\n         <value>.</value>\n      </row>\n      <row position=\"93\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>1.05</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"94\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"95\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>5.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"96\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.67</value>\n         <value>.</value>\n      </row>\n      <row position=\"97\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>7.17</value>\n         <value>4.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"98\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>8.8</value>\n         <value>4.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"99\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>11.6</value>\n         <value>3.16</value>\n         <value>.</value>\n      </row>\n      <row position=\"100\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>24.43</value>\n         <value>1.12</value>\n         <value>.</value>\n      </row>\n      <row position=\"101\">\n         <value type=\"string\">10</value>\n         <value>5.5</value>\n         <value>0.</value>\n         <value>.24</value>\n         <value>58.2</value>\n      </row>\n      <row position=\"102\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.37</value>\n         <value>2.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"103\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.77</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"104\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>6.41</value>\n         <value>.</value>\n      </row>\n      <row position=\"105\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>2.05</value>\n         <value>7.83</value>\n         <value>.</value>\n      </row>\n      <row position=\"106\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>3.55</value>\n         <value>10.21</value>\n         <value>.</value>\n      </row>\n      <row position=\"107\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>9.18</value>\n         <value>.</value>\n      </row>\n      <row position=\"108\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>7.08</value>\n         <value>8.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"109\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>9.38</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"110\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>5.68</value>\n         <value>.</value>\n      </row>\n      <row position=\"111\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>23.7</value>\n         <value>2.42</value>\n         <value>.</value>\n      </row>\n      <row position=\"112\">\n         <value type=\"string\">11</value>\n         <value>4.92</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>65.</value>\n      </row>\n      <row position=\"113\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>4.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"114\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>7.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"115\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>8.</value>\n         <value>.</value>\n      </row>\n      <row position=\"116\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>1.98</value>\n         <value>6.81</value>\n         <value>.</value>\n      </row>\n      <row position=\"117\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>3.6</value>\n         <value>5.87</value>\n         <value>.</value>\n      </row>\n      <row position=\"118\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"119\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>4.45</value>\n         <value>.</value>\n      </row>\n      <row position=\"120\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>3.62</value>\n         <value>.</value>\n      </row>\n      <row position=\"121\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>2.69</value>\n         <value>.</value>\n      </row>\n      <row position=\"122\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>24.08</value>\n         <value>.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"123\">\n         <value type=\"string\">12</value>\n         <value>5.3</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>60.5</value>\n      </row>\n      <row position=\"124\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"125\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>3.96</value>\n         <value>.</value>\n      </row>\n      <row position=\"126\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>7.82</value>\n         <value>.</value>\n      </row>\n      <row position=\"127\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>2.</value>\n         <value>9.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"128\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>3.52</value>\n         <value>9.75</value>\n         <value>.</value>\n      </row>\n      <row position=\"129\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>5.07</value>\n         <value>8.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"130\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"131\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>6.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"132\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"133\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>24.15</value>\n         <value>1.17</value>\n         <value>.</value>\n      </row>\n   </table>\n</spkdata>\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (3,'gauss3_1.txt','http://www.itl.nist.gov/div898/strd/nls/data/gauss1.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.05.14.01.51;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"251\">\n      <description>gauss3_1.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>1</value>\n         <value>97.58776</value>\n      </row>\n      <row position=\"3\">\n         <value>2</value>\n         <value>97.76344</value>\n      </row>\n      <row position=\"4\">\n         <value>3</value>\n         <value>96.56705</value>\n      </row>\n      <row position=\"5\">\n         <value>4</value>\n         <value>92.52037</value>\n      </row>\n      <row position=\"6\">\n         <value>5</value>\n         <value>91.15097</value>\n      </row>\n      <row position=\"7\">\n         <value>6</value>\n         <value>95.21728</value>\n      </row>\n      <row position=\"8\">\n         <value>7</value>\n         <value>90.21355</value>\n      </row>\n      <row position=\"9\">\n         <value>8</value>\n         <value>89.29235</value>\n      </row>\n      <row position=\"10\">\n         <value>9</value>\n         <value>91.51479</value>\n      </row>\n      <row position=\"11\">\n         <value>10</value>\n         <value>89.60965</value>\n      </row>\n      <row position=\"12\">\n         <value>11</value>\n         <value>86.56187</value>\n      </row>\n      <row position=\"13\">\n         <value>12</value>\n         <value>85.55315</value>\n      </row>\n      <row position=\"14\">\n         <value>13</value>\n         <value>87.13053</value>\n      </row>\n      <row position=\"15\">\n         <value>14</value>\n         <value>85.67938</value>\n      </row>\n      <row position=\"16\">\n         <value>15</value>\n         <value>80.04849</value>\n      </row>\n      <row position=\"17\">\n         <value>16</value>\n         <value>82.18922</value>\n      </row>\n      <row position=\"18\">\n         <value>17</value>\n         <value>87.24078</value>\n      </row>\n      <row position=\"19\">\n         <value>18</value>\n         <value>80.79401</value>\n      </row>\n      <row position=\"20\">\n         <value>19</value>\n         <value>81.28564</value>\n      </row>\n      <row position=\"21\">\n         <value>20</value>\n         <value>81.56932</value>\n      </row>\n      <row position=\"22\">\n         <value>21</value>\n         <value>79.22703</value>\n      </row>\n      <row position=\"23\">\n         <value>22</value>\n         <value>79.43259</value>\n      </row>\n      <row position=\"24\">\n         <value>23</value>\n         <value>77.90174</value>\n      </row>\n      <row position=\"25\">\n         <value>24</value>\n         <value>76.75438</value>\n      </row>\n      <row position=\"26\">\n         <value>25</value>\n         <value>77.17338</value>\n      </row>\n      <row position=\"27\">\n         <value>26</value>\n         <value>74.27296</value>\n      </row>\n      <row position=\"28\">\n         <value>27</value>\n         <value>73.1183</value>\n      </row>\n      <row position=\"29\">\n         <value>28</value>\n         <value>73.84732</value>\n      </row>\n      <row position=\"30\">\n         <value>29</value>\n         <value>72.47746</value>\n      </row>\n      <row position=\"31\">\n         <value>30</value>\n         <value>71.92128</value>\n      </row>\n      <row position=\"32\">\n         <value>31</value>\n         <value>66.91962</value>\n      </row>\n      <row position=\"33\">\n         <value>32</value>\n         <value>67.93554</value>\n      </row>\n      <row position=\"34\">\n         <value>33</value>\n         <value>69.55841</value>\n      </row>\n      <row position=\"35\">\n         <value>34</value>\n         <value>69.06592</value>\n      </row>\n      <row position=\"36\">\n         <value>35</value>\n         <value>66.53371</value>\n      </row>\n      <row position=\"37\">\n         <value>36</value>\n         <value>63.87094</value>\n      </row>\n      <row position=\"38\">\n         <value>37</value>\n         <value>69.70526</value>\n      </row>\n      <row position=\"39\">\n         <value>38</value>\n         <value>63.59295</value>\n      </row>\n      <row position=\"40\">\n         <value>39</value>\n         <value>63.35509</value>\n      </row>\n      <row position=\"41\">\n         <value>40</value>\n         <value>59.99747</value>\n      </row>\n      <row position=\"42\">\n         <value>41</value>\n         <value>62.64843</value>\n      </row>\n      <row position=\"43\">\n         <value>42</value>\n         <value>65.77345</value>\n      </row>\n      <row position=\"44\">\n         <value>43</value>\n         <value>59.10141</value>\n      </row>\n      <row position=\"45\">\n         <value>44</value>\n         <value>56.5775</value>\n      </row>\n      <row position=\"46\">\n         <value>45</value>\n         <value>61.15313</value>\n      </row>\n      <row position=\"47\">\n         <value>46</value>\n         <value>54.30767</value>\n      </row>\n      <row position=\"48\">\n         <value>47</value>\n         <value>62.83535</value>\n      </row>\n      <row position=\"49\">\n         <value>48</value>\n         <value>56.52957</value>\n      </row>\n      <row position=\"50\">\n         <value>49</value>\n         <value>56.98427</value>\n      </row>\n      <row position=\"51\">\n         <value>50</value>\n         <value>58.11459</value>\n      </row>\n      <row position=\"52\">\n         <value>51</value>\n         <value>58.69576</value>\n      </row>\n      <row position=\"53\">\n         <value>52</value>\n         <value>58.23322</value>\n      </row>\n      <row position=\"54\">\n         <value>53</value>\n         <value>54.9049</value>\n      </row>\n      <row position=\"55\">\n         <value>54</value>\n         <value>57.91442</value>\n      </row>\n      <row position=\"56\">\n         <value>55</value>\n         <value>56.96629</value>\n      </row>\n      <row position=\"57\">\n         <value>56</value>\n         <value>51.13831</value>\n      </row>\n      <row position=\"58\">\n         <value>57</value>\n         <value>49.27123</value>\n      </row>\n      <row position=\"59\">\n         <value>58</value>\n         <value>52.92668</value>\n      </row>\n      <row position=\"60\">\n         <value>59</value>\n         <value>54.47693</value>\n      </row>\n      <row position=\"61\">\n         <value>60</value>\n         <value>51.8171</value>\n      </row>\n      <row position=\"62\">\n         <value>61</value>\n         <value>51.05401</value>\n      </row>\n      <row position=\"63\">\n         <value>62</value>\n         <value>52.51731</value>\n      </row>\n      <row position=\"64\">\n         <value>63</value>\n         <value>51.8371</value>\n      </row>\n      <row position=\"65\">\n         <value>64</value>\n         <value>54.48196</value>\n      </row>\n      <row position=\"66\">\n         <value>65</value>\n         <value>49.05859</value>\n      </row>\n      <row position=\"67\">\n         <value>66</value>\n         <value>50.52315</value>\n      </row>\n      <row position=\"68\">\n         <value>67</value>\n         <value>50.32755</value>\n      </row>\n      <row position=\"69\">\n         <value>68</value>\n         <value>46.44419</value>\n      </row>\n      <row position=\"70\">\n         <value>69</value>\n         <value>50.89281</value>\n      </row>\n      <row position=\"71\">\n         <value>70</value>\n         <value>52.13203</value>\n      </row>\n      <row position=\"72\">\n         <value>71</value>\n         <value>49.78741</value>\n      </row>\n      <row position=\"73\">\n         <value>72</value>\n         <value>49.01637</value>\n      </row>\n      <row position=\"74\">\n         <value>73</value>\n         <value>54.18198</value>\n      </row>\n      <row position=\"75\">\n         <value>74</value>\n         <value>53.17456</value>\n      </row>\n      <row position=\"76\">\n         <value>75</value>\n         <value>53.20827</value>\n      </row>\n      <row position=\"77\">\n         <value>76</value>\n         <value>57.43459</value>\n      </row>\n      <row position=\"78\">\n         <value>77</value>\n         <value>51.95282</value>\n      </row>\n      <row position=\"79\">\n         <value>78</value>\n         <value>54.20282</value>\n      </row>\n      <row position=\"80\">\n         <value>79</value>\n         <value>57.46687</value>\n      </row>\n      <row position=\"81\">\n         <value>80</value>\n         <value>53.60268</value>\n      </row>\n      <row position=\"82\">\n         <value>81</value>\n         <value>58.86728</value>\n      </row>\n      <row position=\"83\">\n         <value>82</value>\n         <value>57.66652</value>\n      </row>\n      <row position=\"84\">\n         <value>83</value>\n         <value>63.71034</value>\n      </row>\n      <row position=\"85\">\n         <value>84</value>\n         <value>65.24244</value>\n      </row>\n      <row position=\"86\">\n         <value>85</value>\n         <value>65.10878</value>\n      </row>\n      <row position=\"87\">\n         <value>86</value>\n         <value>69.96313</value>\n      </row>\n      <row position=\"88\">\n         <value>87</value>\n         <value>68.85475</value>\n      </row>\n      <row position=\"89\">\n         <value>88</value>\n         <value>73.32574</value>\n      </row>\n      <row position=\"90\">\n         <value>89</value>\n         <value>76.21241</value>\n      </row>\n      <row position=\"91\">\n         <value>90</value>\n         <value>78.06311</value>\n      </row>\n      <row position=\"92\">\n         <value>91</value>\n         <value>75.37701</value>\n      </row>\n      <row position=\"93\">\n         <value>92</value>\n         <value>87.54449</value>\n      </row>\n      <row position=\"94\">\n         <value>93</value>\n         <value>89.50588</value>\n      </row>\n      <row position=\"95\">\n         <value>94</value>\n         <value>95.82098</value>\n      </row>\n      <row position=\"96\">\n         <value>95</value>\n         <value>97.4839</value>\n      </row>\n      <row position=\"97\">\n         <value>96</value>\n         <value>100.8607</value>\n      </row>\n      <row position=\"98\">\n         <value>97</value>\n         <value>102.4851</value>\n      </row>\n      <row position=\"99\">\n         <value>98</value>\n         <value>105.7311</value>\n      </row>\n      <row position=\"100\">\n         <value>99</value>\n         <value>111.3489</value>\n      </row>\n      <row position=\"101\">\n         <value>100</value>\n         <value>111.0305</value>\n      </row>\n      <row position=\"102\">\n         <value>101</value>\n         <value>110.192</value>\n      </row>\n      <row position=\"103\">\n         <value>102</value>\n         <value>118.3581</value>\n      </row>\n      <row position=\"104\">\n         <value>103</value>\n         <value>118.8086</value>\n      </row>\n      <row position=\"105\">\n         <value>104</value>\n         <value>122.4249</value>\n      </row>\n      <row position=\"106\">\n         <value>105</value>\n         <value>124.0953</value>\n      </row>\n      <row position=\"107\">\n         <value>106</value>\n         <value>125.9337</value>\n      </row>\n      <row position=\"108\">\n         <value>107</value>\n         <value>127.8533</value>\n      </row>\n      <row position=\"109\">\n         <value>108</value>\n         <value>131.0361</value>\n      </row>\n      <row position=\"110\">\n         <value>109</value>\n         <value>133.3343</value>\n      </row>\n      <row position=\"111\">\n         <value>110</value>\n         <value>135.1278</value>\n      </row>\n      <row position=\"112\">\n         <value>111</value>\n         <value>131.7113</value>\n      </row>\n      <row position=\"113\">\n         <value>112</value>\n         <value>131.9151</value>\n      </row>\n      <row position=\"114\">\n         <value>113</value>\n         <value>132.1107</value>\n      </row>\n      <row position=\"115\">\n         <value>114</value>\n         <value>127.6898</value>\n      </row>\n      <row position=\"116\">\n         <value>115</value>\n         <value>133.2148</value>\n      </row>\n      <row position=\"117\">\n         <value>116</value>\n         <value>128.2296</value>\n      </row>\n      <row position=\"118\">\n         <value>117</value>\n         <value>133.5902</value>\n      </row>\n      <row position=\"119\">\n         <value>118</value>\n         <value>127.2539</value>\n      </row>\n      <row position=\"120\">\n         <value>119</value>\n         <value>128.3482</value>\n      </row>\n      <row position=\"121\">\n         <value>120</value>\n         <value>124.8694</value>\n      </row>\n      <row position=\"122\">\n         <value>121</value>\n         <value>124.6031</value>\n      </row>\n      <row position=\"123\">\n         <value>122</value>\n         <value>117.0648</value>\n      </row>\n      <row position=\"124\">\n         <value>123</value>\n         <value>118.1966</value>\n      </row>\n      <row position=\"125\">\n         <value>124</value>\n         <value>119.5408</value>\n      </row>\n      <row position=\"126\">\n         <value>125</value>\n         <value>114.7946</value>\n      </row>\n      <row position=\"127\">\n         <value>126</value>\n         <value>114.278</value>\n      </row>\n      <row position=\"128\">\n         <value>127</value>\n         <value>120.3484</value>\n      </row>\n      <row position=\"129\">\n         <value>128</value>\n         <value>114.8647</value>\n      </row>\n      <row position=\"130\">\n         <value>129</value>\n         <value>111.6514</value>\n      </row>\n      <row position=\"131\">\n         <value>130</value>\n         <value>110.1826</value>\n      </row>\n      <row position=\"132\">\n         <value>131</value>\n         <value>108.4461</value>\n      </row>\n      <row position=\"133\">\n         <value>132</value>\n         <value>109.0571</value>\n      </row>\n      <row position=\"134\">\n         <value>133</value>\n         <value>106.5308</value>\n      </row>\n      <row position=\"135\">\n         <value>134</value>\n         <value>109.4691</value>\n      </row>\n      <row position=\"136\">\n         <value>135</value>\n         <value>106.8709</value>\n      </row>\n      <row position=\"137\">\n         <value>136</value>\n         <value>107.3192</value>\n      </row>\n      <row position=\"138\">\n         <value>137</value>\n         <value>106.9</value>\n      </row>\n      <row position=\"139\">\n         <value>138</value>\n         <value>109.6526</value>\n      </row>\n      <row position=\"140\">\n         <value>139</value>\n         <value>107.1602</value>\n      </row>\n      <row position=\"141\">\n         <value>140</value>\n         <value>108.2509</value>\n      </row>\n      <row position=\"142\">\n         <value>141</value>\n         <value>104.9631</value>\n      </row>\n      <row position=\"143\">\n         <value>142</value>\n         <value>109.3601</value>\n      </row>\n      <row position=\"144\">\n         <value>143</value>\n         <value>107.6696</value>\n      </row>\n      <row position=\"145\">\n         <value>144</value>\n         <value>99.77286</value>\n      </row>\n      <row position=\"146\">\n         <value>145</value>\n         <value>104.9644</value>\n      </row>\n      <row position=\"147\">\n         <value>146</value>\n         <value>106.1376</value>\n      </row>\n      <row position=\"148\">\n         <value>147</value>\n         <value>106.5816</value>\n      </row>\n      <row position=\"149\">\n         <value>148</value>\n         <value>100.1286</value>\n      </row>\n      <row position=\"150\">\n         <value>149</value>\n         <value>101.6691</value>\n      </row>\n      <row position=\"151\">\n         <value>150</value>\n         <value>96.44254</value>\n      </row>\n      <row position=\"152\">\n         <value>151</value>\n         <value>97.34169</value>\n      </row>\n      <row position=\"153\">\n         <value>152</value>\n         <value>96.97412</value>\n      </row>\n      <row position=\"154\">\n         <value>153</value>\n         <value>90.7346</value>\n      </row>\n      <row position=\"155\">\n         <value>154</value>\n         <value>93.37949</value>\n      </row>\n      <row position=\"156\">\n         <value>155</value>\n         <value>82.12331</value>\n      </row>\n      <row position=\"157\">\n         <value>156</value>\n         <value>83.01657</value>\n      </row>\n      <row position=\"158\">\n         <value>157</value>\n         <value>78.8736</value>\n      </row>\n      <row position=\"159\">\n         <value>158</value>\n         <value>74.86971</value>\n      </row>\n      <row position=\"160\">\n         <value>159</value>\n         <value>72.79341</value>\n      </row>\n      <row position=\"161\">\n         <value>160</value>\n         <value>65.14744</value>\n      </row>\n      <row position=\"162\">\n         <value>161</value>\n         <value>67.02127</value>\n      </row>\n      <row position=\"163\">\n         <value>162</value>\n         <value>60.16136</value>\n      </row>\n      <row position=\"164\">\n         <value>163</value>\n         <value>57.13996</value>\n      </row>\n      <row position=\"165\">\n         <value>164</value>\n         <value>54.05769</value>\n      </row>\n      <row position=\"166\">\n         <value>165</value>\n         <value>50.42265</value>\n      </row>\n      <row position=\"167\">\n         <value>166</value>\n         <value>47.8243</value>\n      </row>\n      <row position=\"168\">\n         <value>167</value>\n         <value>42.85748</value>\n      </row>\n      <row position=\"169\">\n         <value>168</value>\n         <value>42.45495</value>\n      </row>\n      <row position=\"170\">\n         <value>169</value>\n         <value>38.30808</value>\n      </row>\n      <row position=\"171\">\n         <value>170</value>\n         <value>36.95794</value>\n      </row>\n      <row position=\"172\">\n         <value>171</value>\n         <value>33.94543</value>\n      </row>\n      <row position=\"173\">\n         <value>172</value>\n         <value>34.19017</value>\n      </row>\n      <row position=\"174\">\n         <value>173</value>\n         <value>31.66097</value>\n      </row>\n      <row position=\"175\">\n         <value>174</value>\n         <value>23.56172</value>\n      </row>\n      <row position=\"176\">\n         <value>175</value>\n         <value>29.61143</value>\n      </row>\n      <row position=\"177\">\n         <value>176</value>\n         <value>23.88765</value>\n      </row>\n      <row position=\"178\">\n         <value>177</value>\n         <value>22.49812</value>\n      </row>\n      <row position=\"179\">\n         <value>178</value>\n         <value>24.86901</value>\n      </row>\n      <row position=\"180\">\n         <value>179</value>\n         <value>17.29481</value>\n      </row>\n      <row position=\"181\">\n         <value>180</value>\n         <value>18.09291</value>\n      </row>\n      <row position=\"182\">\n         <value>181</value>\n         <value>15.34813</value>\n      </row>\n      <row position=\"183\">\n         <value>182</value>\n         <value>14.77997</value>\n      </row>\n      <row position=\"184\">\n         <value>183</value>\n         <value>13.87832</value>\n      </row>\n      <row position=\"185\">\n         <value>184</value>\n         <value>12.88891</value>\n      </row>\n      <row position=\"186\">\n         <value>185</value>\n         <value>16.20763</value>\n      </row>\n      <row position=\"187\">\n         <value>186</value>\n         <value>16.29024</value>\n      </row>\n      <row position=\"188\">\n         <value>187</value>\n         <value>15.29712</value>\n      </row>\n      <row position=\"189\">\n         <value>188</value>\n         <value>14.97839</value>\n      </row>\n      <row position=\"190\">\n         <value>189</value>\n         <value>12.1133</value>\n      </row>\n      <row position=\"191\">\n         <value>190</value>\n         <value>14.24168</value>\n      </row>\n      <row position=\"192\">\n         <value>191</value>\n         <value>12.53824</value>\n      </row>\n      <row position=\"193\">\n         <value>192</value>\n         <value>15.19818</value>\n      </row>\n      <row position=\"194\">\n         <value>193</value>\n         <value>11.70478</value>\n      </row>\n      <row position=\"195\">\n         <value>194</value>\n         <value>15.83745</value>\n      </row>\n      <row position=\"196\">\n         <value>195</value>\n         <value>10.03585</value>\n      </row>\n      <row position=\"197\">\n         <value>196</value>\n         <value>9.307574</value>\n      </row>\n      <row position=\"198\">\n         <value>197</value>\n         <value>12.868</value>\n      </row>\n      <row position=\"199\">\n         <value>198</value>\n         <value>8.571671</value>\n      </row>\n      <row position=\"200\">\n         <value>199</value>\n         <value>11.60415</value>\n      </row>\n      <row position=\"201\">\n         <value>200</value>\n         <value>12.42772</value>\n      </row>\n      <row position=\"202\">\n         <value>201</value>\n         <value>11.23627</value>\n      </row>\n      <row position=\"203\">\n         <value>202</value>\n         <value>11.13198</value>\n      </row>\n      <row position=\"204\">\n         <value>203</value>\n         <value>7.761117</value>\n      </row>\n      <row position=\"205\">\n         <value>204</value>\n         <value>6.75825</value>\n      </row>\n      <row position=\"206\">\n         <value>205</value>\n         <value>14.23375</value>\n      </row>\n      <row position=\"207\">\n         <value>206</value>\n         <value>10.63876</value>\n      </row>\n      <row position=\"208\">\n         <value>207</value>\n         <value>8.893581</value>\n      </row>\n      <row position=\"209\">\n         <value>208</value>\n         <value>11.55398</value>\n      </row>\n      <row position=\"210\">\n         <value>209</value>\n         <value>11.57221</value>\n      </row>\n      <row position=\"211\">\n         <value>210</value>\n         <value>11.58347</value>\n      </row>\n      <row position=\"212\">\n         <value>211</value>\n         <value>9.724857</value>\n      </row>\n      <row position=\"213\">\n         <value>212</value>\n         <value>11.43854</value>\n      </row>\n      <row position=\"214\">\n         <value>213</value>\n         <value>11.22636</value>\n      </row>\n      <row position=\"215\">\n         <value>214</value>\n         <value>10.17015</value>\n      </row>\n      <row position=\"216\">\n         <value>215</value>\n         <value>12.50765</value>\n      </row>\n      <row position=\"217\">\n         <value>216</value>\n         <value>6.200494</value>\n      </row>\n      <row position=\"218\">\n         <value>217</value>\n         <value>9.018902</value>\n      </row>\n      <row position=\"219\">\n         <value>218</value>\n         <value>10.80557</value>\n      </row>\n      <row position=\"220\">\n         <value>219</value>\n         <value>13.09591</value>\n      </row>\n      <row position=\"221\">\n         <value>220</value>\n         <value>3.914033</value>\n      </row>\n      <row position=\"222\">\n         <value>221</value>\n         <value>9.567723</value>\n      </row>\n      <row position=\"223\">\n         <value>222</value>\n         <value>8.038338</value>\n      </row>\n      <row position=\"224\">\n         <value>223</value>\n         <value>10.23096</value>\n      </row>\n      <row position=\"225\">\n         <value>224</value>\n         <value>9.367358</value>\n      </row>\n      <row position=\"226\">\n         <value>225</value>\n         <value>7.695937</value>\n      </row>\n      <row position=\"227\">\n         <value>226</value>\n         <value>6.118552</value>\n      </row>\n      <row position=\"228\">\n         <value>227</value>\n         <value>8.793192</value>\n      </row>\n      <row position=\"229\">\n         <value>228</value>\n         <value>7.796682</value>\n      </row>\n      <row position=\"230\">\n         <value>229</value>\n         <value>12.45064</value>\n      </row>\n      <row position=\"231\">\n         <value>230</value>\n         <value>10.61601</value>\n      </row>\n      <row position=\"232\">\n         <value>231</value>\n         <value>6.001</value>\n      </row>\n      <row position=\"233\">\n         <value>232</value>\n         <value>6.765096</value>\n      </row>\n      <row position=\"234\">\n         <value>233</value>\n         <value>8.764652</value>\n      </row>\n      <row position=\"235\">\n         <value>234</value>\n         <value>4.586417</value>\n      </row>\n      <row position=\"236\">\n         <value>235</value>\n         <value>8.390782</value>\n      </row>\n      <row position=\"237\">\n         <value>236</value>\n         <value>7.209201</value>\n      </row>\n      <row position=\"238\">\n         <value>237</value>\n         <value>10.01209</value>\n      </row>\n      <row position=\"239\">\n         <value>238</value>\n         <value>7.327461</value>\n      </row>\n      <row position=\"240\">\n         <value>239</value>\n         <value>6.525136</value>\n      </row>\n      <row position=\"241\">\n         <value>240</value>\n         <value>2.840065</value>\n      </row>\n      <row position=\"242\">\n         <value>241</value>\n         <value>10.32371</value>\n      </row>\n      <row position=\"243\">\n         <value>242</value>\n         <value>4.790035</value>\n      </row>\n      <row position=\"244\">\n         <value>243</value>\n         <value>8.376431</value>\n      </row>\n      <row position=\"245\">\n         <value>244</value>\n         <value>6.26398</value>\n      </row>\n      <row position=\"246\">\n         <value>245</value>\n         <value>2.705892</value>\n      </row>\n      <row position=\"247\">\n         <value>246</value>\n         <value>8.362109</value>\n      </row>\n      <row position=\"248\">\n         <value>247</value>\n         <value>8.983507</value>\n      </row>\n      <row position=\"249\">\n         <value>248</value>\n         <value>3.362469</value>\n      </row>\n      <row position=\"250\">\n         <value>249</value>\n         <value>1.182678</value>\n      </row>\n      <row position=\"251\">\n         <value>250</value>\n         <value>4.875312</value>\n      </row>\n   </table>\n</spkdata>\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (4,'hahn1.txt','http://www.itl.nist.gov/div898/strd/nls/data/hahn1.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.05.14.20.59;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"237\">\n      <description>hahn1.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>14.13000000</value>\n         <value>0.0800</value>\n      </row>\n      <row position=\"3\">\n         <value>18.97000000</value>\n         <value>0.2140</value>\n      </row>\n      <row position=\"4\">\n         <value>20.15000000</value>\n         <value>0.3670</value>\n      </row>\n      <row position=\"5\">\n         <value>20.41000000</value>\n         <value>0.2480</value>\n      </row>\n      <row position=\"6\">\n         <value>21.46000000</value>\n         <value>0.3750</value>\n      </row>\n      <row position=\"7\">\n         <value>24.33000000</value>\n         <value>0.4710</value>\n      </row>\n      <row position=\"8\">\n         <value>24.41000000</value>\n         <value>0.5910</value>\n      </row>\n      <row position=\"9\">\n         <value>28.78000000</value>\n         <value>0.7960</value>\n      </row>\n      <row position=\"10\">\n         <value>28.93000000</value>\n         <value>0.9430</value>\n      </row>\n      <row position=\"11\">\n         <value>29.57000000</value>\n         <value>0.8920</value>\n      </row>\n      <row position=\"12\">\n         <value>31.30000000</value>\n         <value>1.0890</value>\n      </row>\n      <row position=\"13\">\n         <value>33.43000000</value>\n         <value>1.5040</value>\n      </row>\n      <row position=\"14\">\n         <value>33.84000000</value>\n         <value>1.4180</value>\n      </row>\n      <row position=\"15\">\n         <value>33.91000000</value>\n         <value>1.4290</value>\n      </row>\n      <row position=\"16\">\n         <value>34.82000000</value>\n         <value>1.5470</value>\n      </row>\n      <row position=\"17\">\n         <value>37.41000000</value>\n         <value>1.9030</value>\n      </row>\n      <row position=\"18\">\n         <value>39.12000000</value>\n         <value>2.1500</value>\n      </row>\n      <row position=\"19\">\n         <value>39.22000000</value>\n         <value>2.2040</value>\n      </row>\n      <row position=\"20\">\n         <value>39.70000000</value>\n         <value>2.2780</value>\n      </row>\n      <row position=\"21\">\n         <value>40.03000000</value>\n         <value>2.2410</value>\n      </row>\n      <row position=\"22\">\n         <value>44.09000000</value>\n         <value>2.9020</value>\n      </row>\n      <row position=\"23\">\n         <value>44.18000000</value>\n         <value>2.8130</value>\n      </row>\n      <row position=\"24\">\n         <value>44.66000000</value>\n         <value>2.9510</value>\n      </row>\n      <row position=\"25\">\n         <value>45.07000000</value>\n         <value>2.8940</value>\n      </row>\n      <row position=\"26\">\n         <value>48.83000000</value>\n         <value>3.6240</value>\n      </row>\n      <row position=\"27\">\n         <value>49.87000000</value>\n         <value>3.7820</value>\n      </row>\n      <row position=\"28\">\n         <value>50.24000000</value>\n         <value>3.6970</value>\n      </row>\n      <row position=\"29\">\n         <value>54.50000000</value>\n         <value>4.5740</value>\n      </row>\n      <row position=\"30\">\n         <value>54.98000000</value>\n         <value>4.7030</value>\n      </row>\n      <row position=\"31\">\n         <value>55.02000000</value>\n         <value>4.7650</value>\n      </row>\n      <row position=\"32\">\n         <value>55.16000000</value>\n         <value>4.7570</value>\n      </row>\n      <row position=\"33\">\n         <value>60.41000000</value>\n         <value>5.5560</value>\n      </row>\n      <row position=\"34\">\n         <value>60.90000000</value>\n         <value>5.6020</value>\n      </row>\n      <row position=\"35\">\n         <value>61.38000000</value>\n         <value>5.8700</value>\n      </row>\n      <row position=\"36\">\n         <value>65.51000000</value>\n         <value>6.3070</value>\n      </row>\n      <row position=\"37\">\n         <value>66.25000000</value>\n         <value>6.4210</value>\n      </row>\n      <row position=\"38\">\n         <value>70.53000000</value>\n         <value>7.0300</value>\n      </row>\n      <row position=\"39\">\n         <value>72.08000000</value>\n         <value>7.1690</value>\n      </row>\n      <row position=\"40\">\n         <value>72.77000000</value>\n         <value>7.2670</value>\n      </row>\n      <row position=\"41\">\n         <value>73.42000000</value>\n         <value>7.4220</value>\n      </row>\n      <row position=\"42\">\n         <value>75.25000000</value>\n         <value>7.6950</value>\n      </row>\n      <row position=\"43\">\n         <value>75.70000000</value>\n         <value>7.8980</value>\n      </row>\n      <row position=\"44\">\n         <value>85.15000000</value>\n         <value>8.9200</value>\n      </row>\n      <row position=\"45\">\n         <value>86.84000000</value>\n         <value>9.1360</value>\n      </row>\n      <row position=\"46\">\n         <value>89.57000000</value>\n         <value>9.4700</value>\n      </row>\n      <row position=\"47\">\n         <value>91.14000000</value>\n         <value>9.4840</value>\n      </row>\n      <row position=\"48\">\n         <value>94.33000000</value>\n         <value>9.8350</value>\n      </row>\n      <row position=\"49\">\n         <value>94.88000000</value>\n         <value>9.9590</value>\n      </row>\n      <row position=\"50\">\n         <value>95.52000000</value>\n         <value>9.9440</value>\n      </row>\n      <row position=\"51\">\n         <value>96.40000000</value>\n         <value>10.0720</value>\n      </row>\n      <row position=\"52\">\n         <value>96.40000001</value>\n         <value>9.9570</value>\n      </row>\n      <row position=\"53\">\n         <value>96.44000000</value>\n         <value>10.0400</value>\n      </row>\n      <row position=\"54\">\n         <value>97.06000000</value>\n         <value>10.0550</value>\n      </row>\n      <row position=\"55\">\n         <value>97.19000000</value>\n         <value>10.1630</value>\n      </row>\n      <row position=\"56\">\n         <value>107.32000000</value>\n         <value>11.0230</value>\n      </row>\n      <row position=\"57\">\n         <value>114.26000000</value>\n         <value>11.6150</value>\n      </row>\n      <row position=\"58\">\n         <value>117.37000000</value>\n         <value>11.6000</value>\n      </row>\n      <row position=\"59\">\n         <value>118.82000000</value>\n         <value>11.9460</value>\n      </row>\n      <row position=\"60\">\n         <value>119.63000000</value>\n         <value>12.0350</value>\n      </row>\n      <row position=\"61\">\n         <value>120.25000000</value>\n         <value>12.0050</value>\n      </row>\n      <row position=\"62\">\n         <value>122.04000000</value>\n         <value>11.8700</value>\n      </row>\n      <row position=\"63\">\n         <value>127.08000000</value>\n         <value>12.4780</value>\n      </row>\n      <row position=\"64\">\n         <value>128.48000000</value>\n         <value>12.5960</value>\n      </row>\n      <row position=\"65\">\n         <value>133.27000000</value>\n         <value>12.8610</value>\n      </row>\n      <row position=\"66\">\n         <value>133.55000000</value>\n         <value>12.9820</value>\n      </row>\n      <row position=\"67\">\n         <value>133.61000000</value>\n         <value>12.9700</value>\n      </row>\n      <row position=\"68\">\n         <value>134.03000000</value>\n         <value>12.7860</value>\n      </row>\n      <row position=\"69\">\n         <value>139.08000000</value>\n         <value>13.1380</value>\n      </row>\n      <row position=\"70\">\n         <value>141.94000000</value>\n         <value>13.3030</value>\n      </row>\n      <row position=\"71\">\n         <value>143.84000000</value>\n         <value>13.4360</value>\n      </row>\n      <row position=\"72\">\n         <value>147.73000000</value>\n         <value>13.5640</value>\n      </row>\n      <row position=\"73\">\n         <value>156.92000000</value>\n         <value>13.9220</value>\n      </row>\n      <row position=\"74\">\n         <value>158.63000000</value>\n         <value>13.8710</value>\n      </row>\n      <row position=\"75\">\n         <value>158.67000000</value>\n         <value>13.9260</value>\n      </row>\n      <row position=\"76\">\n         <value>161.84000000</value>\n         <value>13.9940</value>\n      </row>\n      <row position=\"77\">\n         <value>161.91000000</value>\n         <value>14.1670</value>\n      </row>\n      <row position=\"78\">\n         <value>163.19000000</value>\n         <value>14.0670</value>\n      </row>\n      <row position=\"79\">\n         <value>163.48000000</value>\n         <value>13.9740</value>\n      </row>\n      <row position=\"80\">\n         <value>171.31000000</value>\n         <value>14.4040</value>\n      </row>\n      <row position=\"81\">\n         <value>171.65000000</value>\n         <value>14.4400</value>\n      </row>\n      <row position=\"82\">\n         <value>172.74000000</value>\n         <value>14.4520</value>\n      </row>\n      <row position=\"83\">\n         <value>175.70000000</value>\n         <value>14.4620</value>\n      </row>\n      <row position=\"84\">\n         <value>179.86000000</value>\n         <value>14.4640</value>\n      </row>\n      <row position=\"85\">\n         <value>180.67000000</value>\n         <value>14.7550</value>\n      </row>\n      <row position=\"86\">\n         <value>190.00000000</value>\n         <value>14.9510</value>\n      </row>\n      <row position=\"87\">\n         <value>192.11000000</value>\n         <value>14.9470</value>\n      </row>\n      <row position=\"88\">\n         <value>198.44000000</value>\n         <value>15.1680</value>\n      </row>\n      <row position=\"89\">\n         <value>202.14000000</value>\n         <value>15.1900</value>\n      </row>\n      <row position=\"90\">\n         <value>206.76000000</value>\n         <value>15.4730</value>\n      </row>\n      <row position=\"91\">\n         <value>209.07000000</value>\n         <value>15.3790</value>\n      </row>\n      <row position=\"92\">\n         <value>211.27000000</value>\n         <value>15.3810</value>\n      </row>\n      <row position=\"93\">\n         <value>213.32000000</value>\n         <value>15.4550</value>\n      </row>\n      <row position=\"94\">\n         <value>217.78000000</value>\n         <value>15.4830</value>\n      </row>\n      <row position=\"95\">\n         <value>219.14000000</value>\n         <value>15.5900</value>\n      </row>\n      <row position=\"96\">\n         <value>220.55000000</value>\n         <value>15.5500</value>\n      </row>\n      <row position=\"97\">\n         <value>221.05000000</value>\n         <value>15.5280</value>\n      </row>\n      <row position=\"98\">\n         <value>221.39000000</value>\n         <value>15.4990</value>\n      </row>\n      <row position=\"99\">\n         <value>223.26000000</value>\n         <value>15.6270</value>\n      </row>\n      <row position=\"100\">\n         <value>223.88000000</value>\n         <value>15.6390</value>\n      </row>\n      <row position=\"101\">\n         <value>226.44000000</value>\n         <value>15.9080</value>\n      </row>\n      <row position=\"102\">\n         <value>226.86000000</value>\n         <value>15.6510</value>\n      </row>\n      <row position=\"103\">\n         <value>229.65000000</value>\n         <value>15.7460</value>\n      </row>\n      <row position=\"104\">\n         <value>231.50000000</value>\n         <value>15.8140</value>\n      </row>\n      <row position=\"105\">\n         <value>237.12000000</value>\n         <value>16.1140</value>\n      </row>\n      <row position=\"106\">\n         <value>250.99000000</value>\n         <value>16.1310</value>\n      </row>\n      <row position=\"107\">\n         <value>253.24000000</value>\n         <value>16.0620</value>\n      </row>\n      <row position=\"108\">\n         <value>258.27000000</value>\n         <value>16.2160</value>\n      </row>\n      <row position=\"109\">\n         <value>262.52000000</value>\n         <value>16.0750</value>\n      </row>\n      <row position=\"110\">\n         <value>265.05000000</value>\n         <value>16.3150</value>\n      </row>\n      <row position=\"111\">\n         <value>268.01000000</value>\n         <value>16.3470</value>\n      </row>\n      <row position=\"112\">\n         <value>268.62000000</value>\n         <value>16.1810</value>\n      </row>\n      <row position=\"113\">\n         <value>268.99000000</value>\n         <value>16.4380</value>\n      </row>\n      <row position=\"114\">\n         <value>269.44000000</value>\n         <value>16.3340</value>\n      </row>\n      <row position=\"115\">\n         <value>271.78000000</value>\n         <value>16.4300</value>\n      </row>\n      <row position=\"116\">\n         <value>271.80000000</value>\n         <value>16.3870</value>\n      </row>\n      <row position=\"117\">\n         <value>271.97000000</value>\n         <value>16.5490</value>\n      </row>\n      <row position=\"118\">\n         <value>273.13000000</value>\n         <value>16.3370</value>\n      </row>\n      <row position=\"119\">\n         <value>273.46000000</value>\n         <value>16.4230</value>\n      </row>\n      <row position=\"120\">\n         <value>273.66000000</value>\n         <value>16.3450</value>\n      </row>\n      <row position=\"121\">\n         <value>273.77000000</value>\n         <value>16.4450</value>\n      </row>\n      <row position=\"122\">\n         <value>282.10000000</value>\n         <value>16.3880</value>\n      </row>\n      <row position=\"123\">\n         <value>321.31000000</value>\n         <value>16.8720</value>\n      </row>\n      <row position=\"124\">\n         <value>321.69000000</value>\n         <value>16.8300</value>\n      </row>\n      <row position=\"125\">\n         <value>330.14000000</value>\n         <value>16.9260</value>\n      </row>\n      <row position=\"126\">\n         <value>330.90000000</value>\n         <value>17.0710</value>\n      </row>\n      <row position=\"127\">\n         <value>333.03000000</value>\n         <value>16.9070</value>\n      </row>\n      <row position=\"128\">\n         <value>333.47000000</value>\n         <value>16.9660</value>\n      </row>\n      <row position=\"129\">\n         <value>334.61000000</value>\n         <value>17.0240</value>\n      </row>\n      <row position=\"130\">\n         <value>336.25000000</value>\n         <value>16.9150</value>\n      </row>\n      <row position=\"131\">\n         <value>337.23000000</value>\n         <value>17.0030</value>\n      </row>\n      <row position=\"132\">\n         <value>339.15000000</value>\n         <value>16.9650</value>\n      </row>\n      <row position=\"133\">\n         <value>339.33000000</value>\n         <value>16.9780</value>\n      </row>\n      <row position=\"134\">\n         <value>339.79000000</value>\n         <value>17.0090</value>\n      </row>\n      <row position=\"135\">\n         <value>340.77000000</value>\n         <value>17.0600</value>\n      </row>\n      <row position=\"136\">\n         <value>345.65000000</value>\n         <value>17.1220</value>\n      </row>\n      <row position=\"137\">\n         <value>346.62000000</value>\n         <value>17.1590</value>\n      </row>\n      <row position=\"138\">\n         <value>347.19000000</value>\n         <value>17.1160</value>\n      </row>\n      <row position=\"139\">\n         <value>348.78000000</value>\n         <value>17.1640</value>\n      </row>\n      <row position=\"140\">\n         <value>349.52000000</value>\n         <value>17.1650</value>\n      </row>\n      <row position=\"141\">\n         <value>350.13000000</value>\n         <value>17.1210</value>\n      </row>\n      <row position=\"142\">\n         <value>351.18000000</value>\n         <value>17.1230</value>\n      </row>\n      <row position=\"143\">\n         <value>358.18000001</value>\n         <value>17.1340</value>\n      </row>\n      <row position=\"144\">\n         <value>358.72000000</value>\n         <value>17.1350</value>\n      </row>\n      <row position=\"145\">\n         <value>362.75000000</value>\n         <value>17.2060</value>\n      </row>\n      <row position=\"146\">\n         <value>370.77000000</value>\n         <value>17.2820</value>\n      </row>\n      <row position=\"147\">\n         <value>371.03000000</value>\n         <value>17.2500</value>\n      </row>\n      <row position=\"148\">\n         <value>372.72000000</value>\n         <value>17.3680</value>\n      </row>\n      <row position=\"149\">\n         <value>373.11000000</value>\n         <value>17.3110</value>\n      </row>\n      <row position=\"150\">\n         <value>373.79000000</value>\n         <value>17.3550</value>\n      </row>\n      <row position=\"151\">\n         <value>377.98000000</value>\n         <value>17.3490</value>\n      </row>\n      <row position=\"152\">\n         <value>393.32000000</value>\n         <value>17.3390</value>\n      </row>\n      <row position=\"153\">\n         <value>394.77000000</value>\n         <value>17.5760</value>\n      </row>\n      <row position=\"154\">\n         <value>396.24000000</value>\n         <value>17.4830</value>\n      </row>\n      <row position=\"155\">\n         <value>411.82000000</value>\n         <value>17.6680</value>\n      </row>\n      <row position=\"156\">\n         <value>416.59000000</value>\n         <value>17.7640</value>\n      </row>\n      <row position=\"157\">\n         <value>419.51000000</value>\n         <value>17.7670</value>\n      </row>\n      <row position=\"158\">\n         <value>421.59000000</value>\n         <value>17.8030</value>\n      </row>\n      <row position=\"159\">\n         <value>422.02000000</value>\n         <value>17.7650</value>\n      </row>\n      <row position=\"160\">\n         <value>422.47000000</value>\n         <value>17.7680</value>\n      </row>\n      <row position=\"161\">\n         <value>422.61000000</value>\n         <value>17.7360</value>\n      </row>\n      <row position=\"162\">\n         <value>427.38000000</value>\n         <value>17.7560</value>\n      </row>\n      <row position=\"163\">\n         <value>428.58000000</value>\n         <value>17.8080</value>\n      </row>\n      <row position=\"164\">\n         <value>429.66000000</value>\n         <value>17.8480</value>\n      </row>\n      <row position=\"165\">\n         <value>432.68000000</value>\n         <value>17.8680</value>\n      </row>\n      <row position=\"166\">\n         <value>441.75000000</value>\n         <value>17.8580</value>\n      </row>\n      <row position=\"167\">\n         <value>447.41000000</value>\n         <value>17.8770</value>\n      </row>\n      <row position=\"168\">\n         <value>448.53000000</value>\n         <value>17.7930</value>\n      </row>\n      <row position=\"169\">\n         <value>448.70000000</value>\n         <value>17.9120</value>\n      </row>\n      <row position=\"170\">\n         <value>450.10000000</value>\n         <value>17.9790</value>\n      </row>\n      <row position=\"171\">\n         <value>450.35000000</value>\n         <value>17.9740</value>\n      </row>\n      <row position=\"172\">\n         <value>451.92000000</value>\n         <value>18.0070</value>\n      </row>\n      <row position=\"173\">\n         <value>455.56000000</value>\n         <value>17.9930</value>\n      </row>\n      <row position=\"174\">\n         <value>468.22000000</value>\n         <value>18.0900</value>\n      </row>\n      <row position=\"175\">\n         <value>472.89000000</value>\n         <value>18.0460</value>\n      </row>\n      <row position=\"176\">\n         <value>473.78000000</value>\n         <value>18.1230</value>\n      </row>\n      <row position=\"177\">\n         <value>476.69000000</value>\n         <value>18.0850</value>\n      </row>\n      <row position=\"178\">\n         <value>484.02000000</value>\n         <value>18.1850</value>\n      </row>\n      <row position=\"179\">\n         <value>487.27000000</value>\n         <value>18.2760</value>\n      </row>\n      <row position=\"180\">\n         <value>495.47000000</value>\n         <value>18.2710</value>\n      </row>\n      <row position=\"181\">\n         <value>511.12000000</value>\n         <value>18.4900</value>\n      </row>\n      <row position=\"182\">\n         <value>514.78000000</value>\n         <value>18.2360</value>\n      </row>\n      <row position=\"183\">\n         <value>515.65000000</value>\n         <value>18.2370</value>\n      </row>\n      <row position=\"184\">\n         <value>519.47000000</value>\n         <value>18.5230</value>\n      </row>\n      <row position=\"185\">\n         <value>519.54000000</value>\n         <value>18.4040</value>\n      </row>\n      <row position=\"186\">\n         <value>522.47000000</value>\n         <value>18.2910</value>\n      </row>\n      <row position=\"187\">\n         <value>522.62000000</value>\n         <value>18.3570</value>\n      </row>\n      <row position=\"188\">\n         <value>523.03000000</value>\n         <value>18.5190</value>\n      </row>\n      <row position=\"189\">\n         <value>524.43000000</value>\n         <value>18.4260</value>\n      </row>\n      <row position=\"190\">\n         <value>524.70000000</value>\n         <value>18.5660</value>\n      </row>\n      <row position=\"191\">\n         <value>528.99000000</value>\n         <value>18.4810</value>\n      </row>\n      <row position=\"192\">\n         <value>531.08000000</value>\n         <value>18.4860</value>\n      </row>\n      <row position=\"193\">\n         <value>544.47000000</value>\n         <value>18.6270</value>\n      </row>\n      <row position=\"194\">\n         <value>546.75000000</value>\n         <value>18.5840</value>\n      </row>\n      <row position=\"195\">\n         <value>548.75000000</value>\n         <value>18.6450</value>\n      </row>\n      <row position=\"196\">\n         <value>549.53000000</value>\n         <value>18.6100</value>\n      </row>\n      <row position=\"197\">\n         <value>551.64000000</value>\n         <value>18.7060</value>\n      </row>\n      <row position=\"198\">\n         <value>552.22000000</value>\n         <value>18.5230</value>\n      </row>\n      <row position=\"199\">\n         <value>553.56000000</value>\n         <value>18.6690</value>\n      </row>\n      <row position=\"200\">\n         <value>555.74000000</value>\n         <value>18.6170</value>\n      </row>\n      <row position=\"201\">\n         <value>560.11000000</value>\n         <value>18.6650</value>\n      </row>\n      <row position=\"202\">\n         <value>574.02000000</value>\n         <value>18.9240</value>\n      </row>\n      <row position=\"203\">\n         <value>575.29000000</value>\n         <value>18.8700</value>\n      </row>\n      <row position=\"204\">\n         <value>576.00000000</value>\n         <value>18.7950</value>\n      </row>\n      <row position=\"205\">\n         <value>612.99000000</value>\n         <value>19.1330</value>\n      </row>\n      <row position=\"206\">\n         <value>620.77000000</value>\n         <value>19.0860</value>\n      </row>\n      <row position=\"207\">\n         <value>622.05000000</value>\n         <value>19.2800</value>\n      </row>\n      <row position=\"208\">\n         <value>623.86000000</value>\n         <value>19.1000</value>\n      </row>\n      <row position=\"209\">\n         <value>625.55000000</value>\n         <value>19.1110</value>\n      </row>\n      <row position=\"210\">\n         <value>628.34000000</value>\n         <value>19.0900</value>\n      </row>\n      <row position=\"211\">\n         <value>631.50000000</value>\n         <value>19.1010</value>\n      </row>\n      <row position=\"212\">\n         <value>638.59000000</value>\n         <value>19.0740</value>\n      </row>\n      <row position=\"213\">\n         <value>641.36000000</value>\n         <value>19.2390</value>\n      </row>\n      <row position=\"214\">\n         <value>646.89000000</value>\n         <value>19.3240</value>\n      </row>\n      <row position=\"215\">\n         <value>646.90000000</value>\n         <value>19.2520</value>\n      </row>\n      <row position=\"216\">\n         <value>647.04000000</value>\n         <value>19.2680</value>\n      </row>\n      <row position=\"217\">\n         <value>647.61000000</value>\n         <value>19.2860</value>\n      </row>\n      <row position=\"218\">\n         <value>652.59000000</value>\n         <value>19.3710</value>\n      </row>\n      <row position=\"219\">\n         <value>656.20000000</value>\n         <value>19.3300</value>\n      </row>\n      <row position=\"220\">\n         <value>663.97000000</value>\n         <value>19.3980</value>\n      </row>\n      <row position=\"221\">\n         <value>746.90000000</value>\n         <value>20.0490</value>\n      </row>\n      <row position=\"222\">\n         <value>747.35000000</value>\n         <value>20.0620</value>\n      </row>\n      <row position=\"223\">\n         <value>747.78000000</value>\n         <value>19.9720</value>\n      </row>\n      <row position=\"224\">\n         <value>748.29000000</value>\n         <value>19.8900</value>\n      </row>\n      <row position=\"225\">\n         <value>748.43000000</value>\n         <value>20.1070</value>\n      </row>\n      <row position=\"226\">\n         <value>749.21000000</value>\n         <value>20.0070</value>\n      </row>\n      <row position=\"227\">\n         <value>749.27000000</value>\n         <value>20.0650</value>\n      </row>\n      <row position=\"228\">\n         <value>750.14000000</value>\n         <value>19.9290</value>\n      </row>\n      <row position=\"229\">\n         <value>750.51000000</value>\n         <value>20.0880</value>\n      </row>\n      <row position=\"230\">\n         <value>845.97000000</value>\n         <value>20.8300</value>\n      </row>\n      <row position=\"231\">\n         <value>847.54000000</value>\n         <value>20.9350</value>\n      </row>\n      <row position=\"232\">\n         <value>848.23000000</value>\n         <value>20.9350</value>\n      </row>\n      <row position=\"233\">\n         <value>849.75000000</value>\n         <value>21.0740</value>\n      </row>\n      <row position=\"234\">\n         <value>849.93000000</value>\n         <value>21.0350</value>\n      </row>\n      <row position=\"235\">\n         <value>850.98000000</value>\n         <value>21.0850</value>\n      </row>\n      <row position=\"236\">\n         <value>851.37000000</value>\n         <value>20.7430</value>\n      </row>\n      <row position=\"237\">\n         <value>851.61000000</value>\n         <value>20.9300</value>\n      </row>\n   </table>\n</spkdata>\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (5,'kirby2.txt','http://www.itl.nist.gov/div898/strd/nls/data/kirby2.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.08.15.48.58;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"152\">\n      <description>kirby2.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>9.6500</value>\n         <value>0.0082</value>\n      </row>\n      <row position=\"3\">\n         <value>10.7400</value>\n         <value>0.0112</value>\n      </row>\n      <row position=\"4\">\n         <value>11.8100</value>\n         <value>0.0149</value>\n      </row>\n      <row position=\"5\">\n         <value>12.8800</value>\n         <value>0.0198</value>\n      </row>\n      <row position=\"6\">\n         <value>14.0600</value>\n         <value>0.0248</value>\n      </row>\n      <row position=\"7\">\n         <value>15.2800</value>\n         <value>0.0324</value>\n      </row>\n      <row position=\"8\">\n         <value>16.6300</value>\n         <value>0.0420</value>\n      </row>\n      <row position=\"9\">\n         <value>18.1900</value>\n         <value>0.0549</value>\n      </row>\n      <row position=\"10\">\n         <value>19.8800</value>\n         <value>0.0719</value>\n      </row>\n      <row position=\"11\">\n         <value>21.8400</value>\n         <value>0.0963</value>\n      </row>\n      <row position=\"12\">\n         <value>24.0000</value>\n         <value>0.1291</value>\n      </row>\n      <row position=\"13\">\n         <value>26.2500</value>\n         <value>0.1710</value>\n      </row>\n      <row position=\"14\">\n         <value>28.8600</value>\n         <value>0.2314</value>\n      </row>\n      <row position=\"15\">\n         <value>31.8500</value>\n         <value>0.3227</value>\n      </row>\n      <row position=\"16\">\n         <value>35.7900</value>\n         <value>0.4809</value>\n      </row>\n      <row position=\"17\">\n         <value>40.1800</value>\n         <value>0.7084</value>\n      </row>\n      <row position=\"18\">\n         <value>44.7400</value>\n         <value>1.0220</value>\n      </row>\n      <row position=\"19\">\n         <value>49.5300</value>\n         <value>1.4580</value>\n      </row>\n      <row position=\"20\">\n         <value>53.9400</value>\n         <value>1.9520</value>\n      </row>\n      <row position=\"21\">\n         <value>58.2900</value>\n         <value>2.5410</value>\n      </row>\n      <row position=\"22\">\n         <value>62.6300</value>\n         <value>3.2230</value>\n      </row>\n      <row position=\"23\">\n         <value>67.0300</value>\n         <value>3.9990</value>\n      </row>\n      <row position=\"24\">\n         <value>71.2500</value>\n         <value>4.8520</value>\n      </row>\n      <row position=\"25\">\n         <value>75.2200</value>\n         <value>5.7320</value>\n      </row>\n      <row position=\"26\">\n         <value>79.3300</value>\n         <value>6.7270</value>\n      </row>\n      <row position=\"27\">\n         <value>83.5600</value>\n         <value>7.8350</value>\n      </row>\n      <row position=\"28\">\n         <value>87.7500</value>\n         <value>9.0250</value>\n      </row>\n      <row position=\"29\">\n         <value>91.9300</value>\n         <value>10.2670</value>\n      </row>\n      <row position=\"30\">\n         <value>96.1000</value>\n         <value>11.5780</value>\n      </row>\n      <row position=\"31\">\n         <value>100.2800</value>\n         <value>12.9440</value>\n      </row>\n      <row position=\"32\">\n         <value>104.4600</value>\n         <value>14.3770</value>\n      </row>\n      <row position=\"33\">\n         <value>108.6600</value>\n         <value>15.8560</value>\n      </row>\n      <row position=\"34\">\n         <value>112.7100</value>\n         <value>17.3310</value>\n      </row>\n      <row position=\"35\">\n         <value>116.8800</value>\n         <value>18.8850</value>\n      </row>\n      <row position=\"36\">\n         <value>121.3300</value>\n         <value>20.5750</value>\n      </row>\n      <row position=\"37\">\n         <value>125.7900</value>\n         <value>22.3200</value>\n      </row>\n      <row position=\"38\">\n         <value>125.7900001</value>\n         <value>22.3030</value>\n      </row>\n      <row position=\"39\">\n         <value>128.7400</value>\n         <value>23.4600</value>\n      </row>\n      <row position=\"40\">\n         <value>130.2700</value>\n         <value>24.0600</value>\n      </row>\n      <row position=\"41\">\n         <value>133.3300</value>\n         <value>25.2720</value>\n      </row>\n      <row position=\"42\">\n         <value>134.7900</value>\n         <value>25.8530</value>\n      </row>\n      <row position=\"43\">\n         <value>137.9300</value>\n         <value>27.1100</value>\n      </row>\n      <row position=\"44\">\n         <value>139.3300</value>\n         <value>27.6580</value>\n      </row>\n      <row position=\"45\">\n         <value>142.4600</value>\n         <value>28.9240</value>\n      </row>\n      <row position=\"46\">\n         <value>143.9000</value>\n         <value>29.5110</value>\n      </row>\n      <row position=\"47\">\n         <value>146.9100</value>\n         <value>30.7100</value>\n      </row>\n      <row position=\"48\">\n         <value>148.5100</value>\n         <value>31.3500</value>\n      </row>\n      <row position=\"49\">\n         <value>151.4100</value>\n         <value>32.5200</value>\n      </row>\n      <row position=\"50\">\n         <value>153.1700</value>\n         <value>33.2300</value>\n      </row>\n      <row position=\"51\">\n         <value>155.9700</value>\n         <value>34.3300</value>\n      </row>\n      <row position=\"52\">\n         <value>157.7600</value>\n         <value>35.0600</value>\n      </row>\n      <row position=\"53\">\n         <value>160.5600</value>\n         <value>36.1700</value>\n      </row>\n      <row position=\"54\">\n         <value>162.3000</value>\n         <value>36.8400</value>\n      </row>\n      <row position=\"55\">\n         <value>165.2100</value>\n         <value>38.0100</value>\n      </row>\n      <row position=\"56\">\n         <value>166.9000</value>\n         <value>38.6700</value>\n      </row>\n      <row position=\"57\">\n         <value>169.9200</value>\n         <value>39.8700</value>\n      </row>\n      <row position=\"58\">\n         <value>170.3200</value>\n         <value>40.0300</value>\n      </row>\n      <row position=\"59\">\n         <value>171.5400</value>\n         <value>40.5000</value>\n      </row>\n      <row position=\"60\">\n         <value>173.7900</value>\n         <value>41.3700</value>\n      </row>\n      <row position=\"61\">\n         <value>174.5700</value>\n         <value>41.6700</value>\n      </row>\n      <row position=\"62\">\n         <value>176.2500</value>\n         <value>42.3100</value>\n      </row>\n      <row position=\"63\">\n         <value>177.3400</value>\n         <value>42.7300</value>\n      </row>\n      <row position=\"64\">\n         <value>179.1900</value>\n         <value>43.4600</value>\n      </row>\n      <row position=\"65\">\n         <value>181.0200</value>\n         <value>44.1400</value>\n      </row>\n      <row position=\"66\">\n         <value>182.0800</value>\n         <value>44.5500</value>\n      </row>\n      <row position=\"67\">\n         <value>183.8800</value>\n         <value>45.2200</value>\n      </row>\n      <row position=\"68\">\n         <value>185.7500</value>\n         <value>45.9200</value>\n      </row>\n      <row position=\"69\">\n         <value>186.8000</value>\n         <value>46.3000</value>\n      </row>\n      <row position=\"70\">\n         <value>188.6300</value>\n         <value>47.0000</value>\n      </row>\n      <row position=\"71\">\n         <value>190.4500</value>\n         <value>47.6800</value>\n      </row>\n      <row position=\"72\">\n         <value>191.4800</value>\n         <value>48.0600</value>\n      </row>\n      <row position=\"73\">\n         <value>193.3500</value>\n         <value>48.7400</value>\n      </row>\n      <row position=\"74\">\n         <value>195.2200</value>\n         <value>49.4100</value>\n      </row>\n      <row position=\"75\">\n         <value>196.2300</value>\n         <value>49.7600</value>\n      </row>\n      <row position=\"76\">\n         <value>198.0500</value>\n         <value>50.4300</value>\n      </row>\n      <row position=\"77\">\n         <value>199.9700</value>\n         <value>51.1100</value>\n      </row>\n      <row position=\"78\">\n         <value>201.0600</value>\n         <value>51.5000</value>\n      </row>\n      <row position=\"79\">\n         <value>202.8300</value>\n         <value>52.1200</value>\n      </row>\n      <row position=\"80\">\n         <value>204.6900</value>\n         <value>52.7600</value>\n      </row>\n      <row position=\"81\">\n         <value>205.8600</value>\n         <value>53.1800</value>\n      </row>\n      <row position=\"82\">\n         <value>207.5800</value>\n         <value>53.7800</value>\n      </row>\n      <row position=\"83\">\n         <value>209.5000</value>\n         <value>54.4600</value>\n      </row>\n      <row position=\"84\">\n         <value>210.6500</value>\n         <value>54.8300</value>\n      </row>\n      <row position=\"85\">\n         <value>212.3300</value>\n         <value>55.4000</value>\n      </row>\n      <row position=\"86\">\n         <value>215.4300</value>\n         <value>56.4300</value>\n      </row>\n      <row position=\"87\">\n         <value>217.1600</value>\n         <value>57.0300</value>\n      </row>\n      <row position=\"88\">\n         <value>220.2100</value>\n         <value>58.0000</value>\n      </row>\n      <row position=\"89\">\n         <value>221.9800</value>\n         <value>58.6100</value>\n      </row>\n      <row position=\"90\">\n         <value>225.0600</value>\n         <value>59.5800</value>\n      </row>\n      <row position=\"91\">\n         <value>226.7900</value>\n         <value>60.1100</value>\n      </row>\n      <row position=\"92\">\n         <value>229.9200</value>\n         <value>61.1000</value>\n      </row>\n      <row position=\"93\">\n         <value>231.6900</value>\n         <value>61.6500</value>\n      </row>\n      <row position=\"94\">\n         <value>234.7700</value>\n         <value>62.5900</value>\n      </row>\n      <row position=\"95\">\n         <value>236.6000</value>\n         <value>63.1200</value>\n      </row>\n      <row position=\"96\">\n         <value>239.6300</value>\n         <value>64.0300</value>\n      </row>\n      <row position=\"97\">\n         <value>241.5000</value>\n         <value>64.6200</value>\n      </row>\n      <row position=\"98\">\n         <value>244.4800</value>\n         <value>65.4900</value>\n      </row>\n      <row position=\"99\">\n         <value>246.4000</value>\n         <value>66.0300</value>\n      </row>\n      <row position=\"100\">\n         <value>249.3500</value>\n         <value>66.8900</value>\n      </row>\n      <row position=\"101\">\n         <value>251.3200</value>\n         <value>67.4200</value>\n      </row>\n      <row position=\"102\">\n         <value>254.2200</value>\n         <value>68.2300</value>\n      </row>\n      <row position=\"103\">\n         <value>256.2400</value>\n         <value>68.7700</value>\n      </row>\n      <row position=\"104\">\n         <value>259.1100</value>\n         <value>69.5900</value>\n      </row>\n      <row position=\"105\">\n         <value>261.1800</value>\n         <value>70.1100</value>\n      </row>\n      <row position=\"106\">\n         <value>264.0200</value>\n         <value>70.8600</value>\n      </row>\n      <row position=\"107\">\n         <value>266.1300</value>\n         <value>71.4300</value>\n      </row>\n      <row position=\"108\">\n         <value>268.9400</value>\n         <value>72.1600</value>\n      </row>\n      <row position=\"109\">\n         <value>271.0900</value>\n         <value>72.7000</value>\n      </row>\n      <row position=\"110\">\n         <value>273.8700</value>\n         <value>73.4000</value>\n      </row>\n      <row position=\"111\">\n         <value>276.0800</value>\n         <value>73.9300</value>\n      </row>\n      <row position=\"112\">\n         <value>278.8300</value>\n         <value>74.6000</value>\n      </row>\n      <row position=\"113\">\n         <value>281.0800</value>\n         <value>75.1600</value>\n      </row>\n      <row position=\"114\">\n         <value>283.8100</value>\n         <value>75.8200</value>\n      </row>\n      <row position=\"115\">\n         <value>286.1100</value>\n         <value>76.3400</value>\n      </row>\n      <row position=\"116\">\n         <value>288.8100</value>\n         <value>76.9800</value>\n      </row>\n      <row position=\"117\">\n         <value>291.0800</value>\n         <value>77.4800</value>\n      </row>\n      <row position=\"118\">\n         <value>293.7500</value>\n         <value>78.0800</value>\n      </row>\n      <row position=\"119\">\n         <value>295.9900</value>\n         <value>78.6000</value>\n      </row>\n      <row position=\"120\">\n         <value>298.6400</value>\n         <value>79.1700</value>\n      </row>\n      <row position=\"121\">\n         <value>300.8400</value>\n         <value>79.6200</value>\n      </row>\n      <row position=\"122\">\n         <value>302.0200</value>\n         <value>79.8800</value>\n      </row>\n      <row position=\"123\">\n         <value>303.4800</value>\n         <value>80.1900</value>\n      </row>\n      <row position=\"124\">\n         <value>305.6500</value>\n         <value>80.6600</value>\n      </row>\n      <row position=\"125\">\n         <value>308.2700</value>\n         <value>81.2200</value>\n      </row>\n      <row position=\"126\">\n         <value>310.4100</value>\n         <value>81.6600</value>\n      </row>\n      <row position=\"127\">\n         <value>313.0100</value>\n         <value>82.1600</value>\n      </row>\n      <row position=\"128\">\n         <value>315.1200</value>\n         <value>82.5900</value>\n      </row>\n      <row position=\"129\">\n         <value>317.7100</value>\n         <value>83.1400</value>\n      </row>\n      <row position=\"130\">\n         <value>319.7900</value>\n         <value>83.5000</value>\n      </row>\n      <row position=\"131\">\n         <value>322.3600</value>\n         <value>84.0000</value>\n      </row>\n      <row position=\"132\">\n         <value>324.4200</value>\n         <value>84.4000</value>\n      </row>\n      <row position=\"133\">\n         <value>326.9800</value>\n         <value>84.8900</value>\n      </row>\n      <row position=\"134\">\n         <value>329.0100</value>\n         <value>85.2600</value>\n      </row>\n      <row position=\"135\">\n         <value>331.5600</value>\n         <value>85.7400</value>\n      </row>\n      <row position=\"136\">\n         <value>333.5600</value>\n         <value>86.0700</value>\n      </row>\n      <row position=\"137\">\n         <value>336.1000</value>\n         <value>86.5400</value>\n      </row>\n      <row position=\"138\">\n         <value>338.0800</value>\n         <value>86.8900</value>\n      </row>\n      <row position=\"139\">\n         <value>340.6000</value>\n         <value>87.3200</value>\n      </row>\n      <row position=\"140\">\n         <value>342.5700</value>\n         <value>87.6500</value>\n      </row>\n      <row position=\"141\">\n         <value>345.0800</value>\n         <value>88.1000</value>\n      </row>\n      <row position=\"142\">\n         <value>347.0200</value>\n         <value>88.4300</value>\n      </row>\n      <row position=\"143\">\n         <value>349.5200</value>\n         <value>88.8300</value>\n      </row>\n      <row position=\"144\">\n         <value>351.4400</value>\n         <value>89.1200</value>\n      </row>\n      <row position=\"145\">\n         <value>353.9300</value>\n         <value>89.5400</value>\n      </row>\n      <row position=\"146\">\n         <value>355.8300</value>\n         <value>89.8500</value>\n      </row>\n      <row position=\"147\">\n         <value>358.3200</value>\n         <value>90.2500</value>\n      </row>\n      <row position=\"148\">\n         <value>360.2000</value>\n         <value>90.5500</value>\n      </row>\n      <row position=\"149\">\n         <value>362.6700</value>\n         <value>90.9300</value>\n      </row>\n      <row position=\"150\">\n         <value>364.5300</value>\n         <value>91.2000</value>\n      </row>\n      <row position=\"151\">\n         <value>367.0000</value>\n         <value>91.5500</value>\n      </row>\n      <row position=\"152\">\n         <value>371.3000</value>\n         <value>92.2000</value>\n      </row>\n   </table>\n</spkdata>\r\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (6,'mgh17.txt','http://www.itl.nist.gov/div898/strd/nls/data/mgh17.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.09.57.41;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"34\">\n      <description>mgh17.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>0.00E+00</value>\n         <value>8.44E-01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.00E+01</value>\n         <value>9.08E-01</value>\n      </row>\n      <row position=\"4\">\n         <value>2.00E+01</value>\n         <value>9.32E-01</value>\n      </row>\n      <row position=\"5\">\n         <value>3.00E+01</value>\n         <value>9.36E-01</value>\n      </row>\n      <row position=\"6\">\n         <value>4.00E+01</value>\n         <value>9.25E-01</value>\n      </row>\n      <row position=\"7\">\n         <value>5.00E+01</value>\n         <value>9.08E-01</value>\n      </row>\n      <row position=\"8\">\n         <value>6.00E+01</value>\n         <value>8.81E-01</value>\n      </row>\n      <row position=\"9\">\n         <value>7.00E+01</value>\n         <value>8.50E-01</value>\n      </row>\n      <row position=\"10\">\n         <value>8.00E+01</value>\n         <value>8.18E-01</value>\n      </row>\n      <row position=\"11\">\n         <value>9.00E+01</value>\n         <value>7.84E-01</value>\n      </row>\n      <row position=\"12\">\n         <value>1.00E+02</value>\n         <value>7.51E-01</value>\n      </row>\n      <row position=\"13\">\n         <value>1.10E+02</value>\n         <value>7.18E-01</value>\n      </row>\n      <row position=\"14\">\n         <value>1.20E+02</value>\n         <value>6.85E-01</value>\n      </row>\n      <row position=\"15\">\n         <value>1.30E+02</value>\n         <value>6.58E-01</value>\n      </row>\n      <row position=\"16\">\n         <value>1.40E+02</value>\n         <value>6.28E-01</value>\n      </row>\n      <row position=\"17\">\n         <value>1.50E+02</value>\n         <value>6.03E-01</value>\n      </row>\n      <row position=\"18\">\n         <value>1.60E+02</value>\n         <value>5.80E-01</value>\n      </row>\n      <row position=\"19\">\n         <value>1.70E+02</value>\n         <value>5.58E-01</value>\n      </row>\n      <row position=\"20\">\n         <value>1.80E+02</value>\n         <value>5.38E-01</value>\n      </row>\n      <row position=\"21\">\n         <value>1.90E+02</value>\n         <value>5.22E-01</value>\n      </row>\n      <row position=\"22\">\n         <value>2.00E+02</value>\n         <value>5.06E-01</value>\n      </row>\n      <row position=\"23\">\n         <value>2.10E+02</value>\n         <value>4.90E-01</value>\n      </row>\n      <row position=\"24\">\n         <value>2.20E+02</value>\n         <value>4.78E-01</value>\n      </row>\n      <row position=\"25\">\n         <value>2.30E+02</value>\n         <value>4.67E-01</value>\n      </row>\n      <row position=\"26\">\n         <value>2.40E+02</value>\n         <value>4.57E-01</value>\n      </row>\n      <row position=\"27\">\n         <value>2.50E+02</value>\n         <value>4.48E-01</value>\n      </row>\n      <row position=\"28\">\n         <value>2.60E+02</value>\n         <value>4.38E-01</value>\n      </row>\n      <row position=\"29\">\n         <value>2.70E+02</value>\n         <value>4.31E-01</value>\n      </row>\n      <row position=\"30\">\n         <value>2.80E+02</value>\n         <value>4.24E-01</value>\n      </row>\n      <row position=\"31\">\n         <value>2.90E+02</value>\n         <value>4.20E-01</value>\n      </row>\n      <row position=\"32\">\n         <value>3.00E+02</value>\n         <value>4.14E-01</value>\n      </row>\n      <row position=\"33\">\n         <value>3.10E+02</value>\n         <value>4.11E-01</value>\n      </row>\n      <row position=\"34\">\n         <value>3.20E+02</value>\n         <value>4.06E-01</value>\n      </row>\n   </table>\n</spkdata>\r\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (7,'misra1c.txt','http://www.itl.nist.gov/div898/strd/nls/data/misra1c.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.09.16;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"15\">\n      <description>misra1c.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>7.76E+01</value>\n         <value>1.01E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.15E+02</value>\n         <value>1.47E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.41E+02</value>\n         <value>1.79E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.91E+02</value>\n         <value>2.39E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>2.40E+02</value>\n         <value>2.96E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>2.89E+02</value>\n         <value>3.52E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>3.33E+02</value>\n         <value>4.00E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>3.78E+02</value>\n         <value>4.48E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>4.35E+02</value>\n         <value>5.08E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>4.77E+02</value>\n         <value>5.51E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>5.37E+02</value>\n         <value>6.10E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>5.93E+02</value>\n         <value>6.64E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>6.89E+02</value>\n         <value>7.55E+01</value>\n      </row>\n      <row position=\"15\">\n         <value>7.60E+02</value>\n         <value>8.18E+01</value>\n      </row>\n   </table>\n</spkdata>\r\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (8,'misra1d.txt','http://www.itl.nist.gov/div898/strd/nls/data/misra1d.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.19.09;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"14\">\n      <description>misra1d.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>7.76E+01</value>\n         <value>1.01E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.15E+02</value>\n         <value>1.47E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.41E+02</value>\n         <value>1.79E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.91E+02</value>\n         <value>2.39E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>2.40E+02</value>\n         <value>2.96E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>2.89E+02</value>\n         <value>3.52E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>3.33E+02</value>\n         <value>4.00E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>3.78E+02</value>\n         <value>4.48E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>4.35E+02</value>\n         <value>5.08E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>4.77E+02</value>\n         <value>5.51E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>5.37E+02</value>\n         <value>6.10E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>5.93E+02</value>\n         <value>6.64E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>6.89E+02</value>\n         <value>7.55E+01</value>\n      </row>\n   </table>\n</spkdata>\r\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (9,'nelson.txt','http://www.itl.nist.gov/div898/strd/nls/data/nelson.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.41.03;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"3\" rows=\"129\">\n      <description>nelson.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">x2</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>1.00001</value>\n         <value>1.80E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.00002</value>\n         <value>1.80E+02</value>\n         <value>1.70E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.00003</value>\n         <value>1.80E+02</value>\n         <value>1.55E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.00004</value>\n         <value>1.80E+02</value>\n         <value>1.65E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>1.00005</value>\n         <value>2.25E+02</value>\n         <value>1.55E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>1.00006</value>\n         <value>2.25E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>1.00007</value>\n         <value>2.25E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>1.00008</value>\n         <value>2.25E+02</value>\n         <value>1.45E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>1.00009</value>\n         <value>2.50E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>1.00010</value>\n         <value>2.50E+02</value>\n         <value>1.45E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>1.00011</value>\n         <value>2.50E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>1.00012</value>\n         <value>2.50E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>1.00013</value>\n         <value>2.75E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"15\">\n         <value>1.00014</value>\n         <value>2.75E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"16\">\n         <value>1.00015</value>\n         <value>2.75E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"17\">\n         <value>1.00016</value>\n         <value>2.75E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"18\">\n         <value>2.00001</value>\n         <value>1.80E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"19\">\n         <value>2.00002</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"20\">\n         <value>2.00003</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"21\">\n         <value>2.00004</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"22\">\n         <value>2.00005</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"23\">\n         <value>2.00006</value>\n         <value>2.25E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"24\">\n         <value>2.00007</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"25\">\n         <value>2.00008</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"26\">\n         <value>2.00009</value>\n         <value>2.50E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"27\">\n         <value>2.00010</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"28\">\n         <value>2.00011</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"29\">\n         <value>2.00012</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"30\">\n         <value>2.00013</value>\n         <value>2.75E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"31\">\n         <value>2.00014</value>\n         <value>2.75E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"32\">\n         <value>2.00015</value>\n         <value>2.75E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"33\">\n         <value>2.00016</value>\n         <value>2.75E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"34\">\n         <value>4.00001</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"35\">\n         <value>4.00002</value>\n         <value>1.80E+02</value>\n         <value>1.75E+01</value>\n      </row>\n      <row position=\"36\">\n         <value>4.00003</value>\n         <value>1.80E+02</value>\n         <value>1.75E+01</value>\n      </row>\n      <row position=\"37\">\n         <value>4.00004</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"38\">\n         <value>4.00005</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"39\">\n         <value>4.00006</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"40\">\n         <value>4.00007</value>\n         <value>2.25E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"41\">\n         <value>4.00008</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"42\">\n         <value>4.00009</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"43\">\n         <value>4.00010</value>\n         <value>2.50E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"44\">\n         <value>4.00011</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"45\">\n         <value>4.00012</value>\n         <value>2.50E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"46\">\n         <value>4.00013</value>\n         <value>2.75E+02</value>\n         <value>1.00E+01</value>\n      </row>\n      <row position=\"47\">\n         <value>4.00014</value>\n         <value>2.75E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"48\">\n         <value>4.00015</value>\n         <value>2.75E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"49\">\n         <value>4.00016</value>\n         <value>2.75E+02</value>\n         <value>9.50E+00</value>\n      </row>\n      <row position=\"50\">\n         <value>8.00001</value>\n         <value>1.80E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"51\">\n         <value>8.00002</value>\n         <value>1.80E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"52\">\n         <value>8.00003</value>\n         <value>1.80E+02</value>\n         <value>1.55E+01</value>\n      </row>\n      <row position=\"53\">\n         <value>8.00004</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"54\">\n         <value>8.00005</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"55\">\n         <value>8.00006</value>\n         <value>2.25E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"56\">\n         <value>8.00007</value>\n         <value>2.25E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"57\">\n         <value>8.00008</value>\n         <value>2.25E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"58\">\n         <value>8.00009</value>\n         <value>2.50E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"59\">\n         <value>8.00010</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"60\">\n         <value>8.00011</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"61\">\n         <value>8.00012</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"62\">\n         <value>8.00013</value>\n         <value>2.75E+02</value>\n         <value>6.50E+00</value>\n      </row>\n      <row position=\"63\">\n         <value>8.00014</value>\n         <value>2.75E+02</value>\n         <value>5.50E+00</value>\n      </row>\n      <row position=\"64\">\n         <value>8.00015</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"65\">\n         <value>8.00016</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"66\">\n         <value>16.00001</value>\n         <value>1.80E+02</value>\n         <value>1.85E+01</value>\n      </row>\n      <row position=\"67\">\n         <value>16.00002</value>\n         <value>1.80E+02</value>\n         <value>1.70E+01</value>\n      </row>\n      <row position=\"68\">\n         <value>16.00003</value>\n         <value>1.80E+02</value>\n         <value>1.53E+01</value>\n      </row>\n      <row position=\"69\">\n         <value>16.00004</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"70\">\n         <value>16.00005</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"71\">\n         <value>16.00006</value>\n         <value>2.25E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"72\">\n         <value>16.00007</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"73\">\n         <value>16.00008</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"74\">\n         <value>16.00009</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"75\">\n         <value>16.00010</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"76\">\n         <value>16.00011</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"77\">\n         <value>16.00012</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"78\">\n         <value>16.00013</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"79\">\n         <value>16.00014</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"80\">\n         <value>16.00015</value>\n         <value>2.75E+02</value>\n         <value>5.00E+00</value>\n      </row>\n      <row position=\"81\">\n         <value>16.00016</value>\n         <value>2.75E+02</value>\n         <value>5.50E+00</value>\n      </row>\n      <row position=\"82\">\n         <value>32.00001</value>\n         <value>1.80E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"83\">\n         <value>32.00002</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"84\">\n         <value>32.00003</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"85\">\n         <value>32.00004</value>\n         <value>1.80E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"86\">\n         <value>32.00005</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"87\">\n         <value>32.00006</value>\n         <value>2.25E+02</value>\n         <value>9.50E+00</value>\n      </row>\n      <row position=\"88\">\n         <value>32.00007</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"89\">\n         <value>32.00008</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"90\">\n         <value>32.00009</value>\n         <value>2.50E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"91\">\n         <value>32.00010</value>\n         <value>2.50E+02</value>\n         <value>1.00E+01</value>\n      </row>\n      <row position=\"92\">\n         <value>32.00011</value>\n         <value>2.50E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"93\">\n         <value>32.00012</value>\n         <value>2.50E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"94\">\n         <value>32.00013</value>\n         <value>2.75E+02</value>\n         <value>2.70E+00</value>\n      </row>\n      <row position=\"95\">\n         <value>32.00014</value>\n         <value>2.75E+02</value>\n         <value>2.70E+00</value>\n      </row>\n      <row position=\"96\">\n         <value>32.00015</value>\n         <value>2.75E+02</value>\n         <value>2.50E+00</value>\n      </row>\n      <row position=\"97\">\n         <value>32.00016</value>\n         <value>2.75E+02</value>\n         <value>2.40E+00</value>\n      </row>\n      <row position=\"98\">\n         <value>48.00001</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"99\">\n         <value>48.00002</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"100\">\n         <value>48.00003</value>\n         <value>1.80E+02</value>\n         <value>1.65E+01</value>\n      </row>\n      <row position=\"101\">\n         <value>48.00004</value>\n         <value>1.80E+02</value>\n         <value>1.36E+01</value>\n      </row>\n      <row position=\"102\">\n         <value>48.00005</value>\n         <value>2.25E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"103\">\n         <value>48.00006</value>\n         <value>2.25E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"104\">\n         <value>48.00007</value>\n         <value>2.25E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"105\">\n         <value>48.00008</value>\n         <value>2.25E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"106\">\n         <value>48.00009</value>\n         <value>2.50E+02</value>\n         <value>7.00E+00</value>\n      </row>\n      <row position=\"107\">\n         <value>48.00010</value>\n         <value>2.50E+02</value>\n         <value>6.90E+00</value>\n      </row>\n      <row position=\"108\">\n         <value>48.00011</value>\n         <value>2.50E+02</value>\n         <value>8.80E+00</value>\n      </row>\n      <row position=\"109\">\n         <value>48.00012</value>\n         <value>2.50E+02</value>\n         <value>7.90E+00</value>\n      </row>\n      <row position=\"110\">\n         <value>48.00013</value>\n         <value>2.75E+02</value>\n         <value>1.20E+00</value>\n      </row>\n      <row position=\"111\">\n         <value>48.00014</value>\n         <value>2.75E+02</value>\n         <value>1.50E+00</value>\n      </row>\n      <row position=\"112\">\n         <value>48.00015</value>\n         <value>2.75E+02</value>\n         <value>1.00E+00</value>\n      </row>\n      <row position=\"113\">\n         <value>48.00016</value>\n         <value>2.75E+02</value>\n         <value>1.50E+00</value>\n      </row>\n      <row position=\"114\">\n         <value>64.00001</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"115\">\n         <value>64.00002</value>\n         <value>1.80E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"116\">\n         <value>64.00003</value>\n         <value>1.80E+02</value>\n         <value>1.65E+01</value>\n      </row>\n      <row position=\"117\">\n         <value>64.00004</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"118\">\n         <value>64.00005</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"119\">\n         <value>64.00006</value>\n         <value>2.25E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"120\">\n         <value>64.00007</value>\n         <value>2.25E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"121\">\n         <value>64.00008</value>\n         <value>2.25E+02</value>\n         <value>1.00E+01</value>\n      </row>\n      <row position=\"122\">\n         <value>64.00009</value>\n         <value>2.50E+02</value>\n         <value>7.27E+00</value>\n      </row>\n      <row position=\"123\">\n         <value>64.00010</value>\n         <value>2.50E+02</value>\n         <value>7.50E+00</value>\n      </row>\n      <row position=\"124\">\n         <value>64.00011</value>\n         <value>2.50E+02</value>\n         <value>6.70E+00</value>\n      </row>\n      <row position=\"125\">\n         <value>64.00012</value>\n         <value>2.50E+02</value>\n         <value>7.60E+00</value>\n      </row>\n      <row position=\"126\">\n         <value>64.00013</value>\n         <value>2.75E+02</value>\n         <value>1.50E+00</value>\n      </row>\n      <row position=\"127\">\n         <value>64.00014</value>\n         <value>2.75E+02</value>\n         <value>1.00E+00</value>\n      </row>\n      <row position=\"128\">\n         <value>64.00015</value>\n         <value>2.75E+02</value>\n         <value>1.20E+00</value>\n      </row>\n      <row position=\"129\">\n         <value>64.00016</value>\n         <value>2.75E+02</value>\n         <value>1.20E+00</value>\n      </row>\n   </table>\n</spkdata>\r\n@\n',3);
INSERT INTO dataset (dataset_id, name, abstract, archive, user_id) VALUES (10,'norris.txt','http://www.itl.nist.gov/div898/strd/lls/data/LINKS/v-Norris.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.27.16.47.10;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"37\">\n      <description>norris.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">DV</value>\n         <value type=\"string\">TIME</value>\n      </row>\n      <row position=\"2\">\n         <value>0.1</value>\n         <value>0.2</value>\n      </row>\n      <row position=\"3\">\n         <value>338.8</value>\n         <value>337.4</value>\n      </row>\n      <row position=\"4\">\n         <value>118.1</value>\n         <value>118.2</value>\n      </row>\n      <row position=\"5\">\n         <value>888.0</value>\n         <value>884.6</value>\n      </row>\n      <row position=\"6\">\n         <value>9.2</value>\n         <value>10.1</value>\n      </row>\n      <row position=\"7\">\n         <value>228.1</value>\n         <value>226.5</value>\n      </row>\n      <row position=\"8\">\n         <value>668.5</value>\n         <value>666.3</value>\n      </row>\n      <row position=\"9\">\n         <value>998.5</value>\n         <value>996.3</value>\n      </row>\n      <row position=\"10\">\n         <value>449.1</value>\n         <value>448.6</value>\n      </row>\n      <row position=\"11\">\n         <value>778.9</value>\n         <value>777.0</value>\n      </row>\n      <row position=\"12\">\n         <value>559.2</value>\n         <value>558.2</value>\n      </row>\n      <row position=\"13\">\n         <value>0.3</value>\n         <value>0.4</value>\n      </row>\n      <row position=\"14\">\n         <value>0.1</value>\n         <value>0.6</value>\n      </row>\n      <row position=\"15\">\n         <value>778.1</value>\n         <value>775.5</value>\n      </row>\n      <row position=\"16\">\n         <value>668.8</value>\n         <value>666.9</value>\n      </row>\n      <row position=\"17\">\n         <value>339.3</value>\n         <value>338.0</value>\n      </row>\n      <row position=\"18\">\n         <value>448.9</value>\n         <value>447.5</value>\n      </row>\n      <row position=\"19\">\n         <value>10.8</value>\n         <value>11.6</value>\n      </row>\n      <row position=\"20\">\n         <value>557.7</value>\n         <value>556.0</value>\n      </row>\n      <row position=\"21\">\n         <value>228.3</value>\n         <value>228.1</value>\n      </row>\n      <row position=\"22\">\n         <value>998.0</value>\n         <value>995.8</value>\n      </row>\n      <row position=\"23\">\n         <value>888.8</value>\n         <value>887.6</value>\n      </row>\n      <row position=\"24\">\n         <value>119.6</value>\n         <value>120.2</value>\n      </row>\n      <row position=\"25\">\n         <value>0.3</value>\n         <value>0.3</value>\n      </row>\n      <row position=\"26\">\n         <value>0.6</value>\n         <value>0.3</value>\n      </row>\n      <row position=\"27\">\n         <value>557.6</value>\n         <value>556.8</value>\n      </row>\n      <row position=\"28\">\n         <value>339.3</value>\n         <value>339.1</value>\n      </row>\n      <row position=\"29\">\n         <value>888.0</value>\n         <value>887.2</value>\n      </row>\n      <row position=\"30\">\n         <value>998.5</value>\n         <value>999.0</value>\n      </row>\n      <row position=\"31\">\n         <value>778.9</value>\n         <value>779.0</value>\n      </row>\n      <row position=\"32\">\n         <value>10.2</value>\n         <value>11.1</value>\n      </row>\n      <row position=\"33\">\n         <value>117.6</value>\n         <value>118.3</value>\n      </row>\n      <row position=\"34\">\n         <value>228.9</value>\n         <value>229.2</value>\n      </row>\n      <row position=\"35\">\n         <value>668.4</value>\n         <value>669.1</value>\n      </row>\n      <row position=\"36\">\n         <value>449.2</value>\n         <value>448.9</value>\n      </row>\n      <row position=\"37\">\n         <value>0.2</value>\n         <value>0.5</value>\n      </row>\n   </table>\n</spkdata>\r\n@\n',3);

--
-- Table structure for table `end`
--

CREATE TABLE end (
  end_code char(4) NOT NULL default '',
  end_name char(20) default NULL,
  PRIMARY KEY  (end_code)
) TYPE=MyISAM;

--
-- Dumping data for table `end`
--

INSERT INTO end (end_code, end_name) VALUES ('cerr','Compiler Error');
INSERT INTO end (end_code, end_name) VALUES ('herr','Hard Fault');
INSERT INTO end (end_code, end_name) VALUES ('serr','Software Error');
INSERT INTO end (end_code, end_name) VALUES ('srun','Successful Run');

--
-- Table structure for table `history`
--

CREATE TABLE history (
  history_id int(10) unsigned NOT NULL auto_increment,
  event_time int(10) unsigned NOT NULL default '0',
  state_code char(3) NOT NULL default '',
  job_id int(10) unsigned NOT NULL default '0',
  host varchar(100) NOT NULL default '',
  PRIMARY KEY  (history_id)
) TYPE=InnoDB;

--
-- Dumping data for table `history`
--

INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (1,1081196561,'q2c',1,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (2,1081196809,'q2c',2,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (3,1081198911,'q2c',3,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (4,1081199572,'q2c',4,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (5,1081200059,'q2c',5,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (6,1081200409,'q2c',6,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (7,1081464538,'q2c',7,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (8,1081464794,'q2c',8,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (9,1082480261,'q2c',9,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (10,1082480646,'q2c',10,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (11,1082480956,'q2c',11,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (12,1082481296,'q2c',12,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (13,1082481549,'q2c',13,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (14,1082481737,'q2c',14,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (15,1082482863,'q2c',15,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (16,1083109630,'q2c',16,'');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (17,1084575617,'cmp',1,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (18,1084575618,'cmp',2,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (19,1084575619,'q2r',1,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (20,1084575619,'q2r',2,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (21,1084575620,'cmp',3,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (22,1084575621,'cmp',4,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (23,1084575621,'q2r',3,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (24,1084575621,'q2r',4,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (25,1084575622,'cmp',5,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (26,1084575623,'cmp',6,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (27,1084575623,'q2r',5,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (28,1084575623,'q2r',6,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (29,1084575624,'cmp',7,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (30,1084575625,'cmp',8,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (31,1084575625,'q2r',7,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (32,1084575625,'q2r',8,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (33,1084575626,'cmp',9,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (34,1084575627,'q2r',9,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (35,1084575628,'cmp',10,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (36,1084575629,'cmp',11,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (37,1084575629,'q2r',10,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (38,1084575629,'q2r',11,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (39,1084575630,'cmp',12,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (40,1084575630,'q2r',12,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (41,1084575631,'cmp',13,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (42,1084575631,'q2r',13,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (43,1084575632,'cmp',14,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (44,1084575633,'cmp',15,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (45,1084575633,'q2r',14,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (46,1084575633,'q2r',15,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (47,1084575634,'cmp',16,'whitechuck.rfpk.washington.edu');
INSERT INTO history (history_id, event_time, state_code, job_id, host) VALUES (48,1084575635,'q2r',16,'whitechuck.rfpk.washington.edu');

--
-- Table structure for table `job`
--

CREATE TABLE job (
  job_id int(10) unsigned NOT NULL auto_increment,
  user_id int(10) unsigned NOT NULL default '0',
  abstract varchar(100) NOT NULL default '',
  dataset_id int(10) unsigned NOT NULL default '0',
  dataset_version varchar(10) NOT NULL default '',
  model_id int(10) unsigned NOT NULL default '0',
  model_version varchar(10) NOT NULL default '',
  xml_source longblob,
  state_code char(3) NOT NULL default '',
  report longblob,
  start_time int(10) unsigned NOT NULL default '0',
  event_time int(10) unsigned NOT NULL default '0',
  cpp_source longblob,
  end_code varchar(4) default NULL,
  PRIMARY KEY  (job_id)
) TYPE=InnoDB;

--
-- Dumping data for table `job`
--

INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (1,3,'THEOPHYLLINE POPULATION DATA 1',1,'1',1,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <pop_analysis approximation=\"fo\" is_estimation=\"yes\" is_eta_out=\"no\" is_restart=\"no\" pop_size=\"12\" mitr=\"450\">\n            <description>THEOPHYLLINE POPULATION DATA</description>\n            <data_labels>\n               <label name=\"ID\"/>\n               <label name=\"AMT\" synonym=\"DOSE\"/>\n               <label name=\"TIME\"/>\n               <label name=\"DV\" synonym=\"CP\"/>\n               <label name=\"WT\"/>\n            </data_labels>\n            <theta length=\"3\">\n               <low>\n                  <value fixed=\"no\">.1</value>\n                  <value fixed=\"no\">.008</value>\n                  <value fixed=\"no\">.004</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">3</value>\n                  <value fixed=\"no\">.08</value>\n                  <value fixed=\"no\">.04</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5</value>\n                  <value fixed=\"no\">.5</value>\n                  <value fixed=\"no\">.9</value>\n               </up>\n            </theta>\n            <omega dimension=\"3\" same_as_previous=\"no\" struct=\"block\">\n               <in>\n                  <value fixed=\"no\">6</value>\n                  <value fixed=\"no\">.005</value>\n                  <value fixed=\"no\">.0002</value>\n                  <value fixed=\"no\">.3</value>\n                  <value fixed=\"no\">.006</value>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </omega>\n            <sigma dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </sigma>\n            <pop_stat covariance_form=\"rsr\"/>\n         </pop_analysis>\n      </constraint>\n      <model>\n         <pred>\n;THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n;THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n;THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n;DOSE=WT-ADJUSTED DOSE (MG/KG)\n;DS=NON-WT-ADJUSTED DOSE (MG)\n   IF (DOSE.NE.0) THEN\n      DS=DOSE*WT\n      W=WT\n   ENDIF\n   KA=THETA(1)+ETA(1)\n   KE=THETA(2)+ETA(2)\n   CL=THETA(3)*W+ETA(3)\n   D=EXP(-KE*TIME)-EXP(-KA*TIME)\n   E=CL*(KA-KE)\n   F=DS*KE*KA/E*D\n   Y=F+EPS(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\">\n            <column appearance_order=\"1\" label=\"ID\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DOSE\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"WT\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"7\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"8\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"hide\" x0_line=\"hide\" y0_line=\"hide\">\n            <x label=\"RES\"/>\n            <x label=\"WRES\"/>\n            <y label=\"TIME\"/>\n            <split label=\"ID\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\n','q2r',NULL,1081196561,1084575619,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000061406\010051247601\0011211\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"5\" rows=\"133\">\n      <description>THEO</description>\n      <row position=\"1\">\n         <value type=\"string\">ID</value>\n         <value type=\"string\">AMT</value>\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n         <value type=\"string\">WT</value>\n      </row>\n      <row position=\"2\">\n         <value type=\"string\">1</value>\n         <value>4.02</value>\n         <value>0.</value>\n         <value>.74</value>\n         <value>79.6</value>\n      </row>\n      <row position=\"3\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.25</value>\n         <value>2.84</value>\n         <value>.</value>\n      </row>\n      <row position=\"4\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.57</value>\n         <value>6.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"5\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>1.12</value>\n         <value>10.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"6\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"7\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>3.82</value>\n         <value>8.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"8\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>5.1</value>\n         <value>8.36</value>\n         <value>.</value>\n      </row>\n      <row position=\"9\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>7.47</value>\n         <value>.</value>\n      </row>\n      <row position=\"10\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>9.05</value>\n         <value>6.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"11\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>5.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"12\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>24.37</value>\n         <value>3.28</value>\n         <value>.</value>\n      </row>\n      <row position=\"13\">\n         <value type=\"string\">2</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.4</value>\n      </row>\n      <row position=\"14\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"15\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>7.91</value>\n         <value>.</value>\n      </row>\n      <row position=\"16\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>8.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"17\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.92</value>\n         <value>8.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"18\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>6.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"19\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"20\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>5.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"21\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.55</value>\n         <value>.</value>\n      </row>\n      <row position=\"22\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>3.01</value>\n         <value>.</value>\n      </row>\n      <row position=\"23\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>24.3</value>\n         <value>.90</value>\n         <value>.</value>\n      </row>\n      <row position=\"24\">\n         <value type=\"string\">3</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"25\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>4.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"26\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>6.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"27\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>8.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"28\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.8</value>\n         <value>.</value>\n      </row>\n      <row position=\"29\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>3.62</value>\n         <value>7.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"30\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>5.08</value>\n         <value>6.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"31\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>5.3</value>\n         <value>.</value>\n      </row>\n      <row position=\"32\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"33\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>12.15</value>\n         <value>3.7</value>\n         <value>.</value>\n      </row>\n      <row position=\"34\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>24.17</value>\n         <value>1.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"35\">\n         <value type=\"string\">4</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.7</value>\n      </row>\n      <row position=\"36\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.35</value>\n         <value>1.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"37\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.6</value>\n         <value>4.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"38\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>1.07</value>\n         <value>8.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"39\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>2.13</value>\n         <value>8.38</value>\n         <value>.</value>\n      </row>\n      <row position=\"40\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>7.54</value>\n         <value>.</value>\n      </row>\n      <row position=\"41\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"42\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>5.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"43\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>9.02</value>\n         <value>5.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"44\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>11.98</value>\n         <value>4.19</value>\n         <value>.</value>\n      </row>\n      <row position=\"45\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>24.65</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"46\">\n         <value type=\"string\">5</value>\n         <value>5.86</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>54.6</value>\n      </row>\n      <row position=\"47\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>2.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"48\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>5.63</value>\n         <value>.</value>\n      </row>\n      <row position=\"49\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>11.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"50\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"51\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>8.74</value>\n         <value>.</value>\n      </row>\n      <row position=\"52\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"53\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"54\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>9.1</value>\n         <value>5.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"55\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>4.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"56\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>24.35</value>\n         <value>1.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"57\">\n         <value type=\"string\">6</value>\n         <value>4.</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>80.</value>\n      </row>\n      <row position=\"58\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.29</value>\n         <value>.</value>\n      </row>\n      <row position=\"59\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>3.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"60\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>1.15</value>\n         <value>6.44</value>\n         <value>.</value>\n      </row>\n      <row position=\"61\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>2.03</value>\n         <value>6.32</value>\n         <value>.</value>\n      </row>\n      <row position=\"62\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>3.57</value>\n         <value>5.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"63\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>4.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"64\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>7.</value>\n         <value>4.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"65\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>9.22</value>\n         <value>3.46</value>\n         <value>.</value>\n      </row>\n      <row position=\"66\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>2.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"67\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>23.85</value>\n         <value>.92</value>\n         <value>.</value>\n      </row>\n      <row position=\"68\">\n         <value type=\"string\">7</value>\n         <value>4.95</value>\n         <value>0.</value>\n         <value>.15</value>\n         <value>64.6</value>\n      </row>\n      <row position=\"69\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"70\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>2.35</value>\n         <value>.</value>\n      </row>\n      <row position=\"71\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>5.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"72\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"73\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>3.48</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"74\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>6.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"75\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>6.98</value>\n         <value>5.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"76\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.39</value>\n         <value>.</value>\n      </row>\n      <row position=\"77\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>3.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"78\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>24.22</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"79\">\n         <value type=\"string\">8</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"80\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"81\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>0.52</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"82\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>7.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"83\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"84\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"85\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>5.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"86\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>7.15</value>\n         <value>4.73</value>\n         <value>.</value>\n      </row>\n      <row position=\"87\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>9.07</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"88\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>3.</value>\n         <value>.</value>\n      </row>\n      <row position=\"89\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>24.12</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"90\">\n         <value type=\"string\">9</value>\n         <value>3.1</value>\n         <value>.0</value>\n         <value>.0</value>\n         <value>86.4</value>\n      </row>\n      <row position=\"91\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>7.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"92\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.63</value>\n         <value>9.03</value>\n         <value>.</value>\n      </row>\n      <row position=\"93\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>1.05</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"94\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"95\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>5.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"96\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.67</value>\n         <value>.</value>\n      </row>\n      <row position=\"97\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>7.17</value>\n         <value>4.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"98\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>8.8</value>\n         <value>4.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"99\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>11.6</value>\n         <value>3.16</value>\n         <value>.</value>\n      </row>\n      <row position=\"100\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>24.43</value>\n         <value>1.12</value>\n         <value>.</value>\n      </row>\n      <row position=\"101\">\n         <value type=\"string\">10</value>\n         <value>5.5</value>\n         <value>0.</value>\n         <value>.24</value>\n         <value>58.2</value>\n      </row>\n      <row position=\"102\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.37</value>\n         <value>2.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"103\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.77</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"104\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>6.41</value>\n         <value>.</value>\n      </row>\n      <row position=\"105\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>2.05</value>\n         <value>7.83</value>\n         <value>.</value>\n      </row>\n      <row position=\"106\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>3.55</value>\n         <value>10.21</value>\n         <value>.</value>\n      </row>\n      <row position=\"107\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>9.18</value>\n         <value>.</value>\n      </row>\n      <row position=\"108\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>7.08</value>\n         <value>8.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"109\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>9.38</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"110\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>5.68</value>\n         <value>.</value>\n      </row>\n      <row position=\"111\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>23.7</value>\n         <value>2.42</value>\n         <value>.</value>\n      </row>\n      <row position=\"112\">\n         <value type=\"string\">11</value>\n         <value>4.92</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>65.</value>\n      </row>\n      <row position=\"113\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>4.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"114\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>7.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"115\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>8.</value>\n         <value>.</value>\n      </row>\n      <row position=\"116\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>1.98</value>\n         <value>6.81</value>\n         <value>.</value>\n      </row>\n      <row position=\"117\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>3.6</value>\n         <value>5.87</value>\n         <value>.</value>\n      </row>\n      <row position=\"118\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"119\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>4.45</value>\n         <value>.</value>\n      </row>\n      <row position=\"120\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>3.62</value>\n         <value>.</value>\n      </row>\n      <row position=\"121\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>2.69</value>\n         <value>.</value>\n      </row>\n      <row position=\"122\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>24.08</value>\n         <value>.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"123\">\n         <value type=\"string\">12</value>\n         <value>5.3</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>60.5</value>\n      </row>\n      <row position=\"124\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"125\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>3.96</value>\n         <value>.</value>\n      </row>\n      <row position=\"126\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>7.82</value>\n         <value>.</value>\n      </row>\n      <row position=\"127\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>2.</value>\n         <value>9.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"128\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>3.52</value>\n         <value>9.75</value>\n         <value>.</value>\n      </row>\n      <row position=\"129\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>5.07</value>\n         <value>8.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"130\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"131\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>6.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"132\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"133\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>24.15</value>\n         <value>1.17</value>\n         <value>.</value>\n      </row>\n   </table>\n</spkdata>\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000032254\010051247602\0011262\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(12),\n  popSize( 12 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 11\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 11 );\ncopy( id_0_c, id_0_c+11, id_0.begin() );\nT amt_0_c[] = { 4.02, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_0( 11 );\ncopy( amt_0_c, amt_0_c+11, amt_0.begin() );\nT time_0_c[] = { 0., 0.25, 0.57, 1.12, 2.02, 3.82, 5.1, 7.03, 9.05, 12.12, 24.37 };\nstd::vector<T> time_0( 11 );\ncopy( time_0_c, time_0_c+11, time_0.begin() );\nT dv_0_c[] = { .74, 2.84, 6.57, 10.5, 9.66, 8.58, 8.36, 7.47, 6.89, 5.94, 3.28 };\nstd::vector<T> dv_0( 11 );\ncopy( dv_0_c, dv_0_c+11, dv_0.begin() );\nT wt_0_c[] = { 79.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_0( 11 );\ncopy( wt_0_c, wt_0_c+11, wt_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 11 );\ncopy( mdv_0_c, mdv_0_c+11, mdv_0.begin() );\ndata[0] = new IndData<T>( 11, id_0, amt_0, time_0, dv_0, wt_0, mdv_0 );\n\n//------------------------------------\n// Subject <2> \n// # of sampling points = 11\n//------------------------------------\nchar* id_1_c[] = { \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\" };\nstd::vector<char*> id_1( 11 );\ncopy( id_1_c, id_1_c+11, id_1.begin() );\nT amt_1_c[] = { 4.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_1( 11 );\ncopy( amt_1_c, amt_1_c+11, amt_1.begin() );\nT time_1_c[] = { 0., .27, .52, 1., 1.92, 3.5, 5.02, 7.03, 9., 12., 24.3 };\nstd::vector<T> time_1( 11 );\ncopy( time_1_c, time_1_c+11, time_1.begin() );\nT dv_1_c[] = { 0., 1.72, 7.91, 8.31, 8.33, 6.85, 6.08, 5.4, 4.55, 3.01, .90 };\nstd::vector<T> dv_1( 11 );\ncopy( dv_1_c, dv_1_c+11, dv_1.begin() );\nT wt_1_c[] = { 72.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_1( 11 );\ncopy( wt_1_c, wt_1_c+11, wt_1.begin() );\nT mdv_1_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_1( 11 );\ncopy( mdv_1_c, mdv_1_c+11, mdv_1.begin() );\ndata[1] = new IndData<T>( 11, id_1, amt_1, time_1, dv_1, wt_1, mdv_1 );\n\n//------------------------------------\n// Subject <3> \n// # of sampling points = 11\n//------------------------------------\nchar* id_2_c[] = { \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\" };\nstd::vector<char*> id_2( 11 );\ncopy( id_2_c, id_2_c+11, id_2.begin() );\nT amt_2_c[] = { 4.53, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_2( 11 );\ncopy( amt_2_c, amt_2_c+11, amt_2.begin() );\nT time_2_c[] = { 0., .27, .58, 1.02, 2.02, 3.62, 5.08, 7.07, 9., 12.15, 24.17 };\nstd::vector<T> time_2( 11 );\ncopy( time_2_c, time_2_c+11, time_2.begin() );\nT dv_2_c[] = { 0., 4.4, 6.9, 8.2, 7.8, 7.5, 6.2, 5.3, 4.9, 3.7, 1.05 };\nstd::vector<T> dv_2( 11 );\ncopy( dv_2_c, dv_2_c+11, dv_2.begin() );\nT wt_2_c[] = { 70.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_2( 11 );\ncopy( wt_2_c, wt_2_c+11, wt_2.begin() );\nT mdv_2_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_2( 11 );\ncopy( mdv_2_c, mdv_2_c+11, mdv_2.begin() );\ndata[2] = new IndData<T>( 11, id_2, amt_2, time_2, dv_2, wt_2, mdv_2 );\n\n//------------------------------------\n// Subject <4> \n// # of sampling points = 11\n//------------------------------------\nchar* id_3_c[] = { \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\" };\nstd::vector<char*> id_3( 11 );\ncopy( id_3_c, id_3_c+11, id_3.begin() );\nT amt_3_c[] = { 4.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_3( 11 );\ncopy( amt_3_c, amt_3_c+11, amt_3.begin() );\nT time_3_c[] = { 0., .35, .6, 1.07, 2.13, 3.5, 5.02, 7.02, 9.02, 11.98, 24.65 };\nstd::vector<T> time_3( 11 );\ncopy( time_3_c, time_3_c+11, time_3.begin() );\nT dv_3_c[] = { 0., 1.89, 4.6, 8.6, 8.38, 7.54, 6.88, 5.78, 5.33, 4.19, 1.15 };\nstd::vector<T> dv_3( 11 );\ncopy( dv_3_c, dv_3_c+11, dv_3.begin() );\nT wt_3_c[] = { 72.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_3( 11 );\ncopy( wt_3_c, wt_3_c+11, wt_3.begin() );\nT mdv_3_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_3( 11 );\ncopy( mdv_3_c, mdv_3_c+11, mdv_3.begin() );\ndata[3] = new IndData<T>( 11, id_3, amt_3, time_3, dv_3, wt_3, mdv_3 );\n\n//------------------------------------\n// Subject <5> \n// # of sampling points = 11\n//------------------------------------\nchar* id_4_c[] = { \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\" };\nstd::vector<char*> id_4( 11 );\ncopy( id_4_c, id_4_c+11, id_4.begin() );\nT amt_4_c[] = { 5.86, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_4( 11 );\ncopy( amt_4_c, amt_4_c+11, amt_4.begin() );\nT time_4_c[] = { 0., .3, .52, 1., 2.02, 3.5, 5.02, 7.02, 9.1, 12., 24.35 };\nstd::vector<T> time_4( 11 );\ncopy( time_4_c, time_4_c+11, time_4.begin() );\nT dv_4_c[] = { 0., 2.02, 5.63, 11.4, 9.33, 8.74, 7.56, 7.09, 5.9, 4.37, 1.57 };\nstd::vector<T> dv_4( 11 );\ncopy( dv_4_c, dv_4_c+11, dv_4.begin() );\nT wt_4_c[] = { 54.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_4( 11 );\ncopy( wt_4_c, wt_4_c+11, wt_4.begin() );\nT mdv_4_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_4( 11 );\ncopy( mdv_4_c, mdv_4_c+11, mdv_4.begin() );\ndata[4] = new IndData<T>( 11, id_4, amt_4, time_4, dv_4, wt_4, mdv_4 );\n\n//------------------------------------\n// Subject <6> \n// # of sampling points = 11\n//------------------------------------\nchar* id_5_c[] = { \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\" };\nstd::vector<char*> id_5( 11 );\ncopy( id_5_c, id_5_c+11, id_5.begin() );\nT amt_5_c[] = { 4., 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_5( 11 );\ncopy( amt_5_c, amt_5_c+11, amt_5.begin() );\nT time_5_c[] = { 0., .27, .58, 1.15, 2.03, 3.57, 5., 7., 9.22, 12.1, 23.85 };\nstd::vector<T> time_5( 11 );\ncopy( time_5_c, time_5_c+11, time_5.begin() );\nT dv_5_c[] = { 0., 1.29, 3.08, 6.44, 6.32, 5.53, 4.94, 4.02, 3.46, 2.78, .92 };\nstd::vector<T> dv_5( 11 );\ncopy( dv_5_c, dv_5_c+11, dv_5.begin() );\nT wt_5_c[] = { 80., 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_5( 11 );\ncopy( wt_5_c, wt_5_c+11, wt_5.begin() );\nT mdv_5_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_5( 11 );\ncopy( mdv_5_c, mdv_5_c+11, mdv_5.begin() );\ndata[5] = new IndData<T>( 11, id_5, amt_5, time_5, dv_5, wt_5, mdv_5 );\n\n//------------------------------------\n// Subject <7> \n// # of sampling points = 11\n//------------------------------------\nchar* id_6_c[] = { \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\" };\nstd::vector<char*> id_6( 11 );\ncopy( id_6_c, id_6_c+11, id_6.begin() );\nT amt_6_c[] = { 4.95, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_6( 11 );\ncopy( amt_6_c, amt_6_c+11, amt_6.begin() );\nT time_6_c[] = { 0., .25, .5, 1.02, 2.02, 3.48, 5., 6.98, 9., 12.05, 24.22 };\nstd::vector<T> time_6( 11 );\ncopy( time_6_c, time_6_c+11, time_6.begin() );\nT dv_6_c[] = { .15, .85, 2.35, 5.02, 6.58, 7.09, 6.66, 5.25, 4.39, 3.53, 1.15 };\nstd::vector<T> dv_6( 11 );\ncopy( dv_6_c, dv_6_c+11, dv_6.begin() );\nT wt_6_c[] = { 64.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_6( 11 );\ncopy( wt_6_c, wt_6_c+11, wt_6.begin() );\nT mdv_6_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_6( 11 );\ncopy( mdv_6_c, mdv_6_c+11, mdv_6.begin() );\ndata[6] = new IndData<T>( 11, id_6, amt_6, time_6, dv_6, wt_6, mdv_6 );\n\n//------------------------------------\n// Subject <8> \n// # of sampling points = 11\n//------------------------------------\nchar* id_7_c[] = { \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\" };\nstd::vector<char*> id_7( 11 );\ncopy( id_7_c, id_7_c+11, id_7.begin() );\nT amt_7_c[] = { 4.53, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_7( 11 );\ncopy( amt_7_c, amt_7_c+11, amt_7.begin() );\nT time_7_c[] = { 0., .25, 0.52, .98, 2.02, 3.53, 5.05, 7.15, 9.07, 12.1, 24.12 };\nstd::vector<T> time_7( 11 );\ncopy( time_7_c, time_7_c+11, time_7.begin() );\nT dv_7_c[] = { 0., 3.05, 3.05, 7.31, 7.56, 6.59, 5.88, 4.73, 4.57, 3., 1.25 };\nstd::vector<T> dv_7( 11 );\ncopy( dv_7_c, dv_7_c+11, dv_7.begin() );\nT wt_7_c[] = { 70.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_7( 11 );\ncopy( wt_7_c, wt_7_c+11, wt_7.begin() );\nT mdv_7_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_7( 11 );\ncopy( mdv_7_c, mdv_7_c+11, mdv_7.begin() );\ndata[7] = new IndData<T>( 11, id_7, amt_7, time_7, dv_7, wt_7, mdv_7 );\n\n//------------------------------------\n// Subject <9> \n// # of sampling points = 11\n//------------------------------------\nchar* id_8_c[] = { \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\" };\nstd::vector<char*> id_8( 11 );\ncopy( id_8_c, id_8_c+11, id_8.begin() );\nT amt_8_c[] = { 3.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_8( 11 );\ncopy( amt_8_c, amt_8_c+11, amt_8.begin() );\nT time_8_c[] = { .0, .3, .63, 1.05, 2.02, 3.53, 5.02, 7.17, 8.8, 11.6, 24.43 };\nstd::vector<T> time_8( 11 );\ncopy( time_8_c, time_8_c+11, time_8.begin() );\nT dv_8_c[] = { .0, 7.37, 9.03, 7.14, 6.33, 5.66, 5.67, 4.24, 4.11, 3.16, 1.12 };\nstd::vector<T> dv_8( 11 );\ncopy( dv_8_c, dv_8_c+11, dv_8.begin() );\nT wt_8_c[] = { 86.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_8( 11 );\ncopy( wt_8_c, wt_8_c+11, wt_8.begin() );\nT mdv_8_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_8( 11 );\ncopy( mdv_8_c, mdv_8_c+11, mdv_8.begin() );\ndata[8] = new IndData<T>( 11, id_8, amt_8, time_8, dv_8, wt_8, mdv_8 );\n\n//------------------------------------\n// Subject <10> \n// # of sampling points = 11\n//------------------------------------\nchar* id_9_c[] = { \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\" };\nstd::vector<char*> id_9( 11 );\ncopy( id_9_c, id_9_c+11, id_9.begin() );\nT amt_9_c[] = { 5.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_9( 11 );\ncopy( amt_9_c, amt_9_c+11, amt_9.begin() );\nT time_9_c[] = { 0., .37, .77, 1.02, 2.05, 3.55, 5.05, 7.08, 9.38, 12.1, 23.7 };\nstd::vector<T> time_9( 11 );\ncopy( time_9_c, time_9_c+11, time_9.begin() );\nT dv_9_c[] = { .24, 2.89, 5.22, 6.41, 7.83, 10.21, 9.18, 8.02, 7.14, 5.68, 2.42 };\nstd::vector<T> dv_9( 11 );\ncopy( dv_9_c, dv_9_c+11, dv_9.begin() );\nT wt_9_c[] = { 58.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_9( 11 );\ncopy( wt_9_c, wt_9_c+11, wt_9.begin() );\nT mdv_9_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_9( 11 );\ncopy( mdv_9_c, mdv_9_c+11, mdv_9.begin() );\ndata[9] = new IndData<T>( 11, id_9, amt_9, time_9, dv_9, wt_9, mdv_9 );\n\n//------------------------------------\n// Subject <11> \n// # of sampling points = 11\n//------------------------------------\nchar* id_10_c[] = { \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\" };\nstd::vector<char*> id_10( 11 );\ncopy( id_10_c, id_10_c+11, id_10.begin() );\nT amt_10_c[] = { 4.92, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_10( 11 );\ncopy( amt_10_c, amt_10_c+11, amt_10.begin() );\nT time_10_c[] = { 0., .25, .5, .98, 1.98, 3.6, 5.02, 7.03, 9.03, 12.12, 24.08 };\nstd::vector<T> time_10( 11 );\ncopy( time_10_c, time_10_c+11, time_10.begin() );\nT dv_10_c[] = { 0., 4.86, 7.24, 8., 6.81, 5.87, 5.22, 4.45, 3.62, 2.69, .86 };\nstd::vector<T> dv_10( 11 );\ncopy( dv_10_c, dv_10_c+11, dv_10.begin() );\nT wt_10_c[] = { 65., 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_10( 11 );\ncopy( wt_10_c, wt_10_c+11, wt_10.begin() );\nT mdv_10_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_10( 11 );\ncopy( mdv_10_c, mdv_10_c+11, mdv_10.begin() );\ndata[10] = new IndData<T>( 11, id_10, amt_10, time_10, dv_10, wt_10, mdv_10 );\n\n//------------------------------------\n// Subject <12> \n// # of sampling points = 11\n//------------------------------------\nchar* id_11_c[] = { \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\" };\nstd::vector<char*> id_11( 11 );\ncopy( id_11_c, id_11_c+11, id_11.begin() );\nT amt_11_c[] = { 5.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_11( 11 );\ncopy( amt_11_c, amt_11_c+11, amt_11.begin() );\nT time_11_c[] = { 0., .25, .5, 1., 2., 3.52, 5.07, 7.07, 9.03, 12.05, 24.15 };\nstd::vector<T> time_11( 11 );\ncopy( time_11_c, time_11_c+11, time_11.begin() );\nT dv_11_c[] = { 0., 1.25, 3.96, 7.82, 9.72, 9.75, 8.57, 6.59, 6.11, 4.57, 1.17 };\nstd::vector<T> dv_11( 11 );\ncopy( dv_11_c, dv_11_c+11, dv_11.begin() );\nT wt_11_c[] = { 60.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_11( 11 );\ncopy( wt_11_c, wt_11_c+11, wt_11.begin() );\nT mdv_11_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_11( 11 );\ncopy( mdv_11_c, mdv_11_c+11, mdv_11.begin() );\ndata[11] = new IndData<T>( 11, id_11, amt_11, time_11, dv_11, wt_11, mdv_11 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000031445\010051247602\0011564\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitPopulation.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n///////////////////////////////////////////////////////////////////\n//   NONMEM PRED specific\n#include \"Pred.h\"\n#include <spkpred/PopPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nint main( int argc, const char argv[] )\n{\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n{\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n}\n\n//FpErrorChecker fperror;\n\nconst int nPop = 12;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested  = false;\nbool haveCompleteData      = false;\nconst bool isOptRequested  = true;\nbool isOptSuccess          = false;\nObjective objective    = FIRST_ORDER;\nconst bool isStatRequested = false;\nbool isStatSuccess         = false;\n\n///////////////////////////////////////////////////////////////////\n// NONMEM Sepcific\nconst int nTheta          = 3; // length of theta vector\ndouble c_thetaIn[nTheta]  = { 3, .08, .04 };\nconst valarray<double> thetaIn( c_thetaIn, nTheta );\ndouble c_thetaUp[nTheta]  = { 5, .5, .9 };\nconst valarray<double> thetaUp( c_thetaUp, nTheta );\ndouble c_thetaLow[nTheta] = { .1, .008, .004 };\nconst valarray<double> thetaLow( c_thetaLow, nTheta );\nvalarray<double> thetaOut( nTheta );\n\nconst int nOmega         = 6; // #of elements in Omega matrix\nconst int dimOmega       = 3; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 6, .005, .0002, .3, .006, .4 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\nconst int nSigma         = 1; // #of elements in Sigma matrix\nconst int dimSigma = 1; // order of Sigma matrix\nconst int nEps           = dimSigma;\ndouble c_sigmaIn[nSigma] = { .4 };\nconst valarray<double> sigmaIn ( c_sigmaIn, nSigma );\nvalarray<double> sigmaOut( nSigma );\n\nconst int nEta              = 3;\ndouble c_etaIn[nEta] = { 0.0, 0.0, 0.0 };\nconst valarray<double> etaIn ( c_etaIn, nEta );\nvalarray<double> etaOut( nEta );\nvalarray<double> etaAllOut( nEta * nPop );\n\n//\n///////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred< CppAD::AD<double> > mPred(&set);\nenum PopPredModel::covStruct omegaStruct = PopPredModel::FULL;\nenum PopPredModel::covStruct sigmaStruct = PopPredModel::DIAGONAL;\nPopPredModel model( mPred,\n                    nTheta,\n                    thetaLow,\n                    thetaUp,\n                    thetaIn,\n                    nEta,\n                    etaIn,\n                    nEps,\n                    omegaStruct,\n                    omegaIn,\n                    sigmaStruct,\n                    sigmaIn );\n//\n///////////////////////////////////////////////////////////////////\n\nconst int nAlp = model.getNPopPar();\nconst int nB   = model.getNIndPar();\n\nvalarray<double> alpIn  ( nAlp );\nvalarray<double> alpUp  ( nAlp );\nvalarray<double> alpLow ( nAlp );\nvalarray<double> alpStep( nAlp );\nvalarray<double> alpOut ( nAlp );\ndouble           alpObjOut;\nvalarray<double> alpObj_alpOut    ( nAlp );\nvalarray<double> alpObj_alp_alpOut( nAlp * nAlp );\nmodel.getPopPar         ( alpIn );\nmodel.getPopParLimits   ( alpLow, alpUp );\nmodel.getPopParStep     ( alpStep );\n\nvalarray<double> bIn  ( nB * nPop );\nvalarray<double> biIn ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bOut ( nB * nPop );\nfor( int i=0; i<nPop; i++ )\n{\n   model.selectIndividual( i ); \n   model.getIndPar( biIn );\n   bIn[ slice(i*nB, nB, 1) ] = biIn;\n}\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\nconst double popEps   = 0.001;\nconst int    popMitr  = 100;\nconst int    popTrace = 1;\nOptimizer    popOpt( popEps, popMitr, popTrace );\n\nconst double indEps   = 0.001;\nconst int    indMitr  = 100;\nconst int    indTrace = 1;\nOptimizer    indOpt( indEps, indMitr, indTrace );\n\nint c_N[nPop] = { 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11 };\nconst valarray<int> N( c_N, nPop );\nconst int nY = N.sum();\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.74, 2.84, 6.57, 10.5, 9.66, 8.58, 8.36, 7.47, 6.89, 5.94, 3.28, 0, 1.72, 7.91, 8.31, 8.33, 6.85, 6.08, 5.4, 4.55, 3.01, 0.9, 0, 4.4, 6.9, 8.2, 7.8, 7.5, 6.2, 5.3, 4.9, 3.7, 1.05, 0, 1.89, 4.6, 8.6, 8.38, 7.54, 6.88, 5.78, 5.33, 4.19, 1.15, 0, 2.02, 5.63, 11.4, 9.33, 8.74, 7.56, 7.09, 5.9, 4.37, 1.57, 0, 1.29, 3.08, 6.44, 6.32, 5.53, 4.94, 4.02, 3.46, 2.78, 0.92, 0.15, 0.85, 2.35, 5.02, 6.58, 7.09, 6.66, 5.25, 4.39, 3.53, 1.15, 0, 3.05, 3.05, 7.31, 7.56, 6.59, 5.88, 4.73, 4.57, 3, 1.25, 0, 7.37, 9.03, 7.14, 6.33, 5.66, 5.67, 4.24, 4.11, 3.16, 1.12, 0.24, 2.89, 5.22, 6.41, 7.83, 10.21, 9.18, 8.02, 7.14, 5.68, 2.42, 0, 4.86, 7.24, 8, 6.81, 5.87, 5.22, 4.45, 3.62, 2.69, 0.86, 0, 1.25, 3.96, 7.82, 9.72, 9.75, 8.57, 6.59, 6.11, 4.57, 1.17 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n   gettimeofday( &optBegin, NULL );\n   try\n   {\n      fitPopulation( model,\n                     objective, \n                     N,\n                     y,\n                     popOpt,\n                     alpLow,\n                     alpUp,\n                     alpIn,\n                     alpStep,\n                    &alpOut,\n                     indOpt,\n                     bLow,\n                     bUp,\n                     bIn,\n                     bStep,\n                    &bOut,\n                    &alpObjOut,\n                    &alpObj_alpOut,\n                    &alpObj_alp_alpOut );\n      //FpErrorChecker::check( __LINE__, __FILE__ );\n      isOptSuccess = true;\n   }\n   catch( const SpkException& e )\n   {\n      oRuntimeError << e << endl;\n      cerr << e << endl;\n      isOptSuccess = false;\n      //FpErrorChecker::clear();\n   }\n   catch( ... )\n   {\n      char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n      oRuntimeError << message << endl;\n      cerr << message << endl;\n      isOptSuccess = false;\n      //FpErrorChecker::clear();\n   }\n   gettimeofday( &optEnd, NULL );\n   optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n   ///////////////////////////////////////////////////////////////////\n   //   NONMEM Specific\n   if( isOptSuccess )\n   {\n      model.getTheta( thetaOut );\n      model.getOmega( omegaOut );\n      model.getSigma( sigmaOut );\n      for( int i=0; i<nPop; i++ )\n      {\n         model.selectIndividual( i ); \n         model.getEta( etaOut );\n         etaAllOut[ slice( i*nEta, nEta, 1 ) ] = etaOut; \n      }\n   }\n   //\n   ///////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\noRuntimeError.close();\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreport>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<pop_analysis_result>\" << endl;\n\noResults << \"<pop_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<pop_obj_out>\" << endl;\noResults << \"<value>\" << alpObjOut << \"</value>\" << endl;\noResults << \"</pop_obj_out>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//   NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << alpOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=nTheta; i<nTheta+nOmega; i++ )\n{\n   oResults << \"<value>\" << alpOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\noResults << \"<sigma_out>\" << endl;\nfor( int i=nTheta+nOmega; i<nTheta+nOmega+nSigma; i++ )\n{\n   oResults << \"<value>\" << alpOut[i] << \"</value>\" << endl;\n}\noResults << \"</sigma_out>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</pop_opt_result>\" << endl;\n\noResults << \"</pop_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n///////////////////////////////////////////////////////////////////\n//   DATA SET Specific\noResults << \"<label name=\\\"cl\\\"/>\" << endl;\noResults << \"<label name=\\\"d\\\"/>\" << endl;\noResults << \"<label name=\\\"ds\\\"/>\" << endl;\noResults << \"<label name=\\\"e\\\"/>\" << endl;\noResults << \"<label name=\\\"eps\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"ka\\\"/>\" << endl;\noResults << \"<label name=\\\"ke\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"sigma\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"w\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\n\nfor( int i=0, cnt=1; i<nPop; i++ )\n{\n   for( int j=0; j<N[i]; j++, cnt++ )\n   {\n      oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n      ///////////////////////////////////////////////////////////////////\n      //   DATA SET Specific\n   oResults << \"<value>\" << set.data[i]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->cl[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->d[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->ds[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->e[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eps[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->ka[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->ke[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->w[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->y[j] << \"</value>\" << endl;\n      //\n      ///////////////////////////////////////////////////////////////////\n      oResults << \"</row>\" << endl;\n   }\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreport>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247602\0013073\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003627\010051247602\0011243\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & amtIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & wtIn,\n	const std::vector<T> & mdvIn);\n\nconst std::vector<T> amt;\nconst std::vector<T> dose;\nstd::vector<T> cl;\nstd::vector<T> d;\nstd::vector<T> ds;\nconst std::vector<T> dv;\nconst std::vector<T> cp;\nstd::vector<T> e;\nstd::vector< std::vector<T> > eps;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nstd::vector<T> ka;\nstd::vector<T> ke;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> w;\nstd::vector<T> wres;\nconst std::vector<T> wt;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & amtIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & wtIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\namt( amtIn ),\ndose( amtIn ),\ntime( timeIn ),\ndv( dvIn ),\ncp( dvIn ),\nwt( wtIn ),\nmdv( mdvIn ),\ncl( nIn ),\nd( nIn ),\nds( nIn ),\ne( nIn ),\neps( nIn ),\neta( nIn ),\nf( nIn ),\nka( nIn ),\nke( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nw( nIn ),\nwres( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 3 );\n      eta[i].resize( 3 );\n      eps[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247601\0010715\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000015446\010051247602\0010633\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value amt;\nmutable Value dose;\nmutable Value time;\nmutable Value dv;\nmutable Value cp;\nmutable Value wt;\nmutable Value mdv;\nmutable Value cl;\nmutable Value d;\nmutable Value ds;\nmutable Value e;\nmutable Value f;\nmutable Value ka;\nmutable Value ke;\nmutable Value pred;\nmutable Value res;\nmutable Value w;\nmutable Value wres;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 12 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 3 );\n  assert( spk_etaLen   == 3 );\n  assert( spk_epsLen   == 1 );\n\nid = perm->data[spk_i]->id[spk_j];\namt = perm->data[spk_i]->amt[spk_j];\ndose = perm->data[spk_i]->dose[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\ncp = perm->data[spk_i]->cp[spk_j];\nwt = perm->data[spk_i]->wt[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator eta2 = spk_indepVar.begin() + spk_etaOffset + 1;\ntypename std::vector<Value>::const_iterator eta3 = spk_indepVar.begin() + spk_etaOffset + 2;\ntypename std::vector<Value>::const_iterator eps1 = spk_indepVar.begin() + spk_epsOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\ntypename std::vector<Value>::const_iterator eps = spk_indepVar.begin() + spk_epsOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\n// THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n// THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n// THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n// DOSE=WT-ADJUSTED DOSE (MG/KG)\n// DS=NON-WT-ADJUSTED DOSE (MG)\nif( dose != 0 )\n{\nds = dose * wt;\nw = wt;\n}\n\nka = theta[ ( 1 ) - 1 ] + eta[ ( 1 ) - 1 ];\nke = theta[ ( 2 ) - 1 ] + eta[ ( 2 ) - 1 ];\ncl = theta[ ( 3 ) - 1 ] * w + eta[ ( 3 ) - 1 ];\nd = exp( -ke * time ) - exp( -ka * time );\ne = cl * ( ka - ke );\nf = ds * ke * ka / e * d;\ny = f + eps[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->cl[ spk_j ] = cl;\ntemp.data[ spk_i ]->d[ spk_j ] = d;\ntemp.data[ spk_i ]->ds[ spk_j ] = ds;\ntemp.data[ spk_i ]->e[ spk_j ] = e;\ncopy( eps, eps+spk_etaLen, temp.data[ spk_i ]->eps[ spk_j ].begin() ); \ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->ka[ spk_j ] = ka;\ntemp.data[ spk_i ]->ke[ spk_j ] = ke;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->w[ spk_j ] = w;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 12-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->cl = temp.data[ i ]->cl;\n    perm->data[ i ]->d = temp.data[ i ]->d;\n    perm->data[ i ]->ds = temp.data[ i ]->ds;\n    perm->data[ i ]->e = temp.data[ i ]->e;\n    perm->data[ i ]->eps = temp.data[ i ]->eps;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->ka = temp.data[ i ]->ka;\n    perm->data[ i ]->ke = temp.data[ i ]->ke;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->w = temp.data[ i ]->w;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247601\0012531\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000006310\010051247601\0011577\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <pop_analysis approximation=\"fo\" is_estimation=\"yes\" is_eta_out=\"no\" is_restart=\"no\" pop_size=\"12\" mitr=\"450\">\n            <description>THEOPHYLLINE POPULATION DATA</description>\n            <data_labels>\n               <label name=\"ID\"/>\n               <label name=\"AMT\" synonym=\"DOSE\"/>\n               <label name=\"TIME\"/>\n               <label name=\"DV\" synonym=\"CP\"/>\n               <label name=\"WT\"/>\n            </data_labels>\n            <theta length=\"3\">\n               <low>\n                  <value fixed=\"no\">.1</value>\n                  <value fixed=\"no\">.008</value>\n                  <value fixed=\"no\">.004</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">3</value>\n                  <value fixed=\"no\">.08</value>\n                  <value fixed=\"no\">.04</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5</value>\n                  <value fixed=\"no\">.5</value>\n                  <value fixed=\"no\">.9</value>\n               </up>\n            </theta>\n            <omega dimension=\"3\" same_as_previous=\"no\" struct=\"block\">\n               <in>\n                  <value fixed=\"no\">6</value>\n                  <value fixed=\"no\">.005</value>\n                  <value fixed=\"no\">.0002</value>\n                  <value fixed=\"no\">.3</value>\n                  <value fixed=\"no\">.006</value>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </omega>\n            <sigma dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </sigma>\n            <pop_stat covariance_form=\"rsr\"/>\n         </pop_analysis>\n      </constraint>\n      <model>\n         <pred>\n;THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n;THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n;THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n;DOSE=WT-ADJUSTED DOSE (MG/KG)\n;DS=NON-WT-ADJUSTED DOSE (MG)\n   IF (DOSE.NE.0) THEN\n      DS=DOSE*WT\n      W=WT\n   ENDIF\n   KA=THETA(1)+ETA(1)\n   KE=THETA(2)+ETA(2)\n   CL=THETA(3)*W+ETA(3)\n   D=EXP(-KE*TIME)-EXP(-KA*TIME)\n   E=CL*(KA-KE)\n   F=DS*KE*KA/E*D\n   Y=F+EPS(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\">\n            <column appearance_order=\"1\" label=\"ID\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DOSE\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"WT\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"7\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"8\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"hide\" x0_line=\"hide\" y0_line=\"hide\">\n            <x label=\"RES\"/>\n            <x label=\"WRES\"/>\n            <y label=\"TIME\"/>\n            <split label=\"ID\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (2,3,'THEOPHYLLINE POPULATION DATA 2',2,'1',2,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <pop_analysis approximation=\"fo\" is_estimation=\"yes\" is_eta_out=\"no\" is_restart=\"no\" pop_size=\"12\" mitr=\"450\">\n            <description>THEOPHYLLINE POPULATION DATA</description>\n            <data_labels>\n               <label name=\"ID\"/>\n               <label name=\"AMT\" synonym=\"DOSE\"/>\n               <label name=\"TIME\"/>\n               <label name=\"DV\" synonym=\"CP\"/>\n               <label name=\"WT\"/>\n            </data_labels>\n            <theta length=\"3\">\n               <low>\n                  <value fixed=\"no\">.1</value>\n                  <value fixed=\"no\">.008</value>\n                  <value fixed=\"no\">.004</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">3</value>\n                  <value fixed=\"no\">.08</value>\n                  <value fixed=\"no\">.04</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5</value>\n                  <value fixed=\"no\">.5</value>\n                  <value fixed=\"no\">.9</value>\n               </up>\n            </theta>\n            <omega dimension=\"3\" same_as_previous=\"no\" struct=\"block\">\n               <in>\n                  <value fixed=\"no\">6</value>\n                  <value fixed=\"no\">.005</value>\n                  <value fixed=\"no\">.0002</value>\n                  <value fixed=\"no\">.3</value>\n                  <value fixed=\"no\">.006</value>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </omega>\n            <sigma dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </sigma>\n            <pop_stat covariance_form=\"rsr\"/>\n         </pop_analysis>\n      </constraint>\n      <model>\n         <pred>\n;THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n;THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n;THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n;DOSE=WT-ADJUSTED DOSE (MG/KG)\n;DS=NON-WT-ADJUSTED DOSE (MG)\n   IF (DOSE.NE.0) THEN\n      DS=DOSE*WT\n      W=WT\n   ENDIF\n   KA=THETA(1)+ETA(1)\n   KE=THETA(2)+ETA(2)\n   CL=THETA(3)*W+ETA(3)\n   D=EXP(-KE*TIME)-EXP(-KA*TIME)\n   E=CL*(KA-KE)\n   F=DS*KE*KA/E*D\n   Y=F+EPS(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\">\n            <column appearance_order=\"1\" label=\"ID\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DOSE\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"WT\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"7\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"8\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"hide\" x0_line=\"hide\" y0_line=\"hide\">\n            <x label=\"RES\"/>\n            <x label=\"WRES\"/>\n            <y label=\"TIME\"/>\n            <split label=\"ID\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\n','q2r',NULL,1081196809,1084575619,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000061406\010051247602\0011212\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"5\" rows=\"133\">\n      <description>THEO</description>\n      <row position=\"1\">\n         <value type=\"string\">ID</value>\n         <value type=\"string\">AMT</value>\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n         <value type=\"string\">WT</value>\n      </row>\n      <row position=\"2\">\n         <value type=\"string\">1</value>\n         <value>4.02</value>\n         <value>0.</value>\n         <value>.74</value>\n         <value>79.6</value>\n      </row>\n      <row position=\"3\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.25</value>\n         <value>2.84</value>\n         <value>.</value>\n      </row>\n      <row position=\"4\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>0.57</value>\n         <value>6.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"5\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>1.12</value>\n         <value>10.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"6\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"7\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>3.82</value>\n         <value>8.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"8\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>5.1</value>\n         <value>8.36</value>\n         <value>.</value>\n      </row>\n      <row position=\"9\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>7.47</value>\n         <value>.</value>\n      </row>\n      <row position=\"10\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>9.05</value>\n         <value>6.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"11\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>5.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"12\">\n         <value type=\"string\">1</value>\n         <value>.</value>\n         <value>24.37</value>\n         <value>3.28</value>\n         <value>.</value>\n      </row>\n      <row position=\"13\">\n         <value type=\"string\">2</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.4</value>\n      </row>\n      <row position=\"14\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"15\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>7.91</value>\n         <value>.</value>\n      </row>\n      <row position=\"16\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>8.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"17\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>1.92</value>\n         <value>8.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"18\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>6.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"19\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"20\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>5.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"21\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.55</value>\n         <value>.</value>\n      </row>\n      <row position=\"22\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>3.01</value>\n         <value>.</value>\n      </row>\n      <row position=\"23\">\n         <value type=\"string\">2</value>\n         <value>.</value>\n         <value>24.3</value>\n         <value>.90</value>\n         <value>.</value>\n      </row>\n      <row position=\"24\">\n         <value type=\"string\">3</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"25\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>4.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"26\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>6.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"27\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>8.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"28\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.8</value>\n         <value>.</value>\n      </row>\n      <row position=\"29\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>3.62</value>\n         <value>7.5</value>\n         <value>.</value>\n      </row>\n      <row position=\"30\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>5.08</value>\n         <value>6.2</value>\n         <value>.</value>\n      </row>\n      <row position=\"31\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>5.3</value>\n         <value>.</value>\n      </row>\n      <row position=\"32\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"33\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>12.15</value>\n         <value>3.7</value>\n         <value>.</value>\n      </row>\n      <row position=\"34\">\n         <value type=\"string\">3</value>\n         <value>.</value>\n         <value>24.17</value>\n         <value>1.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"35\">\n         <value type=\"string\">4</value>\n         <value>4.4</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>72.7</value>\n      </row>\n      <row position=\"36\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.35</value>\n         <value>1.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"37\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>.6</value>\n         <value>4.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"38\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>1.07</value>\n         <value>8.6</value>\n         <value>.</value>\n      </row>\n      <row position=\"39\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>2.13</value>\n         <value>8.38</value>\n         <value>.</value>\n      </row>\n      <row position=\"40\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>7.54</value>\n         <value>.</value>\n      </row>\n      <row position=\"41\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>6.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"42\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>5.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"43\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>9.02</value>\n         <value>5.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"44\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>11.98</value>\n         <value>4.19</value>\n         <value>.</value>\n      </row>\n      <row position=\"45\">\n         <value type=\"string\">4</value>\n         <value>.</value>\n         <value>24.65</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"46\">\n         <value type=\"string\">5</value>\n         <value>5.86</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>54.6</value>\n      </row>\n      <row position=\"47\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>2.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"48\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>.52</value>\n         <value>5.63</value>\n         <value>.</value>\n      </row>\n      <row position=\"49\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>11.4</value>\n         <value>.</value>\n      </row>\n      <row position=\"50\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>9.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"51\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>3.5</value>\n         <value>8.74</value>\n         <value>.</value>\n      </row>\n      <row position=\"52\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"53\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>7.02</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"54\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>9.1</value>\n         <value>5.9</value>\n         <value>.</value>\n      </row>\n      <row position=\"55\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>12.</value>\n         <value>4.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"56\">\n         <value type=\"string\">5</value>\n         <value>.</value>\n         <value>24.35</value>\n         <value>1.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"57\">\n         <value type=\"string\">6</value>\n         <value>4.</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>80.</value>\n      </row>\n      <row position=\"58\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.27</value>\n         <value>1.29</value>\n         <value>.</value>\n      </row>\n      <row position=\"59\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>.58</value>\n         <value>3.08</value>\n         <value>.</value>\n      </row>\n      <row position=\"60\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>1.15</value>\n         <value>6.44</value>\n         <value>.</value>\n      </row>\n      <row position=\"61\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>2.03</value>\n         <value>6.32</value>\n         <value>.</value>\n      </row>\n      <row position=\"62\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>3.57</value>\n         <value>5.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"63\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>4.94</value>\n         <value>.</value>\n      </row>\n      <row position=\"64\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>7.</value>\n         <value>4.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"65\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>9.22</value>\n         <value>3.46</value>\n         <value>.</value>\n      </row>\n      <row position=\"66\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>2.78</value>\n         <value>.</value>\n      </row>\n      <row position=\"67\">\n         <value type=\"string\">6</value>\n         <value>.</value>\n         <value>23.85</value>\n         <value>.92</value>\n         <value>.</value>\n      </row>\n      <row position=\"68\">\n         <value type=\"string\">7</value>\n         <value>4.95</value>\n         <value>0.</value>\n         <value>.15</value>\n         <value>64.6</value>\n      </row>\n      <row position=\"69\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>.85</value>\n         <value>.</value>\n      </row>\n      <row position=\"70\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>2.35</value>\n         <value>.</value>\n      </row>\n      <row position=\"71\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>5.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"72\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.58</value>\n         <value>.</value>\n      </row>\n      <row position=\"73\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>3.48</value>\n         <value>7.09</value>\n         <value>.</value>\n      </row>\n      <row position=\"74\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>5.</value>\n         <value>6.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"75\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>6.98</value>\n         <value>5.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"76\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>9.</value>\n         <value>4.39</value>\n         <value>.</value>\n      </row>\n      <row position=\"77\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>3.53</value>\n         <value>.</value>\n      </row>\n      <row position=\"78\">\n         <value type=\"string\">7</value>\n         <value>.</value>\n         <value>24.22</value>\n         <value>1.15</value>\n         <value>.</value>\n      </row>\n      <row position=\"79\">\n         <value type=\"string\">8</value>\n         <value>4.53</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>70.5</value>\n      </row>\n      <row position=\"80\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"81\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>0.52</value>\n         <value>3.05</value>\n         <value>.</value>\n      </row>\n      <row position=\"82\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>7.31</value>\n         <value>.</value>\n      </row>\n      <row position=\"83\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>7.56</value>\n         <value>.</value>\n      </row>\n      <row position=\"84\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"85\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>5.88</value>\n         <value>.</value>\n      </row>\n      <row position=\"86\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>7.15</value>\n         <value>4.73</value>\n         <value>.</value>\n      </row>\n      <row position=\"87\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>9.07</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"88\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>3.</value>\n         <value>.</value>\n      </row>\n      <row position=\"89\">\n         <value type=\"string\">8</value>\n         <value>.</value>\n         <value>24.12</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"90\">\n         <value type=\"string\">9</value>\n         <value>3.1</value>\n         <value>.0</value>\n         <value>.0</value>\n         <value>86.4</value>\n      </row>\n      <row position=\"91\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.3</value>\n         <value>7.37</value>\n         <value>.</value>\n      </row>\n      <row position=\"92\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>.63</value>\n         <value>9.03</value>\n         <value>.</value>\n      </row>\n      <row position=\"93\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>1.05</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"94\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>2.02</value>\n         <value>6.33</value>\n         <value>.</value>\n      </row>\n      <row position=\"95\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>3.53</value>\n         <value>5.66</value>\n         <value>.</value>\n      </row>\n      <row position=\"96\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.67</value>\n         <value>.</value>\n      </row>\n      <row position=\"97\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>7.17</value>\n         <value>4.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"98\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>8.8</value>\n         <value>4.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"99\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>11.6</value>\n         <value>3.16</value>\n         <value>.</value>\n      </row>\n      <row position=\"100\">\n         <value type=\"string\">9</value>\n         <value>.</value>\n         <value>24.43</value>\n         <value>1.12</value>\n         <value>.</value>\n      </row>\n      <row position=\"101\">\n         <value type=\"string\">10</value>\n         <value>5.5</value>\n         <value>0.</value>\n         <value>.24</value>\n         <value>58.2</value>\n      </row>\n      <row position=\"102\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.37</value>\n         <value>2.89</value>\n         <value>.</value>\n      </row>\n      <row position=\"103\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>.77</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"104\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>1.02</value>\n         <value>6.41</value>\n         <value>.</value>\n      </row>\n      <row position=\"105\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>2.05</value>\n         <value>7.83</value>\n         <value>.</value>\n      </row>\n      <row position=\"106\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>3.55</value>\n         <value>10.21</value>\n         <value>.</value>\n      </row>\n      <row position=\"107\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>5.05</value>\n         <value>9.18</value>\n         <value>.</value>\n      </row>\n      <row position=\"108\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>7.08</value>\n         <value>8.02</value>\n         <value>.</value>\n      </row>\n      <row position=\"109\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>9.38</value>\n         <value>7.14</value>\n         <value>.</value>\n      </row>\n      <row position=\"110\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>12.1</value>\n         <value>5.68</value>\n         <value>.</value>\n      </row>\n      <row position=\"111\">\n         <value type=\"string\">10</value>\n         <value>.</value>\n         <value>23.7</value>\n         <value>2.42</value>\n         <value>.</value>\n      </row>\n      <row position=\"112\">\n         <value type=\"string\">11</value>\n         <value>4.92</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>65.</value>\n      </row>\n      <row position=\"113\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>4.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"114\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>7.24</value>\n         <value>.</value>\n      </row>\n      <row position=\"115\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>.98</value>\n         <value>8.</value>\n         <value>.</value>\n      </row>\n      <row position=\"116\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>1.98</value>\n         <value>6.81</value>\n         <value>.</value>\n      </row>\n      <row position=\"117\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>3.6</value>\n         <value>5.87</value>\n         <value>.</value>\n      </row>\n      <row position=\"118\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>5.02</value>\n         <value>5.22</value>\n         <value>.</value>\n      </row>\n      <row position=\"119\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>7.03</value>\n         <value>4.45</value>\n         <value>.</value>\n      </row>\n      <row position=\"120\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>3.62</value>\n         <value>.</value>\n      </row>\n      <row position=\"121\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>12.12</value>\n         <value>2.69</value>\n         <value>.</value>\n      </row>\n      <row position=\"122\">\n         <value type=\"string\">11</value>\n         <value>.</value>\n         <value>24.08</value>\n         <value>.86</value>\n         <value>.</value>\n      </row>\n      <row position=\"123\">\n         <value type=\"string\">12</value>\n         <value>5.3</value>\n         <value>0.</value>\n         <value>0.</value>\n         <value>60.5</value>\n      </row>\n      <row position=\"124\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.25</value>\n         <value>1.25</value>\n         <value>.</value>\n      </row>\n      <row position=\"125\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>.5</value>\n         <value>3.96</value>\n         <value>.</value>\n      </row>\n      <row position=\"126\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>1.</value>\n         <value>7.82</value>\n         <value>.</value>\n      </row>\n      <row position=\"127\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>2.</value>\n         <value>9.72</value>\n         <value>.</value>\n      </row>\n      <row position=\"128\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>3.52</value>\n         <value>9.75</value>\n         <value>.</value>\n      </row>\n      <row position=\"129\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>5.07</value>\n         <value>8.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"130\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>7.07</value>\n         <value>6.59</value>\n         <value>.</value>\n      </row>\n      <row position=\"131\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>9.03</value>\n         <value>6.11</value>\n         <value>.</value>\n      </row>\n      <row position=\"132\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>12.05</value>\n         <value>4.57</value>\n         <value>.</value>\n      </row>\n      <row position=\"133\">\n         <value type=\"string\">12</value>\n         <value>.</value>\n         <value>24.15</value>\n         <value>1.17</value>\n         <value>.</value>\n      </row>\n   </table>\n</spkdata>\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000032254\010051247603\0011263\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(12),\n  popSize( 12 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 11\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 11 );\ncopy( id_0_c, id_0_c+11, id_0.begin() );\nT amt_0_c[] = { 4.02, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_0( 11 );\ncopy( amt_0_c, amt_0_c+11, amt_0.begin() );\nT time_0_c[] = { 0., 0.25, 0.57, 1.12, 2.02, 3.82, 5.1, 7.03, 9.05, 12.12, 24.37 };\nstd::vector<T> time_0( 11 );\ncopy( time_0_c, time_0_c+11, time_0.begin() );\nT dv_0_c[] = { .74, 2.84, 6.57, 10.5, 9.66, 8.58, 8.36, 7.47, 6.89, 5.94, 3.28 };\nstd::vector<T> dv_0( 11 );\ncopy( dv_0_c, dv_0_c+11, dv_0.begin() );\nT wt_0_c[] = { 79.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_0( 11 );\ncopy( wt_0_c, wt_0_c+11, wt_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 11 );\ncopy( mdv_0_c, mdv_0_c+11, mdv_0.begin() );\ndata[0] = new IndData<T>( 11, id_0, amt_0, time_0, dv_0, wt_0, mdv_0 );\n\n//------------------------------------\n// Subject <2> \n// # of sampling points = 11\n//------------------------------------\nchar* id_1_c[] = { \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\" };\nstd::vector<char*> id_1( 11 );\ncopy( id_1_c, id_1_c+11, id_1.begin() );\nT amt_1_c[] = { 4.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_1( 11 );\ncopy( amt_1_c, amt_1_c+11, amt_1.begin() );\nT time_1_c[] = { 0., .27, .52, 1., 1.92, 3.5, 5.02, 7.03, 9., 12., 24.3 };\nstd::vector<T> time_1( 11 );\ncopy( time_1_c, time_1_c+11, time_1.begin() );\nT dv_1_c[] = { 0., 1.72, 7.91, 8.31, 8.33, 6.85, 6.08, 5.4, 4.55, 3.01, .90 };\nstd::vector<T> dv_1( 11 );\ncopy( dv_1_c, dv_1_c+11, dv_1.begin() );\nT wt_1_c[] = { 72.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_1( 11 );\ncopy( wt_1_c, wt_1_c+11, wt_1.begin() );\nT mdv_1_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_1( 11 );\ncopy( mdv_1_c, mdv_1_c+11, mdv_1.begin() );\ndata[1] = new IndData<T>( 11, id_1, amt_1, time_1, dv_1, wt_1, mdv_1 );\n\n//------------------------------------\n// Subject <3> \n// # of sampling points = 11\n//------------------------------------\nchar* id_2_c[] = { \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\" };\nstd::vector<char*> id_2( 11 );\ncopy( id_2_c, id_2_c+11, id_2.begin() );\nT amt_2_c[] = { 4.53, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_2( 11 );\ncopy( amt_2_c, amt_2_c+11, amt_2.begin() );\nT time_2_c[] = { 0., .27, .58, 1.02, 2.02, 3.62, 5.08, 7.07, 9., 12.15, 24.17 };\nstd::vector<T> time_2( 11 );\ncopy( time_2_c, time_2_c+11, time_2.begin() );\nT dv_2_c[] = { 0., 4.4, 6.9, 8.2, 7.8, 7.5, 6.2, 5.3, 4.9, 3.7, 1.05 };\nstd::vector<T> dv_2( 11 );\ncopy( dv_2_c, dv_2_c+11, dv_2.begin() );\nT wt_2_c[] = { 70.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_2( 11 );\ncopy( wt_2_c, wt_2_c+11, wt_2.begin() );\nT mdv_2_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_2( 11 );\ncopy( mdv_2_c, mdv_2_c+11, mdv_2.begin() );\ndata[2] = new IndData<T>( 11, id_2, amt_2, time_2, dv_2, wt_2, mdv_2 );\n\n//------------------------------------\n// Subject <4> \n// # of sampling points = 11\n//------------------------------------\nchar* id_3_c[] = { \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\" };\nstd::vector<char*> id_3( 11 );\ncopy( id_3_c, id_3_c+11, id_3.begin() );\nT amt_3_c[] = { 4.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_3( 11 );\ncopy( amt_3_c, amt_3_c+11, amt_3.begin() );\nT time_3_c[] = { 0., .35, .6, 1.07, 2.13, 3.5, 5.02, 7.02, 9.02, 11.98, 24.65 };\nstd::vector<T> time_3( 11 );\ncopy( time_3_c, time_3_c+11, time_3.begin() );\nT dv_3_c[] = { 0., 1.89, 4.6, 8.6, 8.38, 7.54, 6.88, 5.78, 5.33, 4.19, 1.15 };\nstd::vector<T> dv_3( 11 );\ncopy( dv_3_c, dv_3_c+11, dv_3.begin() );\nT wt_3_c[] = { 72.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_3( 11 );\ncopy( wt_3_c, wt_3_c+11, wt_3.begin() );\nT mdv_3_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_3( 11 );\ncopy( mdv_3_c, mdv_3_c+11, mdv_3.begin() );\ndata[3] = new IndData<T>( 11, id_3, amt_3, time_3, dv_3, wt_3, mdv_3 );\n\n//------------------------------------\n// Subject <5> \n// # of sampling points = 11\n//------------------------------------\nchar* id_4_c[] = { \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\" };\nstd::vector<char*> id_4( 11 );\ncopy( id_4_c, id_4_c+11, id_4.begin() );\nT amt_4_c[] = { 5.86, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_4( 11 );\ncopy( amt_4_c, amt_4_c+11, amt_4.begin() );\nT time_4_c[] = { 0., .3, .52, 1., 2.02, 3.5, 5.02, 7.02, 9.1, 12., 24.35 };\nstd::vector<T> time_4( 11 );\ncopy( time_4_c, time_4_c+11, time_4.begin() );\nT dv_4_c[] = { 0., 2.02, 5.63, 11.4, 9.33, 8.74, 7.56, 7.09, 5.9, 4.37, 1.57 };\nstd::vector<T> dv_4( 11 );\ncopy( dv_4_c, dv_4_c+11, dv_4.begin() );\nT wt_4_c[] = { 54.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_4( 11 );\ncopy( wt_4_c, wt_4_c+11, wt_4.begin() );\nT mdv_4_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_4( 11 );\ncopy( mdv_4_c, mdv_4_c+11, mdv_4.begin() );\ndata[4] = new IndData<T>( 11, id_4, amt_4, time_4, dv_4, wt_4, mdv_4 );\n\n//------------------------------------\n// Subject <6> \n// # of sampling points = 11\n//------------------------------------\nchar* id_5_c[] = { \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\", \"6\" };\nstd::vector<char*> id_5( 11 );\ncopy( id_5_c, id_5_c+11, id_5.begin() );\nT amt_5_c[] = { 4., 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_5( 11 );\ncopy( amt_5_c, amt_5_c+11, amt_5.begin() );\nT time_5_c[] = { 0., .27, .58, 1.15, 2.03, 3.57, 5., 7., 9.22, 12.1, 23.85 };\nstd::vector<T> time_5( 11 );\ncopy( time_5_c, time_5_c+11, time_5.begin() );\nT dv_5_c[] = { 0., 1.29, 3.08, 6.44, 6.32, 5.53, 4.94, 4.02, 3.46, 2.78, .92 };\nstd::vector<T> dv_5( 11 );\ncopy( dv_5_c, dv_5_c+11, dv_5.begin() );\nT wt_5_c[] = { 80., 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_5( 11 );\ncopy( wt_5_c, wt_5_c+11, wt_5.begin() );\nT mdv_5_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_5( 11 );\ncopy( mdv_5_c, mdv_5_c+11, mdv_5.begin() );\ndata[5] = new IndData<T>( 11, id_5, amt_5, time_5, dv_5, wt_5, mdv_5 );\n\n//------------------------------------\n// Subject <7> \n// # of sampling points = 11\n//------------------------------------\nchar* id_6_c[] = { \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\", \"7\" };\nstd::vector<char*> id_6( 11 );\ncopy( id_6_c, id_6_c+11, id_6.begin() );\nT amt_6_c[] = { 4.95, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_6( 11 );\ncopy( amt_6_c, amt_6_c+11, amt_6.begin() );\nT time_6_c[] = { 0., .25, .5, 1.02, 2.02, 3.48, 5., 6.98, 9., 12.05, 24.22 };\nstd::vector<T> time_6( 11 );\ncopy( time_6_c, time_6_c+11, time_6.begin() );\nT dv_6_c[] = { .15, .85, 2.35, 5.02, 6.58, 7.09, 6.66, 5.25, 4.39, 3.53, 1.15 };\nstd::vector<T> dv_6( 11 );\ncopy( dv_6_c, dv_6_c+11, dv_6.begin() );\nT wt_6_c[] = { 64.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_6( 11 );\ncopy( wt_6_c, wt_6_c+11, wt_6.begin() );\nT mdv_6_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_6( 11 );\ncopy( mdv_6_c, mdv_6_c+11, mdv_6.begin() );\ndata[6] = new IndData<T>( 11, id_6, amt_6, time_6, dv_6, wt_6, mdv_6 );\n\n//------------------------------------\n// Subject <8> \n// # of sampling points = 11\n//------------------------------------\nchar* id_7_c[] = { \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\" };\nstd::vector<char*> id_7( 11 );\ncopy( id_7_c, id_7_c+11, id_7.begin() );\nT amt_7_c[] = { 4.53, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_7( 11 );\ncopy( amt_7_c, amt_7_c+11, amt_7.begin() );\nT time_7_c[] = { 0., .25, 0.52, .98, 2.02, 3.53, 5.05, 7.15, 9.07, 12.1, 24.12 };\nstd::vector<T> time_7( 11 );\ncopy( time_7_c, time_7_c+11, time_7.begin() );\nT dv_7_c[] = { 0., 3.05, 3.05, 7.31, 7.56, 6.59, 5.88, 4.73, 4.57, 3., 1.25 };\nstd::vector<T> dv_7( 11 );\ncopy( dv_7_c, dv_7_c+11, dv_7.begin() );\nT wt_7_c[] = { 70.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_7( 11 );\ncopy( wt_7_c, wt_7_c+11, wt_7.begin() );\nT mdv_7_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_7( 11 );\ncopy( mdv_7_c, mdv_7_c+11, mdv_7.begin() );\ndata[7] = new IndData<T>( 11, id_7, amt_7, time_7, dv_7, wt_7, mdv_7 );\n\n//------------------------------------\n// Subject <9> \n// # of sampling points = 11\n//------------------------------------\nchar* id_8_c[] = { \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\" };\nstd::vector<char*> id_8( 11 );\ncopy( id_8_c, id_8_c+11, id_8.begin() );\nT amt_8_c[] = { 3.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_8( 11 );\ncopy( amt_8_c, amt_8_c+11, amt_8.begin() );\nT time_8_c[] = { .0, .3, .63, 1.05, 2.02, 3.53, 5.02, 7.17, 8.8, 11.6, 24.43 };\nstd::vector<T> time_8( 11 );\ncopy( time_8_c, time_8_c+11, time_8.begin() );\nT dv_8_c[] = { .0, 7.37, 9.03, 7.14, 6.33, 5.66, 5.67, 4.24, 4.11, 3.16, 1.12 };\nstd::vector<T> dv_8( 11 );\ncopy( dv_8_c, dv_8_c+11, dv_8.begin() );\nT wt_8_c[] = { 86.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_8( 11 );\ncopy( wt_8_c, wt_8_c+11, wt_8.begin() );\nT mdv_8_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_8( 11 );\ncopy( mdv_8_c, mdv_8_c+11, mdv_8.begin() );\ndata[8] = new IndData<T>( 11, id_8, amt_8, time_8, dv_8, wt_8, mdv_8 );\n\n//------------------------------------\n// Subject <10> \n// # of sampling points = 11\n//------------------------------------\nchar* id_9_c[] = { \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\" };\nstd::vector<char*> id_9( 11 );\ncopy( id_9_c, id_9_c+11, id_9.begin() );\nT amt_9_c[] = { 5.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_9( 11 );\ncopy( amt_9_c, amt_9_c+11, amt_9.begin() );\nT time_9_c[] = { 0., .37, .77, 1.02, 2.05, 3.55, 5.05, 7.08, 9.38, 12.1, 23.7 };\nstd::vector<T> time_9( 11 );\ncopy( time_9_c, time_9_c+11, time_9.begin() );\nT dv_9_c[] = { .24, 2.89, 5.22, 6.41, 7.83, 10.21, 9.18, 8.02, 7.14, 5.68, 2.42 };\nstd::vector<T> dv_9( 11 );\ncopy( dv_9_c, dv_9_c+11, dv_9.begin() );\nT wt_9_c[] = { 58.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_9( 11 );\ncopy( wt_9_c, wt_9_c+11, wt_9.begin() );\nT mdv_9_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_9( 11 );\ncopy( mdv_9_c, mdv_9_c+11, mdv_9.begin() );\ndata[9] = new IndData<T>( 11, id_9, amt_9, time_9, dv_9, wt_9, mdv_9 );\n\n//------------------------------------\n// Subject <11> \n// # of sampling points = 11\n//------------------------------------\nchar* id_10_c[] = { \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\" };\nstd::vector<char*> id_10( 11 );\ncopy( id_10_c, id_10_c+11, id_10.begin() );\nT amt_10_c[] = { 4.92, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_10( 11 );\ncopy( amt_10_c, amt_10_c+11, amt_10.begin() );\nT time_10_c[] = { 0., .25, .5, .98, 1.98, 3.6, 5.02, 7.03, 9.03, 12.12, 24.08 };\nstd::vector<T> time_10( 11 );\ncopy( time_10_c, time_10_c+11, time_10.begin() );\nT dv_10_c[] = { 0., 4.86, 7.24, 8., 6.81, 5.87, 5.22, 4.45, 3.62, 2.69, .86 };\nstd::vector<T> dv_10( 11 );\ncopy( dv_10_c, dv_10_c+11, dv_10.begin() );\nT wt_10_c[] = { 65., 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_10( 11 );\ncopy( wt_10_c, wt_10_c+11, wt_10.begin() );\nT mdv_10_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_10( 11 );\ncopy( mdv_10_c, mdv_10_c+11, mdv_10.begin() );\ndata[10] = new IndData<T>( 11, id_10, amt_10, time_10, dv_10, wt_10, mdv_10 );\n\n//------------------------------------\n// Subject <12> \n// # of sampling points = 11\n//------------------------------------\nchar* id_11_c[] = { \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\" };\nstd::vector<char*> id_11( 11 );\ncopy( id_11_c, id_11_c+11, id_11.begin() );\nT amt_11_c[] = { 5.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> amt_11( 11 );\ncopy( amt_11_c, amt_11_c+11, amt_11.begin() );\nT time_11_c[] = { 0., .25, .5, 1., 2., 3.52, 5.07, 7.07, 9.03, 12.05, 24.15 };\nstd::vector<T> time_11( 11 );\ncopy( time_11_c, time_11_c+11, time_11.begin() );\nT dv_11_c[] = { 0., 1.25, 3.96, 7.82, 9.72, 9.75, 8.57, 6.59, 6.11, 4.57, 1.17 };\nstd::vector<T> dv_11( 11 );\ncopy( dv_11_c, dv_11_c+11, dv_11.begin() );\nT wt_11_c[] = { 60.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\nstd::vector<T> wt_11( 11 );\ncopy( wt_11_c, wt_11_c+11, wt_11.begin() );\nT mdv_11_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_11( 11 );\ncopy( mdv_11_c, mdv_11_c+11, mdv_11.begin() );\ndata[11] = new IndData<T>( 11, id_11, amt_11, time_11, dv_11, wt_11, mdv_11 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000031445\010051247603\0011565\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitPopulation.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n///////////////////////////////////////////////////////////////////\n//   NONMEM PRED specific\n#include \"Pred.h\"\n#include <spkpred/PopPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nint main( int argc, const char argv[] )\n{\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n{\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n}\n\n//FpErrorChecker fperror;\n\nconst int nPop = 12;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested  = false;\nbool haveCompleteData      = false;\nconst bool isOptRequested  = true;\nbool isOptSuccess          = false;\nObjective objective    = FIRST_ORDER;\nconst bool isStatRequested = false;\nbool isStatSuccess         = false;\n\n///////////////////////////////////////////////////////////////////\n// NONMEM Sepcific\nconst int nTheta          = 3; // length of theta vector\ndouble c_thetaIn[nTheta]  = { 3, .08, .04 };\nconst valarray<double> thetaIn( c_thetaIn, nTheta );\ndouble c_thetaUp[nTheta]  = { 5, .5, .9 };\nconst valarray<double> thetaUp( c_thetaUp, nTheta );\ndouble c_thetaLow[nTheta] = { .1, .008, .004 };\nconst valarray<double> thetaLow( c_thetaLow, nTheta );\nvalarray<double> thetaOut( nTheta );\n\nconst int nOmega         = 6; // #of elements in Omega matrix\nconst int dimOmega       = 3; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 6, .005, .0002, .3, .006, .4 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\nconst int nSigma         = 1; // #of elements in Sigma matrix\nconst int dimSigma = 1; // order of Sigma matrix\nconst int nEps           = dimSigma;\ndouble c_sigmaIn[nSigma] = { .4 };\nconst valarray<double> sigmaIn ( c_sigmaIn, nSigma );\nvalarray<double> sigmaOut( nSigma );\n\nconst int nEta              = 3;\ndouble c_etaIn[nEta] = { 0.0, 0.0, 0.0 };\nconst valarray<double> etaIn ( c_etaIn, nEta );\nvalarray<double> etaOut( nEta );\nvalarray<double> etaAllOut( nEta * nPop );\n\n//\n///////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred< CppAD::AD<double> > mPred(&set);\nenum PopPredModel::covStruct omegaStruct = PopPredModel::FULL;\nenum PopPredModel::covStruct sigmaStruct = PopPredModel::DIAGONAL;\nPopPredModel model( mPred,\n                    nTheta,\n                    thetaLow,\n                    thetaUp,\n                    thetaIn,\n                    nEta,\n                    etaIn,\n                    nEps,\n                    omegaStruct,\n                    omegaIn,\n                    sigmaStruct,\n                    sigmaIn );\n//\n///////////////////////////////////////////////////////////////////\n\nconst int nAlp = model.getNPopPar();\nconst int nB   = model.getNIndPar();\n\nvalarray<double> alpIn  ( nAlp );\nvalarray<double> alpUp  ( nAlp );\nvalarray<double> alpLow ( nAlp );\nvalarray<double> alpStep( nAlp );\nvalarray<double> alpOut ( nAlp );\ndouble           alpObjOut;\nvalarray<double> alpObj_alpOut    ( nAlp );\nvalarray<double> alpObj_alp_alpOut( nAlp * nAlp );\nmodel.getPopPar         ( alpIn );\nmodel.getPopParLimits   ( alpLow, alpUp );\nmodel.getPopParStep     ( alpStep );\n\nvalarray<double> bIn  ( nB * nPop );\nvalarray<double> biIn ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bOut ( nB * nPop );\nfor( int i=0; i<nPop; i++ )\n{\n   model.selectIndividual( i ); \n   model.getIndPar( biIn );\n   bIn[ slice(i*nB, nB, 1) ] = biIn;\n}\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\nconst double popEps   = 0.001;\nconst int    popMitr  = 100;\nconst int    popTrace = 1;\nOptimizer    popOpt( popEps, popMitr, popTrace );\n\nconst double indEps   = 0.001;\nconst int    indMitr  = 100;\nconst int    indTrace = 1;\nOptimizer    indOpt( indEps, indMitr, indTrace );\n\nint c_N[nPop] = { 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11 };\nconst valarray<int> N( c_N, nPop );\nconst int nY = N.sum();\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.74, 2.84, 6.57, 10.5, 9.66, 8.58, 8.36, 7.47, 6.89, 5.94, 3.28, 0, 1.72, 7.91, 8.31, 8.33, 6.85, 6.08, 5.4, 4.55, 3.01, 0.9, 0, 4.4, 6.9, 8.2, 7.8, 7.5, 6.2, 5.3, 4.9, 3.7, 1.05, 0, 1.89, 4.6, 8.6, 8.38, 7.54, 6.88, 5.78, 5.33, 4.19, 1.15, 0, 2.02, 5.63, 11.4, 9.33, 8.74, 7.56, 7.09, 5.9, 4.37, 1.57, 0, 1.29, 3.08, 6.44, 6.32, 5.53, 4.94, 4.02, 3.46, 2.78, 0.92, 0.15, 0.85, 2.35, 5.02, 6.58, 7.09, 6.66, 5.25, 4.39, 3.53, 1.15, 0, 3.05, 3.05, 7.31, 7.56, 6.59, 5.88, 4.73, 4.57, 3, 1.25, 0, 7.37, 9.03, 7.14, 6.33, 5.66, 5.67, 4.24, 4.11, 3.16, 1.12, 0.24, 2.89, 5.22, 6.41, 7.83, 10.21, 9.18, 8.02, 7.14, 5.68, 2.42, 0, 4.86, 7.24, 8, 6.81, 5.87, 5.22, 4.45, 3.62, 2.69, 0.86, 0, 1.25, 3.96, 7.82, 9.72, 9.75, 8.57, 6.59, 6.11, 4.57, 1.17 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n   gettimeofday( &optBegin, NULL );\n   try\n   {\n      fitPopulation( model,\n                     objective, \n                     N,\n                     y,\n                     popOpt,\n                     alpLow,\n                     alpUp,\n                     alpIn,\n                     alpStep,\n                    &alpOut,\n                     indOpt,\n                     bLow,\n                     bUp,\n                     bIn,\n                     bStep,\n                    &bOut,\n                    &alpObjOut,\n                    &alpObj_alpOut,\n                    &alpObj_alp_alpOut );\n      //FpErrorChecker::check( __LINE__, __FILE__ );\n      isOptSuccess = true;\n   }\n   catch( const SpkException& e )\n   {\n      oRuntimeError << e << endl;\n      cerr << e << endl;\n      isOptSuccess = false;\n      //FpErrorChecker::clear();\n   }\n   catch( ... )\n   {\n      char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n      oRuntimeError << message << endl;\n      cerr << message << endl;\n      isOptSuccess = false;\n      //FpErrorChecker::clear();\n   }\n   gettimeofday( &optEnd, NULL );\n   optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n   ///////////////////////////////////////////////////////////////////\n   //   NONMEM Specific\n   if( isOptSuccess )\n   {\n      model.getTheta( thetaOut );\n      model.getOmega( omegaOut );\n      model.getSigma( sigmaOut );\n      for( int i=0; i<nPop; i++ )\n      {\n         model.selectIndividual( i ); \n         model.getEta( etaOut );\n         etaAllOut[ slice( i*nEta, nEta, 1 ) ] = etaOut; \n      }\n   }\n   //\n   ///////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\noRuntimeError.close();\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreport>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<pop_analysis_result>\" << endl;\n\noResults << \"<pop_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<pop_obj_out>\" << endl;\noResults << \"<value>\" << alpObjOut << \"</value>\" << endl;\noResults << \"</pop_obj_out>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//   NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << alpOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=nTheta; i<nTheta+nOmega; i++ )\n{\n   oResults << \"<value>\" << alpOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\noResults << \"<sigma_out>\" << endl;\nfor( int i=nTheta+nOmega; i<nTheta+nOmega+nSigma; i++ )\n{\n   oResults << \"<value>\" << alpOut[i] << \"</value>\" << endl;\n}\noResults << \"</sigma_out>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</pop_opt_result>\" << endl;\n\noResults << \"</pop_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n///////////////////////////////////////////////////////////////////\n//   DATA SET Specific\noResults << \"<label name=\\\"cl\\\"/>\" << endl;\noResults << \"<label name=\\\"d\\\"/>\" << endl;\noResults << \"<label name=\\\"ds\\\"/>\" << endl;\noResults << \"<label name=\\\"e\\\"/>\" << endl;\noResults << \"<label name=\\\"eps\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"ka\\\"/>\" << endl;\noResults << \"<label name=\\\"ke\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"sigma\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"w\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\n\nfor( int i=0, cnt=1; i<nPop; i++ )\n{\n   for( int j=0; j<N[i]; j++, cnt++ )\n   {\n      oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n      ///////////////////////////////////////////////////////////////////\n      //   DATA SET Specific\n   oResults << \"<value>\" << set.data[i]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->cl[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->d[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->ds[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->e[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eps[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->eta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->ka[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->ke[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->w[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[i]->y[j] << \"</value>\" << endl;\n      //\n      ///////////////////////////////////////////////////////////////////\n      oResults << \"</row>\" << endl;\n   }\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreport>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247603\0013074\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003627\010051247603\0011244\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & amtIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & wtIn,\n	const std::vector<T> & mdvIn);\n\nconst std::vector<T> amt;\nconst std::vector<T> dose;\nstd::vector<T> cl;\nstd::vector<T> d;\nstd::vector<T> ds;\nconst std::vector<T> dv;\nconst std::vector<T> cp;\nstd::vector<T> e;\nstd::vector< std::vector<T> > eps;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nstd::vector<T> ka;\nstd::vector<T> ke;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> w;\nstd::vector<T> wres;\nconst std::vector<T> wt;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & amtIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & wtIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\namt( amtIn ),\ndose( amtIn ),\ntime( timeIn ),\ndv( dvIn ),\ncp( dvIn ),\nwt( wtIn ),\nmdv( mdvIn ),\ncl( nIn ),\nd( nIn ),\nds( nIn ),\ne( nIn ),\neps( nIn ),\neta( nIn ),\nf( nIn ),\nka( nIn ),\nke( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nw( nIn ),\nwres( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 3 );\n      eta[i].resize( 3 );\n      eps[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247602\0010716\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000015446\010051247603\0010634\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value amt;\nmutable Value dose;\nmutable Value time;\nmutable Value dv;\nmutable Value cp;\nmutable Value wt;\nmutable Value mdv;\nmutable Value cl;\nmutable Value d;\nmutable Value ds;\nmutable Value e;\nmutable Value f;\nmutable Value ka;\nmutable Value ke;\nmutable Value pred;\nmutable Value res;\nmutable Value w;\nmutable Value wres;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 12 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 3 );\n  assert( spk_etaLen   == 3 );\n  assert( spk_epsLen   == 1 );\n\nid = perm->data[spk_i]->id[spk_j];\namt = perm->data[spk_i]->amt[spk_j];\ndose = perm->data[spk_i]->dose[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\ncp = perm->data[spk_i]->cp[spk_j];\nwt = perm->data[spk_i]->wt[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator eta2 = spk_indepVar.begin() + spk_etaOffset + 1;\ntypename std::vector<Value>::const_iterator eta3 = spk_indepVar.begin() + spk_etaOffset + 2;\ntypename std::vector<Value>::const_iterator eps1 = spk_indepVar.begin() + spk_epsOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\ntypename std::vector<Value>::const_iterator eps = spk_indepVar.begin() + spk_epsOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\n// THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n// THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n// THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n// DOSE=WT-ADJUSTED DOSE (MG/KG)\n// DS=NON-WT-ADJUSTED DOSE (MG)\nif( dose != 0 )\n{\nds = dose * wt;\nw = wt;\n}\n\nka = theta[ ( 1 ) - 1 ] + eta[ ( 1 ) - 1 ];\nke = theta[ ( 2 ) - 1 ] + eta[ ( 2 ) - 1 ];\ncl = theta[ ( 3 ) - 1 ] * w + eta[ ( 3 ) - 1 ];\nd = exp( -ke * time ) - exp( -ka * time );\ne = cl * ( ka - ke );\nf = ds * ke * ka / e * d;\ny = f + eps[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->cl[ spk_j ] = cl;\ntemp.data[ spk_i ]->d[ spk_j ] = d;\ntemp.data[ spk_i ]->ds[ spk_j ] = ds;\ntemp.data[ spk_i ]->e[ spk_j ] = e;\ncopy( eps, eps+spk_etaLen, temp.data[ spk_i ]->eps[ spk_j ].begin() ); \ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->ka[ spk_j ] = ka;\ntemp.data[ spk_i ]->ke[ spk_j ] = ke;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->w[ spk_j ] = w;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 12-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->cl = temp.data[ i ]->cl;\n    perm->data[ i ]->d = temp.data[ i ]->d;\n    perm->data[ i ]->ds = temp.data[ i ]->ds;\n    perm->data[ i ]->e = temp.data[ i ]->e;\n    perm->data[ i ]->eps = temp.data[ i ]->eps;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->ka = temp.data[ i ]->ka;\n    perm->data[ i ]->ke = temp.data[ i ]->ke;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->w = temp.data[ i ]->w;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247602\0012532\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000006310\010051247602\0011600\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <pop_analysis approximation=\"fo\" is_estimation=\"yes\" is_eta_out=\"no\" is_restart=\"no\" pop_size=\"12\" mitr=\"450\">\n            <description>THEOPHYLLINE POPULATION DATA</description>\n            <data_labels>\n               <label name=\"ID\"/>\n               <label name=\"AMT\" synonym=\"DOSE\"/>\n               <label name=\"TIME\"/>\n               <label name=\"DV\" synonym=\"CP\"/>\n               <label name=\"WT\"/>\n            </data_labels>\n            <theta length=\"3\">\n               <low>\n                  <value fixed=\"no\">.1</value>\n                  <value fixed=\"no\">.008</value>\n                  <value fixed=\"no\">.004</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">3</value>\n                  <value fixed=\"no\">.08</value>\n                  <value fixed=\"no\">.04</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5</value>\n                  <value fixed=\"no\">.5</value>\n                  <value fixed=\"no\">.9</value>\n               </up>\n            </theta>\n            <omega dimension=\"3\" same_as_previous=\"no\" struct=\"block\">\n               <in>\n                  <value fixed=\"no\">6</value>\n                  <value fixed=\"no\">.005</value>\n                  <value fixed=\"no\">.0002</value>\n                  <value fixed=\"no\">.3</value>\n                  <value fixed=\"no\">.006</value>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </omega>\n            <sigma dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">.4</value>\n               </in>\n            </sigma>\n            <pop_stat covariance_form=\"rsr\"/>\n         </pop_analysis>\n      </constraint>\n      <model>\n         <pred>\n;THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n;THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n;THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n;DOSE=WT-ADJUSTED DOSE (MG/KG)\n;DS=NON-WT-ADJUSTED DOSE (MG)\n   IF (DOSE.NE.0) THEN\n      DS=DOSE*WT\n      W=WT\n   ENDIF\n   KA=THETA(1)+ETA(1)\n   KE=THETA(2)+ETA(2)\n   CL=THETA(3)*W+ETA(3)\n   D=EXP(-KE*TIME)-EXP(-KA*TIME)\n   E=CL*(KA-KE)\n   F=DS*KE*KA/E*D\n   Y=F+EPS(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\">\n            <column appearance_order=\"1\" label=\"ID\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DOSE\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"WT\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"7\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"8\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"hide\" x0_line=\"hide\" y0_line=\"hide\">\n            <x label=\"RES\"/>\n            <x label=\"WRES\"/>\n            <y label=\"TIME\"/>\n            <split label=\"ID\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (3,3,'GAUSS3_1',3,'1',3,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>GAUSS3_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"8\">\n               <low>\n                  <value fixed=\"no\">9.49</value>\n                  <value fixed=\"no\">0.0009</value>\n                  <value fixed=\"no\">9.01</value>\n                  <value fixed=\"no\">11.3</value>\n                  <value fixed=\"no\">2</value>\n                  <value fixed=\"no\">7.38</value>\n                  <value fixed=\"no\">14</value>\n                  <value fixed=\"no\">2</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">94.9</value>\n                  <value fixed=\"no\">0.009</value>\n                  <value fixed=\"no\">90.1</value>\n                  <value fixed=\"no\">113</value>\n                  <value fixed=\"no\">20</value>\n                  <value fixed=\"no\">73.8</value>\n                  <value fixed=\"no\">140</value>\n                  <value fixed=\"no\">20</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">949</value>\n                  <value fixed=\"no\">0.09</value>\n                  <value fixed=\"no\">901</value>\n                  <value fixed=\"no\">1130</value>\n                  <value fixed=\"no\">200</value>\n                  <value fixed=\"no\">738</value>\n                  <value fixed=\"no\">1400</value>\n                  <value fixed=\"no\">200</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nb8 = THETA(8)\nx = TIME\nF=b1*EXP(-b2*x)+b3*EXP(-((x-b4)**2)/(b5**2))+b6*EXP(-((x-b7)**2)/(b8**2))\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"GAUSS3_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n','q2r',NULL,1081198911,1084575621,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000061305\010051247604\0011212\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"251\">\n      <description>gauss3_1.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>1</value>\n         <value>97.58776</value>\n      </row>\n      <row position=\"3\">\n         <value>2</value>\n         <value>97.76344</value>\n      </row>\n      <row position=\"4\">\n         <value>3</value>\n         <value>96.56705</value>\n      </row>\n      <row position=\"5\">\n         <value>4</value>\n         <value>92.52037</value>\n      </row>\n      <row position=\"6\">\n         <value>5</value>\n         <value>91.15097</value>\n      </row>\n      <row position=\"7\">\n         <value>6</value>\n         <value>95.21728</value>\n      </row>\n      <row position=\"8\">\n         <value>7</value>\n         <value>90.21355</value>\n      </row>\n      <row position=\"9\">\n         <value>8</value>\n         <value>89.29235</value>\n      </row>\n      <row position=\"10\">\n         <value>9</value>\n         <value>91.51479</value>\n      </row>\n      <row position=\"11\">\n         <value>10</value>\n         <value>89.60965</value>\n      </row>\n      <row position=\"12\">\n         <value>11</value>\n         <value>86.56187</value>\n      </row>\n      <row position=\"13\">\n         <value>12</value>\n         <value>85.55315</value>\n      </row>\n      <row position=\"14\">\n         <value>13</value>\n         <value>87.13053</value>\n      </row>\n      <row position=\"15\">\n         <value>14</value>\n         <value>85.67938</value>\n      </row>\n      <row position=\"16\">\n         <value>15</value>\n         <value>80.04849</value>\n      </row>\n      <row position=\"17\">\n         <value>16</value>\n         <value>82.18922</value>\n      </row>\n      <row position=\"18\">\n         <value>17</value>\n         <value>87.24078</value>\n      </row>\n      <row position=\"19\">\n         <value>18</value>\n         <value>80.79401</value>\n      </row>\n      <row position=\"20\">\n         <value>19</value>\n         <value>81.28564</value>\n      </row>\n      <row position=\"21\">\n         <value>20</value>\n         <value>81.56932</value>\n      </row>\n      <row position=\"22\">\n         <value>21</value>\n         <value>79.22703</value>\n      </row>\n      <row position=\"23\">\n         <value>22</value>\n         <value>79.43259</value>\n      </row>\n      <row position=\"24\">\n         <value>23</value>\n         <value>77.90174</value>\n      </row>\n      <row position=\"25\">\n         <value>24</value>\n         <value>76.75438</value>\n      </row>\n      <row position=\"26\">\n         <value>25</value>\n         <value>77.17338</value>\n      </row>\n      <row position=\"27\">\n         <value>26</value>\n         <value>74.27296</value>\n      </row>\n      <row position=\"28\">\n         <value>27</value>\n         <value>73.1183</value>\n      </row>\n      <row position=\"29\">\n         <value>28</value>\n         <value>73.84732</value>\n      </row>\n      <row position=\"30\">\n         <value>29</value>\n         <value>72.47746</value>\n      </row>\n      <row position=\"31\">\n         <value>30</value>\n         <value>71.92128</value>\n      </row>\n      <row position=\"32\">\n         <value>31</value>\n         <value>66.91962</value>\n      </row>\n      <row position=\"33\">\n         <value>32</value>\n         <value>67.93554</value>\n      </row>\n      <row position=\"34\">\n         <value>33</value>\n         <value>69.55841</value>\n      </row>\n      <row position=\"35\">\n         <value>34</value>\n         <value>69.06592</value>\n      </row>\n      <row position=\"36\">\n         <value>35</value>\n         <value>66.53371</value>\n      </row>\n      <row position=\"37\">\n         <value>36</value>\n         <value>63.87094</value>\n      </row>\n      <row position=\"38\">\n         <value>37</value>\n         <value>69.70526</value>\n      </row>\n      <row position=\"39\">\n         <value>38</value>\n         <value>63.59295</value>\n      </row>\n      <row position=\"40\">\n         <value>39</value>\n         <value>63.35509</value>\n      </row>\n      <row position=\"41\">\n         <value>40</value>\n         <value>59.99747</value>\n      </row>\n      <row position=\"42\">\n         <value>41</value>\n         <value>62.64843</value>\n      </row>\n      <row position=\"43\">\n         <value>42</value>\n         <value>65.77345</value>\n      </row>\n      <row position=\"44\">\n         <value>43</value>\n         <value>59.10141</value>\n      </row>\n      <row position=\"45\">\n         <value>44</value>\n         <value>56.5775</value>\n      </row>\n      <row position=\"46\">\n         <value>45</value>\n         <value>61.15313</value>\n      </row>\n      <row position=\"47\">\n         <value>46</value>\n         <value>54.30767</value>\n      </row>\n      <row position=\"48\">\n         <value>47</value>\n         <value>62.83535</value>\n      </row>\n      <row position=\"49\">\n         <value>48</value>\n         <value>56.52957</value>\n      </row>\n      <row position=\"50\">\n         <value>49</value>\n         <value>56.98427</value>\n      </row>\n      <row position=\"51\">\n         <value>50</value>\n         <value>58.11459</value>\n      </row>\n      <row position=\"52\">\n         <value>51</value>\n         <value>58.69576</value>\n      </row>\n      <row position=\"53\">\n         <value>52</value>\n         <value>58.23322</value>\n      </row>\n      <row position=\"54\">\n         <value>53</value>\n         <value>54.9049</value>\n      </row>\n      <row position=\"55\">\n         <value>54</value>\n         <value>57.91442</value>\n      </row>\n      <row position=\"56\">\n         <value>55</value>\n         <value>56.96629</value>\n      </row>\n      <row position=\"57\">\n         <value>56</value>\n         <value>51.13831</value>\n      </row>\n      <row position=\"58\">\n         <value>57</value>\n         <value>49.27123</value>\n      </row>\n      <row position=\"59\">\n         <value>58</value>\n         <value>52.92668</value>\n      </row>\n      <row position=\"60\">\n         <value>59</value>\n         <value>54.47693</value>\n      </row>\n      <row position=\"61\">\n         <value>60</value>\n         <value>51.8171</value>\n      </row>\n      <row position=\"62\">\n         <value>61</value>\n         <value>51.05401</value>\n      </row>\n      <row position=\"63\">\n         <value>62</value>\n         <value>52.51731</value>\n      </row>\n      <row position=\"64\">\n         <value>63</value>\n         <value>51.8371</value>\n      </row>\n      <row position=\"65\">\n         <value>64</value>\n         <value>54.48196</value>\n      </row>\n      <row position=\"66\">\n         <value>65</value>\n         <value>49.05859</value>\n      </row>\n      <row position=\"67\">\n         <value>66</value>\n         <value>50.52315</value>\n      </row>\n      <row position=\"68\">\n         <value>67</value>\n         <value>50.32755</value>\n      </row>\n      <row position=\"69\">\n         <value>68</value>\n         <value>46.44419</value>\n      </row>\n      <row position=\"70\">\n         <value>69</value>\n         <value>50.89281</value>\n      </row>\n      <row position=\"71\">\n         <value>70</value>\n         <value>52.13203</value>\n      </row>\n      <row position=\"72\">\n         <value>71</value>\n         <value>49.78741</value>\n      </row>\n      <row position=\"73\">\n         <value>72</value>\n         <value>49.01637</value>\n      </row>\n      <row position=\"74\">\n         <value>73</value>\n         <value>54.18198</value>\n      </row>\n      <row position=\"75\">\n         <value>74</value>\n         <value>53.17456</value>\n      </row>\n      <row position=\"76\">\n         <value>75</value>\n         <value>53.20827</value>\n      </row>\n      <row position=\"77\">\n         <value>76</value>\n         <value>57.43459</value>\n      </row>\n      <row position=\"78\">\n         <value>77</value>\n         <value>51.95282</value>\n      </row>\n      <row position=\"79\">\n         <value>78</value>\n         <value>54.20282</value>\n      </row>\n      <row position=\"80\">\n         <value>79</value>\n         <value>57.46687</value>\n      </row>\n      <row position=\"81\">\n         <value>80</value>\n         <value>53.60268</value>\n      </row>\n      <row position=\"82\">\n         <value>81</value>\n         <value>58.86728</value>\n      </row>\n      <row position=\"83\">\n         <value>82</value>\n         <value>57.66652</value>\n      </row>\n      <row position=\"84\">\n         <value>83</value>\n         <value>63.71034</value>\n      </row>\n      <row position=\"85\">\n         <value>84</value>\n         <value>65.24244</value>\n      </row>\n      <row position=\"86\">\n         <value>85</value>\n         <value>65.10878</value>\n      </row>\n      <row position=\"87\">\n         <value>86</value>\n         <value>69.96313</value>\n      </row>\n      <row position=\"88\">\n         <value>87</value>\n         <value>68.85475</value>\n      </row>\n      <row position=\"89\">\n         <value>88</value>\n         <value>73.32574</value>\n      </row>\n      <row position=\"90\">\n         <value>89</value>\n         <value>76.21241</value>\n      </row>\n      <row position=\"91\">\n         <value>90</value>\n         <value>78.06311</value>\n      </row>\n      <row position=\"92\">\n         <value>91</value>\n         <value>75.37701</value>\n      </row>\n      <row position=\"93\">\n         <value>92</value>\n         <value>87.54449</value>\n      </row>\n      <row position=\"94\">\n         <value>93</value>\n         <value>89.50588</value>\n      </row>\n      <row position=\"95\">\n         <value>94</value>\n         <value>95.82098</value>\n      </row>\n      <row position=\"96\">\n         <value>95</value>\n         <value>97.4839</value>\n      </row>\n      <row position=\"97\">\n         <value>96</value>\n         <value>100.8607</value>\n      </row>\n      <row position=\"98\">\n         <value>97</value>\n         <value>102.4851</value>\n      </row>\n      <row position=\"99\">\n         <value>98</value>\n         <value>105.7311</value>\n      </row>\n      <row position=\"100\">\n         <value>99</value>\n         <value>111.3489</value>\n      </row>\n      <row position=\"101\">\n         <value>100</value>\n         <value>111.0305</value>\n      </row>\n      <row position=\"102\">\n         <value>101</value>\n         <value>110.192</value>\n      </row>\n      <row position=\"103\">\n         <value>102</value>\n         <value>118.3581</value>\n      </row>\n      <row position=\"104\">\n         <value>103</value>\n         <value>118.8086</value>\n      </row>\n      <row position=\"105\">\n         <value>104</value>\n         <value>122.4249</value>\n      </row>\n      <row position=\"106\">\n         <value>105</value>\n         <value>124.0953</value>\n      </row>\n      <row position=\"107\">\n         <value>106</value>\n         <value>125.9337</value>\n      </row>\n      <row position=\"108\">\n         <value>107</value>\n         <value>127.8533</value>\n      </row>\n      <row position=\"109\">\n         <value>108</value>\n         <value>131.0361</value>\n      </row>\n      <row position=\"110\">\n         <value>109</value>\n         <value>133.3343</value>\n      </row>\n      <row position=\"111\">\n         <value>110</value>\n         <value>135.1278</value>\n      </row>\n      <row position=\"112\">\n         <value>111</value>\n         <value>131.7113</value>\n      </row>\n      <row position=\"113\">\n         <value>112</value>\n         <value>131.9151</value>\n      </row>\n      <row position=\"114\">\n         <value>113</value>\n         <value>132.1107</value>\n      </row>\n      <row position=\"115\">\n         <value>114</value>\n         <value>127.6898</value>\n      </row>\n      <row position=\"116\">\n         <value>115</value>\n         <value>133.2148</value>\n      </row>\n      <row position=\"117\">\n         <value>116</value>\n         <value>128.2296</value>\n      </row>\n      <row position=\"118\">\n         <value>117</value>\n         <value>133.5902</value>\n      </row>\n      <row position=\"119\">\n         <value>118</value>\n         <value>127.2539</value>\n      </row>\n      <row position=\"120\">\n         <value>119</value>\n         <value>128.3482</value>\n      </row>\n      <row position=\"121\">\n         <value>120</value>\n         <value>124.8694</value>\n      </row>\n      <row position=\"122\">\n         <value>121</value>\n         <value>124.6031</value>\n      </row>\n      <row position=\"123\">\n         <value>122</value>\n         <value>117.0648</value>\n      </row>\n      <row position=\"124\">\n         <value>123</value>\n         <value>118.1966</value>\n      </row>\n      <row position=\"125\">\n         <value>124</value>\n         <value>119.5408</value>\n      </row>\n      <row position=\"126\">\n         <value>125</value>\n         <value>114.7946</value>\n      </row>\n      <row position=\"127\">\n         <value>126</value>\n         <value>114.278</value>\n      </row>\n      <row position=\"128\">\n         <value>127</value>\n         <value>120.3484</value>\n      </row>\n      <row position=\"129\">\n         <value>128</value>\n         <value>114.8647</value>\n      </row>\n      <row position=\"130\">\n         <value>129</value>\n         <value>111.6514</value>\n      </row>\n      <row position=\"131\">\n         <value>130</value>\n         <value>110.1826</value>\n      </row>\n      <row position=\"132\">\n         <value>131</value>\n         <value>108.4461</value>\n      </row>\n      <row position=\"133\">\n         <value>132</value>\n         <value>109.0571</value>\n      </row>\n      <row position=\"134\">\n         <value>133</value>\n         <value>106.5308</value>\n      </row>\n      <row position=\"135\">\n         <value>134</value>\n         <value>109.4691</value>\n      </row>\n      <row position=\"136\">\n         <value>135</value>\n         <value>106.8709</value>\n      </row>\n      <row position=\"137\">\n         <value>136</value>\n         <value>107.3192</value>\n      </row>\n      <row position=\"138\">\n         <value>137</value>\n         <value>106.9</value>\n      </row>\n      <row position=\"139\">\n         <value>138</value>\n         <value>109.6526</value>\n      </row>\n      <row position=\"140\">\n         <value>139</value>\n         <value>107.1602</value>\n      </row>\n      <row position=\"141\">\n         <value>140</value>\n         <value>108.2509</value>\n      </row>\n      <row position=\"142\">\n         <value>141</value>\n         <value>104.9631</value>\n      </row>\n      <row position=\"143\">\n         <value>142</value>\n         <value>109.3601</value>\n      </row>\n      <row position=\"144\">\n         <value>143</value>\n         <value>107.6696</value>\n      </row>\n      <row position=\"145\">\n         <value>144</value>\n         <value>99.77286</value>\n      </row>\n      <row position=\"146\">\n         <value>145</value>\n         <value>104.9644</value>\n      </row>\n      <row position=\"147\">\n         <value>146</value>\n         <value>106.1376</value>\n      </row>\n      <row position=\"148\">\n         <value>147</value>\n         <value>106.5816</value>\n      </row>\n      <row position=\"149\">\n         <value>148</value>\n         <value>100.1286</value>\n      </row>\n      <row position=\"150\">\n         <value>149</value>\n         <value>101.6691</value>\n      </row>\n      <row position=\"151\">\n         <value>150</value>\n         <value>96.44254</value>\n      </row>\n      <row position=\"152\">\n         <value>151</value>\n         <value>97.34169</value>\n      </row>\n      <row position=\"153\">\n         <value>152</value>\n         <value>96.97412</value>\n      </row>\n      <row position=\"154\">\n         <value>153</value>\n         <value>90.7346</value>\n      </row>\n      <row position=\"155\">\n         <value>154</value>\n         <value>93.37949</value>\n      </row>\n      <row position=\"156\">\n         <value>155</value>\n         <value>82.12331</value>\n      </row>\n      <row position=\"157\">\n         <value>156</value>\n         <value>83.01657</value>\n      </row>\n      <row position=\"158\">\n         <value>157</value>\n         <value>78.8736</value>\n      </row>\n      <row position=\"159\">\n         <value>158</value>\n         <value>74.86971</value>\n      </row>\n      <row position=\"160\">\n         <value>159</value>\n         <value>72.79341</value>\n      </row>\n      <row position=\"161\">\n         <value>160</value>\n         <value>65.14744</value>\n      </row>\n      <row position=\"162\">\n         <value>161</value>\n         <value>67.02127</value>\n      </row>\n      <row position=\"163\">\n         <value>162</value>\n         <value>60.16136</value>\n      </row>\n      <row position=\"164\">\n         <value>163</value>\n         <value>57.13996</value>\n      </row>\n      <row position=\"165\">\n         <value>164</value>\n         <value>54.05769</value>\n      </row>\n      <row position=\"166\">\n         <value>165</value>\n         <value>50.42265</value>\n      </row>\n      <row position=\"167\">\n         <value>166</value>\n         <value>47.8243</value>\n      </row>\n      <row position=\"168\">\n         <value>167</value>\n         <value>42.85748</value>\n      </row>\n      <row position=\"169\">\n         <value>168</value>\n         <value>42.45495</value>\n      </row>\n      <row position=\"170\">\n         <value>169</value>\n         <value>38.30808</value>\n      </row>\n      <row position=\"171\">\n         <value>170</value>\n         <value>36.95794</value>\n      </row>\n      <row position=\"172\">\n         <value>171</value>\n         <value>33.94543</value>\n      </row>\n      <row position=\"173\">\n         <value>172</value>\n         <value>34.19017</value>\n      </row>\n      <row position=\"174\">\n         <value>173</value>\n         <value>31.66097</value>\n      </row>\n      <row position=\"175\">\n         <value>174</value>\n         <value>23.56172</value>\n      </row>\n      <row position=\"176\">\n         <value>175</value>\n         <value>29.61143</value>\n      </row>\n      <row position=\"177\">\n         <value>176</value>\n         <value>23.88765</value>\n      </row>\n      <row position=\"178\">\n         <value>177</value>\n         <value>22.49812</value>\n      </row>\n      <row position=\"179\">\n         <value>178</value>\n         <value>24.86901</value>\n      </row>\n      <row position=\"180\">\n         <value>179</value>\n         <value>17.29481</value>\n      </row>\n      <row position=\"181\">\n         <value>180</value>\n         <value>18.09291</value>\n      </row>\n      <row position=\"182\">\n         <value>181</value>\n         <value>15.34813</value>\n      </row>\n      <row position=\"183\">\n         <value>182</value>\n         <value>14.77997</value>\n      </row>\n      <row position=\"184\">\n         <value>183</value>\n         <value>13.87832</value>\n      </row>\n      <row position=\"185\">\n         <value>184</value>\n         <value>12.88891</value>\n      </row>\n      <row position=\"186\">\n         <value>185</value>\n         <value>16.20763</value>\n      </row>\n      <row position=\"187\">\n         <value>186</value>\n         <value>16.29024</value>\n      </row>\n      <row position=\"188\">\n         <value>187</value>\n         <value>15.29712</value>\n      </row>\n      <row position=\"189\">\n         <value>188</value>\n         <value>14.97839</value>\n      </row>\n      <row position=\"190\">\n         <value>189</value>\n         <value>12.1133</value>\n      </row>\n      <row position=\"191\">\n         <value>190</value>\n         <value>14.24168</value>\n      </row>\n      <row position=\"192\">\n         <value>191</value>\n         <value>12.53824</value>\n      </row>\n      <row position=\"193\">\n         <value>192</value>\n         <value>15.19818</value>\n      </row>\n      <row position=\"194\">\n         <value>193</value>\n         <value>11.70478</value>\n      </row>\n      <row position=\"195\">\n         <value>194</value>\n         <value>15.83745</value>\n      </row>\n      <row position=\"196\">\n         <value>195</value>\n         <value>10.03585</value>\n      </row>\n      <row position=\"197\">\n         <value>196</value>\n         <value>9.307574</value>\n      </row>\n      <row position=\"198\">\n         <value>197</value>\n         <value>12.868</value>\n      </row>\n      <row position=\"199\">\n         <value>198</value>\n         <value>8.571671</value>\n      </row>\n      <row position=\"200\">\n         <value>199</value>\n         <value>11.60415</value>\n      </row>\n      <row position=\"201\">\n         <value>200</value>\n         <value>12.42772</value>\n      </row>\n      <row position=\"202\">\n         <value>201</value>\n         <value>11.23627</value>\n      </row>\n      <row position=\"203\">\n         <value>202</value>\n         <value>11.13198</value>\n      </row>\n      <row position=\"204\">\n         <value>203</value>\n         <value>7.761117</value>\n      </row>\n      <row position=\"205\">\n         <value>204</value>\n         <value>6.75825</value>\n      </row>\n      <row position=\"206\">\n         <value>205</value>\n         <value>14.23375</value>\n      </row>\n      <row position=\"207\">\n         <value>206</value>\n         <value>10.63876</value>\n      </row>\n      <row position=\"208\">\n         <value>207</value>\n         <value>8.893581</value>\n      </row>\n      <row position=\"209\">\n         <value>208</value>\n         <value>11.55398</value>\n      </row>\n      <row position=\"210\">\n         <value>209</value>\n         <value>11.57221</value>\n      </row>\n      <row position=\"211\">\n         <value>210</value>\n         <value>11.58347</value>\n      </row>\n      <row position=\"212\">\n         <value>211</value>\n         <value>9.724857</value>\n      </row>\n      <row position=\"213\">\n         <value>212</value>\n         <value>11.43854</value>\n      </row>\n      <row position=\"214\">\n         <value>213</value>\n         <value>11.22636</value>\n      </row>\n      <row position=\"215\">\n         <value>214</value>\n         <value>10.17015</value>\n      </row>\n      <row position=\"216\">\n         <value>215</value>\n         <value>12.50765</value>\n      </row>\n      <row position=\"217\">\n         <value>216</value>\n         <value>6.200494</value>\n      </row>\n      <row position=\"218\">\n         <value>217</value>\n         <value>9.018902</value>\n      </row>\n      <row position=\"219\">\n         <value>218</value>\n         <value>10.80557</value>\n      </row>\n      <row position=\"220\">\n         <value>219</value>\n         <value>13.09591</value>\n      </row>\n      <row position=\"221\">\n         <value>220</value>\n         <value>3.914033</value>\n      </row>\n      <row position=\"222\">\n         <value>221</value>\n         <value>9.567723</value>\n      </row>\n      <row position=\"223\">\n         <value>222</value>\n         <value>8.038338</value>\n      </row>\n      <row position=\"224\">\n         <value>223</value>\n         <value>10.23096</value>\n      </row>\n      <row position=\"225\">\n         <value>224</value>\n         <value>9.367358</value>\n      </row>\n      <row position=\"226\">\n         <value>225</value>\n         <value>7.695937</value>\n      </row>\n      <row position=\"227\">\n         <value>226</value>\n         <value>6.118552</value>\n      </row>\n      <row position=\"228\">\n         <value>227</value>\n         <value>8.793192</value>\n      </row>\n      <row position=\"229\">\n         <value>228</value>\n         <value>7.796682</value>\n      </row>\n      <row position=\"230\">\n         <value>229</value>\n         <value>12.45064</value>\n      </row>\n      <row position=\"231\">\n         <value>230</value>\n         <value>10.61601</value>\n      </row>\n      <row position=\"232\">\n         <value>231</value>\n         <value>6.001</value>\n      </row>\n      <row position=\"233\">\n         <value>232</value>\n         <value>6.765096</value>\n      </row>\n      <row position=\"234\">\n         <value>233</value>\n         <value>8.764652</value>\n      </row>\n      <row position=\"235\">\n         <value>234</value>\n         <value>4.586417</value>\n      </row>\n      <row position=\"236\">\n         <value>235</value>\n         <value>8.390782</value>\n      </row>\n      <row position=\"237\">\n         <value>236</value>\n         <value>7.209201</value>\n      </row>\n      <row position=\"238\">\n         <value>237</value>\n         <value>10.01209</value>\n      </row>\n      <row position=\"239\">\n         <value>238</value>\n         <value>7.327461</value>\n      </row>\n      <row position=\"240\">\n         <value>239</value>\n         <value>6.525136</value>\n      </row>\n      <row position=\"241\">\n         <value>240</value>\n         <value>2.840065</value>\n      </row>\n      <row position=\"242\">\n         <value>241</value>\n         <value>10.32371</value>\n      </row>\n      <row position=\"243\">\n         <value>242</value>\n         <value>4.790035</value>\n      </row>\n      <row position=\"244\">\n         <value>243</value>\n         <value>8.376431</value>\n      </row>\n      <row position=\"245\">\n         <value>244</value>\n         <value>6.26398</value>\n      </row>\n      <row position=\"246\">\n         <value>245</value>\n         <value>2.705892</value>\n      </row>\n      <row position=\"247\">\n         <value>246</value>\n         <value>8.362109</value>\n      </row>\n      <row position=\"248\">\n         <value>247</value>\n         <value>8.983507</value>\n      </row>\n      <row position=\"249\">\n         <value>248</value>\n         <value>3.362469</value>\n      </row>\n      <row position=\"250\">\n         <value>249</value>\n         <value>1.182678</value>\n      </row>\n      <row position=\"251\">\n         <value>250</value>\n         <value>4.875312</value>\n      </row>\n   </table>\n</spkdata>\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000015330\010051247604\0011260\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 250\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 250 );\ncopy( id_0_c, id_0_c+250, id_0.begin() );\nT time_0_c[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250 };\nstd::vector<T> time_0( 250 );\ncopy( time_0_c, time_0_c+250, time_0.begin() );\nT dv_0_c[] = { 97.58776, 97.76344, 96.56705, 92.52037, 91.15097, 95.21728, 90.21355, 89.29235, 91.51479, 89.60965, 86.56187, 85.55315, 87.13053, 85.67938, 80.04849, 82.18922, 87.24078, 80.79401, 81.28564, 81.56932, 79.22703, 79.43259, 77.90174, 76.75438, 77.17338, 74.27296, 73.1183, 73.84732, 72.47746, 71.92128, 66.91962, 67.93554, 69.55841, 69.06592, 66.53371, 63.87094, 69.70526, 63.59295, 63.35509, 59.99747, 62.64843, 65.77345, 59.10141, 56.5775, 61.15313, 54.30767, 62.83535, 56.52957, 56.98427, 58.11459, 58.69576, 58.23322, 54.9049, 57.91442, 56.96629, 51.13831, 49.27123, 52.92668, 54.47693, 51.8171, 51.05401, 52.51731, 51.8371, 54.48196, 49.05859, 50.52315, 50.32755, 46.44419, 50.89281, 52.13203, 49.78741, 49.01637, 54.18198, 53.17456, 53.20827, 57.43459, 51.95282, 54.20282, 57.46687, 53.60268, 58.86728, 57.66652, 63.71034, 65.24244, 65.10878, 69.96313, 68.85475, 73.32574, 76.21241, 78.06311, 75.37701, 87.54449, 89.50588, 95.82098, 97.4839, 100.8607, 102.4851, 105.7311, 111.3489, 111.0305, 110.192, 118.3581, 118.8086, 122.4249, 124.0953, 125.9337, 127.8533, 131.0361, 133.3343, 135.1278, 131.7113, 131.9151, 132.1107, 127.6898, 133.2148, 128.2296, 133.5902, 127.2539, 128.3482, 124.8694, 124.6031, 117.0648, 118.1966, 119.5408, 114.7946, 114.278, 120.3484, 114.8647, 111.6514, 110.1826, 108.4461, 109.0571, 106.5308, 109.4691, 106.8709, 107.3192, 106.9, 109.6526, 107.1602, 108.2509, 104.9631, 109.3601, 107.6696, 99.77286, 104.9644, 106.1376, 106.5816, 100.1286, 101.6691, 96.44254, 97.34169, 96.97412, 90.7346, 93.37949, 82.12331, 83.01657, 78.8736, 74.86971, 72.79341, 65.14744, 67.02127, 60.16136, 57.13996, 54.05769, 50.42265, 47.8243, 42.85748, 42.45495, 38.30808, 36.95794, 33.94543, 34.19017, 31.66097, 23.56172, 29.61143, 23.88765, 22.49812, 24.86901, 17.29481, 18.09291, 15.34813, 14.77997, 13.87832, 12.88891, 16.20763, 16.29024, 15.29712, 14.97839, 12.1133, 14.24168, 12.53824, 15.19818, 11.70478, 15.83745, 10.03585, 9.307574, 12.868, 8.571671, 11.60415, 12.42772, 11.23627, 11.13198, 7.761117, 6.75825, 14.23375, 10.63876, 8.893581, 11.55398, 11.57221, 11.58347, 9.724857, 11.43854, 11.22636, 10.17015, 12.50765, 6.200494, 9.018902, 10.80557, 13.09591, 3.914033, 9.567723, 8.038338, 10.23096, 9.367358, 7.695937, 6.118552, 8.793192, 7.796682, 12.45064, 10.61601, 6.001, 6.765096, 8.764652, 4.586417, 8.390782, 7.209201, 10.01209, 7.327461, 6.525136, 2.840065, 10.32371, 4.790035, 8.376431, 6.26398, 2.705892, 8.362109, 8.983507, 3.362469, 1.182678, 4.875312 };\nstd::vector<T> dv_0( 250 );\ncopy( dv_0_c, dv_0_c+250, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 250 );\ncopy( mdv_0_c, mdv_0_c+250, mdv_0.begin() );\ndata[0] = new IndData<T>( 250, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000033043\010051247604\0011562\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 250;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 8;\n\ndouble c_thetaIn[nTheta] = { 94.9, 0.009, 90.1, 113, 20, 73.8, 140, 20 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 949, 0.09, 901, 1130, 200, 738, 1400, 200 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 9.49, 0.0009, 9.01, 11.3, 2, 7.38, 14, 2 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 97.5878, 97.7634, 96.567, 92.5204, 91.151, 95.2173, 90.2135, 89.2923, 91.5148, 89.6097, 86.5619, 85.5532, 87.1305, 85.6794, 80.0485, 82.1892, 87.2408, 80.794, 81.2856, 81.5693, 79.227, 79.4326, 77.9017, 76.7544, 77.1734, 74.273, 73.1183, 73.8473, 72.4775, 71.9213, 66.9196, 67.9355, 69.5584, 69.0659, 66.5337, 63.8709, 69.7053, 63.593, 63.3551, 59.9975, 62.6484, 65.7734, 59.1014, 56.5775, 61.1531, 54.3077, 62.8353, 56.5296, 56.9843, 58.1146, 58.6958, 58.2332, 54.9049, 57.9144, 56.9663, 51.1383, 49.2712, 52.9267, 54.4769, 51.8171, 51.054, 52.5173, 51.8371, 54.482, 49.0586, 50.5232, 50.3276, 46.4442, 50.8928, 52.132, 49.7874, 49.0164, 54.182, 53.1746, 53.2083, 57.4346, 51.9528, 54.2028, 57.4669, 53.6027, 58.8673, 57.6665, 63.7103, 65.2424, 65.1088, 69.9631, 68.8547, 73.3257, 76.2124, 78.0631, 75.377, 87.5445, 89.5059, 95.821, 97.4839, 100.861, 102.485, 105.731, 111.349, 111.031, 110.192, 118.358, 118.809, 122.425, 124.095, 125.934, 127.853, 131.036, 133.334, 135.128, 131.711, 131.915, 132.111, 127.69, 133.215, 128.23, 133.59, 127.254, 128.348, 124.869, 124.603, 117.065, 118.197, 119.541, 114.795, 114.278, 120.348, 114.865, 111.651, 110.183, 108.446, 109.057, 106.531, 109.469, 106.871, 107.319, 106.9, 109.653, 107.16, 108.251, 104.963, 109.36, 107.67, 99.7729, 104.964, 106.138, 106.582, 100.129, 101.669, 96.4425, 97.3417, 96.9741, 90.7346, 93.3795, 82.1233, 83.0166, 78.8736, 74.8697, 72.7934, 65.1474, 67.0213, 60.1614, 57.14, 54.0577, 50.4226, 47.8243, 42.8575, 42.4549, 38.3081, 36.9579, 33.9454, 34.1902, 31.661, 23.5617, 29.6114, 23.8877, 22.4981, 24.869, 17.2948, 18.0929, 15.3481, 14.78, 13.8783, 12.8889, 16.2076, 16.2902, 15.2971, 14.9784, 12.1133, 14.2417, 12.5382, 15.1982, 11.7048, 15.8375, 10.0358, 9.30757, 12.868, 8.57167, 11.6042, 12.4277, 11.2363, 11.132, 7.76112, 6.75825, 14.2338, 10.6388, 8.89358, 11.554, 11.5722, 11.5835, 9.72486, 11.4385, 11.2264, 10.1701, 12.5076, 6.20049, 9.0189, 10.8056, 13.0959, 3.91403, 9.56772, 8.03834, 10.231, 9.36736, 7.69594, 6.11855, 8.79319, 7.79668, 12.4506, 10.616, 6.001, 6.7651, 8.76465, 4.58642, 8.39078, 7.2092, 10.0121, 7.32746, 6.52514, 2.84007, 10.3237, 4.79003, 8.37643, 6.26398, 2.70589, 8.36211, 8.98351, 3.36247, 1.18268, 4.87531 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"b6\\\"/>\" << endl;\noResults << \"<label name=\\\"b7\\\"/>\" << endl;\noResults << \"<label name=\\\"b8\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b6[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b7[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b8[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][5] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][6] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][7] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247604\0013075\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003172\010051247604\0011240\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nstd::vector<T> b6;\nstd::vector<T> b7;\nstd::vector<T> b8;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\nb6( nIn ),\nb7( nIn ),\nb8( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 8 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247604\0010720\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000015203\010051247604\0010624\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value b6;\nmutable Value b7;\nmutable Value b8;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 8 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator theta6 = spk_indepVar.begin() + spk_thetaOffset + 5;\ntypename std::vector<Value>::const_iterator theta7 = spk_indepVar.begin() + spk_thetaOffset + 6;\ntypename std::vector<Value>::const_iterator theta8 = spk_indepVar.begin() + spk_thetaOffset + 7;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nb3 = theta[ ( 3 ) - 1 ];\nb4 = theta[ ( 4 ) - 1 ];\nb5 = theta[ ( 5 ) - 1 ];\nb6 = theta[ ( 6 ) - 1 ];\nb7 = theta[ ( 7 ) - 1 ];\nb8 = theta[ ( 8 ) - 1 ];\nx = time;\nf = b1 * exp( -b2 * x ) + b3 * exp( -( pow( ( x - b4 ), 2 ) ) / ( pow( b5, 2 ) ) ) + b6 * exp( -( pow( ( x - b7 ), 2 ) ) / ( pow( b8, 2 ) ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ntemp.data[ spk_i ]->b6[ spk_j ] = b6;\ntemp.data[ spk_i ]->b7[ spk_j ] = b7;\ntemp.data[ spk_i ]->b8[ spk_j ] = b8;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->b6 = temp.data[ i ]->b6;\n    perm->data[ i ]->b7 = temp.data[ i ]->b7;\n    perm->data[ i ]->b8 = temp.data[ i ]->b8;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247604\0012534\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000005314\010051247604\0011605\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>GAUSS3_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"8\">\n               <low>\n                  <value fixed=\"no\">9.49</value>\n                  <value fixed=\"no\">0.0009</value>\n                  <value fixed=\"no\">9.01</value>\n                  <value fixed=\"no\">11.3</value>\n                  <value fixed=\"no\">2</value>\n                  <value fixed=\"no\">7.38</value>\n                  <value fixed=\"no\">14</value>\n                  <value fixed=\"no\">2</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">94.9</value>\n                  <value fixed=\"no\">0.009</value>\n                  <value fixed=\"no\">90.1</value>\n                  <value fixed=\"no\">113</value>\n                  <value fixed=\"no\">20</value>\n                  <value fixed=\"no\">73.8</value>\n                  <value fixed=\"no\">140</value>\n                  <value fixed=\"no\">20</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">949</value>\n                  <value fixed=\"no\">0.09</value>\n                  <value fixed=\"no\">901</value>\n                  <value fixed=\"no\">1130</value>\n                  <value fixed=\"no\">200</value>\n                  <value fixed=\"no\">738</value>\n                  <value fixed=\"no\">1400</value>\n                  <value fixed=\"no\">200</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nb8 = THETA(8)\nx = TIME\nF=b1*EXP(-b2*x)+b3*EXP(-((x-b4)**2)/(b5**2))+b6*EXP(-((x-b7)**2)/(b8**2))\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"GAUSS3_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (4,3,'GAUSS3_2',3,'1',3,'2','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>GAUSS3_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"8\">\n               <low>\n                  <value fixed=\"no\">9.6</value>\n                  <value fixed=\"no\">0.00096</value>\n                  <value fixed=\"no\">8</value>\n                  <value fixed=\"no\">11</value>\n                  <value fixed=\"no\">2.5</value>\n                  <value fixed=\"no\">7.4</value>\n                  <value fixed=\"no\">13.9</value>\n                  <value fixed=\"no\">2.5</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">96</value>\n                  <value fixed=\"no\">0.0096</value>\n                  <value fixed=\"no\">80</value>\n                  <value fixed=\"no\">110</value>\n                  <value fixed=\"no\">25</value>\n                  <value fixed=\"no\">74</value>\n                  <value fixed=\"no\">139</value>\n                  <value fixed=\"no\">25</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">960</value>\n                  <value fixed=\"no\">0.096</value>\n                  <value fixed=\"no\">800</value>\n                  <value fixed=\"no\">1100</value>\n                  <value fixed=\"no\">250</value>\n                  <value fixed=\"no\">740</value>\n                  <value fixed=\"no\">1390</value>\n                  <value fixed=\"no\">250</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nb8 = THETA(8)\nx = TIME\nF=b1*EXP(-b2*x)+b3*EXP(-((x-b4)**2)/(b5**2))+b6*EXP(-((x-b7)**2)/(b8**2))\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"gauss3_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n','q2r',NULL,1081199572,1084575621,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000061305\010051247605\0011213\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"251\">\n      <description>gauss3_1.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>1</value>\n         <value>97.58776</value>\n      </row>\n      <row position=\"3\">\n         <value>2</value>\n         <value>97.76344</value>\n      </row>\n      <row position=\"4\">\n         <value>3</value>\n         <value>96.56705</value>\n      </row>\n      <row position=\"5\">\n         <value>4</value>\n         <value>92.52037</value>\n      </row>\n      <row position=\"6\">\n         <value>5</value>\n         <value>91.15097</value>\n      </row>\n      <row position=\"7\">\n         <value>6</value>\n         <value>95.21728</value>\n      </row>\n      <row position=\"8\">\n         <value>7</value>\n         <value>90.21355</value>\n      </row>\n      <row position=\"9\">\n         <value>8</value>\n         <value>89.29235</value>\n      </row>\n      <row position=\"10\">\n         <value>9</value>\n         <value>91.51479</value>\n      </row>\n      <row position=\"11\">\n         <value>10</value>\n         <value>89.60965</value>\n      </row>\n      <row position=\"12\">\n         <value>11</value>\n         <value>86.56187</value>\n      </row>\n      <row position=\"13\">\n         <value>12</value>\n         <value>85.55315</value>\n      </row>\n      <row position=\"14\">\n         <value>13</value>\n         <value>87.13053</value>\n      </row>\n      <row position=\"15\">\n         <value>14</value>\n         <value>85.67938</value>\n      </row>\n      <row position=\"16\">\n         <value>15</value>\n         <value>80.04849</value>\n      </row>\n      <row position=\"17\">\n         <value>16</value>\n         <value>82.18922</value>\n      </row>\n      <row position=\"18\">\n         <value>17</value>\n         <value>87.24078</value>\n      </row>\n      <row position=\"19\">\n         <value>18</value>\n         <value>80.79401</value>\n      </row>\n      <row position=\"20\">\n         <value>19</value>\n         <value>81.28564</value>\n      </row>\n      <row position=\"21\">\n         <value>20</value>\n         <value>81.56932</value>\n      </row>\n      <row position=\"22\">\n         <value>21</value>\n         <value>79.22703</value>\n      </row>\n      <row position=\"23\">\n         <value>22</value>\n         <value>79.43259</value>\n      </row>\n      <row position=\"24\">\n         <value>23</value>\n         <value>77.90174</value>\n      </row>\n      <row position=\"25\">\n         <value>24</value>\n         <value>76.75438</value>\n      </row>\n      <row position=\"26\">\n         <value>25</value>\n         <value>77.17338</value>\n      </row>\n      <row position=\"27\">\n         <value>26</value>\n         <value>74.27296</value>\n      </row>\n      <row position=\"28\">\n         <value>27</value>\n         <value>73.1183</value>\n      </row>\n      <row position=\"29\">\n         <value>28</value>\n         <value>73.84732</value>\n      </row>\n      <row position=\"30\">\n         <value>29</value>\n         <value>72.47746</value>\n      </row>\n      <row position=\"31\">\n         <value>30</value>\n         <value>71.92128</value>\n      </row>\n      <row position=\"32\">\n         <value>31</value>\n         <value>66.91962</value>\n      </row>\n      <row position=\"33\">\n         <value>32</value>\n         <value>67.93554</value>\n      </row>\n      <row position=\"34\">\n         <value>33</value>\n         <value>69.55841</value>\n      </row>\n      <row position=\"35\">\n         <value>34</value>\n         <value>69.06592</value>\n      </row>\n      <row position=\"36\">\n         <value>35</value>\n         <value>66.53371</value>\n      </row>\n      <row position=\"37\">\n         <value>36</value>\n         <value>63.87094</value>\n      </row>\n      <row position=\"38\">\n         <value>37</value>\n         <value>69.70526</value>\n      </row>\n      <row position=\"39\">\n         <value>38</value>\n         <value>63.59295</value>\n      </row>\n      <row position=\"40\">\n         <value>39</value>\n         <value>63.35509</value>\n      </row>\n      <row position=\"41\">\n         <value>40</value>\n         <value>59.99747</value>\n      </row>\n      <row position=\"42\">\n         <value>41</value>\n         <value>62.64843</value>\n      </row>\n      <row position=\"43\">\n         <value>42</value>\n         <value>65.77345</value>\n      </row>\n      <row position=\"44\">\n         <value>43</value>\n         <value>59.10141</value>\n      </row>\n      <row position=\"45\">\n         <value>44</value>\n         <value>56.5775</value>\n      </row>\n      <row position=\"46\">\n         <value>45</value>\n         <value>61.15313</value>\n      </row>\n      <row position=\"47\">\n         <value>46</value>\n         <value>54.30767</value>\n      </row>\n      <row position=\"48\">\n         <value>47</value>\n         <value>62.83535</value>\n      </row>\n      <row position=\"49\">\n         <value>48</value>\n         <value>56.52957</value>\n      </row>\n      <row position=\"50\">\n         <value>49</value>\n         <value>56.98427</value>\n      </row>\n      <row position=\"51\">\n         <value>50</value>\n         <value>58.11459</value>\n      </row>\n      <row position=\"52\">\n         <value>51</value>\n         <value>58.69576</value>\n      </row>\n      <row position=\"53\">\n         <value>52</value>\n         <value>58.23322</value>\n      </row>\n      <row position=\"54\">\n         <value>53</value>\n         <value>54.9049</value>\n      </row>\n      <row position=\"55\">\n         <value>54</value>\n         <value>57.91442</value>\n      </row>\n      <row position=\"56\">\n         <value>55</value>\n         <value>56.96629</value>\n      </row>\n      <row position=\"57\">\n         <value>56</value>\n         <value>51.13831</value>\n      </row>\n      <row position=\"58\">\n         <value>57</value>\n         <value>49.27123</value>\n      </row>\n      <row position=\"59\">\n         <value>58</value>\n         <value>52.92668</value>\n      </row>\n      <row position=\"60\">\n         <value>59</value>\n         <value>54.47693</value>\n      </row>\n      <row position=\"61\">\n         <value>60</value>\n         <value>51.8171</value>\n      </row>\n      <row position=\"62\">\n         <value>61</value>\n         <value>51.05401</value>\n      </row>\n      <row position=\"63\">\n         <value>62</value>\n         <value>52.51731</value>\n      </row>\n      <row position=\"64\">\n         <value>63</value>\n         <value>51.8371</value>\n      </row>\n      <row position=\"65\">\n         <value>64</value>\n         <value>54.48196</value>\n      </row>\n      <row position=\"66\">\n         <value>65</value>\n         <value>49.05859</value>\n      </row>\n      <row position=\"67\">\n         <value>66</value>\n         <value>50.52315</value>\n      </row>\n      <row position=\"68\">\n         <value>67</value>\n         <value>50.32755</value>\n      </row>\n      <row position=\"69\">\n         <value>68</value>\n         <value>46.44419</value>\n      </row>\n      <row position=\"70\">\n         <value>69</value>\n         <value>50.89281</value>\n      </row>\n      <row position=\"71\">\n         <value>70</value>\n         <value>52.13203</value>\n      </row>\n      <row position=\"72\">\n         <value>71</value>\n         <value>49.78741</value>\n      </row>\n      <row position=\"73\">\n         <value>72</value>\n         <value>49.01637</value>\n      </row>\n      <row position=\"74\">\n         <value>73</value>\n         <value>54.18198</value>\n      </row>\n      <row position=\"75\">\n         <value>74</value>\n         <value>53.17456</value>\n      </row>\n      <row position=\"76\">\n         <value>75</value>\n         <value>53.20827</value>\n      </row>\n      <row position=\"77\">\n         <value>76</value>\n         <value>57.43459</value>\n      </row>\n      <row position=\"78\">\n         <value>77</value>\n         <value>51.95282</value>\n      </row>\n      <row position=\"79\">\n         <value>78</value>\n         <value>54.20282</value>\n      </row>\n      <row position=\"80\">\n         <value>79</value>\n         <value>57.46687</value>\n      </row>\n      <row position=\"81\">\n         <value>80</value>\n         <value>53.60268</value>\n      </row>\n      <row position=\"82\">\n         <value>81</value>\n         <value>58.86728</value>\n      </row>\n      <row position=\"83\">\n         <value>82</value>\n         <value>57.66652</value>\n      </row>\n      <row position=\"84\">\n         <value>83</value>\n         <value>63.71034</value>\n      </row>\n      <row position=\"85\">\n         <value>84</value>\n         <value>65.24244</value>\n      </row>\n      <row position=\"86\">\n         <value>85</value>\n         <value>65.10878</value>\n      </row>\n      <row position=\"87\">\n         <value>86</value>\n         <value>69.96313</value>\n      </row>\n      <row position=\"88\">\n         <value>87</value>\n         <value>68.85475</value>\n      </row>\n      <row position=\"89\">\n         <value>88</value>\n         <value>73.32574</value>\n      </row>\n      <row position=\"90\">\n         <value>89</value>\n         <value>76.21241</value>\n      </row>\n      <row position=\"91\">\n         <value>90</value>\n         <value>78.06311</value>\n      </row>\n      <row position=\"92\">\n         <value>91</value>\n         <value>75.37701</value>\n      </row>\n      <row position=\"93\">\n         <value>92</value>\n         <value>87.54449</value>\n      </row>\n      <row position=\"94\">\n         <value>93</value>\n         <value>89.50588</value>\n      </row>\n      <row position=\"95\">\n         <value>94</value>\n         <value>95.82098</value>\n      </row>\n      <row position=\"96\">\n         <value>95</value>\n         <value>97.4839</value>\n      </row>\n      <row position=\"97\">\n         <value>96</value>\n         <value>100.8607</value>\n      </row>\n      <row position=\"98\">\n         <value>97</value>\n         <value>102.4851</value>\n      </row>\n      <row position=\"99\">\n         <value>98</value>\n         <value>105.7311</value>\n      </row>\n      <row position=\"100\">\n         <value>99</value>\n         <value>111.3489</value>\n      </row>\n      <row position=\"101\">\n         <value>100</value>\n         <value>111.0305</value>\n      </row>\n      <row position=\"102\">\n         <value>101</value>\n         <value>110.192</value>\n      </row>\n      <row position=\"103\">\n         <value>102</value>\n         <value>118.3581</value>\n      </row>\n      <row position=\"104\">\n         <value>103</value>\n         <value>118.8086</value>\n      </row>\n      <row position=\"105\">\n         <value>104</value>\n         <value>122.4249</value>\n      </row>\n      <row position=\"106\">\n         <value>105</value>\n         <value>124.0953</value>\n      </row>\n      <row position=\"107\">\n         <value>106</value>\n         <value>125.9337</value>\n      </row>\n      <row position=\"108\">\n         <value>107</value>\n         <value>127.8533</value>\n      </row>\n      <row position=\"109\">\n         <value>108</value>\n         <value>131.0361</value>\n      </row>\n      <row position=\"110\">\n         <value>109</value>\n         <value>133.3343</value>\n      </row>\n      <row position=\"111\">\n         <value>110</value>\n         <value>135.1278</value>\n      </row>\n      <row position=\"112\">\n         <value>111</value>\n         <value>131.7113</value>\n      </row>\n      <row position=\"113\">\n         <value>112</value>\n         <value>131.9151</value>\n      </row>\n      <row position=\"114\">\n         <value>113</value>\n         <value>132.1107</value>\n      </row>\n      <row position=\"115\">\n         <value>114</value>\n         <value>127.6898</value>\n      </row>\n      <row position=\"116\">\n         <value>115</value>\n         <value>133.2148</value>\n      </row>\n      <row position=\"117\">\n         <value>116</value>\n         <value>128.2296</value>\n      </row>\n      <row position=\"118\">\n         <value>117</value>\n         <value>133.5902</value>\n      </row>\n      <row position=\"119\">\n         <value>118</value>\n         <value>127.2539</value>\n      </row>\n      <row position=\"120\">\n         <value>119</value>\n         <value>128.3482</value>\n      </row>\n      <row position=\"121\">\n         <value>120</value>\n         <value>124.8694</value>\n      </row>\n      <row position=\"122\">\n         <value>121</value>\n         <value>124.6031</value>\n      </row>\n      <row position=\"123\">\n         <value>122</value>\n         <value>117.0648</value>\n      </row>\n      <row position=\"124\">\n         <value>123</value>\n         <value>118.1966</value>\n      </row>\n      <row position=\"125\">\n         <value>124</value>\n         <value>119.5408</value>\n      </row>\n      <row position=\"126\">\n         <value>125</value>\n         <value>114.7946</value>\n      </row>\n      <row position=\"127\">\n         <value>126</value>\n         <value>114.278</value>\n      </row>\n      <row position=\"128\">\n         <value>127</value>\n         <value>120.3484</value>\n      </row>\n      <row position=\"129\">\n         <value>128</value>\n         <value>114.8647</value>\n      </row>\n      <row position=\"130\">\n         <value>129</value>\n         <value>111.6514</value>\n      </row>\n      <row position=\"131\">\n         <value>130</value>\n         <value>110.1826</value>\n      </row>\n      <row position=\"132\">\n         <value>131</value>\n         <value>108.4461</value>\n      </row>\n      <row position=\"133\">\n         <value>132</value>\n         <value>109.0571</value>\n      </row>\n      <row position=\"134\">\n         <value>133</value>\n         <value>106.5308</value>\n      </row>\n      <row position=\"135\">\n         <value>134</value>\n         <value>109.4691</value>\n      </row>\n      <row position=\"136\">\n         <value>135</value>\n         <value>106.8709</value>\n      </row>\n      <row position=\"137\">\n         <value>136</value>\n         <value>107.3192</value>\n      </row>\n      <row position=\"138\">\n         <value>137</value>\n         <value>106.9</value>\n      </row>\n      <row position=\"139\">\n         <value>138</value>\n         <value>109.6526</value>\n      </row>\n      <row position=\"140\">\n         <value>139</value>\n         <value>107.1602</value>\n      </row>\n      <row position=\"141\">\n         <value>140</value>\n         <value>108.2509</value>\n      </row>\n      <row position=\"142\">\n         <value>141</value>\n         <value>104.9631</value>\n      </row>\n      <row position=\"143\">\n         <value>142</value>\n         <value>109.3601</value>\n      </row>\n      <row position=\"144\">\n         <value>143</value>\n         <value>107.6696</value>\n      </row>\n      <row position=\"145\">\n         <value>144</value>\n         <value>99.77286</value>\n      </row>\n      <row position=\"146\">\n         <value>145</value>\n         <value>104.9644</value>\n      </row>\n      <row position=\"147\">\n         <value>146</value>\n         <value>106.1376</value>\n      </row>\n      <row position=\"148\">\n         <value>147</value>\n         <value>106.5816</value>\n      </row>\n      <row position=\"149\">\n         <value>148</value>\n         <value>100.1286</value>\n      </row>\n      <row position=\"150\">\n         <value>149</value>\n         <value>101.6691</value>\n      </row>\n      <row position=\"151\">\n         <value>150</value>\n         <value>96.44254</value>\n      </row>\n      <row position=\"152\">\n         <value>151</value>\n         <value>97.34169</value>\n      </row>\n      <row position=\"153\">\n         <value>152</value>\n         <value>96.97412</value>\n      </row>\n      <row position=\"154\">\n         <value>153</value>\n         <value>90.7346</value>\n      </row>\n      <row position=\"155\">\n         <value>154</value>\n         <value>93.37949</value>\n      </row>\n      <row position=\"156\">\n         <value>155</value>\n         <value>82.12331</value>\n      </row>\n      <row position=\"157\">\n         <value>156</value>\n         <value>83.01657</value>\n      </row>\n      <row position=\"158\">\n         <value>157</value>\n         <value>78.8736</value>\n      </row>\n      <row position=\"159\">\n         <value>158</value>\n         <value>74.86971</value>\n      </row>\n      <row position=\"160\">\n         <value>159</value>\n         <value>72.79341</value>\n      </row>\n      <row position=\"161\">\n         <value>160</value>\n         <value>65.14744</value>\n      </row>\n      <row position=\"162\">\n         <value>161</value>\n         <value>67.02127</value>\n      </row>\n      <row position=\"163\">\n         <value>162</value>\n         <value>60.16136</value>\n      </row>\n      <row position=\"164\">\n         <value>163</value>\n         <value>57.13996</value>\n      </row>\n      <row position=\"165\">\n         <value>164</value>\n         <value>54.05769</value>\n      </row>\n      <row position=\"166\">\n         <value>165</value>\n         <value>50.42265</value>\n      </row>\n      <row position=\"167\">\n         <value>166</value>\n         <value>47.8243</value>\n      </row>\n      <row position=\"168\">\n         <value>167</value>\n         <value>42.85748</value>\n      </row>\n      <row position=\"169\">\n         <value>168</value>\n         <value>42.45495</value>\n      </row>\n      <row position=\"170\">\n         <value>169</value>\n         <value>38.30808</value>\n      </row>\n      <row position=\"171\">\n         <value>170</value>\n         <value>36.95794</value>\n      </row>\n      <row position=\"172\">\n         <value>171</value>\n         <value>33.94543</value>\n      </row>\n      <row position=\"173\">\n         <value>172</value>\n         <value>34.19017</value>\n      </row>\n      <row position=\"174\">\n         <value>173</value>\n         <value>31.66097</value>\n      </row>\n      <row position=\"175\">\n         <value>174</value>\n         <value>23.56172</value>\n      </row>\n      <row position=\"176\">\n         <value>175</value>\n         <value>29.61143</value>\n      </row>\n      <row position=\"177\">\n         <value>176</value>\n         <value>23.88765</value>\n      </row>\n      <row position=\"178\">\n         <value>177</value>\n         <value>22.49812</value>\n      </row>\n      <row position=\"179\">\n         <value>178</value>\n         <value>24.86901</value>\n      </row>\n      <row position=\"180\">\n         <value>179</value>\n         <value>17.29481</value>\n      </row>\n      <row position=\"181\">\n         <value>180</value>\n         <value>18.09291</value>\n      </row>\n      <row position=\"182\">\n         <value>181</value>\n         <value>15.34813</value>\n      </row>\n      <row position=\"183\">\n         <value>182</value>\n         <value>14.77997</value>\n      </row>\n      <row position=\"184\">\n         <value>183</value>\n         <value>13.87832</value>\n      </row>\n      <row position=\"185\">\n         <value>184</value>\n         <value>12.88891</value>\n      </row>\n      <row position=\"186\">\n         <value>185</value>\n         <value>16.20763</value>\n      </row>\n      <row position=\"187\">\n         <value>186</value>\n         <value>16.29024</value>\n      </row>\n      <row position=\"188\">\n         <value>187</value>\n         <value>15.29712</value>\n      </row>\n      <row position=\"189\">\n         <value>188</value>\n         <value>14.97839</value>\n      </row>\n      <row position=\"190\">\n         <value>189</value>\n         <value>12.1133</value>\n      </row>\n      <row position=\"191\">\n         <value>190</value>\n         <value>14.24168</value>\n      </row>\n      <row position=\"192\">\n         <value>191</value>\n         <value>12.53824</value>\n      </row>\n      <row position=\"193\">\n         <value>192</value>\n         <value>15.19818</value>\n      </row>\n      <row position=\"194\">\n         <value>193</value>\n         <value>11.70478</value>\n      </row>\n      <row position=\"195\">\n         <value>194</value>\n         <value>15.83745</value>\n      </row>\n      <row position=\"196\">\n         <value>195</value>\n         <value>10.03585</value>\n      </row>\n      <row position=\"197\">\n         <value>196</value>\n         <value>9.307574</value>\n      </row>\n      <row position=\"198\">\n         <value>197</value>\n         <value>12.868</value>\n      </row>\n      <row position=\"199\">\n         <value>198</value>\n         <value>8.571671</value>\n      </row>\n      <row position=\"200\">\n         <value>199</value>\n         <value>11.60415</value>\n      </row>\n      <row position=\"201\">\n         <value>200</value>\n         <value>12.42772</value>\n      </row>\n      <row position=\"202\">\n         <value>201</value>\n         <value>11.23627</value>\n      </row>\n      <row position=\"203\">\n         <value>202</value>\n         <value>11.13198</value>\n      </row>\n      <row position=\"204\">\n         <value>203</value>\n         <value>7.761117</value>\n      </row>\n      <row position=\"205\">\n         <value>204</value>\n         <value>6.75825</value>\n      </row>\n      <row position=\"206\">\n         <value>205</value>\n         <value>14.23375</value>\n      </row>\n      <row position=\"207\">\n         <value>206</value>\n         <value>10.63876</value>\n      </row>\n      <row position=\"208\">\n         <value>207</value>\n         <value>8.893581</value>\n      </row>\n      <row position=\"209\">\n         <value>208</value>\n         <value>11.55398</value>\n      </row>\n      <row position=\"210\">\n         <value>209</value>\n         <value>11.57221</value>\n      </row>\n      <row position=\"211\">\n         <value>210</value>\n         <value>11.58347</value>\n      </row>\n      <row position=\"212\">\n         <value>211</value>\n         <value>9.724857</value>\n      </row>\n      <row position=\"213\">\n         <value>212</value>\n         <value>11.43854</value>\n      </row>\n      <row position=\"214\">\n         <value>213</value>\n         <value>11.22636</value>\n      </row>\n      <row position=\"215\">\n         <value>214</value>\n         <value>10.17015</value>\n      </row>\n      <row position=\"216\">\n         <value>215</value>\n         <value>12.50765</value>\n      </row>\n      <row position=\"217\">\n         <value>216</value>\n         <value>6.200494</value>\n      </row>\n      <row position=\"218\">\n         <value>217</value>\n         <value>9.018902</value>\n      </row>\n      <row position=\"219\">\n         <value>218</value>\n         <value>10.80557</value>\n      </row>\n      <row position=\"220\">\n         <value>219</value>\n         <value>13.09591</value>\n      </row>\n      <row position=\"221\">\n         <value>220</value>\n         <value>3.914033</value>\n      </row>\n      <row position=\"222\">\n         <value>221</value>\n         <value>9.567723</value>\n      </row>\n      <row position=\"223\">\n         <value>222</value>\n         <value>8.038338</value>\n      </row>\n      <row position=\"224\">\n         <value>223</value>\n         <value>10.23096</value>\n      </row>\n      <row position=\"225\">\n         <value>224</value>\n         <value>9.367358</value>\n      </row>\n      <row position=\"226\">\n         <value>225</value>\n         <value>7.695937</value>\n      </row>\n      <row position=\"227\">\n         <value>226</value>\n         <value>6.118552</value>\n      </row>\n      <row position=\"228\">\n         <value>227</value>\n         <value>8.793192</value>\n      </row>\n      <row position=\"229\">\n         <value>228</value>\n         <value>7.796682</value>\n      </row>\n      <row position=\"230\">\n         <value>229</value>\n         <value>12.45064</value>\n      </row>\n      <row position=\"231\">\n         <value>230</value>\n         <value>10.61601</value>\n      </row>\n      <row position=\"232\">\n         <value>231</value>\n         <value>6.001</value>\n      </row>\n      <row position=\"233\">\n         <value>232</value>\n         <value>6.765096</value>\n      </row>\n      <row position=\"234\">\n         <value>233</value>\n         <value>8.764652</value>\n      </row>\n      <row position=\"235\">\n         <value>234</value>\n         <value>4.586417</value>\n      </row>\n      <row position=\"236\">\n         <value>235</value>\n         <value>8.390782</value>\n      </row>\n      <row position=\"237\">\n         <value>236</value>\n         <value>7.209201</value>\n      </row>\n      <row position=\"238\">\n         <value>237</value>\n         <value>10.01209</value>\n      </row>\n      <row position=\"239\">\n         <value>238</value>\n         <value>7.327461</value>\n      </row>\n      <row position=\"240\">\n         <value>239</value>\n         <value>6.525136</value>\n      </row>\n      <row position=\"241\">\n         <value>240</value>\n         <value>2.840065</value>\n      </row>\n      <row position=\"242\">\n         <value>241</value>\n         <value>10.32371</value>\n      </row>\n      <row position=\"243\">\n         <value>242</value>\n         <value>4.790035</value>\n      </row>\n      <row position=\"244\">\n         <value>243</value>\n         <value>8.376431</value>\n      </row>\n      <row position=\"245\">\n         <value>244</value>\n         <value>6.26398</value>\n      </row>\n      <row position=\"246\">\n         <value>245</value>\n         <value>2.705892</value>\n      </row>\n      <row position=\"247\">\n         <value>246</value>\n         <value>8.362109</value>\n      </row>\n      <row position=\"248\">\n         <value>247</value>\n         <value>8.983507</value>\n      </row>\n      <row position=\"249\">\n         <value>248</value>\n         <value>3.362469</value>\n      </row>\n      <row position=\"250\">\n         <value>249</value>\n         <value>1.182678</value>\n      </row>\n      <row position=\"251\">\n         <value>250</value>\n         <value>4.875312</value>\n      </row>\n   </table>\n</spkdata>\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000015330\010051247605\0011261\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 250\n//------------------------------------\nchar* id_0_c[] = {};\nstd::vector<char*> id_0( 250 );\ncopy( id_0_c, id_0_c+250, id_0.begin() );\nT time_0_c[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250 };\nstd::vector<T> time_0( 250 );\ncopy( time_0_c, time_0_c+250, time_0.begin() );\nT dv_0_c[] = { 97.58776, 97.76344, 96.56705, 92.52037, 91.15097, 95.21728, 90.21355, 89.29235, 91.51479, 89.60965, 86.56187, 85.55315, 87.13053, 85.67938, 80.04849, 82.18922, 87.24078, 80.79401, 81.28564, 81.56932, 79.22703, 79.43259, 77.90174, 76.75438, 77.17338, 74.27296, 73.1183, 73.84732, 72.47746, 71.92128, 66.91962, 67.93554, 69.55841, 69.06592, 66.53371, 63.87094, 69.70526, 63.59295, 63.35509, 59.99747, 62.64843, 65.77345, 59.10141, 56.5775, 61.15313, 54.30767, 62.83535, 56.52957, 56.98427, 58.11459, 58.69576, 58.23322, 54.9049, 57.91442, 56.96629, 51.13831, 49.27123, 52.92668, 54.47693, 51.8171, 51.05401, 52.51731, 51.8371, 54.48196, 49.05859, 50.52315, 50.32755, 46.44419, 50.89281, 52.13203, 49.78741, 49.01637, 54.18198, 53.17456, 53.20827, 57.43459, 51.95282, 54.20282, 57.46687, 53.60268, 58.86728, 57.66652, 63.71034, 65.24244, 65.10878, 69.96313, 68.85475, 73.32574, 76.21241, 78.06311, 75.37701, 87.54449, 89.50588, 95.82098, 97.4839, 100.8607, 102.4851, 105.7311, 111.3489, 111.0305, 110.192, 118.3581, 118.8086, 122.4249, 124.0953, 125.9337, 127.8533, 131.0361, 133.3343, 135.1278, 131.7113, 131.9151, 132.1107, 127.6898, 133.2148, 128.2296, 133.5902, 127.2539, 128.3482, 124.8694, 124.6031, 117.0648, 118.1966, 119.5408, 114.7946, 114.278, 120.3484, 114.8647, 111.6514, 110.1826, 108.4461, 109.0571, 106.5308, 109.4691, 106.8709, 107.3192, 106.9, 109.6526, 107.1602, 108.2509, 104.9631, 109.3601, 107.6696, 99.77286, 104.9644, 106.1376, 106.5816, 100.1286, 101.6691, 96.44254, 97.34169, 96.97412, 90.7346, 93.37949, 82.12331, 83.01657, 78.8736, 74.86971, 72.79341, 65.14744, 67.02127, 60.16136, 57.13996, 54.05769, 50.42265, 47.8243, 42.85748, 42.45495, 38.30808, 36.95794, 33.94543, 34.19017, 31.66097, 23.56172, 29.61143, 23.88765, 22.49812, 24.86901, 17.29481, 18.09291, 15.34813, 14.77997, 13.87832, 12.88891, 16.20763, 16.29024, 15.29712, 14.97839, 12.1133, 14.24168, 12.53824, 15.19818, 11.70478, 15.83745, 10.03585, 9.307574, 12.868, 8.571671, 11.60415, 12.42772, 11.23627, 11.13198, 7.761117, 6.75825, 14.23375, 10.63876, 8.893581, 11.55398, 11.57221, 11.58347, 9.724857, 11.43854, 11.22636, 10.17015, 12.50765, 6.200494, 9.018902, 10.80557, 13.09591, 3.914033, 9.567723, 8.038338, 10.23096, 9.367358, 7.695937, 6.118552, 8.793192, 7.796682, 12.45064, 10.61601, 6.001, 6.765096, 8.764652, 4.586417, 8.390782, 7.209201, 10.01209, 7.327461, 6.525136, 2.840065, 10.32371, 4.790035, 8.376431, 6.26398, 2.705892, 8.362109, 8.983507, 3.362469, 1.182678, 4.875312 };\nstd::vector<T> dv_0( 250 );\ncopy( dv_0_c, dv_0_c+250, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 250 );\ncopy( mdv_0_c, mdv_0_c+250, mdv_0.begin() );\ndata[0] = new IndData<T>( 250, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000033037\010051247605\0011566\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 250;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 8;\n\ndouble c_thetaIn[nTheta] = { 96, 0.0096, 80, 110, 25, 74, 139, 25 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 960, 0.096, 800, 1100, 250, 740, 1390, 250 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 9.6, 0.00096, 8, 11, 2.5, 7.4, 13.9, 2.5 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 97.5878, 97.7634, 96.567, 92.5204, 91.151, 95.2173, 90.2135, 89.2923, 91.5148, 89.6097, 86.5619, 85.5532, 87.1305, 85.6794, 80.0485, 82.1892, 87.2408, 80.794, 81.2856, 81.5693, 79.227, 79.4326, 77.9017, 76.7544, 77.1734, 74.273, 73.1183, 73.8473, 72.4775, 71.9213, 66.9196, 67.9355, 69.5584, 69.0659, 66.5337, 63.8709, 69.7053, 63.593, 63.3551, 59.9975, 62.6484, 65.7734, 59.1014, 56.5775, 61.1531, 54.3077, 62.8353, 56.5296, 56.9843, 58.1146, 58.6958, 58.2332, 54.9049, 57.9144, 56.9663, 51.1383, 49.2712, 52.9267, 54.4769, 51.8171, 51.054, 52.5173, 51.8371, 54.482, 49.0586, 50.5232, 50.3276, 46.4442, 50.8928, 52.132, 49.7874, 49.0164, 54.182, 53.1746, 53.2083, 57.4346, 51.9528, 54.2028, 57.4669, 53.6027, 58.8673, 57.6665, 63.7103, 65.2424, 65.1088, 69.9631, 68.8547, 73.3257, 76.2124, 78.0631, 75.377, 87.5445, 89.5059, 95.821, 97.4839, 100.861, 102.485, 105.731, 111.349, 111.031, 110.192, 118.358, 118.809, 122.425, 124.095, 125.934, 127.853, 131.036, 133.334, 135.128, 131.711, 131.915, 132.111, 127.69, 133.215, 128.23, 133.59, 127.254, 128.348, 124.869, 124.603, 117.065, 118.197, 119.541, 114.795, 114.278, 120.348, 114.865, 111.651, 110.183, 108.446, 109.057, 106.531, 109.469, 106.871, 107.319, 106.9, 109.653, 107.16, 108.251, 104.963, 109.36, 107.67, 99.7729, 104.964, 106.138, 106.582, 100.129, 101.669, 96.4425, 97.3417, 96.9741, 90.7346, 93.3795, 82.1233, 83.0166, 78.8736, 74.8697, 72.7934, 65.1474, 67.0213, 60.1614, 57.14, 54.0577, 50.4226, 47.8243, 42.8575, 42.4549, 38.3081, 36.9579, 33.9454, 34.1902, 31.661, 23.5617, 29.6114, 23.8877, 22.4981, 24.869, 17.2948, 18.0929, 15.3481, 14.78, 13.8783, 12.8889, 16.2076, 16.2902, 15.2971, 14.9784, 12.1133, 14.2417, 12.5382, 15.1982, 11.7048, 15.8375, 10.0358, 9.30757, 12.868, 8.57167, 11.6042, 12.4277, 11.2363, 11.132, 7.76112, 6.75825, 14.2338, 10.6388, 8.89358, 11.554, 11.5722, 11.5835, 9.72486, 11.4385, 11.2264, 10.1701, 12.5076, 6.20049, 9.0189, 10.8056, 13.0959, 3.91403, 9.56772, 8.03834, 10.231, 9.36736, 7.69594, 6.11855, 8.79319, 7.79668, 12.4506, 10.616, 6.001, 6.7651, 8.76465, 4.58642, 8.39078, 7.2092, 10.0121, 7.32746, 6.52514, 2.84007, 10.3237, 4.79003, 8.37643, 6.26398, 2.70589, 8.36211, 8.98351, 3.36247, 1.18268, 4.87531 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"b6\\\"/>\" << endl;\noResults << \"<label name=\\\"b7\\\"/>\" << endl;\noResults << \"<label name=\\\"b8\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b6[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b7[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b8[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][5] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][6] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][7] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247605\0013076\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003172\010051247605\0011241\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nstd::vector<T> b6;\nstd::vector<T> b7;\nstd::vector<T> b8;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\nb6( nIn ),\nb7( nIn ),\nb8( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 8 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247605\0010721\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000015203\010051247605\0010625\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value b6;\nmutable Value b7;\nmutable Value b8;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 8 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator theta6 = spk_indepVar.begin() + spk_thetaOffset + 5;\ntypename std::vector<Value>::const_iterator theta7 = spk_indepVar.begin() + spk_thetaOffset + 6;\ntypename std::vector<Value>::const_iterator theta8 = spk_indepVar.begin() + spk_thetaOffset + 7;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nb3 = theta[ ( 3 ) - 1 ];\nb4 = theta[ ( 4 ) - 1 ];\nb5 = theta[ ( 5 ) - 1 ];\nb6 = theta[ ( 6 ) - 1 ];\nb7 = theta[ ( 7 ) - 1 ];\nb8 = theta[ ( 8 ) - 1 ];\nx = time;\nf = b1 * exp( -b2 * x ) + b3 * exp( -( pow( ( x - b4 ), 2 ) ) / ( pow( b5, 2 ) ) ) + b6 * exp( -( pow( ( x - b7 ), 2 ) ) / ( pow( b8, 2 ) ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ntemp.data[ spk_i ]->b6[ spk_j ] = b6;\ntemp.data[ spk_i ]->b7[ spk_j ] = b7;\ntemp.data[ spk_i ]->b8[ spk_j ] = b8;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->b6 = temp.data[ i ]->b6;\n    perm->data[ i ]->b7 = temp.data[ i ]->b7;\n    perm->data[ i ]->b8 = temp.data[ i ]->b8;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247605\0012535\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000005310\010051247605\0011602\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>GAUSS3_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"8\">\n               <low>\n                  <value fixed=\"no\">9.6</value>\n                  <value fixed=\"no\">0.00096</value>\n                  <value fixed=\"no\">8</value>\n                  <value fixed=\"no\">11</value>\n                  <value fixed=\"no\">2.5</value>\n                  <value fixed=\"no\">7.4</value>\n                  <value fixed=\"no\">13.9</value>\n                  <value fixed=\"no\">2.5</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">96</value>\n                  <value fixed=\"no\">0.0096</value>\n                  <value fixed=\"no\">80</value>\n                  <value fixed=\"no\">110</value>\n                  <value fixed=\"no\">25</value>\n                  <value fixed=\"no\">74</value>\n                  <value fixed=\"no\">139</value>\n                  <value fixed=\"no\">25</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">960</value>\n                  <value fixed=\"no\">0.096</value>\n                  <value fixed=\"no\">800</value>\n                  <value fixed=\"no\">1100</value>\n                  <value fixed=\"no\">250</value>\n                  <value fixed=\"no\">740</value>\n                  <value fixed=\"no\">1390</value>\n                  <value fixed=\"no\">250</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nb8 = THETA(8)\nx = TIME\nF=b1*EXP(-b2*x)+b3*EXP(-((x-b4)**2)/(b5**2))+b6*EXP(-((x-b7)**2)/(b8**2))\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"gauss3_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (5,3,'HAHN1_1',4,'1',4,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>HAHN1_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"7\">\n               <low>\n                  <value fixed=\"no\">1</value>\n                  <value fixed=\"no\">-10</value>\n                  <value fixed=\"no\">0.003</value>\n                  <value fixed=\"no\">-0.00010000</value>\n                  <value fixed=\"no\">-0.5</value>\n                  <value fixed=\"no\">0.0001</value>\n                  <value fixed=\"no\">-0.00001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">10</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.05</value>\n                  <value fixed=\"no\">-0.00001</value>\n                  <value fixed=\"no\">-0.05</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">-0.000001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">100</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.5</value>\n                  <value fixed=\"no\">-0.000001</value>\n                  <value fixed=\"no\">-0.005</value>\n                  <value fixed=\"no\">0.01</value>\n                  <value fixed=\"no\">-0.0000001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nx = TIME\nF = (b1+b2*x+b3*x**2+b4*x**3) /(1+b5*x+b6*x**2+b7*x**3)\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"HAHN1_1.OUT\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n','q2r',NULL,1081200059,1084575623,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000062266\010051247606\0011223\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"237\">\n      <description>hahn1.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>14.13000000</value>\n         <value>0.0800</value>\n      </row>\n      <row position=\"3\">\n         <value>18.97000000</value>\n         <value>0.2140</value>\n      </row>\n      <row position=\"4\">\n         <value>20.15000000</value>\n         <value>0.3670</value>\n      </row>\n      <row position=\"5\">\n         <value>20.41000000</value>\n         <value>0.2480</value>\n      </row>\n      <row position=\"6\">\n         <value>21.46000000</value>\n         <value>0.3750</value>\n      </row>\n      <row position=\"7\">\n         <value>24.33000000</value>\n         <value>0.4710</value>\n      </row>\n      <row position=\"8\">\n         <value>24.41000000</value>\n         <value>0.5910</value>\n      </row>\n      <row position=\"9\">\n         <value>28.78000000</value>\n         <value>0.7960</value>\n      </row>\n      <row position=\"10\">\n         <value>28.93000000</value>\n         <value>0.9430</value>\n      </row>\n      <row position=\"11\">\n         <value>29.57000000</value>\n         <value>0.8920</value>\n      </row>\n      <row position=\"12\">\n         <value>31.30000000</value>\n         <value>1.0890</value>\n      </row>\n      <row position=\"13\">\n         <value>33.43000000</value>\n         <value>1.5040</value>\n      </row>\n      <row position=\"14\">\n         <value>33.84000000</value>\n         <value>1.4180</value>\n      </row>\n      <row position=\"15\">\n         <value>33.91000000</value>\n         <value>1.4290</value>\n      </row>\n      <row position=\"16\">\n         <value>34.82000000</value>\n         <value>1.5470</value>\n      </row>\n      <row position=\"17\">\n         <value>37.41000000</value>\n         <value>1.9030</value>\n      </row>\n      <row position=\"18\">\n         <value>39.12000000</value>\n         <value>2.1500</value>\n      </row>\n      <row position=\"19\">\n         <value>39.22000000</value>\n         <value>2.2040</value>\n      </row>\n      <row position=\"20\">\n         <value>39.70000000</value>\n         <value>2.2780</value>\n      </row>\n      <row position=\"21\">\n         <value>40.03000000</value>\n         <value>2.2410</value>\n      </row>\n      <row position=\"22\">\n         <value>44.09000000</value>\n         <value>2.9020</value>\n      </row>\n      <row position=\"23\">\n         <value>44.18000000</value>\n         <value>2.8130</value>\n      </row>\n      <row position=\"24\">\n         <value>44.66000000</value>\n         <value>2.9510</value>\n      </row>\n      <row position=\"25\">\n         <value>45.07000000</value>\n         <value>2.8940</value>\n      </row>\n      <row position=\"26\">\n         <value>48.83000000</value>\n         <value>3.6240</value>\n      </row>\n      <row position=\"27\">\n         <value>49.87000000</value>\n         <value>3.7820</value>\n      </row>\n      <row position=\"28\">\n         <value>50.24000000</value>\n         <value>3.6970</value>\n      </row>\n      <row position=\"29\">\n         <value>54.50000000</value>\n         <value>4.5740</value>\n      </row>\n      <row position=\"30\">\n         <value>54.98000000</value>\n         <value>4.7030</value>\n      </row>\n      <row position=\"31\">\n         <value>55.02000000</value>\n         <value>4.7650</value>\n      </row>\n      <row position=\"32\">\n         <value>55.16000000</value>\n         <value>4.7570</value>\n      </row>\n      <row position=\"33\">\n         <value>60.41000000</value>\n         <value>5.5560</value>\n      </row>\n      <row position=\"34\">\n         <value>60.90000000</value>\n         <value>5.6020</value>\n      </row>\n      <row position=\"35\">\n         <value>61.38000000</value>\n         <value>5.8700</value>\n      </row>\n      <row position=\"36\">\n         <value>65.51000000</value>\n         <value>6.3070</value>\n      </row>\n      <row position=\"37\">\n         <value>66.25000000</value>\n         <value>6.4210</value>\n      </row>\n      <row position=\"38\">\n         <value>70.53000000</value>\n         <value>7.0300</value>\n      </row>\n      <row position=\"39\">\n         <value>72.08000000</value>\n         <value>7.1690</value>\n      </row>\n      <row position=\"40\">\n         <value>72.77000000</value>\n         <value>7.2670</value>\n      </row>\n      <row position=\"41\">\n         <value>73.42000000</value>\n         <value>7.4220</value>\n      </row>\n      <row position=\"42\">\n         <value>75.25000000</value>\n         <value>7.6950</value>\n      </row>\n      <row position=\"43\">\n         <value>75.70000000</value>\n         <value>7.8980</value>\n      </row>\n      <row position=\"44\">\n         <value>85.15000000</value>\n         <value>8.9200</value>\n      </row>\n      <row position=\"45\">\n         <value>86.84000000</value>\n         <value>9.1360</value>\n      </row>\n      <row position=\"46\">\n         <value>89.57000000</value>\n         <value>9.4700</value>\n      </row>\n      <row position=\"47\">\n         <value>91.14000000</value>\n         <value>9.4840</value>\n      </row>\n      <row position=\"48\">\n         <value>94.33000000</value>\n         <value>9.8350</value>\n      </row>\n      <row position=\"49\">\n         <value>94.88000000</value>\n         <value>9.9590</value>\n      </row>\n      <row position=\"50\">\n         <value>95.52000000</value>\n         <value>9.9440</value>\n      </row>\n      <row position=\"51\">\n         <value>96.40000000</value>\n         <value>10.0720</value>\n      </row>\n      <row position=\"52\">\n         <value>96.40000001</value>\n         <value>9.9570</value>\n      </row>\n      <row position=\"53\">\n         <value>96.44000000</value>\n         <value>10.0400</value>\n      </row>\n      <row position=\"54\">\n         <value>97.06000000</value>\n         <value>10.0550</value>\n      </row>\n      <row position=\"55\">\n         <value>97.19000000</value>\n         <value>10.1630</value>\n      </row>\n      <row position=\"56\">\n         <value>107.32000000</value>\n         <value>11.0230</value>\n      </row>\n      <row position=\"57\">\n         <value>114.26000000</value>\n         <value>11.6150</value>\n      </row>\n      <row position=\"58\">\n         <value>117.37000000</value>\n         <value>11.6000</value>\n      </row>\n      <row position=\"59\">\n         <value>118.82000000</value>\n         <value>11.9460</value>\n      </row>\n      <row position=\"60\">\n         <value>119.63000000</value>\n         <value>12.0350</value>\n      </row>\n      <row position=\"61\">\n         <value>120.25000000</value>\n         <value>12.0050</value>\n      </row>\n      <row position=\"62\">\n         <value>122.04000000</value>\n         <value>11.8700</value>\n      </row>\n      <row position=\"63\">\n         <value>127.08000000</value>\n         <value>12.4780</value>\n      </row>\n      <row position=\"64\">\n         <value>128.48000000</value>\n         <value>12.5960</value>\n      </row>\n      <row position=\"65\">\n         <value>133.27000000</value>\n         <value>12.8610</value>\n      </row>\n      <row position=\"66\">\n         <value>133.55000000</value>\n         <value>12.9820</value>\n      </row>\n      <row position=\"67\">\n         <value>133.61000000</value>\n         <value>12.9700</value>\n      </row>\n      <row position=\"68\">\n         <value>134.03000000</value>\n         <value>12.7860</value>\n      </row>\n      <row position=\"69\">\n         <value>139.08000000</value>\n         <value>13.1380</value>\n      </row>\n      <row position=\"70\">\n         <value>141.94000000</value>\n         <value>13.3030</value>\n      </row>\n      <row position=\"71\">\n         <value>143.84000000</value>\n         <value>13.4360</value>\n      </row>\n      <row position=\"72\">\n         <value>147.73000000</value>\n         <value>13.5640</value>\n      </row>\n      <row position=\"73\">\n         <value>156.92000000</value>\n         <value>13.9220</value>\n      </row>\n      <row position=\"74\">\n         <value>158.63000000</value>\n         <value>13.8710</value>\n      </row>\n      <row position=\"75\">\n         <value>158.67000000</value>\n         <value>13.9260</value>\n      </row>\n      <row position=\"76\">\n         <value>161.84000000</value>\n         <value>13.9940</value>\n      </row>\n      <row position=\"77\">\n         <value>161.91000000</value>\n         <value>14.1670</value>\n      </row>\n      <row position=\"78\">\n         <value>163.19000000</value>\n         <value>14.0670</value>\n      </row>\n      <row position=\"79\">\n         <value>163.48000000</value>\n         <value>13.9740</value>\n      </row>\n      <row position=\"80\">\n         <value>171.31000000</value>\n         <value>14.4040</value>\n      </row>\n      <row position=\"81\">\n         <value>171.65000000</value>\n         <value>14.4400</value>\n      </row>\n      <row position=\"82\">\n         <value>172.74000000</value>\n         <value>14.4520</value>\n      </row>\n      <row position=\"83\">\n         <value>175.70000000</value>\n         <value>14.4620</value>\n      </row>\n      <row position=\"84\">\n         <value>179.86000000</value>\n         <value>14.4640</value>\n      </row>\n      <row position=\"85\">\n         <value>180.67000000</value>\n         <value>14.7550</value>\n      </row>\n      <row position=\"86\">\n         <value>190.00000000</value>\n         <value>14.9510</value>\n      </row>\n      <row position=\"87\">\n         <value>192.11000000</value>\n         <value>14.9470</value>\n      </row>\n      <row position=\"88\">\n         <value>198.44000000</value>\n         <value>15.1680</value>\n      </row>\n      <row position=\"89\">\n         <value>202.14000000</value>\n         <value>15.1900</value>\n      </row>\n      <row position=\"90\">\n         <value>206.76000000</value>\n         <value>15.4730</value>\n      </row>\n      <row position=\"91\">\n         <value>209.07000000</value>\n         <value>15.3790</value>\n      </row>\n      <row position=\"92\">\n         <value>211.27000000</value>\n         <value>15.3810</value>\n      </row>\n      <row position=\"93\">\n         <value>213.32000000</value>\n         <value>15.4550</value>\n      </row>\n      <row position=\"94\">\n         <value>217.78000000</value>\n         <value>15.4830</value>\n      </row>\n      <row position=\"95\">\n         <value>219.14000000</value>\n         <value>15.5900</value>\n      </row>\n      <row position=\"96\">\n         <value>220.55000000</value>\n         <value>15.5500</value>\n      </row>\n      <row position=\"97\">\n         <value>221.05000000</value>\n         <value>15.5280</value>\n      </row>\n      <row position=\"98\">\n         <value>221.39000000</value>\n         <value>15.4990</value>\n      </row>\n      <row position=\"99\">\n         <value>223.26000000</value>\n         <value>15.6270</value>\n      </row>\n      <row position=\"100\">\n         <value>223.88000000</value>\n         <value>15.6390</value>\n      </row>\n      <row position=\"101\">\n         <value>226.44000000</value>\n         <value>15.9080</value>\n      </row>\n      <row position=\"102\">\n         <value>226.86000000</value>\n         <value>15.6510</value>\n      </row>\n      <row position=\"103\">\n         <value>229.65000000</value>\n         <value>15.7460</value>\n      </row>\n      <row position=\"104\">\n         <value>231.50000000</value>\n         <value>15.8140</value>\n      </row>\n      <row position=\"105\">\n         <value>237.12000000</value>\n         <value>16.1140</value>\n      </row>\n      <row position=\"106\">\n         <value>250.99000000</value>\n         <value>16.1310</value>\n      </row>\n      <row position=\"107\">\n         <value>253.24000000</value>\n         <value>16.0620</value>\n      </row>\n      <row position=\"108\">\n         <value>258.27000000</value>\n         <value>16.2160</value>\n      </row>\n      <row position=\"109\">\n         <value>262.52000000</value>\n         <value>16.0750</value>\n      </row>\n      <row position=\"110\">\n         <value>265.05000000</value>\n         <value>16.3150</value>\n      </row>\n      <row position=\"111\">\n         <value>268.01000000</value>\n         <value>16.3470</value>\n      </row>\n      <row position=\"112\">\n         <value>268.62000000</value>\n         <value>16.1810</value>\n      </row>\n      <row position=\"113\">\n         <value>268.99000000</value>\n         <value>16.4380</value>\n      </row>\n      <row position=\"114\">\n         <value>269.44000000</value>\n         <value>16.3340</value>\n      </row>\n      <row position=\"115\">\n         <value>271.78000000</value>\n         <value>16.4300</value>\n      </row>\n      <row position=\"116\">\n         <value>271.80000000</value>\n         <value>16.3870</value>\n      </row>\n      <row position=\"117\">\n         <value>271.97000000</value>\n         <value>16.5490</value>\n      </row>\n      <row position=\"118\">\n         <value>273.13000000</value>\n         <value>16.3370</value>\n      </row>\n      <row position=\"119\">\n         <value>273.46000000</value>\n         <value>16.4230</value>\n      </row>\n      <row position=\"120\">\n         <value>273.66000000</value>\n         <value>16.3450</value>\n      </row>\n      <row position=\"121\">\n         <value>273.77000000</value>\n         <value>16.4450</value>\n      </row>\n      <row position=\"122\">\n         <value>282.10000000</value>\n         <value>16.3880</value>\n      </row>\n      <row position=\"123\">\n         <value>321.31000000</value>\n         <value>16.8720</value>\n      </row>\n      <row position=\"124\">\n         <value>321.69000000</value>\n         <value>16.8300</value>\n      </row>\n      <row position=\"125\">\n         <value>330.14000000</value>\n         <value>16.9260</value>\n      </row>\n      <row position=\"126\">\n         <value>330.90000000</value>\n         <value>17.0710</value>\n      </row>\n      <row position=\"127\">\n         <value>333.03000000</value>\n         <value>16.9070</value>\n      </row>\n      <row position=\"128\">\n         <value>333.47000000</value>\n         <value>16.9660</value>\n      </row>\n      <row position=\"129\">\n         <value>334.61000000</value>\n         <value>17.0240</value>\n      </row>\n      <row position=\"130\">\n         <value>336.25000000</value>\n         <value>16.9150</value>\n      </row>\n      <row position=\"131\">\n         <value>337.23000000</value>\n         <value>17.0030</value>\n      </row>\n      <row position=\"132\">\n         <value>339.15000000</value>\n         <value>16.9650</value>\n      </row>\n      <row position=\"133\">\n         <value>339.33000000</value>\n         <value>16.9780</value>\n      </row>\n      <row position=\"134\">\n         <value>339.79000000</value>\n         <value>17.0090</value>\n      </row>\n      <row position=\"135\">\n         <value>340.77000000</value>\n         <value>17.0600</value>\n      </row>\n      <row position=\"136\">\n         <value>345.65000000</value>\n         <value>17.1220</value>\n      </row>\n      <row position=\"137\">\n         <value>346.62000000</value>\n         <value>17.1590</value>\n      </row>\n      <row position=\"138\">\n         <value>347.19000000</value>\n         <value>17.1160</value>\n      </row>\n      <row position=\"139\">\n         <value>348.78000000</value>\n         <value>17.1640</value>\n      </row>\n      <row position=\"140\">\n         <value>349.52000000</value>\n         <value>17.1650</value>\n      </row>\n      <row position=\"141\">\n         <value>350.13000000</value>\n         <value>17.1210</value>\n      </row>\n      <row position=\"142\">\n         <value>351.18000000</value>\n         <value>17.1230</value>\n      </row>\n      <row position=\"143\">\n         <value>358.18000001</value>\n         <value>17.1340</value>\n      </row>\n      <row position=\"144\">\n         <value>358.72000000</value>\n         <value>17.1350</value>\n      </row>\n      <row position=\"145\">\n         <value>362.75000000</value>\n         <value>17.2060</value>\n      </row>\n      <row position=\"146\">\n         <value>370.77000000</value>\n         <value>17.2820</value>\n      </row>\n      <row position=\"147\">\n         <value>371.03000000</value>\n         <value>17.2500</value>\n      </row>\n      <row position=\"148\">\n         <value>372.72000000</value>\n         <value>17.3680</value>\n      </row>\n      <row position=\"149\">\n         <value>373.11000000</value>\n         <value>17.3110</value>\n      </row>\n      <row position=\"150\">\n         <value>373.79000000</value>\n         <value>17.3550</value>\n      </row>\n      <row position=\"151\">\n         <value>377.98000000</value>\n         <value>17.3490</value>\n      </row>\n      <row position=\"152\">\n         <value>393.32000000</value>\n         <value>17.3390</value>\n      </row>\n      <row position=\"153\">\n         <value>394.77000000</value>\n         <value>17.5760</value>\n      </row>\n      <row position=\"154\">\n         <value>396.24000000</value>\n         <value>17.4830</value>\n      </row>\n      <row position=\"155\">\n         <value>411.82000000</value>\n         <value>17.6680</value>\n      </row>\n      <row position=\"156\">\n         <value>416.59000000</value>\n         <value>17.7640</value>\n      </row>\n      <row position=\"157\">\n         <value>419.51000000</value>\n         <value>17.7670</value>\n      </row>\n      <row position=\"158\">\n         <value>421.59000000</value>\n         <value>17.8030</value>\n      </row>\n      <row position=\"159\">\n         <value>422.02000000</value>\n         <value>17.7650</value>\n      </row>\n      <row position=\"160\">\n         <value>422.47000000</value>\n         <value>17.7680</value>\n      </row>\n      <row position=\"161\">\n         <value>422.61000000</value>\n         <value>17.7360</value>\n      </row>\n      <row position=\"162\">\n         <value>427.38000000</value>\n         <value>17.7560</value>\n      </row>\n      <row position=\"163\">\n         <value>428.58000000</value>\n         <value>17.8080</value>\n      </row>\n      <row position=\"164\">\n         <value>429.66000000</value>\n         <value>17.8480</value>\n      </row>\n      <row position=\"165\">\n         <value>432.68000000</value>\n         <value>17.8680</value>\n      </row>\n      <row position=\"166\">\n         <value>441.75000000</value>\n         <value>17.8580</value>\n      </row>\n      <row position=\"167\">\n         <value>447.41000000</value>\n         <value>17.8770</value>\n      </row>\n      <row position=\"168\">\n         <value>448.53000000</value>\n         <value>17.7930</value>\n      </row>\n      <row position=\"169\">\n         <value>448.70000000</value>\n         <value>17.9120</value>\n      </row>\n      <row position=\"170\">\n         <value>450.10000000</value>\n         <value>17.9790</value>\n      </row>\n      <row position=\"171\">\n         <value>450.35000000</value>\n         <value>17.9740</value>\n      </row>\n      <row position=\"172\">\n         <value>451.92000000</value>\n         <value>18.0070</value>\n      </row>\n      <row position=\"173\">\n         <value>455.56000000</value>\n         <value>17.9930</value>\n      </row>\n      <row position=\"174\">\n         <value>468.22000000</value>\n         <value>18.0900</value>\n      </row>\n      <row position=\"175\">\n         <value>472.89000000</value>\n         <value>18.0460</value>\n      </row>\n      <row position=\"176\">\n         <value>473.78000000</value>\n         <value>18.1230</value>\n      </row>\n      <row position=\"177\">\n         <value>476.69000000</value>\n         <value>18.0850</value>\n      </row>\n      <row position=\"178\">\n         <value>484.02000000</value>\n         <value>18.1850</value>\n      </row>\n      <row position=\"179\">\n         <value>487.27000000</value>\n         <value>18.2760</value>\n      </row>\n      <row position=\"180\">\n         <value>495.47000000</value>\n         <value>18.2710</value>\n      </row>\n      <row position=\"181\">\n         <value>511.12000000</value>\n         <value>18.4900</value>\n      </row>\n      <row position=\"182\">\n         <value>514.78000000</value>\n         <value>18.2360</value>\n      </row>\n      <row position=\"183\">\n         <value>515.65000000</value>\n         <value>18.2370</value>\n      </row>\n      <row position=\"184\">\n         <value>519.47000000</value>\n         <value>18.5230</value>\n      </row>\n      <row position=\"185\">\n         <value>519.54000000</value>\n         <value>18.4040</value>\n      </row>\n      <row position=\"186\">\n         <value>522.47000000</value>\n         <value>18.2910</value>\n      </row>\n      <row position=\"187\">\n         <value>522.62000000</value>\n         <value>18.3570</value>\n      </row>\n      <row position=\"188\">\n         <value>523.03000000</value>\n         <value>18.5190</value>\n      </row>\n      <row position=\"189\">\n         <value>524.43000000</value>\n         <value>18.4260</value>\n      </row>\n      <row position=\"190\">\n         <value>524.70000000</value>\n         <value>18.5660</value>\n      </row>\n      <row position=\"191\">\n         <value>528.99000000</value>\n         <value>18.4810</value>\n      </row>\n      <row position=\"192\">\n         <value>531.08000000</value>\n         <value>18.4860</value>\n      </row>\n      <row position=\"193\">\n         <value>544.47000000</value>\n         <value>18.6270</value>\n      </row>\n      <row position=\"194\">\n         <value>546.75000000</value>\n         <value>18.5840</value>\n      </row>\n      <row position=\"195\">\n         <value>548.75000000</value>\n         <value>18.6450</value>\n      </row>\n      <row position=\"196\">\n         <value>549.53000000</value>\n         <value>18.6100</value>\n      </row>\n      <row position=\"197\">\n         <value>551.64000000</value>\n         <value>18.7060</value>\n      </row>\n      <row position=\"198\">\n         <value>552.22000000</value>\n         <value>18.5230</value>\n      </row>\n      <row position=\"199\">\n         <value>553.56000000</value>\n         <value>18.6690</value>\n      </row>\n      <row position=\"200\">\n         <value>555.74000000</value>\n         <value>18.6170</value>\n      </row>\n      <row position=\"201\">\n         <value>560.11000000</value>\n         <value>18.6650</value>\n      </row>\n      <row position=\"202\">\n         <value>574.02000000</value>\n         <value>18.9240</value>\n      </row>\n      <row position=\"203\">\n         <value>575.29000000</value>\n         <value>18.8700</value>\n      </row>\n      <row position=\"204\">\n         <value>576.00000000</value>\n         <value>18.7950</value>\n      </row>\n      <row position=\"205\">\n         <value>612.99000000</value>\n         <value>19.1330</value>\n      </row>\n      <row position=\"206\">\n         <value>620.77000000</value>\n         <value>19.0860</value>\n      </row>\n      <row position=\"207\">\n         <value>622.05000000</value>\n         <value>19.2800</value>\n      </row>\n      <row position=\"208\">\n         <value>623.86000000</value>\n         <value>19.1000</value>\n      </row>\n      <row position=\"209\">\n         <value>625.55000000</value>\n         <value>19.1110</value>\n      </row>\n      <row position=\"210\">\n         <value>628.34000000</value>\n         <value>19.0900</value>\n      </row>\n      <row position=\"211\">\n         <value>631.50000000</value>\n         <value>19.1010</value>\n      </row>\n      <row position=\"212\">\n         <value>638.59000000</value>\n         <value>19.0740</value>\n      </row>\n      <row position=\"213\">\n         <value>641.36000000</value>\n         <value>19.2390</value>\n      </row>\n      <row position=\"214\">\n         <value>646.89000000</value>\n         <value>19.3240</value>\n      </row>\n      <row position=\"215\">\n         <value>646.90000000</value>\n         <value>19.2520</value>\n      </row>\n      <row position=\"216\">\n         <value>647.04000000</value>\n         <value>19.2680</value>\n      </row>\n      <row position=\"217\">\n         <value>647.61000000</value>\n         <value>19.2860</value>\n      </row>\n      <row position=\"218\">\n         <value>652.59000000</value>\n         <value>19.3710</value>\n      </row>\n      <row position=\"219\">\n         <value>656.20000000</value>\n         <value>19.3300</value>\n      </row>\n      <row position=\"220\">\n         <value>663.97000000</value>\n         <value>19.3980</value>\n      </row>\n      <row position=\"221\">\n         <value>746.90000000</value>\n         <value>20.0490</value>\n      </row>\n      <row position=\"222\">\n         <value>747.35000000</value>\n         <value>20.0620</value>\n      </row>\n      <row position=\"223\">\n         <value>747.78000000</value>\n         <value>19.9720</value>\n      </row>\n      <row position=\"224\">\n         <value>748.29000000</value>\n         <value>19.8900</value>\n      </row>\n      <row position=\"225\">\n         <value>748.43000000</value>\n         <value>20.1070</value>\n      </row>\n      <row position=\"226\">\n         <value>749.21000000</value>\n         <value>20.0070</value>\n      </row>\n      <row position=\"227\">\n         <value>749.27000000</value>\n         <value>20.0650</value>\n      </row>\n      <row position=\"228\">\n         <value>750.14000000</value>\n         <value>19.9290</value>\n      </row>\n      <row position=\"229\">\n         <value>750.51000000</value>\n         <value>20.0880</value>\n      </row>\n      <row position=\"230\">\n         <value>845.97000000</value>\n         <value>20.8300</value>\n      </row>\n      <row position=\"231\">\n         <value>847.54000000</value>\n         <value>20.9350</value>\n      </row>\n      <row position=\"232\">\n         <value>848.23000000</value>\n         <value>20.9350</value>\n      </row>\n      <row position=\"233\">\n         <value>849.75000000</value>\n         <value>21.0740</value>\n      </row>\n      <row position=\"234\">\n         <value>849.93000000</value>\n         <value>21.0350</value>\n      </row>\n      <row position=\"235\">\n         <value>850.98000000</value>\n         <value>21.0850</value>\n      </row>\n      <row position=\"236\">\n         <value>851.37000000</value>\n         <value>20.7430</value>\n      </row>\n      <row position=\"237\">\n         <value>851.61000000</value>\n         <value>20.9300</value>\n      </row>\n   </table>\n</spkdata>\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000020420\010051247606\0011256\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 236\n//------------------------------------\nchar* id_0_c[] = {};\nstd::vector<char*> id_0( 236 );\ncopy( id_0_c, id_0_c+236, id_0.begin() );\nT time_0_c[] = { 14.13000000, 18.97000000, 20.15000000, 20.41000000, 21.46000000, 24.33000000, 24.41000000, 28.78000000, 28.93000000, 29.57000000, 31.30000000, 33.43000000, 33.84000000, 33.91000000, 34.82000000, 37.41000000, 39.12000000, 39.22000000, 39.70000000, 40.03000000, 44.09000000, 44.18000000, 44.66000000, 45.07000000, 48.83000000, 49.87000000, 50.24000000, 54.50000000, 54.98000000, 55.02000000, 55.16000000, 60.41000000, 60.90000000, 61.38000000, 65.51000000, 66.25000000, 70.53000000, 72.08000000, 72.77000000, 73.42000000, 75.25000000, 75.70000000, 85.15000000, 86.84000000, 89.57000000, 91.14000000, 94.33000000, 94.88000000, 95.52000000, 96.40000000, 96.40000001, 96.44000000, 97.06000000, 97.19000000, 107.32000000, 114.26000000, 117.37000000, 118.82000000, 119.63000000, 120.25000000, 122.04000000, 127.08000000, 128.48000000, 133.27000000, 133.55000000, 133.61000000, 134.03000000, 139.08000000, 141.94000000, 143.84000000, 147.73000000, 156.92000000, 158.63000000, 158.67000000, 161.84000000, 161.91000000, 163.19000000, 163.48000000, 171.31000000, 171.65000000, 172.74000000, 175.70000000, 179.86000000, 180.67000000, 190.00000000, 192.11000000, 198.44000000, 202.14000000, 206.76000000, 209.07000000, 211.27000000, 213.32000000, 217.78000000, 219.14000000, 220.55000000, 221.05000000, 221.39000000, 223.26000000, 223.88000000, 226.44000000, 226.86000000, 229.65000000, 231.50000000, 237.12000000, 250.99000000, 253.24000000, 258.27000000, 262.52000000, 265.05000000, 268.01000000, 268.62000000, 268.99000000, 269.44000000, 271.78000000, 271.80000000, 271.97000000, 273.13000000, 273.46000000, 273.66000000, 273.77000000, 282.10000000, 321.31000000, 321.69000000, 330.14000000, 330.90000000, 333.03000000, 333.47000000, 334.61000000, 336.25000000, 337.23000000, 339.15000000, 339.33000000, 339.79000000, 340.77000000, 345.65000000, 346.62000000, 347.19000000, 348.78000000, 349.52000000, 350.13000000, 351.18000000, 358.18000001, 358.72000000, 362.75000000, 370.77000000, 371.03000000, 372.72000000, 373.11000000, 373.79000000, 377.98000000, 393.32000000, 394.77000000, 396.24000000, 411.82000000, 416.59000000, 419.51000000, 421.59000000, 422.02000000, 422.47000000, 422.61000000, 427.38000000, 428.58000000, 429.66000000, 432.68000000, 441.75000000, 447.41000000, 448.53000000, 448.70000000, 450.10000000, 450.35000000, 451.92000000, 455.56000000, 468.22000000, 472.89000000, 473.78000000, 476.69000000, 484.02000000, 487.27000000, 495.47000000, 511.12000000, 514.78000000, 515.65000000, 519.47000000, 519.54000000, 522.47000000, 522.62000000, 523.03000000, 524.43000000, 524.70000000, 528.99000000, 531.08000000, 544.47000000, 546.75000000, 548.75000000, 549.53000000, 551.64000000, 552.22000000, 553.56000000, 555.74000000, 560.11000000, 574.02000000, 575.29000000, 576.00000000, 612.99000000, 620.77000000, 622.05000000, 623.86000000, 625.55000000, 628.34000000, 631.50000000, 638.59000000, 641.36000000, 646.89000000, 646.90000000, 647.04000000, 647.61000000, 652.59000000, 656.20000000, 663.97000000, 746.90000000, 747.35000000, 747.78000000, 748.29000000, 748.43000000, 749.21000000, 749.27000000, 750.14000000, 750.51000000, 845.97000000, 847.54000000, 848.23000000, 849.75000000, 849.93000000, 850.98000000, 851.37000000, 851.61000000 };\nstd::vector<T> time_0( 236 );\ncopy( time_0_c, time_0_c+236, time_0.begin() );\nT dv_0_c[] = { 0.0800, 0.2140, 0.3670, 0.2480, 0.3750, 0.4710, 0.5910, 0.7960, 0.9430, 0.8920, 1.0890, 1.5040, 1.4180, 1.4290, 1.5470, 1.9030, 2.1500, 2.2040, 2.2780, 2.2410, 2.9020, 2.8130, 2.9510, 2.8940, 3.6240, 3.7820, 3.6970, 4.5740, 4.7030, 4.7650, 4.7570, 5.5560, 5.6020, 5.8700, 6.3070, 6.4210, 7.0300, 7.1690, 7.2670, 7.4220, 7.6950, 7.8980, 8.9200, 9.1360, 9.4700, 9.4840, 9.8350, 9.9590, 9.9440, 10.0720, 9.9570, 10.0400, 10.0550, 10.1630, 11.0230, 11.6150, 11.6000, 11.9460, 12.0350, 12.0050, 11.8700, 12.4780, 12.5960, 12.8610, 12.9820, 12.9700, 12.7860, 13.1380, 13.3030, 13.4360, 13.5640, 13.9220, 13.8710, 13.9260, 13.9940, 14.1670, 14.0670, 13.9740, 14.4040, 14.4400, 14.4520, 14.4620, 14.4640, 14.7550, 14.9510, 14.9470, 15.1680, 15.1900, 15.4730, 15.3790, 15.3810, 15.4550, 15.4830, 15.5900, 15.5500, 15.5280, 15.4990, 15.6270, 15.6390, 15.9080, 15.6510, 15.7460, 15.8140, 16.1140, 16.1310, 16.0620, 16.2160, 16.0750, 16.3150, 16.3470, 16.1810, 16.4380, 16.3340, 16.4300, 16.3870, 16.5490, 16.3370, 16.4230, 16.3450, 16.4450, 16.3880, 16.8720, 16.8300, 16.9260, 17.0710, 16.9070, 16.9660, 17.0240, 16.9150, 17.0030, 16.9650, 16.9780, 17.0090, 17.0600, 17.1220, 17.1590, 17.1160, 17.1640, 17.1650, 17.1210, 17.1230, 17.1340, 17.1350, 17.2060, 17.2820, 17.2500, 17.3680, 17.3110, 17.3550, 17.3490, 17.3390, 17.5760, 17.4830, 17.6680, 17.7640, 17.7670, 17.8030, 17.7650, 17.7680, 17.7360, 17.7560, 17.8080, 17.8480, 17.8680, 17.8580, 17.8770, 17.7930, 17.9120, 17.9790, 17.9740, 18.0070, 17.9930, 18.0900, 18.0460, 18.1230, 18.0850, 18.1850, 18.2760, 18.2710, 18.4900, 18.2360, 18.2370, 18.5230, 18.4040, 18.2910, 18.3570, 18.5190, 18.4260, 18.5660, 18.4810, 18.4860, 18.6270, 18.5840, 18.6450, 18.6100, 18.7060, 18.5230, 18.6690, 18.6170, 18.6650, 18.9240, 18.8700, 18.7950, 19.1330, 19.0860, 19.2800, 19.1000, 19.1110, 19.0900, 19.1010, 19.0740, 19.2390, 19.3240, 19.2520, 19.2680, 19.2860, 19.3710, 19.3300, 19.3980, 20.0490, 20.0620, 19.9720, 19.8900, 20.1070, 20.0070, 20.0650, 19.9290, 20.0880, 20.8300, 20.9350, 20.9350, 21.0740, 21.0350, 21.0850, 20.7430, 20.9300 };\nstd::vector<T> dv_0( 236 );\ncopy( dv_0_c, dv_0_c+236, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 236 );\ncopy( mdv_0_c, mdv_0_c+236, mdv_0.begin() );\ndata[0] = new IndData<T>( 236, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000031750\010051247606\0011567\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 236;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 7;\n\ndouble c_thetaIn[nTheta] = { 10, -1, 0.05, -0.00001, -0.05, 0.001, -0.000001 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 100, -0.1, 0.5, -0.000001, -0.005, 0.01, -0.0000001 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 1, -10, 0.003, -0.00010000, -0.5, 0.0001, -0.00001 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.08, 0.214, 0.367, 0.248, 0.375, 0.471, 0.591, 0.796, 0.943, 0.892, 1.089, 1.504, 1.418, 1.429, 1.547, 1.903, 2.15, 2.204, 2.278, 2.241, 2.902, 2.813, 2.951, 2.894, 3.624, 3.782, 3.697, 4.574, 4.703, 4.765, 4.757, 5.556, 5.602, 5.87, 6.307, 6.421, 7.03, 7.169, 7.267, 7.422, 7.695, 7.898, 8.92, 9.136, 9.47, 9.484, 9.835, 9.959, 9.944, 10.072, 9.957, 10.04, 10.055, 10.163, 11.023, 11.615, 11.6, 11.946, 12.035, 12.005, 11.87, 12.478, 12.596, 12.861, 12.982, 12.97, 12.786, 13.138, 13.303, 13.436, 13.564, 13.922, 13.871, 13.926, 13.994, 14.167, 14.067, 13.974, 14.404, 14.44, 14.452, 14.462, 14.464, 14.755, 14.951, 14.947, 15.168, 15.19, 15.473, 15.379, 15.381, 15.455, 15.483, 15.59, 15.55, 15.528, 15.499, 15.627, 15.639, 15.908, 15.651, 15.746, 15.814, 16.114, 16.131, 16.062, 16.216, 16.075, 16.315, 16.347, 16.181, 16.438, 16.334, 16.43, 16.387, 16.549, 16.337, 16.423, 16.345, 16.445, 16.388, 16.872, 16.83, 16.926, 17.071, 16.907, 16.966, 17.024, 16.915, 17.003, 16.965, 16.978, 17.009, 17.06, 17.122, 17.159, 17.116, 17.164, 17.165, 17.121, 17.123, 17.134, 17.135, 17.206, 17.282, 17.25, 17.368, 17.311, 17.355, 17.349, 17.339, 17.576, 17.483, 17.668, 17.764, 17.767, 17.803, 17.765, 17.768, 17.736, 17.756, 17.808, 17.848, 17.868, 17.858, 17.877, 17.793, 17.912, 17.979, 17.974, 18.007, 17.993, 18.09, 18.046, 18.123, 18.085, 18.185, 18.276, 18.271, 18.49, 18.236, 18.237, 18.523, 18.404, 18.291, 18.357, 18.519, 18.426, 18.566, 18.481, 18.486, 18.627, 18.584, 18.645, 18.61, 18.706, 18.523, 18.669, 18.617, 18.665, 18.924, 18.87, 18.795, 19.133, 19.086, 19.28, 19.1, 19.111, 19.09, 19.101, 19.074, 19.239, 19.324, 19.252, 19.268, 19.286, 19.371, 19.33, 19.398, 20.049, 20.062, 19.972, 19.89, 20.107, 20.007, 20.065, 19.929, 20.088, 20.83, 20.935, 20.935, 21.074, 21.035, 21.085, 20.743, 20.93 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"b6\\\"/>\" << endl;\noResults << \"<label name=\\\"b7\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b6[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b7[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][5] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][6] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247606\0013077\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003134\010051247606\0011240\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nstd::vector<T> b6;\nstd::vector<T> b7;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\nb6( nIn ),\nb7( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 7 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247606\0010722\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000014606\010051247606\0010634\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value b6;\nmutable Value b7;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 7 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator theta6 = spk_indepVar.begin() + spk_thetaOffset + 5;\ntypename std::vector<Value>::const_iterator theta7 = spk_indepVar.begin() + spk_thetaOffset + 6;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nb3 = theta[ ( 3 ) - 1 ];\nb4 = theta[ ( 4 ) - 1 ];\nb5 = theta[ ( 5 ) - 1 ];\nb6 = theta[ ( 6 ) - 1 ];\nb7 = theta[ ( 7 ) - 1 ];\nx = time;\nf = ( b1 + b2 * x + b3 * pow( x, 2 ) + b4 * pow( x, 3 ) ) / ( 1 + b5 * x + b6 * pow( x, 2 ) + b7 * pow( x, 3 ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ntemp.data[ spk_i ]->b6[ spk_j ] = b6;\ntemp.data[ spk_i ]->b7[ spk_j ] = b7;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->b6 = temp.data[ i ]->b6;\n    perm->data[ i ]->b7 = temp.data[ i ]->b7;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247606\0012536\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000005103\010051247606\0011603\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>HAHN1_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"7\">\n               <low>\n                  <value fixed=\"no\">1</value>\n                  <value fixed=\"no\">-10</value>\n                  <value fixed=\"no\">0.003</value>\n                  <value fixed=\"no\">-0.00010000</value>\n                  <value fixed=\"no\">-0.5</value>\n                  <value fixed=\"no\">0.0001</value>\n                  <value fixed=\"no\">-0.00001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">10</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.05</value>\n                  <value fixed=\"no\">-0.00001</value>\n                  <value fixed=\"no\">-0.05</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">-0.000001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">100</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.5</value>\n                  <value fixed=\"no\">-0.000001</value>\n                  <value fixed=\"no\">-0.005</value>\n                  <value fixed=\"no\">0.01</value>\n                  <value fixed=\"no\">-0.0000001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nx = TIME\nF = (b1+b2*x+b3*x**2+b4*x**3) /(1+b5*x+b6*x**2+b7*x**3)\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"HAHN1_1.OUT\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (6,3,'HAHN1_2',4,'1',4,'2','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>HAHN1_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"7\">\n               <low>\n                  <value fixed=\"no\">0.1</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.0005</value>\n                  <value fixed=\"no\">-0.00001</value>\n                  <value fixed=\"no\">-0.05</value>\n                  <value fixed=\"no\">0.00001</value>\n                  <value fixed=\"no\">-0.000001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">1</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.005</value>\n                  <value fixed=\"no\">-0.000001</value>\n                  <value fixed=\"no\">-0.005</value>\n                  <value fixed=\"no\">0.0001</value>\n                  <value fixed=\"no\">-0.0000001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">10</value>\n                  <value fixed=\"no\">-0.01</value>\n                  <value fixed=\"no\">0.05</value>\n                  <value fixed=\"no\">-0.0000001</value>\n                  <value fixed=\"no\">-0.0005</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">-0.00000001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nx = TIME\nF = (b1+b2*x+b3*x**2+b4*x**3) /(1+b5*x+b6*x**2+b7*x**3)\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"hahn_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n','q2r',NULL,1081200409,1084575623,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000062266\010051247607\0011224\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"237\">\n      <description>hahn1.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>14.13000000</value>\n         <value>0.0800</value>\n      </row>\n      <row position=\"3\">\n         <value>18.97000000</value>\n         <value>0.2140</value>\n      </row>\n      <row position=\"4\">\n         <value>20.15000000</value>\n         <value>0.3670</value>\n      </row>\n      <row position=\"5\">\n         <value>20.41000000</value>\n         <value>0.2480</value>\n      </row>\n      <row position=\"6\">\n         <value>21.46000000</value>\n         <value>0.3750</value>\n      </row>\n      <row position=\"7\">\n         <value>24.33000000</value>\n         <value>0.4710</value>\n      </row>\n      <row position=\"8\">\n         <value>24.41000000</value>\n         <value>0.5910</value>\n      </row>\n      <row position=\"9\">\n         <value>28.78000000</value>\n         <value>0.7960</value>\n      </row>\n      <row position=\"10\">\n         <value>28.93000000</value>\n         <value>0.9430</value>\n      </row>\n      <row position=\"11\">\n         <value>29.57000000</value>\n         <value>0.8920</value>\n      </row>\n      <row position=\"12\">\n         <value>31.30000000</value>\n         <value>1.0890</value>\n      </row>\n      <row position=\"13\">\n         <value>33.43000000</value>\n         <value>1.5040</value>\n      </row>\n      <row position=\"14\">\n         <value>33.84000000</value>\n         <value>1.4180</value>\n      </row>\n      <row position=\"15\">\n         <value>33.91000000</value>\n         <value>1.4290</value>\n      </row>\n      <row position=\"16\">\n         <value>34.82000000</value>\n         <value>1.5470</value>\n      </row>\n      <row position=\"17\">\n         <value>37.41000000</value>\n         <value>1.9030</value>\n      </row>\n      <row position=\"18\">\n         <value>39.12000000</value>\n         <value>2.1500</value>\n      </row>\n      <row position=\"19\">\n         <value>39.22000000</value>\n         <value>2.2040</value>\n      </row>\n      <row position=\"20\">\n         <value>39.70000000</value>\n         <value>2.2780</value>\n      </row>\n      <row position=\"21\">\n         <value>40.03000000</value>\n         <value>2.2410</value>\n      </row>\n      <row position=\"22\">\n         <value>44.09000000</value>\n         <value>2.9020</value>\n      </row>\n      <row position=\"23\">\n         <value>44.18000000</value>\n         <value>2.8130</value>\n      </row>\n      <row position=\"24\">\n         <value>44.66000000</value>\n         <value>2.9510</value>\n      </row>\n      <row position=\"25\">\n         <value>45.07000000</value>\n         <value>2.8940</value>\n      </row>\n      <row position=\"26\">\n         <value>48.83000000</value>\n         <value>3.6240</value>\n      </row>\n      <row position=\"27\">\n         <value>49.87000000</value>\n         <value>3.7820</value>\n      </row>\n      <row position=\"28\">\n         <value>50.24000000</value>\n         <value>3.6970</value>\n      </row>\n      <row position=\"29\">\n         <value>54.50000000</value>\n         <value>4.5740</value>\n      </row>\n      <row position=\"30\">\n         <value>54.98000000</value>\n         <value>4.7030</value>\n      </row>\n      <row position=\"31\">\n         <value>55.02000000</value>\n         <value>4.7650</value>\n      </row>\n      <row position=\"32\">\n         <value>55.16000000</value>\n         <value>4.7570</value>\n      </row>\n      <row position=\"33\">\n         <value>60.41000000</value>\n         <value>5.5560</value>\n      </row>\n      <row position=\"34\">\n         <value>60.90000000</value>\n         <value>5.6020</value>\n      </row>\n      <row position=\"35\">\n         <value>61.38000000</value>\n         <value>5.8700</value>\n      </row>\n      <row position=\"36\">\n         <value>65.51000000</value>\n         <value>6.3070</value>\n      </row>\n      <row position=\"37\">\n         <value>66.25000000</value>\n         <value>6.4210</value>\n      </row>\n      <row position=\"38\">\n         <value>70.53000000</value>\n         <value>7.0300</value>\n      </row>\n      <row position=\"39\">\n         <value>72.08000000</value>\n         <value>7.1690</value>\n      </row>\n      <row position=\"40\">\n         <value>72.77000000</value>\n         <value>7.2670</value>\n      </row>\n      <row position=\"41\">\n         <value>73.42000000</value>\n         <value>7.4220</value>\n      </row>\n      <row position=\"42\">\n         <value>75.25000000</value>\n         <value>7.6950</value>\n      </row>\n      <row position=\"43\">\n         <value>75.70000000</value>\n         <value>7.8980</value>\n      </row>\n      <row position=\"44\">\n         <value>85.15000000</value>\n         <value>8.9200</value>\n      </row>\n      <row position=\"45\">\n         <value>86.84000000</value>\n         <value>9.1360</value>\n      </row>\n      <row position=\"46\">\n         <value>89.57000000</value>\n         <value>9.4700</value>\n      </row>\n      <row position=\"47\">\n         <value>91.14000000</value>\n         <value>9.4840</value>\n      </row>\n      <row position=\"48\">\n         <value>94.33000000</value>\n         <value>9.8350</value>\n      </row>\n      <row position=\"49\">\n         <value>94.88000000</value>\n         <value>9.9590</value>\n      </row>\n      <row position=\"50\">\n         <value>95.52000000</value>\n         <value>9.9440</value>\n      </row>\n      <row position=\"51\">\n         <value>96.40000000</value>\n         <value>10.0720</value>\n      </row>\n      <row position=\"52\">\n         <value>96.40000001</value>\n         <value>9.9570</value>\n      </row>\n      <row position=\"53\">\n         <value>96.44000000</value>\n         <value>10.0400</value>\n      </row>\n      <row position=\"54\">\n         <value>97.06000000</value>\n         <value>10.0550</value>\n      </row>\n      <row position=\"55\">\n         <value>97.19000000</value>\n         <value>10.1630</value>\n      </row>\n      <row position=\"56\">\n         <value>107.32000000</value>\n         <value>11.0230</value>\n      </row>\n      <row position=\"57\">\n         <value>114.26000000</value>\n         <value>11.6150</value>\n      </row>\n      <row position=\"58\">\n         <value>117.37000000</value>\n         <value>11.6000</value>\n      </row>\n      <row position=\"59\">\n         <value>118.82000000</value>\n         <value>11.9460</value>\n      </row>\n      <row position=\"60\">\n         <value>119.63000000</value>\n         <value>12.0350</value>\n      </row>\n      <row position=\"61\">\n         <value>120.25000000</value>\n         <value>12.0050</value>\n      </row>\n      <row position=\"62\">\n         <value>122.04000000</value>\n         <value>11.8700</value>\n      </row>\n      <row position=\"63\">\n         <value>127.08000000</value>\n         <value>12.4780</value>\n      </row>\n      <row position=\"64\">\n         <value>128.48000000</value>\n         <value>12.5960</value>\n      </row>\n      <row position=\"65\">\n         <value>133.27000000</value>\n         <value>12.8610</value>\n      </row>\n      <row position=\"66\">\n         <value>133.55000000</value>\n         <value>12.9820</value>\n      </row>\n      <row position=\"67\">\n         <value>133.61000000</value>\n         <value>12.9700</value>\n      </row>\n      <row position=\"68\">\n         <value>134.03000000</value>\n         <value>12.7860</value>\n      </row>\n      <row position=\"69\">\n         <value>139.08000000</value>\n         <value>13.1380</value>\n      </row>\n      <row position=\"70\">\n         <value>141.94000000</value>\n         <value>13.3030</value>\n      </row>\n      <row position=\"71\">\n         <value>143.84000000</value>\n         <value>13.4360</value>\n      </row>\n      <row position=\"72\">\n         <value>147.73000000</value>\n         <value>13.5640</value>\n      </row>\n      <row position=\"73\">\n         <value>156.92000000</value>\n         <value>13.9220</value>\n      </row>\n      <row position=\"74\">\n         <value>158.63000000</value>\n         <value>13.8710</value>\n      </row>\n      <row position=\"75\">\n         <value>158.67000000</value>\n         <value>13.9260</value>\n      </row>\n      <row position=\"76\">\n         <value>161.84000000</value>\n         <value>13.9940</value>\n      </row>\n      <row position=\"77\">\n         <value>161.91000000</value>\n         <value>14.1670</value>\n      </row>\n      <row position=\"78\">\n         <value>163.19000000</value>\n         <value>14.0670</value>\n      </row>\n      <row position=\"79\">\n         <value>163.48000000</value>\n         <value>13.9740</value>\n      </row>\n      <row position=\"80\">\n         <value>171.31000000</value>\n         <value>14.4040</value>\n      </row>\n      <row position=\"81\">\n         <value>171.65000000</value>\n         <value>14.4400</value>\n      </row>\n      <row position=\"82\">\n         <value>172.74000000</value>\n         <value>14.4520</value>\n      </row>\n      <row position=\"83\">\n         <value>175.70000000</value>\n         <value>14.4620</value>\n      </row>\n      <row position=\"84\">\n         <value>179.86000000</value>\n         <value>14.4640</value>\n      </row>\n      <row position=\"85\">\n         <value>180.67000000</value>\n         <value>14.7550</value>\n      </row>\n      <row position=\"86\">\n         <value>190.00000000</value>\n         <value>14.9510</value>\n      </row>\n      <row position=\"87\">\n         <value>192.11000000</value>\n         <value>14.9470</value>\n      </row>\n      <row position=\"88\">\n         <value>198.44000000</value>\n         <value>15.1680</value>\n      </row>\n      <row position=\"89\">\n         <value>202.14000000</value>\n         <value>15.1900</value>\n      </row>\n      <row position=\"90\">\n         <value>206.76000000</value>\n         <value>15.4730</value>\n      </row>\n      <row position=\"91\">\n         <value>209.07000000</value>\n         <value>15.3790</value>\n      </row>\n      <row position=\"92\">\n         <value>211.27000000</value>\n         <value>15.3810</value>\n      </row>\n      <row position=\"93\">\n         <value>213.32000000</value>\n         <value>15.4550</value>\n      </row>\n      <row position=\"94\">\n         <value>217.78000000</value>\n         <value>15.4830</value>\n      </row>\n      <row position=\"95\">\n         <value>219.14000000</value>\n         <value>15.5900</value>\n      </row>\n      <row position=\"96\">\n         <value>220.55000000</value>\n         <value>15.5500</value>\n      </row>\n      <row position=\"97\">\n         <value>221.05000000</value>\n         <value>15.5280</value>\n      </row>\n      <row position=\"98\">\n         <value>221.39000000</value>\n         <value>15.4990</value>\n      </row>\n      <row position=\"99\">\n         <value>223.26000000</value>\n         <value>15.6270</value>\n      </row>\n      <row position=\"100\">\n         <value>223.88000000</value>\n         <value>15.6390</value>\n      </row>\n      <row position=\"101\">\n         <value>226.44000000</value>\n         <value>15.9080</value>\n      </row>\n      <row position=\"102\">\n         <value>226.86000000</value>\n         <value>15.6510</value>\n      </row>\n      <row position=\"103\">\n         <value>229.65000000</value>\n         <value>15.7460</value>\n      </row>\n      <row position=\"104\">\n         <value>231.50000000</value>\n         <value>15.8140</value>\n      </row>\n      <row position=\"105\">\n         <value>237.12000000</value>\n         <value>16.1140</value>\n      </row>\n      <row position=\"106\">\n         <value>250.99000000</value>\n         <value>16.1310</value>\n      </row>\n      <row position=\"107\">\n         <value>253.24000000</value>\n         <value>16.0620</value>\n      </row>\n      <row position=\"108\">\n         <value>258.27000000</value>\n         <value>16.2160</value>\n      </row>\n      <row position=\"109\">\n         <value>262.52000000</value>\n         <value>16.0750</value>\n      </row>\n      <row position=\"110\">\n         <value>265.05000000</value>\n         <value>16.3150</value>\n      </row>\n      <row position=\"111\">\n         <value>268.01000000</value>\n         <value>16.3470</value>\n      </row>\n      <row position=\"112\">\n         <value>268.62000000</value>\n         <value>16.1810</value>\n      </row>\n      <row position=\"113\">\n         <value>268.99000000</value>\n         <value>16.4380</value>\n      </row>\n      <row position=\"114\">\n         <value>269.44000000</value>\n         <value>16.3340</value>\n      </row>\n      <row position=\"115\">\n         <value>271.78000000</value>\n         <value>16.4300</value>\n      </row>\n      <row position=\"116\">\n         <value>271.80000000</value>\n         <value>16.3870</value>\n      </row>\n      <row position=\"117\">\n         <value>271.97000000</value>\n         <value>16.5490</value>\n      </row>\n      <row position=\"118\">\n         <value>273.13000000</value>\n         <value>16.3370</value>\n      </row>\n      <row position=\"119\">\n         <value>273.46000000</value>\n         <value>16.4230</value>\n      </row>\n      <row position=\"120\">\n         <value>273.66000000</value>\n         <value>16.3450</value>\n      </row>\n      <row position=\"121\">\n         <value>273.77000000</value>\n         <value>16.4450</value>\n      </row>\n      <row position=\"122\">\n         <value>282.10000000</value>\n         <value>16.3880</value>\n      </row>\n      <row position=\"123\">\n         <value>321.31000000</value>\n         <value>16.8720</value>\n      </row>\n      <row position=\"124\">\n         <value>321.69000000</value>\n         <value>16.8300</value>\n      </row>\n      <row position=\"125\">\n         <value>330.14000000</value>\n         <value>16.9260</value>\n      </row>\n      <row position=\"126\">\n         <value>330.90000000</value>\n         <value>17.0710</value>\n      </row>\n      <row position=\"127\">\n         <value>333.03000000</value>\n         <value>16.9070</value>\n      </row>\n      <row position=\"128\">\n         <value>333.47000000</value>\n         <value>16.9660</value>\n      </row>\n      <row position=\"129\">\n         <value>334.61000000</value>\n         <value>17.0240</value>\n      </row>\n      <row position=\"130\">\n         <value>336.25000000</value>\n         <value>16.9150</value>\n      </row>\n      <row position=\"131\">\n         <value>337.23000000</value>\n         <value>17.0030</value>\n      </row>\n      <row position=\"132\">\n         <value>339.15000000</value>\n         <value>16.9650</value>\n      </row>\n      <row position=\"133\">\n         <value>339.33000000</value>\n         <value>16.9780</value>\n      </row>\n      <row position=\"134\">\n         <value>339.79000000</value>\n         <value>17.0090</value>\n      </row>\n      <row position=\"135\">\n         <value>340.77000000</value>\n         <value>17.0600</value>\n      </row>\n      <row position=\"136\">\n         <value>345.65000000</value>\n         <value>17.1220</value>\n      </row>\n      <row position=\"137\">\n         <value>346.62000000</value>\n         <value>17.1590</value>\n      </row>\n      <row position=\"138\">\n         <value>347.19000000</value>\n         <value>17.1160</value>\n      </row>\n      <row position=\"139\">\n         <value>348.78000000</value>\n         <value>17.1640</value>\n      </row>\n      <row position=\"140\">\n         <value>349.52000000</value>\n         <value>17.1650</value>\n      </row>\n      <row position=\"141\">\n         <value>350.13000000</value>\n         <value>17.1210</value>\n      </row>\n      <row position=\"142\">\n         <value>351.18000000</value>\n         <value>17.1230</value>\n      </row>\n      <row position=\"143\">\n         <value>358.18000001</value>\n         <value>17.1340</value>\n      </row>\n      <row position=\"144\">\n         <value>358.72000000</value>\n         <value>17.1350</value>\n      </row>\n      <row position=\"145\">\n         <value>362.75000000</value>\n         <value>17.2060</value>\n      </row>\n      <row position=\"146\">\n         <value>370.77000000</value>\n         <value>17.2820</value>\n      </row>\n      <row position=\"147\">\n         <value>371.03000000</value>\n         <value>17.2500</value>\n      </row>\n      <row position=\"148\">\n         <value>372.72000000</value>\n         <value>17.3680</value>\n      </row>\n      <row position=\"149\">\n         <value>373.11000000</value>\n         <value>17.3110</value>\n      </row>\n      <row position=\"150\">\n         <value>373.79000000</value>\n         <value>17.3550</value>\n      </row>\n      <row position=\"151\">\n         <value>377.98000000</value>\n         <value>17.3490</value>\n      </row>\n      <row position=\"152\">\n         <value>393.32000000</value>\n         <value>17.3390</value>\n      </row>\n      <row position=\"153\">\n         <value>394.77000000</value>\n         <value>17.5760</value>\n      </row>\n      <row position=\"154\">\n         <value>396.24000000</value>\n         <value>17.4830</value>\n      </row>\n      <row position=\"155\">\n         <value>411.82000000</value>\n         <value>17.6680</value>\n      </row>\n      <row position=\"156\">\n         <value>416.59000000</value>\n         <value>17.7640</value>\n      </row>\n      <row position=\"157\">\n         <value>419.51000000</value>\n         <value>17.7670</value>\n      </row>\n      <row position=\"158\">\n         <value>421.59000000</value>\n         <value>17.8030</value>\n      </row>\n      <row position=\"159\">\n         <value>422.02000000</value>\n         <value>17.7650</value>\n      </row>\n      <row position=\"160\">\n         <value>422.47000000</value>\n         <value>17.7680</value>\n      </row>\n      <row position=\"161\">\n         <value>422.61000000</value>\n         <value>17.7360</value>\n      </row>\n      <row position=\"162\">\n         <value>427.38000000</value>\n         <value>17.7560</value>\n      </row>\n      <row position=\"163\">\n         <value>428.58000000</value>\n         <value>17.8080</value>\n      </row>\n      <row position=\"164\">\n         <value>429.66000000</value>\n         <value>17.8480</value>\n      </row>\n      <row position=\"165\">\n         <value>432.68000000</value>\n         <value>17.8680</value>\n      </row>\n      <row position=\"166\">\n         <value>441.75000000</value>\n         <value>17.8580</value>\n      </row>\n      <row position=\"167\">\n         <value>447.41000000</value>\n         <value>17.8770</value>\n      </row>\n      <row position=\"168\">\n         <value>448.53000000</value>\n         <value>17.7930</value>\n      </row>\n      <row position=\"169\">\n         <value>448.70000000</value>\n         <value>17.9120</value>\n      </row>\n      <row position=\"170\">\n         <value>450.10000000</value>\n         <value>17.9790</value>\n      </row>\n      <row position=\"171\">\n         <value>450.35000000</value>\n         <value>17.9740</value>\n      </row>\n      <row position=\"172\">\n         <value>451.92000000</value>\n         <value>18.0070</value>\n      </row>\n      <row position=\"173\">\n         <value>455.56000000</value>\n         <value>17.9930</value>\n      </row>\n      <row position=\"174\">\n         <value>468.22000000</value>\n         <value>18.0900</value>\n      </row>\n      <row position=\"175\">\n         <value>472.89000000</value>\n         <value>18.0460</value>\n      </row>\n      <row position=\"176\">\n         <value>473.78000000</value>\n         <value>18.1230</value>\n      </row>\n      <row position=\"177\">\n         <value>476.69000000</value>\n         <value>18.0850</value>\n      </row>\n      <row position=\"178\">\n         <value>484.02000000</value>\n         <value>18.1850</value>\n      </row>\n      <row position=\"179\">\n         <value>487.27000000</value>\n         <value>18.2760</value>\n      </row>\n      <row position=\"180\">\n         <value>495.47000000</value>\n         <value>18.2710</value>\n      </row>\n      <row position=\"181\">\n         <value>511.12000000</value>\n         <value>18.4900</value>\n      </row>\n      <row position=\"182\">\n         <value>514.78000000</value>\n         <value>18.2360</value>\n      </row>\n      <row position=\"183\">\n         <value>515.65000000</value>\n         <value>18.2370</value>\n      </row>\n      <row position=\"184\">\n         <value>519.47000000</value>\n         <value>18.5230</value>\n      </row>\n      <row position=\"185\">\n         <value>519.54000000</value>\n         <value>18.4040</value>\n      </row>\n      <row position=\"186\">\n         <value>522.47000000</value>\n         <value>18.2910</value>\n      </row>\n      <row position=\"187\">\n         <value>522.62000000</value>\n         <value>18.3570</value>\n      </row>\n      <row position=\"188\">\n         <value>523.03000000</value>\n         <value>18.5190</value>\n      </row>\n      <row position=\"189\">\n         <value>524.43000000</value>\n         <value>18.4260</value>\n      </row>\n      <row position=\"190\">\n         <value>524.70000000</value>\n         <value>18.5660</value>\n      </row>\n      <row position=\"191\">\n         <value>528.99000000</value>\n         <value>18.4810</value>\n      </row>\n      <row position=\"192\">\n         <value>531.08000000</value>\n         <value>18.4860</value>\n      </row>\n      <row position=\"193\">\n         <value>544.47000000</value>\n         <value>18.6270</value>\n      </row>\n      <row position=\"194\">\n         <value>546.75000000</value>\n         <value>18.5840</value>\n      </row>\n      <row position=\"195\">\n         <value>548.75000000</value>\n         <value>18.6450</value>\n      </row>\n      <row position=\"196\">\n         <value>549.53000000</value>\n         <value>18.6100</value>\n      </row>\n      <row position=\"197\">\n         <value>551.64000000</value>\n         <value>18.7060</value>\n      </row>\n      <row position=\"198\">\n         <value>552.22000000</value>\n         <value>18.5230</value>\n      </row>\n      <row position=\"199\">\n         <value>553.56000000</value>\n         <value>18.6690</value>\n      </row>\n      <row position=\"200\">\n         <value>555.74000000</value>\n         <value>18.6170</value>\n      </row>\n      <row position=\"201\">\n         <value>560.11000000</value>\n         <value>18.6650</value>\n      </row>\n      <row position=\"202\">\n         <value>574.02000000</value>\n         <value>18.9240</value>\n      </row>\n      <row position=\"203\">\n         <value>575.29000000</value>\n         <value>18.8700</value>\n      </row>\n      <row position=\"204\">\n         <value>576.00000000</value>\n         <value>18.7950</value>\n      </row>\n      <row position=\"205\">\n         <value>612.99000000</value>\n         <value>19.1330</value>\n      </row>\n      <row position=\"206\">\n         <value>620.77000000</value>\n         <value>19.0860</value>\n      </row>\n      <row position=\"207\">\n         <value>622.05000000</value>\n         <value>19.2800</value>\n      </row>\n      <row position=\"208\">\n         <value>623.86000000</value>\n         <value>19.1000</value>\n      </row>\n      <row position=\"209\">\n         <value>625.55000000</value>\n         <value>19.1110</value>\n      </row>\n      <row position=\"210\">\n         <value>628.34000000</value>\n         <value>19.0900</value>\n      </row>\n      <row position=\"211\">\n         <value>631.50000000</value>\n         <value>19.1010</value>\n      </row>\n      <row position=\"212\">\n         <value>638.59000000</value>\n         <value>19.0740</value>\n      </row>\n      <row position=\"213\">\n         <value>641.36000000</value>\n         <value>19.2390</value>\n      </row>\n      <row position=\"214\">\n         <value>646.89000000</value>\n         <value>19.3240</value>\n      </row>\n      <row position=\"215\">\n         <value>646.90000000</value>\n         <value>19.2520</value>\n      </row>\n      <row position=\"216\">\n         <value>647.04000000</value>\n         <value>19.2680</value>\n      </row>\n      <row position=\"217\">\n         <value>647.61000000</value>\n         <value>19.2860</value>\n      </row>\n      <row position=\"218\">\n         <value>652.59000000</value>\n         <value>19.3710</value>\n      </row>\n      <row position=\"219\">\n         <value>656.20000000</value>\n         <value>19.3300</value>\n      </row>\n      <row position=\"220\">\n         <value>663.97000000</value>\n         <value>19.3980</value>\n      </row>\n      <row position=\"221\">\n         <value>746.90000000</value>\n         <value>20.0490</value>\n      </row>\n      <row position=\"222\">\n         <value>747.35000000</value>\n         <value>20.0620</value>\n      </row>\n      <row position=\"223\">\n         <value>747.78000000</value>\n         <value>19.9720</value>\n      </row>\n      <row position=\"224\">\n         <value>748.29000000</value>\n         <value>19.8900</value>\n      </row>\n      <row position=\"225\">\n         <value>748.43000000</value>\n         <value>20.1070</value>\n      </row>\n      <row position=\"226\">\n         <value>749.21000000</value>\n         <value>20.0070</value>\n      </row>\n      <row position=\"227\">\n         <value>749.27000000</value>\n         <value>20.0650</value>\n      </row>\n      <row position=\"228\">\n         <value>750.14000000</value>\n         <value>19.9290</value>\n      </row>\n      <row position=\"229\">\n         <value>750.51000000</value>\n         <value>20.0880</value>\n      </row>\n      <row position=\"230\">\n         <value>845.97000000</value>\n         <value>20.8300</value>\n      </row>\n      <row position=\"231\">\n         <value>847.54000000</value>\n         <value>20.9350</value>\n      </row>\n      <row position=\"232\">\n         <value>848.23000000</value>\n         <value>20.9350</value>\n      </row>\n      <row position=\"233\">\n         <value>849.75000000</value>\n         <value>21.0740</value>\n      </row>\n      <row position=\"234\">\n         <value>849.93000000</value>\n         <value>21.0350</value>\n      </row>\n      <row position=\"235\">\n         <value>850.98000000</value>\n         <value>21.0850</value>\n      </row>\n      <row position=\"236\">\n         <value>851.37000000</value>\n         <value>20.7430</value>\n      </row>\n      <row position=\"237\">\n         <value>851.61000000</value>\n         <value>20.9300</value>\n      </row>\n   </table>\n</spkdata>\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000020420\010051247607\0011257\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 236\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 236 );\ncopy( id_0_c, id_0_c+236, id_0.begin() );\nT time_0_c[] = { 14.13000000, 18.97000000, 20.15000000, 20.41000000, 21.46000000, 24.33000000, 24.41000000, 28.78000000, 28.93000000, 29.57000000, 31.30000000, 33.43000000, 33.84000000, 33.91000000, 34.82000000, 37.41000000, 39.12000000, 39.22000000, 39.70000000, 40.03000000, 44.09000000, 44.18000000, 44.66000000, 45.07000000, 48.83000000, 49.87000000, 50.24000000, 54.50000000, 54.98000000, 55.02000000, 55.16000000, 60.41000000, 60.90000000, 61.38000000, 65.51000000, 66.25000000, 70.53000000, 72.08000000, 72.77000000, 73.42000000, 75.25000000, 75.70000000, 85.15000000, 86.84000000, 89.57000000, 91.14000000, 94.33000000, 94.88000000, 95.52000000, 96.40000000, 96.40000001, 96.44000000, 97.06000000, 97.19000000, 107.32000000, 114.26000000, 117.37000000, 118.82000000, 119.63000000, 120.25000000, 122.04000000, 127.08000000, 128.48000000, 133.27000000, 133.55000000, 133.61000000, 134.03000000, 139.08000000, 141.94000000, 143.84000000, 147.73000000, 156.92000000, 158.63000000, 158.67000000, 161.84000000, 161.91000000, 163.19000000, 163.48000000, 171.31000000, 171.65000000, 172.74000000, 175.70000000, 179.86000000, 180.67000000, 190.00000000, 192.11000000, 198.44000000, 202.14000000, 206.76000000, 209.07000000, 211.27000000, 213.32000000, 217.78000000, 219.14000000, 220.55000000, 221.05000000, 221.39000000, 223.26000000, 223.88000000, 226.44000000, 226.86000000, 229.65000000, 231.50000000, 237.12000000, 250.99000000, 253.24000000, 258.27000000, 262.52000000, 265.05000000, 268.01000000, 268.62000000, 268.99000000, 269.44000000, 271.78000000, 271.80000000, 271.97000000, 273.13000000, 273.46000000, 273.66000000, 273.77000000, 282.10000000, 321.31000000, 321.69000000, 330.14000000, 330.90000000, 333.03000000, 333.47000000, 334.61000000, 336.25000000, 337.23000000, 339.15000000, 339.33000000, 339.79000000, 340.77000000, 345.65000000, 346.62000000, 347.19000000, 348.78000000, 349.52000000, 350.13000000, 351.18000000, 358.18000001, 358.72000000, 362.75000000, 370.77000000, 371.03000000, 372.72000000, 373.11000000, 373.79000000, 377.98000000, 393.32000000, 394.77000000, 396.24000000, 411.82000000, 416.59000000, 419.51000000, 421.59000000, 422.02000000, 422.47000000, 422.61000000, 427.38000000, 428.58000000, 429.66000000, 432.68000000, 441.75000000, 447.41000000, 448.53000000, 448.70000000, 450.10000000, 450.35000000, 451.92000000, 455.56000000, 468.22000000, 472.89000000, 473.78000000, 476.69000000, 484.02000000, 487.27000000, 495.47000000, 511.12000000, 514.78000000, 515.65000000, 519.47000000, 519.54000000, 522.47000000, 522.62000000, 523.03000000, 524.43000000, 524.70000000, 528.99000000, 531.08000000, 544.47000000, 546.75000000, 548.75000000, 549.53000000, 551.64000000, 552.22000000, 553.56000000, 555.74000000, 560.11000000, 574.02000000, 575.29000000, 576.00000000, 612.99000000, 620.77000000, 622.05000000, 623.86000000, 625.55000000, 628.34000000, 631.50000000, 638.59000000, 641.36000000, 646.89000000, 646.90000000, 647.04000000, 647.61000000, 652.59000000, 656.20000000, 663.97000000, 746.90000000, 747.35000000, 747.78000000, 748.29000000, 748.43000000, 749.21000000, 749.27000000, 750.14000000, 750.51000000, 845.97000000, 847.54000000, 848.23000000, 849.75000000, 849.93000000, 850.98000000, 851.37000000, 851.61000000 };\nstd::vector<T> time_0( 236 );\ncopy( time_0_c, time_0_c+236, time_0.begin() );\nT dv_0_c[] = { 0.0800, 0.2140, 0.3670, 0.2480, 0.3750, 0.4710, 0.5910, 0.7960, 0.9430, 0.8920, 1.0890, 1.5040, 1.4180, 1.4290, 1.5470, 1.9030, 2.1500, 2.2040, 2.2780, 2.2410, 2.9020, 2.8130, 2.9510, 2.8940, 3.6240, 3.7820, 3.6970, 4.5740, 4.7030, 4.7650, 4.7570, 5.5560, 5.6020, 5.8700, 6.3070, 6.4210, 7.0300, 7.1690, 7.2670, 7.4220, 7.6950, 7.8980, 8.9200, 9.1360, 9.4700, 9.4840, 9.8350, 9.9590, 9.9440, 10.0720, 9.9570, 10.0400, 10.0550, 10.1630, 11.0230, 11.6150, 11.6000, 11.9460, 12.0350, 12.0050, 11.8700, 12.4780, 12.5960, 12.8610, 12.9820, 12.9700, 12.7860, 13.1380, 13.3030, 13.4360, 13.5640, 13.9220, 13.8710, 13.9260, 13.9940, 14.1670, 14.0670, 13.9740, 14.4040, 14.4400, 14.4520, 14.4620, 14.4640, 14.7550, 14.9510, 14.9470, 15.1680, 15.1900, 15.4730, 15.3790, 15.3810, 15.4550, 15.4830, 15.5900, 15.5500, 15.5280, 15.4990, 15.6270, 15.6390, 15.9080, 15.6510, 15.7460, 15.8140, 16.1140, 16.1310, 16.0620, 16.2160, 16.0750, 16.3150, 16.3470, 16.1810, 16.4380, 16.3340, 16.4300, 16.3870, 16.5490, 16.3370, 16.4230, 16.3450, 16.4450, 16.3880, 16.8720, 16.8300, 16.9260, 17.0710, 16.9070, 16.9660, 17.0240, 16.9150, 17.0030, 16.9650, 16.9780, 17.0090, 17.0600, 17.1220, 17.1590, 17.1160, 17.1640, 17.1650, 17.1210, 17.1230, 17.1340, 17.1350, 17.2060, 17.2820, 17.2500, 17.3680, 17.3110, 17.3550, 17.3490, 17.3390, 17.5760, 17.4830, 17.6680, 17.7640, 17.7670, 17.8030, 17.7650, 17.7680, 17.7360, 17.7560, 17.8080, 17.8480, 17.8680, 17.8580, 17.8770, 17.7930, 17.9120, 17.9790, 17.9740, 18.0070, 17.9930, 18.0900, 18.0460, 18.1230, 18.0850, 18.1850, 18.2760, 18.2710, 18.4900, 18.2360, 18.2370, 18.5230, 18.4040, 18.2910, 18.3570, 18.5190, 18.4260, 18.5660, 18.4810, 18.4860, 18.6270, 18.5840, 18.6450, 18.6100, 18.7060, 18.5230, 18.6690, 18.6170, 18.6650, 18.9240, 18.8700, 18.7950, 19.1330, 19.0860, 19.2800, 19.1000, 19.1110, 19.0900, 19.1010, 19.0740, 19.2390, 19.3240, 19.2520, 19.2680, 19.2860, 19.3710, 19.3300, 19.3980, 20.0490, 20.0620, 19.9720, 19.8900, 20.1070, 20.0070, 20.0650, 19.9290, 20.0880, 20.8300, 20.9350, 20.9350, 21.0740, 21.0350, 21.0850, 20.7430, 20.9300 };\nstd::vector<T> dv_0( 236 );\ncopy( dv_0_c, dv_0_c+236, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 236 );\ncopy( mdv_0_c, mdv_0_c+236, mdv_0.begin() );\ndata[0] = new IndData<T>( 236, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000031765\010051247607\0011576\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 236;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 7;\n\ndouble c_thetaIn[nTheta] = { 1, -0.1, 0.005, -0.000001, -0.005, 0.0001, -0.0000001 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 10, -0.01, 0.05, -0.0000001, -0.0005, 0.001, -0.00000001 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 0.1, -1, 0.0005, -0.00001, -0.05, 0.00001, -0.000001 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.08, 0.214, 0.367, 0.248, 0.375, 0.471, 0.591, 0.796, 0.943, 0.892, 1.089, 1.504, 1.418, 1.429, 1.547, 1.903, 2.15, 2.204, 2.278, 2.241, 2.902, 2.813, 2.951, 2.894, 3.624, 3.782, 3.697, 4.574, 4.703, 4.765, 4.757, 5.556, 5.602, 5.87, 6.307, 6.421, 7.03, 7.169, 7.267, 7.422, 7.695, 7.898, 8.92, 9.136, 9.47, 9.484, 9.835, 9.959, 9.944, 10.072, 9.957, 10.04, 10.055, 10.163, 11.023, 11.615, 11.6, 11.946, 12.035, 12.005, 11.87, 12.478, 12.596, 12.861, 12.982, 12.97, 12.786, 13.138, 13.303, 13.436, 13.564, 13.922, 13.871, 13.926, 13.994, 14.167, 14.067, 13.974, 14.404, 14.44, 14.452, 14.462, 14.464, 14.755, 14.951, 14.947, 15.168, 15.19, 15.473, 15.379, 15.381, 15.455, 15.483, 15.59, 15.55, 15.528, 15.499, 15.627, 15.639, 15.908, 15.651, 15.746, 15.814, 16.114, 16.131, 16.062, 16.216, 16.075, 16.315, 16.347, 16.181, 16.438, 16.334, 16.43, 16.387, 16.549, 16.337, 16.423, 16.345, 16.445, 16.388, 16.872, 16.83, 16.926, 17.071, 16.907, 16.966, 17.024, 16.915, 17.003, 16.965, 16.978, 17.009, 17.06, 17.122, 17.159, 17.116, 17.164, 17.165, 17.121, 17.123, 17.134, 17.135, 17.206, 17.282, 17.25, 17.368, 17.311, 17.355, 17.349, 17.339, 17.576, 17.483, 17.668, 17.764, 17.767, 17.803, 17.765, 17.768, 17.736, 17.756, 17.808, 17.848, 17.868, 17.858, 17.877, 17.793, 17.912, 17.979, 17.974, 18.007, 17.993, 18.09, 18.046, 18.123, 18.085, 18.185, 18.276, 18.271, 18.49, 18.236, 18.237, 18.523, 18.404, 18.291, 18.357, 18.519, 18.426, 18.566, 18.481, 18.486, 18.627, 18.584, 18.645, 18.61, 18.706, 18.523, 18.669, 18.617, 18.665, 18.924, 18.87, 18.795, 19.133, 19.086, 19.28, 19.1, 19.111, 19.09, 19.101, 19.074, 19.239, 19.324, 19.252, 19.268, 19.286, 19.371, 19.33, 19.398, 20.049, 20.062, 19.972, 19.89, 20.107, 20.007, 20.065, 19.929, 20.088, 20.83, 20.935, 20.935, 21.074, 21.035, 21.085, 20.743, 20.93 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"b6\\\"/>\" << endl;\noResults << \"<label name=\\\"b7\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b6[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b7[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][5] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][6] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247607\0013100\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003134\010051247607\0011241\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nstd::vector<T> b6;\nstd::vector<T> b7;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\nb6( nIn ),\nb7( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 7 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247607\0010723\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000014606\010051247607\0010635\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value b6;\nmutable Value b7;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 7 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator theta6 = spk_indepVar.begin() + spk_thetaOffset + 5;\ntypename std::vector<Value>::const_iterator theta7 = spk_indepVar.begin() + spk_thetaOffset + 6;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nb3 = theta[ ( 3 ) - 1 ];\nb4 = theta[ ( 4 ) - 1 ];\nb5 = theta[ ( 5 ) - 1 ];\nb6 = theta[ ( 6 ) - 1 ];\nb7 = theta[ ( 7 ) - 1 ];\nx = time;\nf = ( b1 + b2 * x + b3 * pow( x, 2 ) + b4 * pow( x, 3 ) ) / ( 1 + b5 * x + b6 * pow( x, 2 ) + b7 * pow( x, 3 ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ntemp.data[ spk_i ]->b6[ spk_j ] = b6;\ntemp.data[ spk_i ]->b7[ spk_j ] = b7;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->b6 = temp.data[ i ]->b6;\n    perm->data[ i ]->b7 = temp.data[ i ]->b7;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247607\0012537\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000005117\010051247607\0011611\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>HAHN1_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"7\">\n               <low>\n                  <value fixed=\"no\">0.1</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.0005</value>\n                  <value fixed=\"no\">-0.00001</value>\n                  <value fixed=\"no\">-0.05</value>\n                  <value fixed=\"no\">0.00001</value>\n                  <value fixed=\"no\">-0.000001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">1</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.005</value>\n                  <value fixed=\"no\">-0.000001</value>\n                  <value fixed=\"no\">-0.005</value>\n                  <value fixed=\"no\">0.0001</value>\n                  <value fixed=\"no\">-0.0000001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">10</value>\n                  <value fixed=\"no\">-0.01</value>\n                  <value fixed=\"no\">0.05</value>\n                  <value fixed=\"no\">-0.0000001</value>\n                  <value fixed=\"no\">-0.0005</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">-0.00000001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nx = TIME\nF = (b1+b2*x+b3*x**2+b4*x**3) /(1+b5*x+b6*x**2+b7*x**3)\nY = F + ETA(1)\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"hahn_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (7,3,'KIRBY2_1',5,'1',5,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>KIRBY2_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.2</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.0003</value>\n                  <value fixed=\"no\">-0.01</value>\n                  <value fixed=\"no\">0.000001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">2</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.003</value>\n                  <value fixed=\"no\">-0.001</value>\n                  <value fixed=\"no\">0.00001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">20</value>\n                  <value fixed=\"no\">-0.01</value>\n                  <value fixed=\"no\">0.03</value>\n                  <value fixed=\"no\">-0.0001</value>\n                  <value fixed=\"no\">0.0001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nx = TIME\nF=(b1 + b2*x + b3*x**2) /(1 + b4*x + b5*x**2)\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"kirby2_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1081464538,1084575625,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000037135\010051247610\0011213\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"152\">\n      <description>kirby2.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>9.6500</value>\n         <value>0.0082</value>\n      </row>\n      <row position=\"3\">\n         <value>10.7400</value>\n         <value>0.0112</value>\n      </row>\n      <row position=\"4\">\n         <value>11.8100</value>\n         <value>0.0149</value>\n      </row>\n      <row position=\"5\">\n         <value>12.8800</value>\n         <value>0.0198</value>\n      </row>\n      <row position=\"6\">\n         <value>14.0600</value>\n         <value>0.0248</value>\n      </row>\n      <row position=\"7\">\n         <value>15.2800</value>\n         <value>0.0324</value>\n      </row>\n      <row position=\"8\">\n         <value>16.6300</value>\n         <value>0.0420</value>\n      </row>\n      <row position=\"9\">\n         <value>18.1900</value>\n         <value>0.0549</value>\n      </row>\n      <row position=\"10\">\n         <value>19.8800</value>\n         <value>0.0719</value>\n      </row>\n      <row position=\"11\">\n         <value>21.8400</value>\n         <value>0.0963</value>\n      </row>\n      <row position=\"12\">\n         <value>24.0000</value>\n         <value>0.1291</value>\n      </row>\n      <row position=\"13\">\n         <value>26.2500</value>\n         <value>0.1710</value>\n      </row>\n      <row position=\"14\">\n         <value>28.8600</value>\n         <value>0.2314</value>\n      </row>\n      <row position=\"15\">\n         <value>31.8500</value>\n         <value>0.3227</value>\n      </row>\n      <row position=\"16\">\n         <value>35.7900</value>\n         <value>0.4809</value>\n      </row>\n      <row position=\"17\">\n         <value>40.1800</value>\n         <value>0.7084</value>\n      </row>\n      <row position=\"18\">\n         <value>44.7400</value>\n         <value>1.0220</value>\n      </row>\n      <row position=\"19\">\n         <value>49.5300</value>\n         <value>1.4580</value>\n      </row>\n      <row position=\"20\">\n         <value>53.9400</value>\n         <value>1.9520</value>\n      </row>\n      <row position=\"21\">\n         <value>58.2900</value>\n         <value>2.5410</value>\n      </row>\n      <row position=\"22\">\n         <value>62.6300</value>\n         <value>3.2230</value>\n      </row>\n      <row position=\"23\">\n         <value>67.0300</value>\n         <value>3.9990</value>\n      </row>\n      <row position=\"24\">\n         <value>71.2500</value>\n         <value>4.8520</value>\n      </row>\n      <row position=\"25\">\n         <value>75.2200</value>\n         <value>5.7320</value>\n      </row>\n      <row position=\"26\">\n         <value>79.3300</value>\n         <value>6.7270</value>\n      </row>\n      <row position=\"27\">\n         <value>83.5600</value>\n         <value>7.8350</value>\n      </row>\n      <row position=\"28\">\n         <value>87.7500</value>\n         <value>9.0250</value>\n      </row>\n      <row position=\"29\">\n         <value>91.9300</value>\n         <value>10.2670</value>\n      </row>\n      <row position=\"30\">\n         <value>96.1000</value>\n         <value>11.5780</value>\n      </row>\n      <row position=\"31\">\n         <value>100.2800</value>\n         <value>12.9440</value>\n      </row>\n      <row position=\"32\">\n         <value>104.4600</value>\n         <value>14.3770</value>\n      </row>\n      <row position=\"33\">\n         <value>108.6600</value>\n         <value>15.8560</value>\n      </row>\n      <row position=\"34\">\n         <value>112.7100</value>\n         <value>17.3310</value>\n      </row>\n      <row position=\"35\">\n         <value>116.8800</value>\n         <value>18.8850</value>\n      </row>\n      <row position=\"36\">\n         <value>121.3300</value>\n         <value>20.5750</value>\n      </row>\n      <row position=\"37\">\n         <value>125.7900</value>\n         <value>22.3200</value>\n      </row>\n      <row position=\"38\">\n         <value>125.7900001</value>\n         <value>22.3030</value>\n      </row>\n      <row position=\"39\">\n         <value>128.7400</value>\n         <value>23.4600</value>\n      </row>\n      <row position=\"40\">\n         <value>130.2700</value>\n         <value>24.0600</value>\n      </row>\n      <row position=\"41\">\n         <value>133.3300</value>\n         <value>25.2720</value>\n      </row>\n      <row position=\"42\">\n         <value>134.7900</value>\n         <value>25.8530</value>\n      </row>\n      <row position=\"43\">\n         <value>137.9300</value>\n         <value>27.1100</value>\n      </row>\n      <row position=\"44\">\n         <value>139.3300</value>\n         <value>27.6580</value>\n      </row>\n      <row position=\"45\">\n         <value>142.4600</value>\n         <value>28.9240</value>\n      </row>\n      <row position=\"46\">\n         <value>143.9000</value>\n         <value>29.5110</value>\n      </row>\n      <row position=\"47\">\n         <value>146.9100</value>\n         <value>30.7100</value>\n      </row>\n      <row position=\"48\">\n         <value>148.5100</value>\n         <value>31.3500</value>\n      </row>\n      <row position=\"49\">\n         <value>151.4100</value>\n         <value>32.5200</value>\n      </row>\n      <row position=\"50\">\n         <value>153.1700</value>\n         <value>33.2300</value>\n      </row>\n      <row position=\"51\">\n         <value>155.9700</value>\n         <value>34.3300</value>\n      </row>\n      <row position=\"52\">\n         <value>157.7600</value>\n         <value>35.0600</value>\n      </row>\n      <row position=\"53\">\n         <value>160.5600</value>\n         <value>36.1700</value>\n      </row>\n      <row position=\"54\">\n         <value>162.3000</value>\n         <value>36.8400</value>\n      </row>\n      <row position=\"55\">\n         <value>165.2100</value>\n         <value>38.0100</value>\n      </row>\n      <row position=\"56\">\n         <value>166.9000</value>\n         <value>38.6700</value>\n      </row>\n      <row position=\"57\">\n         <value>169.9200</value>\n         <value>39.8700</value>\n      </row>\n      <row position=\"58\">\n         <value>170.3200</value>\n         <value>40.0300</value>\n      </row>\n      <row position=\"59\">\n         <value>171.5400</value>\n         <value>40.5000</value>\n      </row>\n      <row position=\"60\">\n         <value>173.7900</value>\n         <value>41.3700</value>\n      </row>\n      <row position=\"61\">\n         <value>174.5700</value>\n         <value>41.6700</value>\n      </row>\n      <row position=\"62\">\n         <value>176.2500</value>\n         <value>42.3100</value>\n      </row>\n      <row position=\"63\">\n         <value>177.3400</value>\n         <value>42.7300</value>\n      </row>\n      <row position=\"64\">\n         <value>179.1900</value>\n         <value>43.4600</value>\n      </row>\n      <row position=\"65\">\n         <value>181.0200</value>\n         <value>44.1400</value>\n      </row>\n      <row position=\"66\">\n         <value>182.0800</value>\n         <value>44.5500</value>\n      </row>\n      <row position=\"67\">\n         <value>183.8800</value>\n         <value>45.2200</value>\n      </row>\n      <row position=\"68\">\n         <value>185.7500</value>\n         <value>45.9200</value>\n      </row>\n      <row position=\"69\">\n         <value>186.8000</value>\n         <value>46.3000</value>\n      </row>\n      <row position=\"70\">\n         <value>188.6300</value>\n         <value>47.0000</value>\n      </row>\n      <row position=\"71\">\n         <value>190.4500</value>\n         <value>47.6800</value>\n      </row>\n      <row position=\"72\">\n         <value>191.4800</value>\n         <value>48.0600</value>\n      </row>\n      <row position=\"73\">\n         <value>193.3500</value>\n         <value>48.7400</value>\n      </row>\n      <row position=\"74\">\n         <value>195.2200</value>\n         <value>49.4100</value>\n      </row>\n      <row position=\"75\">\n         <value>196.2300</value>\n         <value>49.7600</value>\n      </row>\n      <row position=\"76\">\n         <value>198.0500</value>\n         <value>50.4300</value>\n      </row>\n      <row position=\"77\">\n         <value>199.9700</value>\n         <value>51.1100</value>\n      </row>\n      <row position=\"78\">\n         <value>201.0600</value>\n         <value>51.5000</value>\n      </row>\n      <row position=\"79\">\n         <value>202.8300</value>\n         <value>52.1200</value>\n      </row>\n      <row position=\"80\">\n         <value>204.6900</value>\n         <value>52.7600</value>\n      </row>\n      <row position=\"81\">\n         <value>205.8600</value>\n         <value>53.1800</value>\n      </row>\n      <row position=\"82\">\n         <value>207.5800</value>\n         <value>53.7800</value>\n      </row>\n      <row position=\"83\">\n         <value>209.5000</value>\n         <value>54.4600</value>\n      </row>\n      <row position=\"84\">\n         <value>210.6500</value>\n         <value>54.8300</value>\n      </row>\n      <row position=\"85\">\n         <value>212.3300</value>\n         <value>55.4000</value>\n      </row>\n      <row position=\"86\">\n         <value>215.4300</value>\n         <value>56.4300</value>\n      </row>\n      <row position=\"87\">\n         <value>217.1600</value>\n         <value>57.0300</value>\n      </row>\n      <row position=\"88\">\n         <value>220.2100</value>\n         <value>58.0000</value>\n      </row>\n      <row position=\"89\">\n         <value>221.9800</value>\n         <value>58.6100</value>\n      </row>\n      <row position=\"90\">\n         <value>225.0600</value>\n         <value>59.5800</value>\n      </row>\n      <row position=\"91\">\n         <value>226.7900</value>\n         <value>60.1100</value>\n      </row>\n      <row position=\"92\">\n         <value>229.9200</value>\n         <value>61.1000</value>\n      </row>\n      <row position=\"93\">\n         <value>231.6900</value>\n         <value>61.6500</value>\n      </row>\n      <row position=\"94\">\n         <value>234.7700</value>\n         <value>62.5900</value>\n      </row>\n      <row position=\"95\">\n         <value>236.6000</value>\n         <value>63.1200</value>\n      </row>\n      <row position=\"96\">\n         <value>239.6300</value>\n         <value>64.0300</value>\n      </row>\n      <row position=\"97\">\n         <value>241.5000</value>\n         <value>64.6200</value>\n      </row>\n      <row position=\"98\">\n         <value>244.4800</value>\n         <value>65.4900</value>\n      </row>\n      <row position=\"99\">\n         <value>246.4000</value>\n         <value>66.0300</value>\n      </row>\n      <row position=\"100\">\n         <value>249.3500</value>\n         <value>66.8900</value>\n      </row>\n      <row position=\"101\">\n         <value>251.3200</value>\n         <value>67.4200</value>\n      </row>\n      <row position=\"102\">\n         <value>254.2200</value>\n         <value>68.2300</value>\n      </row>\n      <row position=\"103\">\n         <value>256.2400</value>\n         <value>68.7700</value>\n      </row>\n      <row position=\"104\">\n         <value>259.1100</value>\n         <value>69.5900</value>\n      </row>\n      <row position=\"105\">\n         <value>261.1800</value>\n         <value>70.1100</value>\n      </row>\n      <row position=\"106\">\n         <value>264.0200</value>\n         <value>70.8600</value>\n      </row>\n      <row position=\"107\">\n         <value>266.1300</value>\n         <value>71.4300</value>\n      </row>\n      <row position=\"108\">\n         <value>268.9400</value>\n         <value>72.1600</value>\n      </row>\n      <row position=\"109\">\n         <value>271.0900</value>\n         <value>72.7000</value>\n      </row>\n      <row position=\"110\">\n         <value>273.8700</value>\n         <value>73.4000</value>\n      </row>\n      <row position=\"111\">\n         <value>276.0800</value>\n         <value>73.9300</value>\n      </row>\n      <row position=\"112\">\n         <value>278.8300</value>\n         <value>74.6000</value>\n      </row>\n      <row position=\"113\">\n         <value>281.0800</value>\n         <value>75.1600</value>\n      </row>\n      <row position=\"114\">\n         <value>283.8100</value>\n         <value>75.8200</value>\n      </row>\n      <row position=\"115\">\n         <value>286.1100</value>\n         <value>76.3400</value>\n      </row>\n      <row position=\"116\">\n         <value>288.8100</value>\n         <value>76.9800</value>\n      </row>\n      <row position=\"117\">\n         <value>291.0800</value>\n         <value>77.4800</value>\n      </row>\n      <row position=\"118\">\n         <value>293.7500</value>\n         <value>78.0800</value>\n      </row>\n      <row position=\"119\">\n         <value>295.9900</value>\n         <value>78.6000</value>\n      </row>\n      <row position=\"120\">\n         <value>298.6400</value>\n         <value>79.1700</value>\n      </row>\n      <row position=\"121\">\n         <value>300.8400</value>\n         <value>79.6200</value>\n      </row>\n      <row position=\"122\">\n         <value>302.0200</value>\n         <value>79.8800</value>\n      </row>\n      <row position=\"123\">\n         <value>303.4800</value>\n         <value>80.1900</value>\n      </row>\n      <row position=\"124\">\n         <value>305.6500</value>\n         <value>80.6600</value>\n      </row>\n      <row position=\"125\">\n         <value>308.2700</value>\n         <value>81.2200</value>\n      </row>\n      <row position=\"126\">\n         <value>310.4100</value>\n         <value>81.6600</value>\n      </row>\n      <row position=\"127\">\n         <value>313.0100</value>\n         <value>82.1600</value>\n      </row>\n      <row position=\"128\">\n         <value>315.1200</value>\n         <value>82.5900</value>\n      </row>\n      <row position=\"129\">\n         <value>317.7100</value>\n         <value>83.1400</value>\n      </row>\n      <row position=\"130\">\n         <value>319.7900</value>\n         <value>83.5000</value>\n      </row>\n      <row position=\"131\">\n         <value>322.3600</value>\n         <value>84.0000</value>\n      </row>\n      <row position=\"132\">\n         <value>324.4200</value>\n         <value>84.4000</value>\n      </row>\n      <row position=\"133\">\n         <value>326.9800</value>\n         <value>84.8900</value>\n      </row>\n      <row position=\"134\">\n         <value>329.0100</value>\n         <value>85.2600</value>\n      </row>\n      <row position=\"135\">\n         <value>331.5600</value>\n         <value>85.7400</value>\n      </row>\n      <row position=\"136\">\n         <value>333.5600</value>\n         <value>86.0700</value>\n      </row>\n      <row position=\"137\">\n         <value>336.1000</value>\n         <value>86.5400</value>\n      </row>\n      <row position=\"138\">\n         <value>338.0800</value>\n         <value>86.8900</value>\n      </row>\n      <row position=\"139\">\n         <value>340.6000</value>\n         <value>87.3200</value>\n      </row>\n      <row position=\"140\">\n         <value>342.5700</value>\n         <value>87.6500</value>\n      </row>\n      <row position=\"141\">\n         <value>345.0800</value>\n         <value>88.1000</value>\n      </row>\n      <row position=\"142\">\n         <value>347.0200</value>\n         <value>88.4300</value>\n      </row>\n      <row position=\"143\">\n         <value>349.5200</value>\n         <value>88.8300</value>\n      </row>\n      <row position=\"144\">\n         <value>351.4400</value>\n         <value>89.1200</value>\n      </row>\n      <row position=\"145\">\n         <value>353.9300</value>\n         <value>89.5400</value>\n      </row>\n      <row position=\"146\">\n         <value>355.8300</value>\n         <value>89.8500</value>\n      </row>\n      <row position=\"147\">\n         <value>358.3200</value>\n         <value>90.2500</value>\n      </row>\n      <row position=\"148\">\n         <value>360.2000</value>\n         <value>90.5500</value>\n      </row>\n      <row position=\"149\">\n         <value>362.6700</value>\n         <value>90.9300</value>\n      </row>\n      <row position=\"150\">\n         <value>364.5300</value>\n         <value>91.2000</value>\n      </row>\n      <row position=\"151\">\n         <value>367.0000</value>\n         <value>91.5500</value>\n      </row>\n      <row position=\"152\">\n         <value>371.3000</value>\n         <value>92.2000</value>\n      </row>\n   </table>\n</spkdata>\r\nataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012233\010051247610\0011254\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 151\n//------------------------------------\nchar* id_0_c[] = {};\nstd::vector<char*> id_0( 151 );\ncopy( id_0_c, id_0_c+151, id_0.begin() );\nT time_0_c[] = { 9.6500, 10.7400, 11.8100, 12.8800, 14.0600, 15.2800, 16.6300, 18.1900, 19.8800, 21.8400, 24.0000, 26.2500, 28.8600, 31.8500, 35.7900, 40.1800, 44.7400, 49.5300, 53.9400, 58.2900, 62.6300, 67.0300, 71.2500, 75.2200, 79.3300, 83.5600, 87.7500, 91.9300, 96.1000, 100.2800, 104.4600, 108.6600, 112.7100, 116.8800, 121.3300, 125.7900, 125.7900001, 128.7400, 130.2700, 133.3300, 134.7900, 137.9300, 139.3300, 142.4600, 143.9000, 146.9100, 148.5100, 151.4100, 153.1700, 155.9700, 157.7600, 160.5600, 162.3000, 165.2100, 166.9000, 169.9200, 170.3200, 171.5400, 173.7900, 174.5700, 176.2500, 177.3400, 179.1900, 181.0200, 182.0800, 183.8800, 185.7500, 186.8000, 188.6300, 190.4500, 191.4800, 193.3500, 195.2200, 196.2300, 198.0500, 199.9700, 201.0600, 202.8300, 204.6900, 205.8600, 207.5800, 209.5000, 210.6500, 212.3300, 215.4300, 217.1600, 220.2100, 221.9800, 225.0600, 226.7900, 229.9200, 231.6900, 234.7700, 236.6000, 239.6300, 241.5000, 244.4800, 246.4000, 249.3500, 251.3200, 254.2200, 256.2400, 259.1100, 261.1800, 264.0200, 266.1300, 268.9400, 271.0900, 273.8700, 276.0800, 278.8300, 281.0800, 283.8100, 286.1100, 288.8100, 291.0800, 293.7500, 295.9900, 298.6400, 300.8400, 302.0200, 303.4800, 305.6500, 308.2700, 310.4100, 313.0100, 315.1200, 317.7100, 319.7900, 322.3600, 324.4200, 326.9800, 329.0100, 331.5600, 333.5600, 336.1000, 338.0800, 340.6000, 342.5700, 345.0800, 347.0200, 349.5200, 351.4400, 353.9300, 355.8300, 358.3200, 360.2000, 362.6700, 364.5300, 367.0000, 371.3000 };\nstd::vector<T> time_0( 151 );\ncopy( time_0_c, time_0_c+151, time_0.begin() );\nT dv_0_c[] = { 0.0082, 0.0112, 0.0149, 0.0198, 0.0248, 0.0324, 0.0420, 0.0549, 0.0719, 0.0963, 0.1291, 0.1710, 0.2314, 0.3227, 0.4809, 0.7084, 1.0220, 1.4580, 1.9520, 2.5410, 3.2230, 3.9990, 4.8520, 5.7320, 6.7270, 7.8350, 9.0250, 10.2670, 11.5780, 12.9440, 14.3770, 15.8560, 17.3310, 18.8850, 20.5750, 22.3200, 22.3030, 23.4600, 24.0600, 25.2720, 25.8530, 27.1100, 27.6580, 28.9240, 29.5110, 30.7100, 31.3500, 32.5200, 33.2300, 34.3300, 35.0600, 36.1700, 36.8400, 38.0100, 38.6700, 39.8700, 40.0300, 40.5000, 41.3700, 41.6700, 42.3100, 42.7300, 43.4600, 44.1400, 44.5500, 45.2200, 45.9200, 46.3000, 47.0000, 47.6800, 48.0600, 48.7400, 49.4100, 49.7600, 50.4300, 51.1100, 51.5000, 52.1200, 52.7600, 53.1800, 53.7800, 54.4600, 54.8300, 55.4000, 56.4300, 57.0300, 58.0000, 58.6100, 59.5800, 60.1100, 61.1000, 61.6500, 62.5900, 63.1200, 64.0300, 64.6200, 65.4900, 66.0300, 66.8900, 67.4200, 68.2300, 68.7700, 69.5900, 70.1100, 70.8600, 71.4300, 72.1600, 72.7000, 73.4000, 73.9300, 74.6000, 75.1600, 75.8200, 76.3400, 76.9800, 77.4800, 78.0800, 78.6000, 79.1700, 79.6200, 79.8800, 80.1900, 80.6600, 81.2200, 81.6600, 82.1600, 82.5900, 83.1400, 83.5000, 84.0000, 84.4000, 84.8900, 85.2600, 85.7400, 86.0700, 86.5400, 86.8900, 87.3200, 87.6500, 88.1000, 88.4300, 88.8300, 89.1200, 89.5400, 89.8500, 90.2500, 90.5500, 90.9300, 91.2000, 91.5500, 92.2000 };\nstd::vector<T> dv_0( 151 );\ncopy( dv_0_c, dv_0_c+151, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 151 );\ncopy( mdv_0_c, mdv_0_c+151, mdv_0.begin() );\ndata[0] = new IndData<T>( 151, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000027516\010051247610\0011567\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 151;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 5;\n\ndouble c_thetaIn[nTheta] = { 2, -0.1, 0.003, -0.001, 0.00001 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 20, -0.01, 0.03, -0.0001, 0.0001 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 0.2, -1, 0.0003, -0.01, 0.000001 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.0082, 0.0112, 0.0149, 0.0198, 0.0248, 0.0324, 0.042, 0.0549, 0.0719, 0.0963, 0.1291, 0.171, 0.2314, 0.3227, 0.4809, 0.7084, 1.022, 1.458, 1.952, 2.541, 3.223, 3.999, 4.852, 5.732, 6.727, 7.835, 9.025, 10.267, 11.578, 12.944, 14.377, 15.856, 17.331, 18.885, 20.575, 22.32, 22.303, 23.46, 24.06, 25.272, 25.853, 27.11, 27.658, 28.924, 29.511, 30.71, 31.35, 32.52, 33.23, 34.33, 35.06, 36.17, 36.84, 38.01, 38.67, 39.87, 40.03, 40.5, 41.37, 41.67, 42.31, 42.73, 43.46, 44.14, 44.55, 45.22, 45.92, 46.3, 47, 47.68, 48.06, 48.74, 49.41, 49.76, 50.43, 51.11, 51.5, 52.12, 52.76, 53.18, 53.78, 54.46, 54.83, 55.4, 56.43, 57.03, 58, 58.61, 59.58, 60.11, 61.1, 61.65, 62.59, 63.12, 64.03, 64.62, 65.49, 66.03, 66.89, 67.42, 68.23, 68.77, 69.59, 70.11, 70.86, 71.43, 72.16, 72.7, 73.4, 73.93, 74.6, 75.16, 75.82, 76.34, 76.98, 77.48, 78.08, 78.6, 79.17, 79.62, 79.88, 80.19, 80.66, 81.22, 81.66, 82.16, 82.59, 83.14, 83.5, 84, 84.4, 84.89, 85.26, 85.74, 86.07, 86.54, 86.89, 87.32, 87.65, 88.1, 88.43, 88.83, 89.12, 89.54, 89.85, 90.25, 90.55, 90.93, 91.2, 91.55, 92.2 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247610\0013072\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003040\010051247610\0011227\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 5 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247610\0010715\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000013640\010051247610\0010624\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 5 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nb3 = theta[ ( 3 ) - 1 ];\nb4 = theta[ ( 4 ) - 1 ];\nb5 = theta[ ( 5 ) - 1 ];\nx = time;\nf = ( b1 + b2 * x + b3 * pow( x, 2 ) ) / ( 1 + b4 * x + b5 * pow( x, 2 ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247610\0012531\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000004247\010051247610\0011606\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>KIRBY2_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.2</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.0003</value>\n                  <value fixed=\"no\">-0.01</value>\n                  <value fixed=\"no\">0.000001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">2</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.003</value>\n                  <value fixed=\"no\">-0.001</value>\n                  <value fixed=\"no\">0.00001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">20</value>\n                  <value fixed=\"no\">-0.01</value>\n                  <value fixed=\"no\">0.03</value>\n                  <value fixed=\"no\">-0.0001</value>\n                  <value fixed=\"no\">0.0001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nx = TIME\nF=(b1 + b2*x + b3*x**2) /(1 + b4*x + b5*x**2)\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"kirby2_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (8,3,'KIRBY2_2',5,'1',5,'2','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>KIRBY2_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.15</value>\n                  <value fixed=\"no\">-1.5</value>\n                  <value fixed=\"no\">0.00025</value>\n                  <value fixed=\"no\">-0.015</value>\n                  <value fixed=\"no\">0.000002</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">1.5</value>\n                  <value fixed=\"no\">-0.15</value>\n                  <value fixed=\"no\">0.0025</value>\n                  <value fixed=\"no\">-0.0015</value>\n                  <value fixed=\"no\">0.00002</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">15</value>\n                  <value fixed=\"no\">-0.015</value>\n                  <value fixed=\"no\">0.025</value>\n                  <value fixed=\"no\">-0.00015</value>\n                  <value fixed=\"no\">0.0002</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nx = TIME\nF=(b1 + b2*x + b3*x**2) /(1 + b4*x + b5*x**2)\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"kirby2_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1081464794,1084575625,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000037135\010051247611\0011214\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"152\">\n      <description>kirby2.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>9.6500</value>\n         <value>0.0082</value>\n      </row>\n      <row position=\"3\">\n         <value>10.7400</value>\n         <value>0.0112</value>\n      </row>\n      <row position=\"4\">\n         <value>11.8100</value>\n         <value>0.0149</value>\n      </row>\n      <row position=\"5\">\n         <value>12.8800</value>\n         <value>0.0198</value>\n      </row>\n      <row position=\"6\">\n         <value>14.0600</value>\n         <value>0.0248</value>\n      </row>\n      <row position=\"7\">\n         <value>15.2800</value>\n         <value>0.0324</value>\n      </row>\n      <row position=\"8\">\n         <value>16.6300</value>\n         <value>0.0420</value>\n      </row>\n      <row position=\"9\">\n         <value>18.1900</value>\n         <value>0.0549</value>\n      </row>\n      <row position=\"10\">\n         <value>19.8800</value>\n         <value>0.0719</value>\n      </row>\n      <row position=\"11\">\n         <value>21.8400</value>\n         <value>0.0963</value>\n      </row>\n      <row position=\"12\">\n         <value>24.0000</value>\n         <value>0.1291</value>\n      </row>\n      <row position=\"13\">\n         <value>26.2500</value>\n         <value>0.1710</value>\n      </row>\n      <row position=\"14\">\n         <value>28.8600</value>\n         <value>0.2314</value>\n      </row>\n      <row position=\"15\">\n         <value>31.8500</value>\n         <value>0.3227</value>\n      </row>\n      <row position=\"16\">\n         <value>35.7900</value>\n         <value>0.4809</value>\n      </row>\n      <row position=\"17\">\n         <value>40.1800</value>\n         <value>0.7084</value>\n      </row>\n      <row position=\"18\">\n         <value>44.7400</value>\n         <value>1.0220</value>\n      </row>\n      <row position=\"19\">\n         <value>49.5300</value>\n         <value>1.4580</value>\n      </row>\n      <row position=\"20\">\n         <value>53.9400</value>\n         <value>1.9520</value>\n      </row>\n      <row position=\"21\">\n         <value>58.2900</value>\n         <value>2.5410</value>\n      </row>\n      <row position=\"22\">\n         <value>62.6300</value>\n         <value>3.2230</value>\n      </row>\n      <row position=\"23\">\n         <value>67.0300</value>\n         <value>3.9990</value>\n      </row>\n      <row position=\"24\">\n         <value>71.2500</value>\n         <value>4.8520</value>\n      </row>\n      <row position=\"25\">\n         <value>75.2200</value>\n         <value>5.7320</value>\n      </row>\n      <row position=\"26\">\n         <value>79.3300</value>\n         <value>6.7270</value>\n      </row>\n      <row position=\"27\">\n         <value>83.5600</value>\n         <value>7.8350</value>\n      </row>\n      <row position=\"28\">\n         <value>87.7500</value>\n         <value>9.0250</value>\n      </row>\n      <row position=\"29\">\n         <value>91.9300</value>\n         <value>10.2670</value>\n      </row>\n      <row position=\"30\">\n         <value>96.1000</value>\n         <value>11.5780</value>\n      </row>\n      <row position=\"31\">\n         <value>100.2800</value>\n         <value>12.9440</value>\n      </row>\n      <row position=\"32\">\n         <value>104.4600</value>\n         <value>14.3770</value>\n      </row>\n      <row position=\"33\">\n         <value>108.6600</value>\n         <value>15.8560</value>\n      </row>\n      <row position=\"34\">\n         <value>112.7100</value>\n         <value>17.3310</value>\n      </row>\n      <row position=\"35\">\n         <value>116.8800</value>\n         <value>18.8850</value>\n      </row>\n      <row position=\"36\">\n         <value>121.3300</value>\n         <value>20.5750</value>\n      </row>\n      <row position=\"37\">\n         <value>125.7900</value>\n         <value>22.3200</value>\n      </row>\n      <row position=\"38\">\n         <value>125.7900001</value>\n         <value>22.3030</value>\n      </row>\n      <row position=\"39\">\n         <value>128.7400</value>\n         <value>23.4600</value>\n      </row>\n      <row position=\"40\">\n         <value>130.2700</value>\n         <value>24.0600</value>\n      </row>\n      <row position=\"41\">\n         <value>133.3300</value>\n         <value>25.2720</value>\n      </row>\n      <row position=\"42\">\n         <value>134.7900</value>\n         <value>25.8530</value>\n      </row>\n      <row position=\"43\">\n         <value>137.9300</value>\n         <value>27.1100</value>\n      </row>\n      <row position=\"44\">\n         <value>139.3300</value>\n         <value>27.6580</value>\n      </row>\n      <row position=\"45\">\n         <value>142.4600</value>\n         <value>28.9240</value>\n      </row>\n      <row position=\"46\">\n         <value>143.9000</value>\n         <value>29.5110</value>\n      </row>\n      <row position=\"47\">\n         <value>146.9100</value>\n         <value>30.7100</value>\n      </row>\n      <row position=\"48\">\n         <value>148.5100</value>\n         <value>31.3500</value>\n      </row>\n      <row position=\"49\">\n         <value>151.4100</value>\n         <value>32.5200</value>\n      </row>\n      <row position=\"50\">\n         <value>153.1700</value>\n         <value>33.2300</value>\n      </row>\n      <row position=\"51\">\n         <value>155.9700</value>\n         <value>34.3300</value>\n      </row>\n      <row position=\"52\">\n         <value>157.7600</value>\n         <value>35.0600</value>\n      </row>\n      <row position=\"53\">\n         <value>160.5600</value>\n         <value>36.1700</value>\n      </row>\n      <row position=\"54\">\n         <value>162.3000</value>\n         <value>36.8400</value>\n      </row>\n      <row position=\"55\">\n         <value>165.2100</value>\n         <value>38.0100</value>\n      </row>\n      <row position=\"56\">\n         <value>166.9000</value>\n         <value>38.6700</value>\n      </row>\n      <row position=\"57\">\n         <value>169.9200</value>\n         <value>39.8700</value>\n      </row>\n      <row position=\"58\">\n         <value>170.3200</value>\n         <value>40.0300</value>\n      </row>\n      <row position=\"59\">\n         <value>171.5400</value>\n         <value>40.5000</value>\n      </row>\n      <row position=\"60\">\n         <value>173.7900</value>\n         <value>41.3700</value>\n      </row>\n      <row position=\"61\">\n         <value>174.5700</value>\n         <value>41.6700</value>\n      </row>\n      <row position=\"62\">\n         <value>176.2500</value>\n         <value>42.3100</value>\n      </row>\n      <row position=\"63\">\n         <value>177.3400</value>\n         <value>42.7300</value>\n      </row>\n      <row position=\"64\">\n         <value>179.1900</value>\n         <value>43.4600</value>\n      </row>\n      <row position=\"65\">\n         <value>181.0200</value>\n         <value>44.1400</value>\n      </row>\n      <row position=\"66\">\n         <value>182.0800</value>\n         <value>44.5500</value>\n      </row>\n      <row position=\"67\">\n         <value>183.8800</value>\n         <value>45.2200</value>\n      </row>\n      <row position=\"68\">\n         <value>185.7500</value>\n         <value>45.9200</value>\n      </row>\n      <row position=\"69\">\n         <value>186.8000</value>\n         <value>46.3000</value>\n      </row>\n      <row position=\"70\">\n         <value>188.6300</value>\n         <value>47.0000</value>\n      </row>\n      <row position=\"71\">\n         <value>190.4500</value>\n         <value>47.6800</value>\n      </row>\n      <row position=\"72\">\n         <value>191.4800</value>\n         <value>48.0600</value>\n      </row>\n      <row position=\"73\">\n         <value>193.3500</value>\n         <value>48.7400</value>\n      </row>\n      <row position=\"74\">\n         <value>195.2200</value>\n         <value>49.4100</value>\n      </row>\n      <row position=\"75\">\n         <value>196.2300</value>\n         <value>49.7600</value>\n      </row>\n      <row position=\"76\">\n         <value>198.0500</value>\n         <value>50.4300</value>\n      </row>\n      <row position=\"77\">\n         <value>199.9700</value>\n         <value>51.1100</value>\n      </row>\n      <row position=\"78\">\n         <value>201.0600</value>\n         <value>51.5000</value>\n      </row>\n      <row position=\"79\">\n         <value>202.8300</value>\n         <value>52.1200</value>\n      </row>\n      <row position=\"80\">\n         <value>204.6900</value>\n         <value>52.7600</value>\n      </row>\n      <row position=\"81\">\n         <value>205.8600</value>\n         <value>53.1800</value>\n      </row>\n      <row position=\"82\">\n         <value>207.5800</value>\n         <value>53.7800</value>\n      </row>\n      <row position=\"83\">\n         <value>209.5000</value>\n         <value>54.4600</value>\n      </row>\n      <row position=\"84\">\n         <value>210.6500</value>\n         <value>54.8300</value>\n      </row>\n      <row position=\"85\">\n         <value>212.3300</value>\n         <value>55.4000</value>\n      </row>\n      <row position=\"86\">\n         <value>215.4300</value>\n         <value>56.4300</value>\n      </row>\n      <row position=\"87\">\n         <value>217.1600</value>\n         <value>57.0300</value>\n      </row>\n      <row position=\"88\">\n         <value>220.2100</value>\n         <value>58.0000</value>\n      </row>\n      <row position=\"89\">\n         <value>221.9800</value>\n         <value>58.6100</value>\n      </row>\n      <row position=\"90\">\n         <value>225.0600</value>\n         <value>59.5800</value>\n      </row>\n      <row position=\"91\">\n         <value>226.7900</value>\n         <value>60.1100</value>\n      </row>\n      <row position=\"92\">\n         <value>229.9200</value>\n         <value>61.1000</value>\n      </row>\n      <row position=\"93\">\n         <value>231.6900</value>\n         <value>61.6500</value>\n      </row>\n      <row position=\"94\">\n         <value>234.7700</value>\n         <value>62.5900</value>\n      </row>\n      <row position=\"95\">\n         <value>236.6000</value>\n         <value>63.1200</value>\n      </row>\n      <row position=\"96\">\n         <value>239.6300</value>\n         <value>64.0300</value>\n      </row>\n      <row position=\"97\">\n         <value>241.5000</value>\n         <value>64.6200</value>\n      </row>\n      <row position=\"98\">\n         <value>244.4800</value>\n         <value>65.4900</value>\n      </row>\n      <row position=\"99\">\n         <value>246.4000</value>\n         <value>66.0300</value>\n      </row>\n      <row position=\"100\">\n         <value>249.3500</value>\n         <value>66.8900</value>\n      </row>\n      <row position=\"101\">\n         <value>251.3200</value>\n         <value>67.4200</value>\n      </row>\n      <row position=\"102\">\n         <value>254.2200</value>\n         <value>68.2300</value>\n      </row>\n      <row position=\"103\">\n         <value>256.2400</value>\n         <value>68.7700</value>\n      </row>\n      <row position=\"104\">\n         <value>259.1100</value>\n         <value>69.5900</value>\n      </row>\n      <row position=\"105\">\n         <value>261.1800</value>\n         <value>70.1100</value>\n      </row>\n      <row position=\"106\">\n         <value>264.0200</value>\n         <value>70.8600</value>\n      </row>\n      <row position=\"107\">\n         <value>266.1300</value>\n         <value>71.4300</value>\n      </row>\n      <row position=\"108\">\n         <value>268.9400</value>\n         <value>72.1600</value>\n      </row>\n      <row position=\"109\">\n         <value>271.0900</value>\n         <value>72.7000</value>\n      </row>\n      <row position=\"110\">\n         <value>273.8700</value>\n         <value>73.4000</value>\n      </row>\n      <row position=\"111\">\n         <value>276.0800</value>\n         <value>73.9300</value>\n      </row>\n      <row position=\"112\">\n         <value>278.8300</value>\n         <value>74.6000</value>\n      </row>\n      <row position=\"113\">\n         <value>281.0800</value>\n         <value>75.1600</value>\n      </row>\n      <row position=\"114\">\n         <value>283.8100</value>\n         <value>75.8200</value>\n      </row>\n      <row position=\"115\">\n         <value>286.1100</value>\n         <value>76.3400</value>\n      </row>\n      <row position=\"116\">\n         <value>288.8100</value>\n         <value>76.9800</value>\n      </row>\n      <row position=\"117\">\n         <value>291.0800</value>\n         <value>77.4800</value>\n      </row>\n      <row position=\"118\">\n         <value>293.7500</value>\n         <value>78.0800</value>\n      </row>\n      <row position=\"119\">\n         <value>295.9900</value>\n         <value>78.6000</value>\n      </row>\n      <row position=\"120\">\n         <value>298.6400</value>\n         <value>79.1700</value>\n      </row>\n      <row position=\"121\">\n         <value>300.8400</value>\n         <value>79.6200</value>\n      </row>\n      <row position=\"122\">\n         <value>302.0200</value>\n         <value>79.8800</value>\n      </row>\n      <row position=\"123\">\n         <value>303.4800</value>\n         <value>80.1900</value>\n      </row>\n      <row position=\"124\">\n         <value>305.6500</value>\n         <value>80.6600</value>\n      </row>\n      <row position=\"125\">\n         <value>308.2700</value>\n         <value>81.2200</value>\n      </row>\n      <row position=\"126\">\n         <value>310.4100</value>\n         <value>81.6600</value>\n      </row>\n      <row position=\"127\">\n         <value>313.0100</value>\n         <value>82.1600</value>\n      </row>\n      <row position=\"128\">\n         <value>315.1200</value>\n         <value>82.5900</value>\n      </row>\n      <row position=\"129\">\n         <value>317.7100</value>\n         <value>83.1400</value>\n      </row>\n      <row position=\"130\">\n         <value>319.7900</value>\n         <value>83.5000</value>\n      </row>\n      <row position=\"131\">\n         <value>322.3600</value>\n         <value>84.0000</value>\n      </row>\n      <row position=\"132\">\n         <value>324.4200</value>\n         <value>84.4000</value>\n      </row>\n      <row position=\"133\">\n         <value>326.9800</value>\n         <value>84.8900</value>\n      </row>\n      <row position=\"134\">\n         <value>329.0100</value>\n         <value>85.2600</value>\n      </row>\n      <row position=\"135\">\n         <value>331.5600</value>\n         <value>85.7400</value>\n      </row>\n      <row position=\"136\">\n         <value>333.5600</value>\n         <value>86.0700</value>\n      </row>\n      <row position=\"137\">\n         <value>336.1000</value>\n         <value>86.5400</value>\n      </row>\n      <row position=\"138\">\n         <value>338.0800</value>\n         <value>86.8900</value>\n      </row>\n      <row position=\"139\">\n         <value>340.6000</value>\n         <value>87.3200</value>\n      </row>\n      <row position=\"140\">\n         <value>342.5700</value>\n         <value>87.6500</value>\n      </row>\n      <row position=\"141\">\n         <value>345.0800</value>\n         <value>88.1000</value>\n      </row>\n      <row position=\"142\">\n         <value>347.0200</value>\n         <value>88.4300</value>\n      </row>\n      <row position=\"143\">\n         <value>349.5200</value>\n         <value>88.8300</value>\n      </row>\n      <row position=\"144\">\n         <value>351.4400</value>\n         <value>89.1200</value>\n      </row>\n      <row position=\"145\">\n         <value>353.9300</value>\n         <value>89.5400</value>\n      </row>\n      <row position=\"146\">\n         <value>355.8300</value>\n         <value>89.8500</value>\n      </row>\n      <row position=\"147\">\n         <value>358.3200</value>\n         <value>90.2500</value>\n      </row>\n      <row position=\"148\">\n         <value>360.2000</value>\n         <value>90.5500</value>\n      </row>\n      <row position=\"149\">\n         <value>362.6700</value>\n         <value>90.9300</value>\n      </row>\n      <row position=\"150\">\n         <value>364.5300</value>\n         <value>91.2000</value>\n      </row>\n      <row position=\"151\">\n         <value>367.0000</value>\n         <value>91.5500</value>\n      </row>\n      <row position=\"152\">\n         <value>371.3000</value>\n         <value>92.2000</value>\n      </row>\n   </table>\n</spkdata>\r\nataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012233\010051247611\0011255\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 151\n//------------------------------------\nchar* id_0_c[] = {};\nstd::vector<char*> id_0( 151 );\ncopy( id_0_c, id_0_c+151, id_0.begin() );\nT time_0_c[] = { 9.6500, 10.7400, 11.8100, 12.8800, 14.0600, 15.2800, 16.6300, 18.1900, 19.8800, 21.8400, 24.0000, 26.2500, 28.8600, 31.8500, 35.7900, 40.1800, 44.7400, 49.5300, 53.9400, 58.2900, 62.6300, 67.0300, 71.2500, 75.2200, 79.3300, 83.5600, 87.7500, 91.9300, 96.1000, 100.2800, 104.4600, 108.6600, 112.7100, 116.8800, 121.3300, 125.7900, 125.7900001, 128.7400, 130.2700, 133.3300, 134.7900, 137.9300, 139.3300, 142.4600, 143.9000, 146.9100, 148.5100, 151.4100, 153.1700, 155.9700, 157.7600, 160.5600, 162.3000, 165.2100, 166.9000, 169.9200, 170.3200, 171.5400, 173.7900, 174.5700, 176.2500, 177.3400, 179.1900, 181.0200, 182.0800, 183.8800, 185.7500, 186.8000, 188.6300, 190.4500, 191.4800, 193.3500, 195.2200, 196.2300, 198.0500, 199.9700, 201.0600, 202.8300, 204.6900, 205.8600, 207.5800, 209.5000, 210.6500, 212.3300, 215.4300, 217.1600, 220.2100, 221.9800, 225.0600, 226.7900, 229.9200, 231.6900, 234.7700, 236.6000, 239.6300, 241.5000, 244.4800, 246.4000, 249.3500, 251.3200, 254.2200, 256.2400, 259.1100, 261.1800, 264.0200, 266.1300, 268.9400, 271.0900, 273.8700, 276.0800, 278.8300, 281.0800, 283.8100, 286.1100, 288.8100, 291.0800, 293.7500, 295.9900, 298.6400, 300.8400, 302.0200, 303.4800, 305.6500, 308.2700, 310.4100, 313.0100, 315.1200, 317.7100, 319.7900, 322.3600, 324.4200, 326.9800, 329.0100, 331.5600, 333.5600, 336.1000, 338.0800, 340.6000, 342.5700, 345.0800, 347.0200, 349.5200, 351.4400, 353.9300, 355.8300, 358.3200, 360.2000, 362.6700, 364.5300, 367.0000, 371.3000 };\nstd::vector<T> time_0( 151 );\ncopy( time_0_c, time_0_c+151, time_0.begin() );\nT dv_0_c[] = { 0.0082, 0.0112, 0.0149, 0.0198, 0.0248, 0.0324, 0.0420, 0.0549, 0.0719, 0.0963, 0.1291, 0.1710, 0.2314, 0.3227, 0.4809, 0.7084, 1.0220, 1.4580, 1.9520, 2.5410, 3.2230, 3.9990, 4.8520, 5.7320, 6.7270, 7.8350, 9.0250, 10.2670, 11.5780, 12.9440, 14.3770, 15.8560, 17.3310, 18.8850, 20.5750, 22.3200, 22.3030, 23.4600, 24.0600, 25.2720, 25.8530, 27.1100, 27.6580, 28.9240, 29.5110, 30.7100, 31.3500, 32.5200, 33.2300, 34.3300, 35.0600, 36.1700, 36.8400, 38.0100, 38.6700, 39.8700, 40.0300, 40.5000, 41.3700, 41.6700, 42.3100, 42.7300, 43.4600, 44.1400, 44.5500, 45.2200, 45.9200, 46.3000, 47.0000, 47.6800, 48.0600, 48.7400, 49.4100, 49.7600, 50.4300, 51.1100, 51.5000, 52.1200, 52.7600, 53.1800, 53.7800, 54.4600, 54.8300, 55.4000, 56.4300, 57.0300, 58.0000, 58.6100, 59.5800, 60.1100, 61.1000, 61.6500, 62.5900, 63.1200, 64.0300, 64.6200, 65.4900, 66.0300, 66.8900, 67.4200, 68.2300, 68.7700, 69.5900, 70.1100, 70.8600, 71.4300, 72.1600, 72.7000, 73.4000, 73.9300, 74.6000, 75.1600, 75.8200, 76.3400, 76.9800, 77.4800, 78.0800, 78.6000, 79.1700, 79.6200, 79.8800, 80.1900, 80.6600, 81.2200, 81.6600, 82.1600, 82.5900, 83.1400, 83.5000, 84.0000, 84.4000, 84.8900, 85.2600, 85.7400, 86.0700, 86.5400, 86.8900, 87.3200, 87.6500, 88.1000, 88.4300, 88.8300, 89.1200, 89.5400, 89.8500, 90.2500, 90.5500, 90.9300, 91.2000, 91.5500, 92.2000 };\nstd::vector<T> dv_0( 151 );\ncopy( dv_0_c, dv_0_c+151, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 151 );\ncopy( mdv_0_c, mdv_0_c+151, mdv_0.begin() );\ndata[0] = new IndData<T>( 151, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000027533\010051247611\0011567\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 151;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 5;\n\ndouble c_thetaIn[nTheta] = { 1.5, -0.15, 0.0025, -0.0015, 0.00002 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 15, -0.015, 0.025, -0.00015, 0.0002 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 0.15, -1.5, 0.00025, -0.015, 0.000002 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.0082, 0.0112, 0.0149, 0.0198, 0.0248, 0.0324, 0.042, 0.0549, 0.0719, 0.0963, 0.1291, 0.171, 0.2314, 0.3227, 0.4809, 0.7084, 1.022, 1.458, 1.952, 2.541, 3.223, 3.999, 4.852, 5.732, 6.727, 7.835, 9.025, 10.267, 11.578, 12.944, 14.377, 15.856, 17.331, 18.885, 20.575, 22.32, 22.303, 23.46, 24.06, 25.272, 25.853, 27.11, 27.658, 28.924, 29.511, 30.71, 31.35, 32.52, 33.23, 34.33, 35.06, 36.17, 36.84, 38.01, 38.67, 39.87, 40.03, 40.5, 41.37, 41.67, 42.31, 42.73, 43.46, 44.14, 44.55, 45.22, 45.92, 46.3, 47, 47.68, 48.06, 48.74, 49.41, 49.76, 50.43, 51.11, 51.5, 52.12, 52.76, 53.18, 53.78, 54.46, 54.83, 55.4, 56.43, 57.03, 58, 58.61, 59.58, 60.11, 61.1, 61.65, 62.59, 63.12, 64.03, 64.62, 65.49, 66.03, 66.89, 67.42, 68.23, 68.77, 69.59, 70.11, 70.86, 71.43, 72.16, 72.7, 73.4, 73.93, 74.6, 75.16, 75.82, 76.34, 76.98, 77.48, 78.08, 78.6, 79.17, 79.62, 79.88, 80.19, 80.66, 81.22, 81.66, 82.16, 82.59, 83.14, 83.5, 84, 84.4, 84.89, 85.26, 85.74, 86.07, 86.54, 86.89, 87.32, 87.65, 88.1, 88.43, 88.83, 89.12, 89.54, 89.85, 90.25, 90.55, 90.93, 91.2, 91.55, 92.2 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247611\0013073\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003040\010051247611\0011230\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 5 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247611\0010716\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000013640\010051247611\0010625\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 5 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nb3 = theta[ ( 3 ) - 1 ];\nb4 = theta[ ( 4 ) - 1 ];\nb5 = theta[ ( 5 ) - 1 ];\nx = time;\nf = ( b1 + b2 * x + b3 * pow( x, 2 ) ) / ( 1 + b4 * x + b5 * pow( x, 2 ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247611\0012532\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000004264\010051247611\0011606\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>KIRBY2_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.15</value>\n                  <value fixed=\"no\">-1.5</value>\n                  <value fixed=\"no\">0.00025</value>\n                  <value fixed=\"no\">-0.015</value>\n                  <value fixed=\"no\">0.000002</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">1.5</value>\n                  <value fixed=\"no\">-0.15</value>\n                  <value fixed=\"no\">0.0025</value>\n                  <value fixed=\"no\">-0.0015</value>\n                  <value fixed=\"no\">0.00002</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">15</value>\n                  <value fixed=\"no\">-0.015</value>\n                  <value fixed=\"no\">0.025</value>\n                  <value fixed=\"no\">-0.00015</value>\n                  <value fixed=\"no\">0.0002</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nx = TIME\nF=(b1 + b2*x + b3*x**2) /(1 + b4*x + b5*x**2)\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"kirby2_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (9,3,'MGH17_1',6,'1',6,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MGH17_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.02</value>\n                  <value fixed=\"no\">0.1</value>\n                  <value fixed=\"no\">-1000</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">0.2</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">50</value>\n                  <value fixed=\"no\">150</value>\n                  <value fixed=\"no\">-100</value>\n                  <value fixed=\"no\">1</value>\n                  <value fixed=\"no\">2</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">500</value>\n                  <value fixed=\"no\">1500</value>\n                  <value fixed=\"no\">0</value>\n                  <value fixed=\"no\">10</value>\n                  <value fixed=\"no\">20</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\r\nb2 = THETA(2)\r\r\nb3 = THETA(3)\r\r\nb4 = THETA(4)\r\r\nb5 = THETA(5)\r\r\nx = TIME\r\r\nF = b1 + b2*exp(-x*b4) + b3*exp(-x*b5)\r\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"mgh17_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"DV\"/>\n            <y label=\"PRED\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1082480261,1084575627,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000007215\010051247612\0011211\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"34\">\n      <description>mgh17.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>0.00E+00</value>\n         <value>8.44E-01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.00E+01</value>\n         <value>9.08E-01</value>\n      </row>\n      <row position=\"4\">\n         <value>2.00E+01</value>\n         <value>9.32E-01</value>\n      </row>\n      <row position=\"5\">\n         <value>3.00E+01</value>\n         <value>9.36E-01</value>\n      </row>\n      <row position=\"6\">\n         <value>4.00E+01</value>\n         <value>9.25E-01</value>\n      </row>\n      <row position=\"7\">\n         <value>5.00E+01</value>\n         <value>9.08E-01</value>\n      </row>\n      <row position=\"8\">\n         <value>6.00E+01</value>\n         <value>8.81E-01</value>\n      </row>\n      <row position=\"9\">\n         <value>7.00E+01</value>\n         <value>8.50E-01</value>\n      </row>\n      <row position=\"10\">\n         <value>8.00E+01</value>\n         <value>8.18E-01</value>\n      </row>\n      <row position=\"11\">\n         <value>9.00E+01</value>\n         <value>7.84E-01</value>\n      </row>\n      <row position=\"12\">\n         <value>1.00E+02</value>\n         <value>7.51E-01</value>\n      </row>\n      <row position=\"13\">\n         <value>1.10E+02</value>\n         <value>7.18E-01</value>\n      </row>\n      <row position=\"14\">\n         <value>1.20E+02</value>\n         <value>6.85E-01</value>\n      </row>\n      <row position=\"15\">\n         <value>1.30E+02</value>\n         <value>6.58E-01</value>\n      </row>\n      <row position=\"16\">\n         <value>1.40E+02</value>\n         <value>6.28E-01</value>\n      </row>\n      <row position=\"17\">\n         <value>1.50E+02</value>\n         <value>6.03E-01</value>\n      </row>\n      <row position=\"18\">\n         <value>1.60E+02</value>\n         <value>5.80E-01</value>\n      </row>\n      <row position=\"19\">\n         <value>1.70E+02</value>\n         <value>5.58E-01</value>\n      </row>\n      <row position=\"20\">\n         <value>1.80E+02</value>\n         <value>5.38E-01</value>\n      </row>\n      <row position=\"21\">\n         <value>1.90E+02</value>\n         <value>5.22E-01</value>\n      </row>\n      <row position=\"22\">\n         <value>2.00E+02</value>\n         <value>5.06E-01</value>\n      </row>\n      <row position=\"23\">\n         <value>2.10E+02</value>\n         <value>4.90E-01</value>\n      </row>\n      <row position=\"24\">\n         <value>2.20E+02</value>\n         <value>4.78E-01</value>\n      </row>\n      <row position=\"25\">\n         <value>2.30E+02</value>\n         <value>4.67E-01</value>\n      </row>\n      <row position=\"26\">\n         <value>2.40E+02</value>\n         <value>4.57E-01</value>\n      </row>\n      <row position=\"27\">\n         <value>2.50E+02</value>\n         <value>4.48E-01</value>\n      </row>\n      <row position=\"28\">\n         <value>2.60E+02</value>\n         <value>4.38E-01</value>\n      </row>\n      <row position=\"29\">\n         <value>2.70E+02</value>\n         <value>4.31E-01</value>\n      </row>\n      <row position=\"30\">\n         <value>2.80E+02</value>\n         <value>4.24E-01</value>\n      </row>\n      <row position=\"31\">\n         <value>2.90E+02</value>\n         <value>4.20E-01</value>\n      </row>\n      <row position=\"32\">\n         <value>3.00E+02</value>\n         <value>4.14E-01</value>\n      </row>\n      <row position=\"33\">\n         <value>3.10E+02</value>\n         <value>4.11E-01</value>\n      </row>\n      <row position=\"34\">\n         <value>3.20E+02</value>\n         <value>4.06E-01</value>\n      </row>\n   </table>\n</spkdata>\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000004166\010051247613\0011265\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 33\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 33 );\ncopy( id_0_c, id_0_c+33, id_0.begin() );\nT time_0_c[] = { 0.00E+00, 1.00E+01, 2.00E+01, 3.00E+01, 4.00E+01, 5.00E+01, 6.00E+01, 7.00E+01, 8.00E+01, 9.00E+01, 1.00E+02, 1.10E+02, 1.20E+02, 1.30E+02, 1.40E+02, 1.50E+02, 1.60E+02, 1.70E+02, 1.80E+02, 1.90E+02, 2.00E+02, 2.10E+02, 2.20E+02, 2.30E+02, 2.40E+02, 2.50E+02, 2.60E+02, 2.70E+02, 2.80E+02, 2.90E+02, 3.00E+02, 3.10E+02, 3.20E+02 };\nstd::vector<T> time_0( 33 );\ncopy( time_0_c, time_0_c+33, time_0.begin() );\nT dv_0_c[] = { 8.44E-01, 9.08E-01, 9.32E-01, 9.36E-01, 9.25E-01, 9.08E-01, 8.81E-01, 8.50E-01, 8.18E-01, 7.84E-01, 7.51E-01, 7.18E-01, 6.85E-01, 6.58E-01, 6.28E-01, 6.03E-01, 5.80E-01, 5.58E-01, 5.38E-01, 5.22E-01, 5.06E-01, 4.90E-01, 4.78E-01, 4.67E-01, 4.57E-01, 4.48E-01, 4.38E-01, 4.31E-01, 4.24E-01, 4.20E-01, 4.14E-01, 4.11E-01, 4.06E-01 };\nstd::vector<T> dv_0( 33 );\ncopy( dv_0_c, dv_0_c+33, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 33 );\ncopy( mdv_0_c, mdv_0_c+33, mdv_0.begin() );\ndata[0] = new IndData<T>( 33, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000025756\010051247613\0011576\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 33;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 5;\n\ndouble c_thetaIn[nTheta] = { 50, 150, -100, 1, 2 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 500, 1500, 0, 10, 20 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 0.02, 0.1, -1000, 0.001, 0.2 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.85, 0.818, 0.784, 0.751, 0.718, 0.685, 0.658, 0.628, 0.603, 0.58, 0.558, 0.538, 0.522, 0.506, 0.49, 0.478, 0.467, 0.457, 0.448, 0.438, 0.431, 0.424, 0.42, 0.414, 0.411, 0.406 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247613\0013075\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003040\010051247613\0011232\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 5 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000001\010051247612\0010717\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000013617\010051247613\0010633\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 5 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\n\nb2 = theta[ ( 2 ) - 1 ];\n\nb3 = theta[ ( 3 ) - 1 ];\n\nb4 = theta[ ( 4 ) - 1 ];\n\nb5 = theta[ ( 5 ) - 1 ];\n\nx = time;\n\nf = b1 + b2 * exp( -x * b4 ) + b3 * exp( -x * b5 );\n\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247612\0012533\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000004626\010051247612\0011611\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MGH17_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.02</value>\n                  <value fixed=\"no\">0.1</value>\n                  <value fixed=\"no\">-1000</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">0.2</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">50</value>\n                  <value fixed=\"no\">150</value>\n                  <value fixed=\"no\">-100</value>\n                  <value fixed=\"no\">1</value>\n                  <value fixed=\"no\">2</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">500</value>\n                  <value fixed=\"no\">1500</value>\n                  <value fixed=\"no\">0</value>\n                  <value fixed=\"no\">10</value>\n                  <value fixed=\"no\">20</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\r\nb2 = THETA(2)\r\r\nb3 = THETA(3)\r\r\nb4 = THETA(4)\r\r\nb5 = THETA(5)\r\r\nx = TIME\r\r\nF = b1 + b2*exp(-x*b4) + b3*exp(-x*b5)\r\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"mgh17_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"DV\"/>\n            <y label=\"PRED\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (10,3,'MGH17_2',6,'1',7,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MGH17_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.05</value>\n                  <value fixed=\"no\">0.15</value>\n                  <value fixed=\"no\">-10</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">0.002</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">0.5</value>\n                  <value fixed=\"no\">1.5</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.01</value>\n                  <value fixed=\"no\">0.02</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5</value>\n                  <value fixed=\"no\">15</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.1</value>\n                  <value fixed=\"no\">0.2</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nb3 = THETA(3)\r\nb4 = THETA(4)\r\nb5 = THETA(5)\r\nx = TIME\r\nF = b1 + b2*exp(-x*b4) + b3*exp(-x*b5)\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"mgh17_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"TIME\"/>\n            <y label=\"DV\"/>\n            <y label=\"PRED\"/>\n         </scatterplot>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"PRED\"/>\n            <y label=\"DV\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1082480646,1084575629,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000007215\010051247614\0011213\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"34\">\n      <description>mgh17.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>0.00E+00</value>\n         <value>8.44E-01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.00E+01</value>\n         <value>9.08E-01</value>\n      </row>\n      <row position=\"4\">\n         <value>2.00E+01</value>\n         <value>9.32E-01</value>\n      </row>\n      <row position=\"5\">\n         <value>3.00E+01</value>\n         <value>9.36E-01</value>\n      </row>\n      <row position=\"6\">\n         <value>4.00E+01</value>\n         <value>9.25E-01</value>\n      </row>\n      <row position=\"7\">\n         <value>5.00E+01</value>\n         <value>9.08E-01</value>\n      </row>\n      <row position=\"8\">\n         <value>6.00E+01</value>\n         <value>8.81E-01</value>\n      </row>\n      <row position=\"9\">\n         <value>7.00E+01</value>\n         <value>8.50E-01</value>\n      </row>\n      <row position=\"10\">\n         <value>8.00E+01</value>\n         <value>8.18E-01</value>\n      </row>\n      <row position=\"11\">\n         <value>9.00E+01</value>\n         <value>7.84E-01</value>\n      </row>\n      <row position=\"12\">\n         <value>1.00E+02</value>\n         <value>7.51E-01</value>\n      </row>\n      <row position=\"13\">\n         <value>1.10E+02</value>\n         <value>7.18E-01</value>\n      </row>\n      <row position=\"14\">\n         <value>1.20E+02</value>\n         <value>6.85E-01</value>\n      </row>\n      <row position=\"15\">\n         <value>1.30E+02</value>\n         <value>6.58E-01</value>\n      </row>\n      <row position=\"16\">\n         <value>1.40E+02</value>\n         <value>6.28E-01</value>\n      </row>\n      <row position=\"17\">\n         <value>1.50E+02</value>\n         <value>6.03E-01</value>\n      </row>\n      <row position=\"18\">\n         <value>1.60E+02</value>\n         <value>5.80E-01</value>\n      </row>\n      <row position=\"19\">\n         <value>1.70E+02</value>\n         <value>5.58E-01</value>\n      </row>\n      <row position=\"20\">\n         <value>1.80E+02</value>\n         <value>5.38E-01</value>\n      </row>\n      <row position=\"21\">\n         <value>1.90E+02</value>\n         <value>5.22E-01</value>\n      </row>\n      <row position=\"22\">\n         <value>2.00E+02</value>\n         <value>5.06E-01</value>\n      </row>\n      <row position=\"23\">\n         <value>2.10E+02</value>\n         <value>4.90E-01</value>\n      </row>\n      <row position=\"24\">\n         <value>2.20E+02</value>\n         <value>4.78E-01</value>\n      </row>\n      <row position=\"25\">\n         <value>2.30E+02</value>\n         <value>4.67E-01</value>\n      </row>\n      <row position=\"26\">\n         <value>2.40E+02</value>\n         <value>4.57E-01</value>\n      </row>\n      <row position=\"27\">\n         <value>2.50E+02</value>\n         <value>4.48E-01</value>\n      </row>\n      <row position=\"28\">\n         <value>2.60E+02</value>\n         <value>4.38E-01</value>\n      </row>\n      <row position=\"29\">\n         <value>2.70E+02</value>\n         <value>4.31E-01</value>\n      </row>\n      <row position=\"30\">\n         <value>2.80E+02</value>\n         <value>4.24E-01</value>\n      </row>\n      <row position=\"31\">\n         <value>2.90E+02</value>\n         <value>4.20E-01</value>\n      </row>\n      <row position=\"32\">\n         <value>3.00E+02</value>\n         <value>4.14E-01</value>\n      </row>\n      <row position=\"33\">\n         <value>3.10E+02</value>\n         <value>4.11E-01</value>\n      </row>\n      <row position=\"34\">\n         <value>3.20E+02</value>\n         <value>4.06E-01</value>\n      </row>\n   </table>\n</spkdata>\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000004166\010051247614\0011266\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 33\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 33 );\ncopy( id_0_c, id_0_c+33, id_0.begin() );\nT time_0_c[] = { 0.00E+00, 1.00E+01, 2.00E+01, 3.00E+01, 4.00E+01, 5.00E+01, 6.00E+01, 7.00E+01, 8.00E+01, 9.00E+01, 1.00E+02, 1.10E+02, 1.20E+02, 1.30E+02, 1.40E+02, 1.50E+02, 1.60E+02, 1.70E+02, 1.80E+02, 1.90E+02, 2.00E+02, 2.10E+02, 2.20E+02, 2.30E+02, 2.40E+02, 2.50E+02, 2.60E+02, 2.70E+02, 2.80E+02, 2.90E+02, 3.00E+02, 3.10E+02, 3.20E+02 };\nstd::vector<T> time_0( 33 );\ncopy( time_0_c, time_0_c+33, time_0.begin() );\nT dv_0_c[] = { 8.44E-01, 9.08E-01, 9.32E-01, 9.36E-01, 9.25E-01, 9.08E-01, 8.81E-01, 8.50E-01, 8.18E-01, 7.84E-01, 7.51E-01, 7.18E-01, 6.85E-01, 6.58E-01, 6.28E-01, 6.03E-01, 5.80E-01, 5.58E-01, 5.38E-01, 5.22E-01, 5.06E-01, 4.90E-01, 4.78E-01, 4.67E-01, 4.57E-01, 4.48E-01, 4.38E-01, 4.31E-01, 4.24E-01, 4.20E-01, 4.14E-01, 4.11E-01, 4.06E-01 };\nstd::vector<T> dv_0( 33 );\ncopy( dv_0_c, dv_0_c+33, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 33 );\ncopy( mdv_0_c, mdv_0_c+33, mdv_0.begin() );\ndata[0] = new IndData<T>( 33, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000025765\010051247614\0011577\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 33;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 5;\n\ndouble c_thetaIn[nTheta] = { 0.5, 1.5, -1, 0.01, 0.02 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 5, 15, -0.1, 0.1, 0.2 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 0.05, 0.15, -10, 0.001, 0.002 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.85, 0.818, 0.784, 0.751, 0.718, 0.685, 0.658, 0.628, 0.603, 0.58, 0.558, 0.538, 0.522, 0.506, 0.49, 0.478, 0.467, 0.457, 0.448, 0.438, 0.431, 0.424, 0.42, 0.414, 0.411, 0.406 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"b4\\\"/>\" << endl;\noResults << \"<label name=\\\"b5\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b4[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b5[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][3] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][4] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247614\0013076\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003040\010051247614\0011233\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nstd::vector<T> b4;\nstd::vector<T> b5;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\nb4( nIn ),\nb5( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 5 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000002\010051247614\0010722\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\010\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Pred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000013610\010051247614\0010625\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value b4;\nmutable Value b5;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 5 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator theta4 = spk_indepVar.begin() + spk_thetaOffset + 3;\ntypename std::vector<Value>::const_iterator theta5 = spk_indepVar.begin() + spk_thetaOffset + 4;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nb3 = theta[ ( 3 ) - 1 ];\nb4 = theta[ ( 4 ) - 1 ];\nb5 = theta[ ( 5 ) - 1 ];\nx = time;\nf = b1 + b2 * exp( -x * b4 ) + b3 * exp( -x * b5 );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ntemp.data[ spk_i ]->b4[ spk_j ] = b4;\ntemp.data[ spk_i ]->b5[ spk_j ] = b5;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->b4 = temp.data[ i ]->b4;\n    perm->data[ i ]->b5 = temp.data[ i ]->b5;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247614\0012535\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000005166\010051247614\0011613\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MGH17_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"5\">\n               <low>\n                  <value fixed=\"no\">0.05</value>\n                  <value fixed=\"no\">0.15</value>\n                  <value fixed=\"no\">-10</value>\n                  <value fixed=\"no\">0.001</value>\n                  <value fixed=\"no\">0.002</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">0.5</value>\n                  <value fixed=\"no\">1.5</value>\n                  <value fixed=\"no\">-1</value>\n                  <value fixed=\"no\">0.01</value>\n                  <value fixed=\"no\">0.02</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5</value>\n                  <value fixed=\"no\">15</value>\n                  <value fixed=\"no\">-0.1</value>\n                  <value fixed=\"no\">0.1</value>\n                  <value fixed=\"no\">0.2</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nb3 = THETA(3)\r\nb4 = THETA(4)\r\nb5 = THETA(5)\r\nx = TIME\r\nF = b1 + b2*exp(-x*b4) + b3*exp(-x*b5)\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"mgh17_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"TIME\"/>\n            <y label=\"DV\"/>\n            <y label=\"PRED\"/>\n         </scatterplot>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"PRED\"/>\n            <y label=\"DV\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (11,3,'MISRA1C_1',7,'1',8,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1C_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">50</value>\n                  <value fixed=\"no\">0.00001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">500</value>\n                  <value fixed=\"no\">0.0001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5000</value>\n                  <value fixed=\"no\">0.001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1 * (1-(1+2*b2*x)**(-.5))  \r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"MISRA1C_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1082480956,1084575629,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000003304\010051247615\0011207\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"15\">\n      <description>misra1c.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>7.76E+01</value>\n         <value>1.01E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.15E+02</value>\n         <value>1.47E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.41E+02</value>\n         <value>1.79E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.91E+02</value>\n         <value>2.39E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>2.40E+02</value>\n         <value>2.96E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>2.89E+02</value>\n         <value>3.52E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>3.33E+02</value>\n         <value>4.00E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>3.78E+02</value>\n         <value>4.48E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>4.35E+02</value>\n         <value>5.08E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>4.77E+02</value>\n         <value>5.51E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>5.37E+02</value>\n         <value>6.10E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>5.93E+02</value>\n         <value>6.64E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>6.89E+02</value>\n         <value>7.55E+01</value>\n      </row>\n      <row position=\"15\">\n         <value>7.60E+02</value>\n         <value>8.18E+01</value>\n      </row>\n   </table>\n</spkdata>\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003142\010051247615\0011260\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 14\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 14 );\ncopy( id_0_c, id_0_c+14, id_0.begin() );\nT time_0_c[] = { 7.76E+01, 1.15E+02, 1.41E+02, 1.91E+02, 2.40E+02, 2.89E+02, 3.33E+02, 3.78E+02, 4.35E+02, 4.77E+02, 5.37E+02, 5.93E+02, 6.89E+02, 7.60E+02 };\nstd::vector<T> time_0( 14 );\ncopy( time_0_c, time_0_c+14, time_0.begin() );\nT dv_0_c[] = { 1.01E+01, 1.47E+01, 1.79E+01, 2.39E+01, 2.96E+01, 3.52E+01, 4.00E+01, 4.48E+01, 5.08E+01, 5.51E+01, 6.10E+01, 6.64E+01, 7.55E+01, 8.18E+01 };\nstd::vector<T> dv_0( 14 );\ncopy( dv_0_c, dv_0_c+14, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 14 );\ncopy( mdv_0_c, mdv_0_c+14, mdv_0.begin() );\ndata[0] = new IndData<T>( 14, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000024377\010051247615\0011576\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 14;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 2;\n\ndouble c_thetaIn[nTheta] = { 500, 0.0001 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 5000, 0.001 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 50, 0.00001 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 10.1, 14.7, 17.9, 23.9, 29.6, 35.2, 40, 44.8, 50.8, 55.1, 61, 66.4, 75.5, 81.8 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247615\0013077\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000002706\010051247615\0011244\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 2 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000002\010051247615\0010723\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012351\010051247615\0010627\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 2 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nx = time;\nf = b1 * ( 1 - pow( ( 1 + 2 * b2 * x ), ( -.5 ) ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247615\0012536\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003371\010051247615\0011610\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1C_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">50</value>\n                  <value fixed=\"no\">0.00001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">500</value>\n                  <value fixed=\"no\">0.0001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5000</value>\n                  <value fixed=\"no\">0.001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1 * (1-(1+2*b2*x)**(-.5))  \r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"MISRA1C_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (12,3,'MISRA1C_2',7,'1',9,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1C_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">60</value>\n                  <value fixed=\"no\">0.00002</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">600</value>\n                  <value fixed=\"no\">0.0002</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">6000</value>\n                  <value fixed=\"no\">0.002</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1 * (1-(1+2*b2*x)**(-.5))  \r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"misra1c_2.out\">\n            <column appearance_order=\"1\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1082481296,1084575630,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000003304\010051247616\0011210\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"15\">\n      <description>misra1c.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>7.76E+01</value>\n         <value>1.01E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.15E+02</value>\n         <value>1.47E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.41E+02</value>\n         <value>1.79E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.91E+02</value>\n         <value>2.39E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>2.40E+02</value>\n         <value>2.96E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>2.89E+02</value>\n         <value>3.52E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>3.33E+02</value>\n         <value>4.00E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>3.78E+02</value>\n         <value>4.48E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>4.35E+02</value>\n         <value>5.08E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>4.77E+02</value>\n         <value>5.51E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>5.37E+02</value>\n         <value>6.10E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>5.93E+02</value>\n         <value>6.64E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>6.89E+02</value>\n         <value>7.55E+01</value>\n      </row>\n      <row position=\"15\">\n         <value>7.60E+02</value>\n         <value>8.18E+01</value>\n      </row>\n   </table>\n</spkdata>\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003142\010051247616\0011261\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 14\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 14 );\ncopy( id_0_c, id_0_c+14, id_0.begin() );\nT time_0_c[] = { 7.76E+01, 1.15E+02, 1.41E+02, 1.91E+02, 2.40E+02, 2.89E+02, 3.33E+02, 3.78E+02, 4.35E+02, 4.77E+02, 5.37E+02, 5.93E+02, 6.89E+02, 7.60E+02 };\nstd::vector<T> time_0( 14 );\ncopy( time_0_c, time_0_c+14, time_0.begin() );\nT dv_0_c[] = { 1.01E+01, 1.47E+01, 1.79E+01, 2.39E+01, 2.96E+01, 3.52E+01, 4.00E+01, 4.48E+01, 5.08E+01, 5.51E+01, 6.10E+01, 6.64E+01, 7.55E+01, 8.18E+01 };\nstd::vector<T> dv_0( 14 );\ncopy( dv_0_c, dv_0_c+14, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 14 );\ncopy( mdv_0_c, mdv_0_c+14, mdv_0.begin() );\ndata[0] = new IndData<T>( 14, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000024377\010051247616\0011577\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 14;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 2;\n\ndouble c_thetaIn[nTheta] = { 600, 0.0002 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 6000, 0.002 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 60, 0.00002 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 10.1, 14.7, 17.9, 23.9, 29.6, 35.2, 40, 44.8, 50.8, 55.1, 61, 66.4, 75.5, 81.8 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247616\0013100\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000002706\010051247616\0011245\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 2 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000002\010051247616\0010724\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012351\010051247616\0010630\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 2 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nx = time;\nf = b1 * ( 1 - pow( ( 1 + 2 * b2 * x ), ( -.5 ) ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247616\0012537\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003371\010051247616\0011611\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1C_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">60</value>\n                  <value fixed=\"no\">0.00002</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">600</value>\n                  <value fixed=\"no\">0.0002</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">6000</value>\n                  <value fixed=\"no\">0.002</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1 * (1-(1+2*b2*x)**(-.5))  \r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"misra1c_2.out\">\n            <column appearance_order=\"1\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (13,3,'MISRA1D_1',8,'1',10,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1D_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">50</value>\n                  <value fixed=\"no\">0.00001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">500</value>\n                  <value fixed=\"no\">0.0001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5000</value>\n                  <value fixed=\"no\">0.001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1*b2*x*((1+b2*x)**(-1))\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"misra1d_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1082481549,1084575631,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000003133\010051247617\0011211\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"14\">\n      <description>misra1d.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>7.76E+01</value>\n         <value>1.01E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.15E+02</value>\n         <value>1.47E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.41E+02</value>\n         <value>1.79E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.91E+02</value>\n         <value>2.39E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>2.40E+02</value>\n         <value>2.96E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>2.89E+02</value>\n         <value>3.52E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>3.33E+02</value>\n         <value>4.00E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>3.78E+02</value>\n         <value>4.48E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>4.35E+02</value>\n         <value>5.08E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>4.77E+02</value>\n         <value>5.51E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>5.37E+02</value>\n         <value>6.10E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>5.93E+02</value>\n         <value>6.64E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>6.89E+02</value>\n         <value>7.55E+01</value>\n      </row>\n   </table>\n</spkdata>\r\nataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003106\010051247617\0011262\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 13\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 13 );\ncopy( id_0_c, id_0_c+13, id_0.begin() );\nT time_0_c[] = { 7.76E+01, 1.15E+02, 1.41E+02, 1.91E+02, 2.40E+02, 2.89E+02, 3.33E+02, 3.78E+02, 4.35E+02, 4.77E+02, 5.37E+02, 5.93E+02, 6.89E+02 };\nstd::vector<T> time_0( 13 );\ncopy( time_0_c, time_0_c+13, time_0.begin() );\nT dv_0_c[] = { 1.01E+01, 1.47E+01, 1.79E+01, 2.39E+01, 2.96E+01, 3.52E+01, 4.00E+01, 4.48E+01, 5.08E+01, 5.51E+01, 6.10E+01, 6.64E+01, 7.55E+01 };\nstd::vector<T> dv_0( 13 );\ncopy( dv_0_c, dv_0_c+13, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 13 );\ncopy( mdv_0_c, mdv_0_c+13, mdv_0.begin() );\ndata[0] = new IndData<T>( 13, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000024371\010051247617\0011572\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 13;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 2;\n\ndouble c_thetaIn[nTheta] = { 500, 0.0001 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 5000, 0.001 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 50, 0.00001 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 10.1, 14.7, 17.9, 23.9, 29.6, 35.2, 40, 44.8, 50.8, 55.1, 61, 66.4, 75.5 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247617\0013101\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000002706\010051247617\0011246\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 2 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000002\010051247617\0010725\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012351\010051247617\0010631\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 2 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nx = time;\nf = b1 * b2 * x * ( pow( ( 1 + b2 * x ), ( -1 ) ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247617\0012540\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003365\010051247617\0011615\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1D_1</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">50</value>\n                  <value fixed=\"no\">0.00001</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">500</value>\n                  <value fixed=\"no\">0.0001</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">5000</value>\n                  <value fixed=\"no\">0.001</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1*b2*x*((1+b2*x)**(-1))\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"misra1d_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (14,3,'MISRA1D_2',8,'1',11,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1D_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">45</value>\n                  <value fixed=\"no\">0.00003</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">450</value>\n                  <value fixed=\"no\">0.0003</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">4500</value>\n                  <value fixed=\"no\">0.003</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1*b2*x*((1+b2*x)**(-1))\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"misra1d_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1082481737,1084575633,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000003133\010051247620\0011203\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"14\">\n      <description>misra1d.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>7.76E+01</value>\n         <value>1.01E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.15E+02</value>\n         <value>1.47E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.41E+02</value>\n         <value>1.79E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.91E+02</value>\n         <value>2.39E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>2.40E+02</value>\n         <value>2.96E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>2.89E+02</value>\n         <value>3.52E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>3.33E+02</value>\n         <value>4.00E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>3.78E+02</value>\n         <value>4.48E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>4.35E+02</value>\n         <value>5.08E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>4.77E+02</value>\n         <value>5.51E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>5.37E+02</value>\n         <value>6.10E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>5.93E+02</value>\n         <value>6.64E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>6.89E+02</value>\n         <value>7.55E+01</value>\n      </row>\n   </table>\n</spkdata>\r\nataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003106\010051247620\0011254\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 13\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 13 );\ncopy( id_0_c, id_0_c+13, id_0.begin() );\nT time_0_c[] = { 7.76E+01, 1.15E+02, 1.41E+02, 1.91E+02, 2.40E+02, 2.89E+02, 3.33E+02, 3.78E+02, 4.35E+02, 4.77E+02, 5.37E+02, 5.93E+02, 6.89E+02 };\nstd::vector<T> time_0( 13 );\ncopy( time_0_c, time_0_c+13, time_0.begin() );\nT dv_0_c[] = { 1.01E+01, 1.47E+01, 1.79E+01, 2.39E+01, 2.96E+01, 3.52E+01, 4.00E+01, 4.48E+01, 5.08E+01, 5.51E+01, 6.10E+01, 6.64E+01, 7.55E+01 };\nstd::vector<T> dv_0( 13 );\ncopy( dv_0_c, dv_0_c+13, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 13 );\ncopy( mdv_0_c, mdv_0_c+13, mdv_0.begin() );\ndata[0] = new IndData<T>( 13, id_0, time_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000024371\010051247620\0011564\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 13;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 2;\n\ndouble c_thetaIn[nTheta] = { 450, 0.0003 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 4500, 0.003 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 45, 0.00003 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 10.1, 14.7, 17.9, 23.9, 29.6, 35.2, 40, 44.8, 50.8, 55.1, 61, 66.4, 75.5 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247620\0013073\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000002706\010051247620\0011240\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 2 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000002\010051247620\0010717\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\014\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Pred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012351\010051247620\0010623\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 2 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\nb2 = theta[ ( 2 ) - 1 ];\nx = time;\nf = b1 * b2 * x * ( pow( ( 1 + b2 * x ), ( -1 ) ) );\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247620\0012532\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003365\010051247620\0011607\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>MISRA1D_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">45</value>\n                  <value fixed=\"no\">0.00003</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">450</value>\n                  <value fixed=\"no\">0.0003</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">4500</value>\n                  <value fixed=\"no\">0.003</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\nb2 = THETA(2)\r\nx = TIME\r\nF = b1*b2*x*((1+b2*x)**(-1))\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"misra1d_2.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (15,3,'NELSON_2',9,'1',12,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>NELSON_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"x2\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"3\">\n               <low>\n                  <value fixed=\"no\">0.25</value>\n                  <value fixed=\"no\">0.0000000005</value>\n                  <value fixed=\"no\">-0.5</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">2.5</value>\n                  <value fixed=\"no\">0.000000005</value>\n                  <value fixed=\"no\">-0.05</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">25</value>\n                  <value fixed=\"no\">0.00000005</value>\n                  <value fixed=\"no\">-0.005</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\r\nb2 = THETA(2)\r\r\nb3 = THETA(3)\r\r\nx1 = TIME\r\r\nF = exp ( b1 - b2*x1 * exp (-b3 * x2 ) )\r\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"nelson_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1082482863,1084575633,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000043015\010051247621\0011207\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"3\" rows=\"129\">\n      <description>nelson.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">TIME</value>\n         <value type=\"string\">x2</value>\n         <value type=\"string\">DV</value>\n      </row>\n      <row position=\"2\">\n         <value>1.00001</value>\n         <value>1.80E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"3\">\n         <value>1.00002</value>\n         <value>1.80E+02</value>\n         <value>1.70E+01</value>\n      </row>\n      <row position=\"4\">\n         <value>1.00003</value>\n         <value>1.80E+02</value>\n         <value>1.55E+01</value>\n      </row>\n      <row position=\"5\">\n         <value>1.00004</value>\n         <value>1.80E+02</value>\n         <value>1.65E+01</value>\n      </row>\n      <row position=\"6\">\n         <value>1.00005</value>\n         <value>2.25E+02</value>\n         <value>1.55E+01</value>\n      </row>\n      <row position=\"7\">\n         <value>1.00006</value>\n         <value>2.25E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"8\">\n         <value>1.00007</value>\n         <value>2.25E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"9\">\n         <value>1.00008</value>\n         <value>2.25E+02</value>\n         <value>1.45E+01</value>\n      </row>\n      <row position=\"10\">\n         <value>1.00009</value>\n         <value>2.50E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"11\">\n         <value>1.00010</value>\n         <value>2.50E+02</value>\n         <value>1.45E+01</value>\n      </row>\n      <row position=\"12\">\n         <value>1.00011</value>\n         <value>2.50E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"13\">\n         <value>1.00012</value>\n         <value>2.50E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"14\">\n         <value>1.00013</value>\n         <value>2.75E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"15\">\n         <value>1.00014</value>\n         <value>2.75E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"16\">\n         <value>1.00015</value>\n         <value>2.75E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"17\">\n         <value>1.00016</value>\n         <value>2.75E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"18\">\n         <value>2.00001</value>\n         <value>1.80E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"19\">\n         <value>2.00002</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"20\">\n         <value>2.00003</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"21\">\n         <value>2.00004</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"22\">\n         <value>2.00005</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"23\">\n         <value>2.00006</value>\n         <value>2.25E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"24\">\n         <value>2.00007</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"25\">\n         <value>2.00008</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"26\">\n         <value>2.00009</value>\n         <value>2.50E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"27\">\n         <value>2.00010</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"28\">\n         <value>2.00011</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"29\">\n         <value>2.00012</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"30\">\n         <value>2.00013</value>\n         <value>2.75E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"31\">\n         <value>2.00014</value>\n         <value>2.75E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"32\">\n         <value>2.00015</value>\n         <value>2.75E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"33\">\n         <value>2.00016</value>\n         <value>2.75E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"34\">\n         <value>4.00001</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"35\">\n         <value>4.00002</value>\n         <value>1.80E+02</value>\n         <value>1.75E+01</value>\n      </row>\n      <row position=\"36\">\n         <value>4.00003</value>\n         <value>1.80E+02</value>\n         <value>1.75E+01</value>\n      </row>\n      <row position=\"37\">\n         <value>4.00004</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"38\">\n         <value>4.00005</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"39\">\n         <value>4.00006</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"40\">\n         <value>4.00007</value>\n         <value>2.25E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"41\">\n         <value>4.00008</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"42\">\n         <value>4.00009</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"43\">\n         <value>4.00010</value>\n         <value>2.50E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"44\">\n         <value>4.00011</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"45\">\n         <value>4.00012</value>\n         <value>2.50E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"46\">\n         <value>4.00013</value>\n         <value>2.75E+02</value>\n         <value>1.00E+01</value>\n      </row>\n      <row position=\"47\">\n         <value>4.00014</value>\n         <value>2.75E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"48\">\n         <value>4.00015</value>\n         <value>2.75E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"49\">\n         <value>4.00016</value>\n         <value>2.75E+02</value>\n         <value>9.50E+00</value>\n      </row>\n      <row position=\"50\">\n         <value>8.00001</value>\n         <value>1.80E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"51\">\n         <value>8.00002</value>\n         <value>1.80E+02</value>\n         <value>1.50E+01</value>\n      </row>\n      <row position=\"52\">\n         <value>8.00003</value>\n         <value>1.80E+02</value>\n         <value>1.55E+01</value>\n      </row>\n      <row position=\"53\">\n         <value>8.00004</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"54\">\n         <value>8.00005</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"55\">\n         <value>8.00006</value>\n         <value>2.25E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"56\">\n         <value>8.00007</value>\n         <value>2.25E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"57\">\n         <value>8.00008</value>\n         <value>2.25E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"58\">\n         <value>8.00009</value>\n         <value>2.50E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"59\">\n         <value>8.00010</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"60\">\n         <value>8.00011</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"61\">\n         <value>8.00012</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"62\">\n         <value>8.00013</value>\n         <value>2.75E+02</value>\n         <value>6.50E+00</value>\n      </row>\n      <row position=\"63\">\n         <value>8.00014</value>\n         <value>2.75E+02</value>\n         <value>5.50E+00</value>\n      </row>\n      <row position=\"64\">\n         <value>8.00015</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"65\">\n         <value>8.00016</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"66\">\n         <value>16.00001</value>\n         <value>1.80E+02</value>\n         <value>1.85E+01</value>\n      </row>\n      <row position=\"67\">\n         <value>16.00002</value>\n         <value>1.80E+02</value>\n         <value>1.70E+01</value>\n      </row>\n      <row position=\"68\">\n         <value>16.00003</value>\n         <value>1.80E+02</value>\n         <value>1.53E+01</value>\n      </row>\n      <row position=\"69\">\n         <value>16.00004</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"70\">\n         <value>16.00005</value>\n         <value>2.25E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"71\">\n         <value>16.00006</value>\n         <value>2.25E+02</value>\n         <value>1.40E+01</value>\n      </row>\n      <row position=\"72\">\n         <value>16.00007</value>\n         <value>2.25E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"73\">\n         <value>16.00008</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"74\">\n         <value>16.00009</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"75\">\n         <value>16.00010</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"76\">\n         <value>16.00011</value>\n         <value>2.50E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"77\">\n         <value>16.00012</value>\n         <value>2.50E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"78\">\n         <value>16.00013</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"79\">\n         <value>16.00014</value>\n         <value>2.75E+02</value>\n         <value>6.00E+00</value>\n      </row>\n      <row position=\"80\">\n         <value>16.00015</value>\n         <value>2.75E+02</value>\n         <value>5.00E+00</value>\n      </row>\n      <row position=\"81\">\n         <value>16.00016</value>\n         <value>2.75E+02</value>\n         <value>5.50E+00</value>\n      </row>\n      <row position=\"82\">\n         <value>32.00001</value>\n         <value>1.80E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"83\">\n         <value>32.00002</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"84\">\n         <value>32.00003</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"85\">\n         <value>32.00004</value>\n         <value>1.80E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"86\">\n         <value>32.00005</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"87\">\n         <value>32.00006</value>\n         <value>2.25E+02</value>\n         <value>9.50E+00</value>\n      </row>\n      <row position=\"88\">\n         <value>32.00007</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"89\">\n         <value>32.00008</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"90\">\n         <value>32.00009</value>\n         <value>2.50E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"91\">\n         <value>32.00010</value>\n         <value>2.50E+02</value>\n         <value>1.00E+01</value>\n      </row>\n      <row position=\"92\">\n         <value>32.00011</value>\n         <value>2.50E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"93\">\n         <value>32.00012</value>\n         <value>2.50E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"94\">\n         <value>32.00013</value>\n         <value>2.75E+02</value>\n         <value>2.70E+00</value>\n      </row>\n      <row position=\"95\">\n         <value>32.00014</value>\n         <value>2.75E+02</value>\n         <value>2.70E+00</value>\n      </row>\n      <row position=\"96\">\n         <value>32.00015</value>\n         <value>2.75E+02</value>\n         <value>2.50E+00</value>\n      </row>\n      <row position=\"97\">\n         <value>32.00016</value>\n         <value>2.75E+02</value>\n         <value>2.40E+00</value>\n      </row>\n      <row position=\"98\">\n         <value>48.00001</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"99\">\n         <value>48.00002</value>\n         <value>1.80E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"100\">\n         <value>48.00003</value>\n         <value>1.80E+02</value>\n         <value>1.65E+01</value>\n      </row>\n      <row position=\"101\">\n         <value>48.00004</value>\n         <value>1.80E+02</value>\n         <value>1.36E+01</value>\n      </row>\n      <row position=\"102\">\n         <value>48.00005</value>\n         <value>2.25E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"103\">\n         <value>48.00006</value>\n         <value>2.25E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"104\">\n         <value>48.00007</value>\n         <value>2.25E+02</value>\n         <value>1.35E+01</value>\n      </row>\n      <row position=\"105\">\n         <value>48.00008</value>\n         <value>2.25E+02</value>\n         <value>1.20E+01</value>\n      </row>\n      <row position=\"106\">\n         <value>48.00009</value>\n         <value>2.50E+02</value>\n         <value>7.00E+00</value>\n      </row>\n      <row position=\"107\">\n         <value>48.00010</value>\n         <value>2.50E+02</value>\n         <value>6.90E+00</value>\n      </row>\n      <row position=\"108\">\n         <value>48.00011</value>\n         <value>2.50E+02</value>\n         <value>8.80E+00</value>\n      </row>\n      <row position=\"109\">\n         <value>48.00012</value>\n         <value>2.50E+02</value>\n         <value>7.90E+00</value>\n      </row>\n      <row position=\"110\">\n         <value>48.00013</value>\n         <value>2.75E+02</value>\n         <value>1.20E+00</value>\n      </row>\n      <row position=\"111\">\n         <value>48.00014</value>\n         <value>2.75E+02</value>\n         <value>1.50E+00</value>\n      </row>\n      <row position=\"112\">\n         <value>48.00015</value>\n         <value>2.75E+02</value>\n         <value>1.00E+00</value>\n      </row>\n      <row position=\"113\">\n         <value>48.00016</value>\n         <value>2.75E+02</value>\n         <value>1.50E+00</value>\n      </row>\n      <row position=\"114\">\n         <value>64.00001</value>\n         <value>1.80E+02</value>\n         <value>1.30E+01</value>\n      </row>\n      <row position=\"115\">\n         <value>64.00002</value>\n         <value>1.80E+02</value>\n         <value>1.25E+01</value>\n      </row>\n      <row position=\"116\">\n         <value>64.00003</value>\n         <value>1.80E+02</value>\n         <value>1.65E+01</value>\n      </row>\n      <row position=\"117\">\n         <value>64.00004</value>\n         <value>1.80E+02</value>\n         <value>1.60E+01</value>\n      </row>\n      <row position=\"118\">\n         <value>64.00005</value>\n         <value>2.25E+02</value>\n         <value>1.10E+01</value>\n      </row>\n      <row position=\"119\">\n         <value>64.00006</value>\n         <value>2.25E+02</value>\n         <value>1.15E+01</value>\n      </row>\n      <row position=\"120\">\n         <value>64.00007</value>\n         <value>2.25E+02</value>\n         <value>1.05E+01</value>\n      </row>\n      <row position=\"121\">\n         <value>64.00008</value>\n         <value>2.25E+02</value>\n         <value>1.00E+01</value>\n      </row>\n      <row position=\"122\">\n         <value>64.00009</value>\n         <value>2.50E+02</value>\n         <value>7.27E+00</value>\n      </row>\n      <row position=\"123\">\n         <value>64.00010</value>\n         <value>2.50E+02</value>\n         <value>7.50E+00</value>\n      </row>\n      <row position=\"124\">\n         <value>64.00011</value>\n         <value>2.50E+02</value>\n         <value>6.70E+00</value>\n      </row>\n      <row position=\"125\">\n         <value>64.00012</value>\n         <value>2.50E+02</value>\n         <value>7.60E+00</value>\n      </row>\n      <row position=\"126\">\n         <value>64.00013</value>\n         <value>2.75E+02</value>\n         <value>1.50E+00</value>\n      </row>\n      <row position=\"127\">\n         <value>64.00014</value>\n         <value>2.75E+02</value>\n         <value>1.00E+00</value>\n      </row>\n      <row position=\"128\">\n         <value>64.00015</value>\n         <value>2.75E+02</value>\n         <value>1.20E+00</value>\n      </row>\n      <row position=\"129\">\n         <value>64.00016</value>\n         <value>2.75E+02</value>\n         <value>1.20E+00</value>\n      </row>\n   </table>\n</spkdata>\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000014001\010051247621\0011251\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 128\n//------------------------------------\nchar* id_0_c[] = {};\nstd::vector<char*> id_0( 128 );\ncopy( id_0_c, id_0_c+128, id_0.begin() );\nT time_0_c[] = { 1.00001, 1.00002, 1.00003, 1.00004, 1.00005, 1.00006, 1.00007, 1.00008, 1.00009, 1.00010, 1.00011, 1.00012, 1.00013, 1.00014, 1.00015, 1.00016, 2.00001, 2.00002, 2.00003, 2.00004, 2.00005, 2.00006, 2.00007, 2.00008, 2.00009, 2.00010, 2.00011, 2.00012, 2.00013, 2.00014, 2.00015, 2.00016, 4.00001, 4.00002, 4.00003, 4.00004, 4.00005, 4.00006, 4.00007, 4.00008, 4.00009, 4.00010, 4.00011, 4.00012, 4.00013, 4.00014, 4.00015, 4.00016, 8.00001, 8.00002, 8.00003, 8.00004, 8.00005, 8.00006, 8.00007, 8.00008, 8.00009, 8.00010, 8.00011, 8.00012, 8.00013, 8.00014, 8.00015, 8.00016, 16.00001, 16.00002, 16.00003, 16.00004, 16.00005, 16.00006, 16.00007, 16.00008, 16.00009, 16.00010, 16.00011, 16.00012, 16.00013, 16.00014, 16.00015, 16.00016, 32.00001, 32.00002, 32.00003, 32.00004, 32.00005, 32.00006, 32.00007, 32.00008, 32.00009, 32.00010, 32.00011, 32.00012, 32.00013, 32.00014, 32.00015, 32.00016, 48.00001, 48.00002, 48.00003, 48.00004, 48.00005, 48.00006, 48.00007, 48.00008, 48.00009, 48.00010, 48.00011, 48.00012, 48.00013, 48.00014, 48.00015, 48.00016, 64.00001, 64.00002, 64.00003, 64.00004, 64.00005, 64.00006, 64.00007, 64.00008, 64.00009, 64.00010, 64.00011, 64.00012, 64.00013, 64.00014, 64.00015, 64.00016 };\nstd::vector<T> time_0( 128 );\ncopy( time_0_c, time_0_c+128, time_0.begin() );\nT x2_0_c[] = { 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02, 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02, 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02, 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02, 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02, 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02, 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02, 1.80E+02, 1.80E+02, 1.80E+02, 1.80E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.25E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.50E+02, 2.75E+02, 2.75E+02, 2.75E+02, 2.75E+02 };\nstd::vector<T> x2_0( 128 );\ncopy( x2_0_c, x2_0_c+128, x2_0.begin() );\nT dv_0_c[] = { 1.50E+01, 1.70E+01, 1.55E+01, 1.65E+01, 1.55E+01, 1.50E+01, 1.60E+01, 1.45E+01, 1.50E+01, 1.45E+01, 1.25E+01, 1.10E+01, 1.40E+01, 1.30E+01, 1.40E+01, 1.15E+01, 1.40E+01, 1.60E+01, 1.30E+01, 1.35E+01, 1.30E+01, 1.35E+01, 1.25E+01, 1.25E+01, 1.25E+01, 1.20E+01, 1.15E+01, 1.20E+01, 1.30E+01, 1.15E+01, 1.30E+01, 1.25E+01, 1.35E+01, 1.75E+01, 1.75E+01, 1.35E+01, 1.25E+01, 1.25E+01, 1.50E+01, 1.30E+01, 1.20E+01, 1.30E+01, 1.20E+01, 1.35E+01, 1.00E+01, 1.15E+01, 1.10E+01, 9.50E+00, 1.50E+01, 1.50E+01, 1.55E+01, 1.60E+01, 1.30E+01, 1.05E+01, 1.35E+01, 1.40E+01, 1.25E+01, 1.20E+01, 1.15E+01, 1.15E+01, 6.50E+00, 5.50E+00, 6.00E+00, 6.00E+00, 1.85E+01, 1.70E+01, 1.53E+01, 1.60E+01, 1.30E+01, 1.40E+01, 1.25E+01, 1.10E+01, 1.20E+01, 1.20E+01, 1.15E+01, 1.20E+01, 6.00E+00, 6.00E+00, 5.00E+00, 5.50E+00, 1.25E+01, 1.30E+01, 1.60E+01, 1.20E+01, 1.10E+01, 9.50E+00, 1.10E+01, 1.10E+01, 1.10E+01, 1.00E+01, 1.05E+01, 1.05E+01, 2.70E+00, 2.70E+00, 2.50E+00, 2.40E+00, 1.30E+01, 1.35E+01, 1.65E+01, 1.36E+01, 1.15E+01, 1.05E+01, 1.35E+01, 1.20E+01, 7.00E+00, 6.90E+00, 8.80E+00, 7.90E+00, 1.20E+00, 1.50E+00, 1.00E+00, 1.50E+00, 1.30E+01, 1.25E+01, 1.65E+01, 1.60E+01, 1.10E+01, 1.15E+01, 1.05E+01, 1.00E+01, 7.27E+00, 7.50E+00, 6.70E+00, 7.60E+00, 1.50E+00, 1.00E+00, 1.20E+00, 1.20E+00 };\nstd::vector<T> dv_0( 128 );\ncopy( dv_0_c, dv_0_c+128, dv_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 128 );\ncopy( mdv_0_c, mdv_0_c+128, mdv_0.begin() );\ndata[0] = new IndData<T>( 128, id_0, time_0, x2_0, dv_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000025777\010051247621\0011600\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 128;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 3;\n\ndouble c_thetaIn[nTheta] = { 2.5, 0.000000005, -0.05 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 25, 0.00000005, -0.005 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 0.25, 0.0000000005, -0.5 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 15, 17, 15.5, 16.5, 15.5, 15, 16, 14.5, 15, 14.5, 12.5, 11, 14, 13, 14, 11.5, 14, 16, 13, 13.5, 13, 13.5, 12.5, 12.5, 12.5, 12, 11.5, 12, 13, 11.5, 13, 12.5, 13.5, 17.5, 17.5, 13.5, 12.5, 12.5, 15, 13, 12, 13, 12, 13.5, 10, 11.5, 11, 9.5, 15, 15, 15.5, 16, 13, 10.5, 13.5, 14, 12.5, 12, 11.5, 11.5, 6.5, 5.5, 6, 6, 18.5, 17, 15.3, 16, 13, 14, 12.5, 11, 12, 12, 11.5, 12, 6, 6, 5, 5.5, 12.5, 13, 16, 12, 11, 9.5, 11, 11, 11, 10, 10.5, 10.5, 2.7, 2.7, 2.5, 2.4, 13, 13.5, 16.5, 13.6, 11.5, 10.5, 13.5, 12, 7, 6.9, 8.8, 7.9, 1.2, 1.5, 1, 1.5, 13, 12.5, 16.5, 16, 11, 11.5, 10.5, 10, 7.27, 7.5, 6.7, 7.6, 1.5, 1, 1.2, 1.2 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"b2\\\"/>\" << endl;\noResults << \"<label name=\\\"b3\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x1\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b2[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b3[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][2] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247621\0013074\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003106\010051247621\0011234\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & x2In,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b1;\nstd::vector<T> b2;\nstd::vector<T> b3;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x1;\nconst std::vector<T> x2;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & x2In,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ntime( timeIn ),\nx2( x2In ),\ndv( dvIn ),\nmdv( mdvIn ),\nb1( nIn ),\nb2( nIn ),\nb3( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx1( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 3 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000002\010051247621\0010720\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0rootred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012777\010051247621\0010640\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value time;\nmutable Value x2;\nmutable Value dv;\nmutable Value mdv;\nmutable Value b1;\nmutable Value b2;\nmutable Value b3;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x1;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 3 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\nx2 = perm->data[spk_i]->x2[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator theta3 = spk_indepVar.begin() + spk_thetaOffset + 2;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb1 = theta[ ( 1 ) - 1 ];\n\nb2 = theta[ ( 2 ) - 1 ];\n\nb3 = theta[ ( 3 ) - 1 ];\n\nx1 = time;\n\nf = exp( b1 - b2 * x1 * exp( -b3 * x2 ) );\n\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ntemp.data[ spk_i ]->b2[ spk_j ] = b2;\ntemp.data[ spk_i ]->b3[ spk_j ] = b3;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x1[ spk_j ] = x1;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->b2 = temp.data[ i ]->b2;\n    perm->data[ i ]->b3 = temp.data[ i ]->b3;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x1 = temp.data[ i ]->x1;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247621\0012533\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003733\010051247621\0011607\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>NELSON_2</description>\n            <data_labels>\n               <label name=\"TIME\"/>\n               <label name=\"x2\"/>\n               <label name=\"DV\"/>\n            </data_labels>\n            <theta length=\"3\">\n               <low>\n                  <value fixed=\"no\">0.25</value>\n                  <value fixed=\"no\">0.0000000005</value>\n                  <value fixed=\"no\">-0.5</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">2.5</value>\n                  <value fixed=\"no\">0.000000005</value>\n                  <value fixed=\"no\">-0.05</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">25</value>\n                  <value fixed=\"no\">0.00000005</value>\n                  <value fixed=\"no\">-0.005</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb1 = THETA(1)\r\r\nb2 = THETA(2)\r\r\nb3 = THETA(3)\r\r\nx1 = TIME\r\r\nF = exp ( b1 - b2*x1 * exp (-b3 * x2 ) )\r\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"nelson_1.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n      </presentation>\n   </nonmem>\n</spksource>\r\n
INSERT INTO job (job_id, user_id, abstract, dataset_id, dataset_version, model_id, model_version, xml_source, state_code, report, start_time, event_time, cpp_source, end_code) VALUES (16,3,'NORRIS LINEAR LEAST SQUARES',10,'1',13,'1','<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>NORRIS LINEAR LEAST SQUARES</description>\n            <data_labels>\n               <label name=\"DV\"/>\n               <label name=\"TIME\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">0.02</value>\n                  <value fixed=\"no\">0.1</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">0.2</value>\n                  <value fixed=\"no\">1</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">2.0</value>\n                  <value fixed=\"no\">10.0</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb0 = THETA(1)\r\r\nb1 = THETA(2)\r\r\nx = TIME\r\r\nF = b0 + b1*x  \r\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"norris.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"DV\"/>\n            <x label=\"PRED\"/>\n            <y label=\"TIME\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\r\n','q2r',NULL,1083109630,1084575635,'data.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100444\00000000\00000000\000000007322\010051247622\0011211\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spkdata version=\"0.1\">\n   <table columns=\"2\" rows=\"37\">\n      <description>norris.txt</description>\n      <row position=\"1\">\n         <value type=\"string\">DV</value>\n         <value type=\"string\">TIME</value>\n      </row>\n      <row position=\"2\">\n         <value>0.1</value>\n         <value>0.2</value>\n      </row>\n      <row position=\"3\">\n         <value>338.8</value>\n         <value>337.4</value>\n      </row>\n      <row position=\"4\">\n         <value>118.1</value>\n         <value>118.2</value>\n      </row>\n      <row position=\"5\">\n         <value>888.0</value>\n         <value>884.6</value>\n      </row>\n      <row position=\"6\">\n         <value>9.2</value>\n         <value>10.1</value>\n      </row>\n      <row position=\"7\">\n         <value>228.1</value>\n         <value>226.5</value>\n      </row>\n      <row position=\"8\">\n         <value>668.5</value>\n         <value>666.3</value>\n      </row>\n      <row position=\"9\">\n         <value>998.5</value>\n         <value>996.3</value>\n      </row>\n      <row position=\"10\">\n         <value>449.1</value>\n         <value>448.6</value>\n      </row>\n      <row position=\"11\">\n         <value>778.9</value>\n         <value>777.0</value>\n      </row>\n      <row position=\"12\">\n         <value>559.2</value>\n         <value>558.2</value>\n      </row>\n      <row position=\"13\">\n         <value>0.3</value>\n         <value>0.4</value>\n      </row>\n      <row position=\"14\">\n         <value>0.1</value>\n         <value>0.6</value>\n      </row>\n      <row position=\"15\">\n         <value>778.1</value>\n         <value>775.5</value>\n      </row>\n      <row position=\"16\">\n         <value>668.8</value>\n         <value>666.9</value>\n      </row>\n      <row position=\"17\">\n         <value>339.3</value>\n         <value>338.0</value>\n      </row>\n      <row position=\"18\">\n         <value>448.9</value>\n         <value>447.5</value>\n      </row>\n      <row position=\"19\">\n         <value>10.8</value>\n         <value>11.6</value>\n      </row>\n      <row position=\"20\">\n         <value>557.7</value>\n         <value>556.0</value>\n      </row>\n      <row position=\"21\">\n         <value>228.3</value>\n         <value>228.1</value>\n      </row>\n      <row position=\"22\">\n         <value>998.0</value>\n         <value>995.8</value>\n      </row>\n      <row position=\"23\">\n         <value>888.8</value>\n         <value>887.6</value>\n      </row>\n      <row position=\"24\">\n         <value>119.6</value>\n         <value>120.2</value>\n      </row>\n      <row position=\"25\">\n         <value>0.3</value>\n         <value>0.3</value>\n      </row>\n      <row position=\"26\">\n         <value>0.6</value>\n         <value>0.3</value>\n      </row>\n      <row position=\"27\">\n         <value>557.6</value>\n         <value>556.8</value>\n      </row>\n      <row position=\"28\">\n         <value>339.3</value>\n         <value>339.1</value>\n      </row>\n      <row position=\"29\">\n         <value>888.0</value>\n         <value>887.2</value>\n      </row>\n      <row position=\"30\">\n         <value>998.5</value>\n         <value>999.0</value>\n      </row>\n      <row position=\"31\">\n         <value>778.9</value>\n         <value>779.0</value>\n      </row>\n      <row position=\"32\">\n         <value>10.2</value>\n         <value>11.1</value>\n      </row>\n      <row position=\"33\">\n         <value>117.6</value>\n         <value>118.3</value>\n      </row>\n      <row position=\"34\">\n         <value>228.9</value>\n         <value>229.2</value>\n      </row>\n      <row position=\"35\">\n         <value>668.4</value>\n         <value>669.1</value>\n      </row>\n      <row position=\"36\">\n         <value>449.2</value>\n         <value>448.9</value>\n      </row>\n      <row position=\"37\">\n         <value>0.2</value>\n         <value>0.5</value>\n      </row>\n   </table>\n</spkdata>\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0DataSet.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003723\010051247622\0011263\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef DATASET_H\n#define DATASET_H\n#include <vector>\n#include \"IndData.h\"\n\ntemplate <class T>\nclass DataSet\n{\npublic:\nDataSet();\n~DataSet();\n\nstd::vector<IndData<T>*> data;\nconst int popSize;\n\nprotected:\nDataSet( const DataSet& );\nDataSet& operator=( const DataSet& );\n\n};\ntemplate <class T>\nDataSet<T>::DataSet()\n: data(1),\n  popSize( 1 )\n{\n//------------------------------------\n// Subject <1> \n// # of sampling points = 36\n//------------------------------------\nchar* id_0_c[] = { \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\" };\nstd::vector<char*> id_0( 36 );\ncopy( id_0_c, id_0_c+36, id_0.begin() );\nT dv_0_c[] = { 0.1, 338.8, 118.1, 888.0, 9.2, 228.1, 668.5, 998.5, 449.1, 778.9, 559.2, 0.3, 0.1, 778.1, 668.8, 339.3, 448.9, 10.8, 557.7, 228.3, 998.0, 888.8, 119.6, 0.3, 0.6, 557.6, 339.3, 888.0, 998.5, 778.9, 10.2, 117.6, 228.9, 668.4, 449.2, 0.2 };\nstd::vector<T> dv_0( 36 );\ncopy( dv_0_c, dv_0_c+36, dv_0.begin() );\nT time_0_c[] = { 0.2, 337.4, 118.2, 884.6, 10.1, 226.5, 666.3, 996.3, 448.6, 777.0, 558.2, 0.4, 0.6, 775.5, 666.9, 338.0, 447.5, 11.6, 556.0, 228.1, 995.8, 887.6, 120.2, 0.3, 0.3, 556.8, 339.1, 887.2, 999.0, 779.0, 11.1, 118.3, 229.2, 669.1, 448.9, 0.5 };\nstd::vector<T> time_0( 36 );\ncopy( time_0_c, time_0_c+36, time_0.begin() );\nT mdv_0_c[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\nstd::vector<T> mdv_0( 36 );\ncopy( mdv_0_c, mdv_0_c+36, mdv_0.begin() );\ndata[0] = new IndData<T>( 36, id_0, dv_0, time_0, mdv_0 );\n\n}\ntemplate <class T>\nDataSet<T>::~DataSet()\n{\n   const int n = data.size();\n   for( int i=0; i<n; i++ )\n   {\n      delete data[i];\n   }\n}\ntemplate <class T>\nDataSet<T>::DataSet( const DataSet<T>& ){}\ntemplate <class T>\nDataSet<T>& DataSet<T>::operator=( const DataSet<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver.cpp\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000024614\010051247622\0011566\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#include <iostream>\n#include <fstream>\n#include <sys/time.h>\n#include <vector>\n\n#include <spk/SpkValarray.h>\n#include <spk/SpkException.h>\n//#include <spk/FpErrorChecker.h>\n#include <spk/fitIndividual.h>\n#include <spk/Optimizer.h>\n#include \"IndData.h\"\n#include \"DataSet.h\"\n\n#include <spk/multiply.h>\n#include <spk/cholesky.h>\n///////////////////////////////////////////////////////////////////////////////////\n//   NONMEM PRED SPECIFIC\n#include \"Pred.h\"\n#include <spkpred/IndPredModel.h>\n#include <cppad/include/CppAD.h>\n//\n///////////////////////////////////////////////////////////////////////////////////\n\nusing SPK_VA::valarray;\nusing namespace std;\n\nenum RETURN_CODE { SUCCESS=0, CONVERGENCE_FAILURE=1, FILE_ACCESS_FAILURE=2, OTHER_FAILURE };\n\nconst vector<CppAD::AD<double> > wres( int n,\n                                       const valarray<double> & Ri,\n                                       const vector  < CppAD::AD<double> > & residual )\n{\n   assert( Ri.size() == n * n );\n   assert( residual.size() == n );\n   valarray<double> r( n );\n   for( int i=0; i<n; i++ ) r[i] = CppAD::Value( residual[i] );\n   valarray<double> C( 0.0, n * n );\n   C = cholesky( Ri, n );\n   valarray<double> w = multiply( C, n, r, 1 );\n   vector< CppAD::AD<double> > Cr(n);\n   for( int i=0; i<n; i++ ) Cr[i] = w[i];\n   return Cr;\n}\n\nint main( int argc, const char argv[] )\n{\n/*******************************************************************/\n/*                                                                 */\n/*   Set up                                                        */\n/*                                                                 */\n/*******************************************************************/\nofstream oRuntimeError( \"spk_error.tmp\" );\nif( !oRuntimeError.good() )\n  {\n      fprintf( stderr, \"%s:%d: Failed to create a temporary file, %s.\",  __FILE__, __LINE__, \"spk_error.tmp\" );\n      return FILE_ACCESS_FAILURE;\n  }\n\n//FpErrorChecker fperror;\n\nconst int nY = 36;\nDataSet< CppAD::AD<double> > set;\n\nconst bool isSimRequested = false;\nbool haveCompleteData = true;\n\nconst bool isOptRequested = true;\nbool isOptSuccess  = false;\n\nconst bool isStatRequested = false;\nbool isStatSuccess = true;\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM Specific\n\nconst int nTheta = 2;\n\ndouble c_thetaIn[nTheta] = { 0.2, 1 };\nconst valarray<double> thetaIn ( c_thetaIn, nTheta );\n\ndouble c_thetaUp[nTheta] = { 2.0, 10.0 };\nconst valarray<double> thetaUp  ( c_thetaUp, nTheta );\n\ndouble c_thetaLow[nTheta] = { 0.02, 0.1 };\nconst valarray<double> thetaLow ( c_thetaLow, nTheta );\n\nvalarray<double> thetaStep( nTheta );\n\nvalarray<double> thetaOut( nTheta );\n\nconst int nEta     = 1;\nconst int nOmega   = 1; // #of elements in Omega matrix\nconst int dimOmega = 1; // dimension of Omeaga matrix\ndouble c_omegaIn[nOmega] = { 1 };\nconst valarray<double> omegaIn( c_omegaIn, nOmega );\nvalarray<double> omegaOut( nOmega );\n\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////\n//   NONMEM PRED Specific\nPred<CppAD::AD<double> > mPred(&set);\nenum IndPredModel::covStruct omegaStruct = IndPredModel::DIAGONAL;\nIndPredModel model( mPred, (int)nTheta, thetaLow, thetaUp, thetaIn, (int)nEta, omegaStruct, omegaIn );\n//\n//////////////////////////////////////////////////////////////////////\n\nconst int nB = model.getNIndPar();\nvalarray<double> bIn  ( nB );\nvalarray<double> bStep( nB );\nvalarray<double> bLow ( nB );\nvalarray<double> bUp  ( nB );\nvalarray<double> bOut ( nB );\ndouble           bObjOut;\nvalarray<double> bObj_bOut( nB );\nvalarray<double> bObj_b_bOut( nB * nB );\n\nconst double eps   = 0.001;\nconst int    mitr  = 450;\nconst int    trace = 1;\nOptimizer    opt( eps, mitr, trace );\n\nmodel.getIndPar       ( bIn );\nmodel.getIndParLimits ( bLow, bUp );\nmodel.getIndParStep   ( bStep );\n\n/*******************************************************************/\n/*                                                                 */\n/*   Data Initialization                                           */\n/*                                                                 */\n/*******************************************************************/\ndouble c_y[] = { 0.1, 338.8, 118.1, 888, 9.2, 228.1, 668.5, 998.5, 449.1, 778.9, 559.2, 0.3, 0.1, 778.1, 668.8, 339.3, 448.9, 10.8, 557.7, 228.3, 998, 888.8, 119.6, 0.3, 0.6, 557.6, 339.3, 888, 998.5, 778.9, 10.2, 117.6, 228.9, 668.4, 449.2, 0.2 };\nvalarray<double> y( c_y, nY );\nhaveCompleteData = true;\n\n/*******************************************************************/\n/*                                                                 */\n/*   Parameter Estimation                                          */\n/*                                                                 */\n/*******************************************************************/\ntimeval optBegin, optEnd;\ndouble optTimeSec = 0.0;\nif( isOptRequested && haveCompleteData )\n{\n  gettimeofday( &optBegin, NULL );\n  try\n  {\n     fitIndividual( model,\n                    y,\n                    opt,\n                    bLow,\n                    bUp,\n                    bIn,\n                    bStep,\n                   &bOut,\n                   &bObjOut,\n                   &bObj_bOut,\n                   &bObj_b_bOut,\n                    false );\n     //FpErrorChecker::check( __LINE__, __FILE__ );\n     isOptSuccess = true;\n  }\n  catch( const SpkException& e )\n  {\n     oRuntimeError << e << endl;\n     cerr << e << endl;\n     isOptSuccess = false;\n     //FpErrorChecker::clear();\n  }\n  catch( ... )\n  {\n     char message[] = \"Unknown exception: failed in parameter estimation!!!\";\n     oRuntimeError << message << endl;\n     cerr << message << endl;\n     isOptSuccess = false;\n     FpErrorChecker::clear();\n  }\n  gettimeofday( &optEnd, NULL );\n  optTimeSec = difftime( optEnd.tv_sec, optBegin.tv_sec );\n\n  //////////////////////////////////////////////////////////////////////\n  //   NONMEM Specific\n  if( isOptSuccess || !isOptSuccess )\n  {\n     valarray<double> ROut( nY * nY );\n     model.getTheta( thetaOut );\n     model.getOmega( omegaOut );\n     model.setIndPar( bOut );\n     model.dataVariance( ROut );\n     for( int j=0; j<nY; j++ )\n        set.data[0]->res[j]  = y[j] - set.data[0]->pred[j];\n     set.data[0]->wres = wres( nY, ROut, set.data[0]->res ); \n  }\n  //\n  //////////////////////////////////////////////////////////////////////\n}\n\n/*******************************************************************/\n/*                                                                 */\n/*   ReportML Document                                             */\n/*                                                                 */\n/*******************************************************************/\nofstream oResults( \"result.xml\" );\nif( !oResults.good() )\n{\n   fprintf( stderr, \"Failed to open a file, %s !!!\", \"result.xml\" );\n   return FILE_ACCESS_FAILURE;\n}\noResults << \"<?xml version=\\\"1.0\\\"?>\" << endl;\noResults << \"<spkreport>\" << endl;\n\nchar buf[ SpkError::maxMessageLen() ];\nifstream iRuntimeError( \"spk_error.tmp\" );\noResults << \"<error_message>\" << endl;\nwhile( iRuntimeError.good() )\n{\n   iRuntimeError.getline(buf, SpkError::maxMessageLen() );\n   oResults << buf << endl;\n}\noResults << \"</error_message>\" << endl;\niRuntimeError.close();\n\nif( !haveCompleteData )\n{\n   oResults << \"</spkreportML>\" << endl;\n   oResults.close();\n   return OTHER_FAILURE;\n}\n\noResults << \"<ind_analysis_result>\" << endl;\n\noResults << \"<ind_opt_result elapsedtime=\\\"\" << optTimeSec << \"\\\">\" << endl;\noResults << \"<ind_obj_out>\" << endl;\noResults << \"<value>\" << bObjOut << \"</value>\" << endl;\noResults << \"</ind_obj_out>\" << endl;\n\n//////////////////////////////////////////////////////////////////////\n//    NONMEM Specific\noResults << \"<theta_out>\" << endl;\nfor( int i=0; i<nTheta; i++ )\n{\n   oResults << \"<value>\" << thetaOut[i] << \"</value>\" << endl;\n}\noResults << \"</theta_out>\" << endl;\noResults << \"<omega_out>\" << endl;\nfor( int i=0; i<nOmega; i++ )\n{\n   oResults << \"<value>\" << omegaOut[i] << \"</value>\" << endl;\n}\noResults << \"</omega_out>\" << endl;\n//\n//////////////////////////////////////////////////////////////////////\n\noResults << \"</ind_opt_result>\" << endl;\n\noResults << \"</ind_analysis_result>\" << endl;\n\noResults << \"<presentation_data>\" << endl;\noResults << \"<data_labels>\" << endl;\noResults << \"<label name=\\\"ID\\\"/>\" << endl;\n\n///////////////////////////////////////////////////////////////////\n//  Data Set Specific\noResults << \"<label name=\\\"b0\\\"/>\" << endl;\noResults << \"<label name=\\\"b1\\\"/>\" << endl;\noResults << \"<label name=\\\"eta\\\"/>\" << endl;\noResults << \"<label name=\\\"f\\\"/>\" << endl;\noResults << \"<label name=\\\"omega\\\"/>\" << endl;\noResults << \"<label name=\\\"pred\\\"/>\" << endl;\noResults << \"<label name=\\\"res\\\"/>\" << endl;\noResults << \"<label name=\\\"theta\\\"/>\" << endl;\noResults << \"<label name=\\\"wres\\\"/>\" << endl;\noResults << \"<label name=\\\"x\\\"/>\" << endl;\noResults << \"<label name=\\\"y\\\"/>\" << endl;\n//\n///////////////////////////////////////////////////////////////////\noResults << \"</data_labels>\" << endl;\nfor( int j=0, cnt=1; j<nY; j++, cnt++ )\n{\n   ///////////////////////////////////////////////////////////////////\n   //\n   oResults << \"<row position=\\\"\" << cnt << \"\\\">\" << endl;\n   oResults << \"<value>\" << set.data[0]->id[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b0[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->b1[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->eta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->f[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->pred[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->res[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][0] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->theta[j][1] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->wres[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->x[j] << \"</value>\" << endl;\n   oResults << \"<value>\" << set.data[0]->y[j] << \"</value>\" << endl;\n   oResults << \"</row>\" << endl;\n   //\n   ///////////////////////////////////////////////////////////////////\n}\noResults << \"</presentation_data>\" << endl;\noResults << \"</spkreportML>\" << endl;\noResults.close();\nif( haveCompleteData && isOptSuccess && isStatSuccess )\n   remove( \"spk_error.tmp\" );\nif( !haveCompleteData || !isStatSuccess )\n   return OTHER_FAILURE;\nif( !isOptSuccess )\n   return CONVERGENCE_FAILURE;\nreturn SUCCESS;\n}\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0generatedMakefile\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000404\010051247622\0013075\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0driver : driver.cpp Pred.h DataSet.h IndData.h\n	g++ -g driver.cpp -o driver -lspk -lspkopt -lspkpred -latlas_lapack -lcblas -latlas -lpthread -lm\nclean : \n	rm software_error.xml result.xml driver predEqn.cpp IndData.h DataSet.h Pred.h driver.cpp spk_error.tmp\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0IndData.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000002706\010051247622\0011242\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>\n#ifndef INDDATA_H\n#define INDDATA_H\n#include <vector>\n\ntemplate <class T>\nclass IndData{\npublic:\nIndData( int nIn,\n	const std::vector<char*> & idIn,\n	const std::vector<T> & dvIn,\n	const std::vector<T> & timeIn,\n	const std::vector<T> & mdvIn);\n\nstd::vector<T> b0;\nstd::vector<T> b1;\nconst std::vector<T> dv;\nstd::vector< std::vector<T> > eta;\nstd::vector<T> f;\nconst std::vector<char *> id;\nconst std::vector<T> mdv;\nstd::vector<T> pred;\nstd::vector<T> res;\nstd::vector< std::vector<T> > theta;\nconst std::vector<T> time;\nstd::vector<T> wres;\nstd::vector<T> x;\nstd::vector<T> y;\n\n~IndData();\nprotected:\nIndData();\nIndData( const IndData& );\nIndData& operator=( const IndData& );\n\nprivate:\nconst int n; // #of measurements.\n};\ntemplate <class T>\nIndData<T>::IndData( int nIn,\nconst std::vector<char*> & idIn,\nconst std::vector<T> & dvIn,\nconst std::vector<T> & timeIn,\nconst std::vector<T> & mdvIn)\n: n( nIn ),\nid( idIn ),\ndv( dvIn ),\ntime( timeIn ),\nmdv( mdvIn ),\nb0( nIn ),\nb1( nIn ),\neta( nIn ),\nf( nIn ),\npred( nIn ),\nres( nIn ),\ntheta( nIn ),\nwres( nIn ),\nx( nIn ),\ny( nIn ){\n   for( int i=0; i<nIn; i++ )\n   {\n      theta[i].resize( 2 );\n      eta[i].resize( 1 );\n   }\n}\n\ntemplate <class T>\nIndData<T>::~IndData(){}\ntemplate <class T>\nIndData<T>::IndData(){}\ntemplate <class T>\nIndData<T>::IndData( const IndData<T>& ){}\ntemplate <class T>\nIndData<T>& IndData<T>::operator=( const IndData<T>& ){}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0job_id\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000002\010051247622\0010721\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\016\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Pred.h\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000012311\010051247622\0010621\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0// THIS FILE IS GENERATED BY THE ASPK COMPILER\n#ifndef PRED_H\n#define PRED_H\n\n#include <vector>\n#include <string>\n#include <spkpred/PredBase.h>\n#include <cppad/include/CppAD.h>\n#include \"DataSet.h\"\n\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, int n )\n{\n   CppAD::AD<double> y = 1.0;\n   if( n > 0 )\n   {\n      for( int i=0; i<n; i++ )\n      {\n         y *= x;\n      }\n   }\n   else if( n < 0 )\n   {\n      for( int i=n; i<0; i++ )\n      {\n         y /= x;\n      }\n   }\n   return y;\n}\nconst CppAD::AD<double> pow( int x, const CppAD::AD<double>& n )\n{\n   return pow( static_cast< CppAD::AD<double> >( x ), n );\n}\nconst CppAD::AD<double> pow( const CppAD::AD<double>& x, double n )\n{\n   return pow( x, CppAD::AD<double>( n ) );\n}\nconst CppAD::AD<double> pow( double x, const CppAD::AD<double>& n )\n{\n   return pow( CppAD::AD<double>( x ), n );\n}\n\ntemplate <class Value>\nclass Pred : public PredBase<Value>\n{\npublic:\nPred( const DataSet<Value>* dataIn );\n~Pred();\nint getNObservs( int ) const;\nbool eval( int spk_thetaOffset, int spk_thetaLen,\n           int spk_etaOffset,   int spk_etaLen,\n           int spk_epsOffset,   int spk_epsLen,\n           int spk_fOffset,     int spk_fLen,\n           int spk_yOffset,     int spk_yLen,\n           int spk_i,\n           int spk_j,\n           const std::vector<Value>& spk_indepVar,\n           std::vector<Value>& spk_depVar );\n\nprotected:\nPred();\nPred( const Pred& );\nPred & operator=( const Pred& );\nprivate:\nconst int nIndividuals;\nconst DataSet<Value> *perm;\nDataSet<Value> temp;\nmutable bool isIterationCompleted;\nmutable std::string id;\nmutable Value dv;\nmutable Value time;\nmutable Value mdv;\nmutable Value b0;\nmutable Value b1;\nmutable Value f;\nmutable Value pred;\nmutable Value res;\nmutable Value wres;\nmutable Value x;\nmutable Value y;\n};\ntemplate <class Value>\nPred<Value>::Pred( const DataSet<Value>* dataIn )\n: perm( dataIn ),\n  nIndividuals( 1 ),\n  isIterationCompleted( true )\n{\n}\ntemplate <class Value>\nPred<Value>::~Pred()\n{\n}\ntemplate <class Value>\nint Pred<Value>::getNObservs( int spk_i ) const\n{\n  return perm->data[spk_i]->id.size();\n}\ntemplate <class Value>\nbool Pred<Value>::eval( int spk_thetaOffset, int spk_thetaLen,\n                        int spk_etaOffset,   int spk_etaLen,\n                        int spk_epsOffset,   int spk_epsLen,\n                        int spk_fOffset,     int spk_fLen,\n                        int spk_yOffset,     int spk_yLen,\n                        int spk_i,\n                        int spk_j,\n                        const std::vector<Value>& spk_indepVar,\n                        std::vector<Value>& spk_depVar )\n{\n  assert( spk_thetaLen == 2 );\n  assert( spk_etaLen   == 1 );\n  assert( spk_epsLen   == 0 );\n\nid = perm->data[spk_i]->id[spk_j];\ndv = perm->data[spk_i]->dv[spk_j];\ntime = perm->data[spk_i]->time[spk_j];\nmdv = perm->data[spk_i]->mdv[spk_j];\ntypename std::vector<Value>::const_iterator theta1 = spk_indepVar.begin() + spk_thetaOffset + 0;\ntypename std::vector<Value>::const_iterator theta2 = spk_indepVar.begin() + spk_thetaOffset + 1;\ntypename std::vector<Value>::const_iterator eta1 = spk_indepVar.begin() + spk_etaOffset + 0;\ntypename std::vector<Value>::const_iterator theta = spk_indepVar.begin() + spk_thetaOffset;\ntypename std::vector<Value>::const_iterator eta = spk_indepVar.begin() + spk_etaOffset;\nValue f = 0.0;\nValue y = 0.0;\n//=========================================\n// Begin User Code                         \n//-----------------------------------------\n\nb0 = theta[ ( 1 ) - 1 ];\n\nb1 = theta[ ( 2 ) - 1 ];\n\nx = time;\n\nf = b0 + b1 * x;\n\ny = f + eta[ ( 1 ) - 1 ];\n//-----------------------------------------\n// End User Code                           \n//=========================================\npred = f;\nres  = perm->data[spk_i]->dv[spk_j] - f;\ntemp.data[ spk_i ]->b0[ spk_j ] = b0;\ntemp.data[ spk_i ]->b1[ spk_j ] = b1;\ncopy( eta, eta+spk_etaLen, temp.data[ spk_i ]->eta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->f[ spk_j ] = f;\ntemp.data[ spk_i ]->pred[ spk_j ] = pred;\ntemp.data[ spk_i ]->res[ spk_j ] = res;\ncopy( theta, theta+spk_etaLen, temp.data[ spk_i ]->theta[ spk_j ].begin() ); \ntemp.data[ spk_i ]->x[ spk_j ] = x;\ntemp.data[ spk_i ]->y[ spk_j ] = y;\n\nif( spk_i == 1-1 && spk_j == perm->data[spk_i]->id.size()-1 )\n{\n  // This means, SPK advanced in iteration.\n  // Move temporary storage to permanent storage.\n  isIterationCompleted = true;\n  for( int i=0; i < nIndividuals; i++ )\n  {\n    perm->data[ i ]->b0 = temp.data[ i ]->b0;\n    perm->data[ i ]->b1 = temp.data[ i ]->b1;\n    perm->data[ i ]->eta = temp.data[ i ]->eta;\n    perm->data[ i ]->f = temp.data[ i ]->f;\n    perm->data[ i ]->pred = temp.data[ i ]->pred;\n    perm->data[ i ]->res = temp.data[ i ]->res;\n    perm->data[ i ]->theta = temp.data[ i ]->theta;\n    perm->data[ i ]->wres = temp.data[ i ]->wres;\n    perm->data[ i ]->x = temp.data[ i ]->x;\n    perm->data[ i ]->y = temp.data[ i ]->y;\n  }\n}\nelse\n{\n  isIterationCompleted = false;\n}\n\nspk_depVar[ spk_fOffset+spk_j ] = f;\nspk_depVar[ spk_yOffset+spk_j ] = y;\nif( perm->data[ spk_i ]->mdv[ spk_j ] == 0 )\n   return true;\nelse return false;\n}\ntemplate <class Value>\nPred<Value>::Pred()\n{\n}\ntemplate <class Value>\nPred<Value>::Pred( const Pred<Value>& )\n{\n}\ntemplate <class Value>\nPred<Value> & Pred<Value>::operator=( const Pred<Value>& )\n{\n}\n#endif\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0software_error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000000000\010051247622\0012534\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0source.xml\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00100666\00000000\00000000\000000003722\010051247622\0011606\0 0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ustar  \0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0root\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0<?xml version=\"1.0\"?>\n<spksource>\n   <nonmem version=\"0.1\">\n      <constraint>\n         <ind_analysis is_estimation=\"yes\" is_restart=\"no\" mitr=\"450\">\n            <description>NORRIS LINEAR LEAST SQUARES</description>\n            <data_labels>\n               <label name=\"DV\"/>\n               <label name=\"TIME\"/>\n            </data_labels>\n            <theta length=\"2\">\n               <low>\n                  <value fixed=\"no\">0.02</value>\n                  <value fixed=\"no\">0.1</value>\n               </low>\n               <in>\n                  <value fixed=\"no\">0.2</value>\n                  <value fixed=\"no\">1</value>\n               </in>\n               <up>\n                  <value fixed=\"no\">2.0</value>\n                  <value fixed=\"no\">10.0</value>\n               </up>\n            </theta>\n            <omega dimension=\"1\" same_as_previous=\"no\" struct=\"diagonal\">\n               <in>\n                  <value fixed=\"no\">1</value>\n               </in>\n            </omega>\n            <ind_stat/>\n         </ind_analysis>\n      </constraint>\n      <model>\n         <pred>\r\nb0 = THETA(1)\r\r\nb1 = THETA(2)\r\r\nx = TIME\r\r\nF = b0 + b1*x  \r\r\nY = F + ETA(1)\r\n         </pred>\n      </model>\n      <presentation>\n         <table header=\"every\" process=\"estimation\" save_as=\"norris.out\">\n            <column appearance_order=\"1\" label=\"TIME\" sort_order=\"0\"/>\n            <column appearance_order=\"2\" label=\"F\" sort_order=\"0\"/>\n            <column appearance_order=\"3\" label=\"DV\" sort_order=\"0\"/>\n            <column appearance_order=\"4\" label=\"PRED\" sort_order=\"0\"/>\n            <column appearance_order=\"5\" label=\"RES\" sort_order=\"0\"/>\n            <column appearance_order=\"6\" label=\"WRES\" sort_order=\"0\"/>\n         </table>\n         <scatterplot begin=\"1\" end=\"900\" process=\"estimation\" unit_slope=\"show\" x0_line=\"show\" y0_line=\"show\">\n            <x label=\"DV\"/>\n            <x label=\"PRED\"/>\n            <y label=\"TIME\"/>\n         </scatterplot>\n      </presentation>\n   </nonmem>\n</spksource>\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',NULL);

--
-- Table structure for table `model`
--

CREATE TABLE model (
  model_id int(10) unsigned NOT NULL auto_increment,
  name varchar(20) NOT NULL default '',
  abstract varchar(100) NOT NULL default '',
  archive longblob,
  user_id int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (model_id),
  UNIQUE KEY user_id (user_id,name)
) TYPE=InnoDB;

--
-- Dumping data for table `model`
--

INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (1,'model 1','test model 1','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.05.13.22.41;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM THEOPHYLLINE POPULATION DATA\n$DATA THEO\n$INPUT ID AMT=DOSE TIME DV=CP WT\n$PRED \n;THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n;THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n;THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n;DOSE=WT-ADJUSTED DOSE (MG/KG)\n;DS=NON-WT-ADJUSTED DOSE (MG)\n   IF (DOSE.NE.0) THEN\n      DS=DOSE*WT\n      W=WT\n   ENDIF\n   KA=THETA(1)+ETA(1)\n   KE=THETA(2)+ETA(2)\n   CL=THETA(3)*W+ETA(3)\n   D=EXP(-KE*TIME)-EXP(-KA*TIME)\n   E=CL*(KA-KE)\n   F=DS*KE*KA/E*D\n   Y=F+EPS(1)\n$THETA \n(.1,3,5)\n(.008,.08,.5)\n(.004,.04,.9)\n$OMEGA BLOCK(3) 6 .005 .0002 .3 .006 .4\n$SIGMA DIAGONAL(1) .4\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE ID DOSE WT TIME\n$SCATTERPLOT RES WRES VS TIME BY ID FROM 1 TO 900 NOABS0 NOORD0\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (2,'model 2','test model 2','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.05.13.26.48;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM THEOPHYLLINE POPULATION DATA\n$DATA THEO\n$INPUT ID AMT=DOSE TIME DV=CP WT\n$PRED \n;THETA(1)=MEAN ABSORPTION RATE CONSTANT (1/HR)\n;THETA(2)=MEAN ELIMINATION RATE CONSTANT (1/HR)\n;THETA(3)=SLOPE OF CLEARANCE VS WEIGHT RELATIONSHIP (LITERS/HR/KG)\n;DOSE=WT-ADJUSTED DOSE (MG/KG)\n;DS=NON-WT-ADJUSTED DOSE (MG)\n   IF (DOSE.NE.0) THEN\n      DS=DOSE*WT\n      W=WT\n   ENDIF\n   KA=THETA(1)+ETA(1)\n   KE=THETA(2)+ETA(2)\n   CL=THETA(3)*W+ETA(3)\n   D=EXP(-KE*TIME)-EXP(-KA*TIME)\n   E=CL*(KA-KE)\n   F=DS*KE*KA/E*D\n   Y=F+EPS(1)\n$THETA \n(.1,3,5)\n(.008,.08,.5)\n(.004,.04,.9)\n$OMEGA BLOCK(3) 6 .005 .0002 .3 .006 .4\n$SIGMA DIAGONAL(1) .4\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE ID DOSE WT TIME\n$SCATTERPLOT RES WRES VS TIME BY ID FROM 1 TO 900 NOABS0 NOORD0\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (3,'GAUSS3_1','http://www.itl.nist.gov/div898/strd/nls/data/gauss1.shtml','head	1.2;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.2\ndate	2004.04.05.14.12.52;	author vicini;	state Exp;\nbranches;\nnext	1.1;\n\n1.1\ndate	2004.04.05.14.01.51;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.2\nlog\n@Gauss3_2 New initial estimates\n@\ntext\n@$PROBLEM GAUSS3_2\n$DATA gauss3_1.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nb8 = THETA(8)\nx = TIME\nF=b1*EXP(-b2*x)+b3*EXP(-((x-b4)**2)/(b5**2))+b6*EXP(-((x-b7)**2)/(b8**2))\nY = F + ETA(1)\n$THETA \n(9.6,96,960)\n(0.00096,0.0096,0.096)\n(8,80,800)\n(11,110,1100)\n(2.5,25,250)\n(7.4,74,740)\n(13.9,139,1390)\n(2.5,25,250)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=gauss3_2.out\n@\n\n\n1.1\nlog\n@@\ntext\n@d1 1\na1 1\n$PROBLEM GAUSS3_1\nd17 8\na24 8\n(9.49,94.9,949)\n(0.0009,0.009,0.09)\n(9.01,90.1,901)\n(11.3,113,1130)\n(2,20,200)\n(7.38,73.8,738)\n(14,140,1400)\n(2,20,200)\nd28 1\na28 1\n$TABLE TIME F FILE=GAUSS3_1.out\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (4,'HAHN1','http://www.itl.nist.gov/div898/strd/nls/data/hahn1.shtml','head	1.2;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.2\ndate	2004.04.05.14.26.49;	author vicini;	state Exp;\nbranches;\nnext	1.1;\n\n1.1\ndate	2004.04.05.14.20.59;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.2\nlog\n@hahn1_2 new initial estimates\n@\ntext\n@$PROBLEM HAHN1_2\n$DATA hahn1.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nb6 = THETA(6)\nb7 = THETA(7)\nx = TIME\nF = (b1+b2*x+b3*x**2+b4*x**3) /(1+b5*x+b6*x**2+b7*x**3)\nY = F + ETA(1)\n$THETA \n(0.1,1,10)\n(-1,-0.1,-0.01)\n(0.0005,0.005,0.05)\n(-0.00001,-0.000001,-0.0000001)\n(-0.05,-0.005,-0.0005)\n(0.00001,0.0001,0.001)\n(-0.000001,-0.0000001,-0.00000001)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=hahn_2.out\n@\n\n\n1.1\nlog\n@@\ntext\n@d1 1\na1 1\n$PROBLEM HAHN1_1\nd16 3\na18 6\n(1,10,100)\n(-10,-1,-0.1)\n(0.003,0.05,0.5)\n(-0.00010000,-0.00001,-0.000001)\n(-0.5,-0.05,-0.005)\n(0.0001,0.001,0.01)\nd20 3\nd26 1\na26 1\n$TABLE TIME F FILE=HAHN1_1.OUT\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (5,'KIRBY2','http://www.itl.nist.gov/div898/strd/nls/data/kirby2.shtml','head	1.2;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.2\ndate	2004.04.08.15.53.14;	author vicini;	state Exp;\nbranches;\nnext	1.1;\n\n1.1\ndate	2004.04.08.15.48.57;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.2\nlog\n@kirby2_2\n@\ntext\n@$PROBLEM KIRBY2_2\n$DATA kirby2.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nx = TIME\nF=(b1 + b2*x + b3*x**2) /(1 + b4*x + b5*x**2)\nY = F + ETA(1)\n$THETA \n(0.15,1.5,15)\n(-1.5,-0.15,-0.015)\n(0.00025,0.0025,0.025)\n(-0.015,-0.0015,-0.00015)\n(0.000002,0.00002,0.0002)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME FILE=kirby2_2.out\n@\n\n\n1.1\nlog\n@@\ntext\n@d1 1\na1 1\n$PROBLEM KIRBY2_1\nd14 5\na18 5\n(0.2,2,20)\n(-1,-0.1,-0.01)\n(0.0003,0.003,0.03)\n(-0.01,-0.001,-0.0001)\n(0.000001,0.00001,0.0001)\nd22 1\na22 1\n$TABLE TIME FILE=kirby2_1.out\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (6,'MGH17','http://www.itl.nist.gov/div898/strd/nls/data/mgh17.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.09.57.41;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM MGH17_1\n$DATA mgh17.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\n\nb2 = THETA(2)\n\nb3 = THETA(3)\n\nb4 = THETA(4)\n\nb5 = THETA(5)\n\nx = TIME\n\nF = b1 + b2*exp(-x*b4) + b3*exp(-x*b5)\n\nY = F + ETA(1)\n$THETA \n(0.02,50,500)\n(0.1,150,1500)\n(-1000,-100,0)\n(0.001,1,10)\n(0.2,2,20)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=mgh17_1.out\n$SCATTERPLOT DV VS PRED FROM 1 TO 900 UNIT ABS0 ORD0\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (7,'MGH17_2 Version2','http://www.itl.nist.gov/div898/strd/nls/data/mgh17.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.04.06;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM MGH17_2\n$DATA mgh17.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nb3 = THETA(3)\nb4 = THETA(4)\nb5 = THETA(5)\nx = TIME\nF = b1 + b2*exp(-x*b4) + b3*exp(-x*b5)\nY = F + ETA(1)\n$THETA \n(0.05,0.5,5)\n(0.15,1.5,15)\n(-10,-1,-0.1)\n(0.001,0.01,0.1)\n(0.002,0.02,0.2)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=mgh17_2.out\n$SCATTERPLOT TIME VS DV PRED FROM 1 TO 900 UNIT ABS0 ORD0\n$SCATTERPLOT PRED VS DV FROM 1 TO 900 UNIT ABS0 ORD0\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (8,'misra1c','http://www.itl.nist.gov/div898/strd/nls/data/misra1c.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.09.16;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM MISRA1C_1\n$DATA misra1c.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nx = TIME\nF = b1 * (1-(1+2*b2*x)**(-.5))  \nY = F + ETA(1)\n$THETA \n(50,500,5000)\n(0.00001,0.0001,0.001)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=MISRA1C_1.out\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (9,'misra1c_2 version 2','http://www.itl.nist.gov/div898/strd/nls/data/misra1c.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.14.56;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM MISRA1C_2\n$DATA misra1c.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nx = TIME\nF = b1 * (1-(1+2*b2*x)**(-.5))  \nY = F + ETA(1)\n$THETA \n(60,600,6000)\n(0.00002,0.0002,0.002)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE F TIME FILE=misra1c_2.out\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (10,'MISRA1D','http://www.itl.nist.gov/div898/strd/nls/data/misra1d.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.19.09;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM MISRA1D_1\n$DATA misra1d.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nx = TIME\nF = b1*b2*x*((1+b2*x)**(-1))\nY = F + ETA(1)\n$THETA \n(50,500,5000)\n(0.00001,0.0001,0.001)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME x FILE=misra1d_1.out\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (11,'MISRA1D_2 Version 2','http://www.itl.nist.gov/div898/strd/nls/data/misra1d.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.22.17;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM MISRA1D_2\n$DATA misra1d.txt\n$INPUT TIME DV\n$PRED \nb1 = THETA(1)\nb2 = THETA(2)\nx = TIME\nF = b1*b2*x*((1+b2*x)**(-1))\nY = F + ETA(1)\n$THETA \n(45,450,4500)\n(0.00003,0.0003,0.003)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=misra1d_2.out\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (12,'nelson_2 Version 2','http://www.itl.nist.gov/div898/strd/nls/data/nelson.shtml','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.20.10.41.03;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM NELSON_2\n$DATA nelson.txt\n$INPUT TIME x2 DV\n$PRED \nb1 = THETA(1)\n\nb2 = THETA(2)\n\nb3 = THETA(3)\n\nx1 = TIME\n\nF = exp ( b1 - b2*x1 * exp (-b3 * x2 ) )\n\nY = F + ETA(1)\n$THETA \n(0.25,2.5,25)\n(0.0000000005,0.000000005,0.00000005)\n(-0.5,-0.05,-0.005)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=nelson_1.out\n@\n',3);
INSERT INTO model (model_id, name, abstract, archive, user_id) VALUES (13,'Norris','Linear regression','head	1.1;\naccess;\nsymbols;\nlocks; strict;\ncomment	@# @;\n\n\n1.1\ndate	2004.04.27.16.47.10;	author vicini;	state Exp;\nbranches;\nnext	;\n\n\ndesc\n@@\n\n\n1.1\nlog\n@@\ntext\n@$PROBLEM NORRIS LINEAR LEAST SQUARES\n$DATA norris.txt\n$INPUT DV TIME\n$PRED \nb0 = THETA(1)\n\nb1 = THETA(2)\n\nx = TIME\n\nF = b0 + b1*x  \n\nY = F + ETA(1)\n$THETA \n(0.02,0.2,2.0)\n(0.1,1,10.0)\n$OMEGA DIAGONAL(1) 1\n$ESTIMATION METHOD=0 SIGDIGITS=3 MAXEVALS=450 PRINT=5\n$COVARIANCE\n$TABLE TIME F FILE=norris.out\n$SCATTERPLOT DV PRED VS TIME FROM 1 TO 900 UNIT ABS0 ORD0\n@\n',3);

--
-- Table structure for table `state`
--

CREATE TABLE state (
  state_code char(3) NOT NULL default '',
  state_name char(20) default NULL,
  PRIMARY KEY  (state_code)
) TYPE=MyISAM;

--
-- Dumping data for table `state`
--

INSERT INTO state (state_code, state_name) VALUES ('q2c','Queued to compile');
INSERT INTO state (state_code, state_name) VALUES ('cmp','Compiling');
INSERT INTO state (state_code, state_name) VALUES ('q2r','Queued to run');
INSERT INTO state (state_code, state_name) VALUES ('run','Running');
INSERT INTO state (state_code, state_name) VALUES ('end','End');

--
-- Table structure for table `user`
--

CREATE TABLE user (
  user_id int(10) unsigned NOT NULL auto_increment,
  first_name varchar(30) NOT NULL default '',
  surname varchar(40) NOT NULL default '',
  password varchar(32) NOT NULL default '',
  username varchar(20) NOT NULL default '',
  PRIMARY KEY  (user_id),
  UNIQUE KEY username (username)
) TYPE=InnoDB;

--
-- Dumping data for table `user`
--

INSERT INTO user (user_id, first_name, surname, password, username) VALUES (1,'','','b433ce675b32a824e24d762ca0fa1ba9','useradmin');
INSERT INTO user (user_id, first_name, surname, password, username) VALUES (2,'','','35fa1bcb6fbfa7aa343aa7f253507176','librarian');
INSERT INTO user (user_id, first_name, surname, password, username) VALUES (3,'Paolo','Vicini','22af645d1859cb5ca6da0c484f1f37ea','vicini');

