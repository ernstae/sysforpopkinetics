package uw.rfpk.mda.nonmem;

import javax.swing.*;
import javax.swing.text.DefaultEditorKit;  
import javax.print.*;
import javax.print.attribute.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Properties;
import java.awt.print.*;
import java.awt.font.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import org.netbeans.ui.wizard.*;
import uw.rfpk.mda.nonmem.wizard.*;
import uw.rfpk.mda.nonmem.display.*;

/**
 * This class creates a window that includes a menu bar and a text area.  The menu bar has two
 * menus, File menu and Operation menu.  The File menu includes Open, Close, Save, Save As,
 * Page Setup and Print menu items.  The Operation menu includes Cretae Input File Transmit File 
 * and Receive File menu items.
 * @author Jiaji Du
 * @version 1.0 
 */                                 
public class MDAFrame extends JFrame
{
    /** This is a constructor creating the applications main window.
     * @param args A String array containing the session ID and secret number
     * @param title a String object as the title of the window.
     */
    public MDAFrame(String title, String[] args)
    {
        if(args.length != 0)
      	{
            sessionId = args[0];                      // Set the session ID
            secret = args[1];                         // Set the secret code
        }
//        if(args.length != 0)
//            textArea.setText(sessionId + "\n" + secret);
        setTitle(title);                              // Set the window title
        initComponents();
        cutMenu.addActionListener(new DefaultEditorKit.CutAction());  
        copyMenu.addActionListener(new DefaultEditorKit.CopyAction());  
        pasteMenu.addActionListener(new DefaultEditorKit.PasteAction()); 
        if(sessionId == null)
	{
            transmitFileMenu.setEnabled(false);
            receiveFileMenu.setEnabled(false);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        errorMessageDialog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        objectiveDialog = new javax.swing.JDialog();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        jTextPane3 = new javax.swing.JTextPane();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        closeMenu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        saveMenu = new javax.swing.JMenuItem();
        savaAsMenu = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        printMenu = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        exitMenu = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        cutMenu = new javax.swing.JMenuItem();
        copyMenu = new javax.swing.JMenuItem();
        pasteMenu = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        createInputFileMenu = new javax.swing.JMenuItem();
        transmitFileMenu = new javax.swing.JMenuItem();
        receiveFileMenu = new javax.swing.JMenuItem();
        processOutputFileMenu = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        errorMenu = new javax.swing.JMenuItem();
        objectiveMenu = new javax.swing.JMenuItem();
        parameterMenu = new javax.swing.JMenu();
        ThetaMenu = new javax.swing.JMenuItem();
        OmegaMenu = new javax.swing.JMenuItem();
        SigmaMenu = new javax.swing.JMenuItem();
        statisticsMenu = new javax.swing.JMenu();
        stdErrorMenu = new javax.swing.JMenu();
        stdErrThetaMenu = new javax.swing.JMenuItem();
        stdErrOmegaMenu = new javax.swing.JMenuItem();
        stdErrSigmaMenu = new javax.swing.JMenuItem();
        covarianceMenu = new javax.swing.JMenuItem();
        correlationMenu = new javax.swing.JMenuItem();
        invCovarianceMenu = new javax.swing.JMenuItem();
        tableMenu = new javax.swing.JMenuItem();
        plotMenu = new javax.swing.JMenuItem();
        summary = new javax.swing.JMenuItem();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Model Information Dialog");
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setModal(true);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("New Model ( NONMEM Control File )");
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        jDialog1.getContentPane().add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("New Version of An Existing Model");
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jRadioButton2, gridBagConstraints);

        jRadioButton3.setText("Existing Version of An Existing Model");
        buttonGroup1.add(jRadioButton3);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 11, 12);
        jDialog1.getContentPane().add(jRadioButton3, gridBagConstraints);

        jLabel1.setText("Model Name ( <= 20 characters )");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Short Description ( <= 100 characters )");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Version Code ( <= 10 characters ) ");
        jLabel3.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 6, 12);
        jDialog1.getContentPane().add(jTextField1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 6, 12);
        jDialog1.getContentPane().add(jTextField2, gridBagConstraints);

        jTextField3.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 3, 12);
        jDialog1.getContentPane().add(jTextField3, gridBagConstraints);

        jButton1.setText("OK");
        jButton1.setMaximumSize(new java.awt.Dimension(75, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(75, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(12, 39, 12, 19);
        jDialog1.getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(12, 31, 12, 31);
        jDialog1.getContentPane().add(jButton2, gridBagConstraints);

        errorMessageDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        errorMessageDialog.setTitle("Error Message");
        errorMessageDialog.setLocationRelativeTo(null);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Courier 10 Pitch", 0, 12));
        jScrollPane2.setViewportView(jTextArea1);

        errorMessageDialog.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        objectiveDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        objectiveDialog.setTitle("Objective");
        objectiveDialog.setLocationRelativeTo(null);
        objectiveDialog.getContentPane().add(jTextArea2, java.awt.BorderLayout.CENTER);

        setBackground(new java.awt.Color(130, 240, 255));
        setLocationRelativeTo(this);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));
        jTextPane1.setBackground(new java.awt.Color(0, 255, 255));
        jTextPane1.setFont(new java.awt.Font("Default", 0, 24));
        jTextPane1.setText("System For Population Kinetics - model design agent");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        jPanel1.add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(0, 255, 255));
        jTextPane2.setText("Copyright 2004 Regents of the University of Washington All rights reserved");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jPanel1.add(jTextPane2, gridBagConstraints);

        jTextPane3.setBackground(new java.awt.Color(0, 255, 255));
        jTextPane3.setFont(new java.awt.Font("Dialog", 0, 14));
        jTextPane3.setText("Type:  NONMEM    Version:  0.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 62, 0, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jTextPane3, gridBagConstraints);

        jButton3.setBackground(new java.awt.Color(0, 255, 204));
        jButton3.setText("Write Input");
        jButton3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setPreferredSize(new java.awt.Dimension(110, 25));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(16, 12, 6, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton3, gridBagConstraints);

        jButton4.setBackground(new java.awt.Color(0, 255, 204));
        jButton4.setText("Submit Job");
        jButton4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.setPreferredSize(new java.awt.Dimension(110, 25));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 6, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton4, gridBagConstraints);

        jButton5.setBackground(new java.awt.Color(0, 255, 204));
        jButton5.setText("Get Report");
        jButton5.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.setPreferredSize(new java.awt.Dimension(110, 25));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(7, 13, 7, 13);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton5, gridBagConstraints);

        jButton6.setBackground(new java.awt.Color(0, 255, 204));
        jButton6.setText("Read output");
        jButton6.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.setPreferredSize(new java.awt.Dimension(110, 25));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 6, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton6, gridBagConstraints);

        jButton7.setBackground(new java.awt.Color(0, 255, 204));
        jButton7.setText("Help");
        jButton7.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 0, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton7, gridBagConstraints);

        jInternalFrame1.setPreferredSize(new java.awt.Dimension(603, 460));
        jInternalFrame1.setVisible(true);
        textArea.setFont(new java.awt.Font("Courier", 0, 12));
        jScrollPane1.setViewportView(textArea);

        jInternalFrame1.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu6.setText("File");
        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setMnemonic('o');
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });

        jMenu6.add(openMenu);

        closeMenu.setMnemonic('c');
        closeMenu.setText("Close");
        closeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuActionPerformed(evt);
            }
        });

        jMenu6.add(closeMenu);

        jMenu6.add(jSeparator4);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setMnemonic('s');
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });

        jMenu6.add(saveMenu);

        savaAsMenu.setMnemonic('a');
        savaAsMenu.setText("Sava As");
        savaAsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savaAsMenuActionPerformed(evt);
            }
        });

        jMenu6.add(savaAsMenu);

        jMenu6.add(jSeparator5);

        printMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printMenu.setMnemonic('r');
        printMenu.setText("Print");
        printMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuActionPerformed(evt);
            }
        });

        jMenu6.add(printMenu);

        jMenu6.add(jSeparator6);

        exitMenu.setMnemonic('e');
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });

        jMenu6.add(exitMenu);

        jMenuBar1.add(jMenu6);

        jMenu7.setText("Edit");
        cutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenu.setMnemonic('c');
        cutMenu.setText("Cut");
        jMenu7.add(cutMenu);

        copyMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenu.setMnemonic('o');
        copyMenu.setText("Copy");
        jMenu7.add(copyMenu);

        pasteMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenu.setMnemonic('p');
        pasteMenu.setText("Paste");
        jMenu7.add(pasteMenu);

        jMenuBar1.add(jMenu7);

        jMenu8.setText("Operation");
        createInputFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        createInputFileMenu.setMnemonic('w');
        createInputFileMenu.setText("Write Input");
        createInputFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createInputFileMenuActionPerformed(evt);
            }
        });

        jMenu8.add(createInputFileMenu);

        transmitFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        transmitFileMenu.setMnemonic('t');
        transmitFileMenu.setText("Submit Job");
        transmitFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transmitFileMenuActionPerformed(evt);
            }
        });

        jMenu8.add(transmitFileMenu);

        receiveFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        receiveFileMenu.setMnemonic('r');
        receiveFileMenu.setText("Get Report");
        receiveFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveFileMenuActionPerformed(evt);
            }
        });

        jMenu8.add(receiveFileMenu);

        processOutputFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        processOutputFileMenu.setMnemonic('p');
        processOutputFileMenu.setText("Read Output");
        processOutputFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processOutputFileMenuActionPerformed(evt);
            }
        });

        jMenu8.add(processOutputFileMenu);

        jMenuBar1.add(jMenu8);

        jMenu9.setText("Display");
        errorMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        errorMenu.setMnemonic('e');
        errorMenu.setText("Error Message");
        errorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorMenuActionPerformed(evt);
            }
        });

        jMenu9.add(errorMenu);

        objectiveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        objectiveMenu.setMnemonic('o');
        objectiveMenu.setText("Objective");
        objectiveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectiveMenuActionPerformed(evt);
            }
        });

        jMenu9.add(objectiveMenu);

        parameterMenu.setMnemonic('p');
        parameterMenu.setText("Parameters");
        ThetaMenu.setText("THETA");
        ThetaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThetaMenuActionPerformed(evt);
            }
        });

        parameterMenu.add(ThetaMenu);

        OmegaMenu.setText("OMEGA");
        OmegaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OmegaMenuActionPerformed(evt);
            }
        });

        parameterMenu.add(OmegaMenu);

        SigmaMenu.setText("SIGMA");
        SigmaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SigmaMenuActionPerformed(evt);
            }
        });

        parameterMenu.add(SigmaMenu);

        jMenu9.add(parameterMenu);

        statisticsMenu.setText("Statistics");
        stdErrorMenu.setText("StdError");
        stdErrThetaMenu.setText("THETA");
        stdErrThetaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdErrThetaMenuActionPerformed(evt);
            }
        });

        stdErrorMenu.add(stdErrThetaMenu);

        stdErrOmegaMenu.setText("OMEGA");
        stdErrOmegaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdErrOmegaMenuActionPerformed(evt);
            }
        });

        stdErrorMenu.add(stdErrOmegaMenu);

        stdErrSigmaMenu.setText("SIGMA");
        stdErrSigmaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdErrSigmaMenuActionPerformed(evt);
            }
        });

        stdErrorMenu.add(stdErrSigmaMenu);

        statisticsMenu.add(stdErrorMenu);

        covarianceMenu.setText("Covariance");
        covarianceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                covarianceMenuActionPerformed(evt);
            }
        });

        statisticsMenu.add(covarianceMenu);

        correlationMenu.setText("Correlation");
        correlationMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correlationMenuActionPerformed(evt);
            }
        });

        statisticsMenu.add(correlationMenu);

        invCovarianceMenu.setText("Inv. Covariance");
        invCovarianceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invCovarianceMenuActionPerformed(evt);
            }
        });

        statisticsMenu.add(invCovarianceMenu);

        jMenu9.add(statisticsMenu);

        tableMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        tableMenu.setMnemonic('t');
        tableMenu.setText("Tables");
        tableMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableMenuActionPerformed(evt);
            }
        });

        jMenu9.add(tableMenu);

        plotMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        plotMenu.setMnemonic('l');
        plotMenu.setText("Scatterplots");
        plotMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotMenuActionPerformed(evt);
            }
        });

        jMenu9.add(plotMenu);

        summary.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        summary.setText("Summary");
        summary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryActionPerformed(evt);
            }
        });

        jMenu9.add(summary);

        jMenuBar1.add(jMenu9);

        jInternalFrame1.setJMenuBar(jMenuBar1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 12, 12);
        jPanel1.add(jInternalFrame1, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void summaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryActionPerformed
        // Ask the user wether to save the text to a file
        saveFile();

        // Preparation
        DecimalFormat f = new DecimalFormat("0.00E00");
        NumberFormat p = NumberFormat.getPercentInstance();
        p.setMaximumFractionDigits(1);
        p.setMinimumFractionDigits(1);
        String rse, sd, cv, n; 
        double lb, ub; 
        
        // Write theta block
        String theta = "";
        if(output.theta != null && output.coefVariation != null)
        {
            for(int i = 0; i < output.theta.length; i++)
            {
                n = String.valueOf(i + 1);
                rse = p.format(Double.parseDouble(output.coefVariation[i]));               
                lb = Double.parseDouble(output.confInterval[0][i]);
                ub = Double.parseDouble(output.confInterval[1][i]);
                theta = theta + getSpace(5 - n.length()) + n + "   " +
                        Utility.formatData(6, f.format(Double.parseDouble(output.theta[i]))) +
                        getSpace(13 - rse.length()) + rse + "    " + 
                        Utility.formatData(6, f.format(lb)) + "  " +
                        Utility.formatData(6, f.format(ub));
                if(lb < 0 && ub > 0)
                    theta += "*";
                theta += "\n";                    
            }
        }
        
        // Write omega block
        String omega = "";
        int k = output.theta.length;
        if(output.omega != null && output.coefVariation != null)
        {
            for(int j = 1; j < output.omega.length + 1; j++)
            {
                for(int i = j - 1; i < output.omega.length; i++)  
                {
                    rse = p.format(Double.parseDouble(output.coefVariation[k]));
                    lb = Double.parseDouble(output.confInterval[0][k]);
                    ub = Double.parseDouble(output.confInterval[1][k++]);
                    cv = p.format(Math.sqrt(Double.parseDouble(output.omega[i][j]))); 
                    omega = omega + "  " + j + "," + (i + 1) + "   " +
                            Utility.formatData(6, f.format(Double.parseDouble(output.omega[i][j]))) +
                            getSpace(13 - rse.length()) + rse + "    " +  
                            Utility.formatData(6, f.format(lb)) + "  " +
                            Utility.formatData(6, f.format(ub));
                    if(lb < 0 && ub > 0)
                        omega += "*";
                    else
                        omega += " ";
                    if(j == i + 1)
                        omega += "   " + "CV = " + getSpace(12 - cv.length()) + cv;
                    omega += "\n"; 
                }
            }
        }
        
        // Write sigma block
        String sigma = "";
        if(output.sigma != null && output.coefVariation != null)
        {
            for(int j = 1; j < output.sigma.length + 1; j++)
            {
                for(int i = j - 1; i < output.sigma.length; i++)  
                {
                    rse = p.format(Double.parseDouble(output.coefVariation[k])); 
                    lb = Double.parseDouble(output.confInterval[0][k]);
                    ub = Double.parseDouble(output.confInterval[1][k++]);
                    sd = f.format(Math.sqrt(Double.parseDouble(output.sigma[i][j])));
                    sigma = sigma + "  " + j + "," + (i + 1) + "   " +
                            Utility.formatData(6, f.format(Double.parseDouble(output.sigma[i][j]))) +
                            getSpace(13 - rse.length()) + rse + "   " +
                            Utility.formatData(6, f.format(lb)) + "   " +
                            Utility.formatData(6, f.format(ub));
                    if(lb < 0 && ub > 0)
                        sigma += "*";
                    else
                        sigma += " ";                    
                    if(j == i + 1)
                        sigma += "   " + "SD =      " + sd;
                    sigma += "\n";                    
                }
            }
        }
        
        // Calculate computation time
        double time = Double.parseDouble(output.time[0]) + Double.parseDouble(output.time[1]);
        
        // Write summary
        String summary = "Summary Report\n\n" + 
                         "Job Name: " + "\n" +
                         "Computation Time: " + String.valueOf(time) + " s" + "\n" +              
                         "Data File Name: " + output.dataFile + "\n" +
                         "Error Message: " + output.error + "\n" +
                         "Minimum Value of Objective Function: " + output.objective + "\n" +
                         "Parameter derived: " + "\n" +
                         "                                 95% CONFIDENCE INTERVAL\n" + 
                         "   Final Estimate        %RSE      LBOUND       UBOUND" + "\n" +
                         "___________________________________________________________________________\n\n" +
                         "THETA\n" + theta + 
                         "___________________________________________________________________________" + "\n" +
                         "                                                           INTERINDIVIDUAL\n" +
                         "OMEGA                                                        VARIABILITY\n" + omega +
                         "___________________________________________________________________________" + "\n" +
                         "                                                               RESIDUAL" + "\n" +
                         "SIGMA                                                        VARIABILITY\n" + sigma +
                         "___________________________________________________________________________" + "\n" +
                         "*Indicates 95% confidence interval that includes zero\n" + 
                         "%RSE is percent relative standard error (100% x SE/EST)";
        textArea.setText(summary);
        jInternalFrame1.setTitle("");
        file = null;
    }//GEN-LAST:event_summaryActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        readOutput();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        getReport();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        submitJob();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        writeInput();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void plotMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotMenuActionPerformed
        if(output != null && output.scatterplot != null)
        {
            if(output.dataAll != null && output.dataItems != null && output.dataLabelMap != null)
            {
                new PlotShow(output.scatterplot, output.dataAll, output.dataItems,  
                             output.dataLabelMap);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "The data is not available", 
                                              "Data not Found Error",               
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_plotMenuActionPerformed

    private void tableMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableMenuActionPerformed
        if(tableShow != null)
            tableShow.showTableList();
    }//GEN-LAST:event_tableMenuActionPerformed

    private void invCovarianceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invCovarianceMenuActionPerformed
        if(output != null && output.invCovariance != null)
        {
            int length = output.invCovariance.length;
            String[] header = new String[length + 1];
            for(int i = 0; i < length; i++)
                header[i + 1] = output.invCovariance[i][0];           
            new MatrixShow(output.invCovariance, header, "Inv. Covariance of Estimate", 
                           "Inv.Covariance Matrix of Estimate",
                           width(length), height(length));    
        }
        else
            JOptionPane.showMessageDialog(null, "The INV. COVARIANCE is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_invCovarianceMenuActionPerformed

    private void correlationMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correlationMenuActionPerformed
        if(output != null && output.correlation != null)
        {
            int length = output.correlation.length;
            String[] header = new String[length + 1];
            for(int i = 0; i < length; i++)
                header[i + 1] = output.correlation[i][0];            
            new MatrixShow(output.correlation, header, "Correlation of Estimate", 
                           "Correlation Matrix of Estimate",
                           width(length), height(length));    
        }
        else
            JOptionPane.showMessageDialog(null, "The CORRELATION is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_correlationMenuActionPerformed

    private void covarianceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_covarianceMenuActionPerformed
        if(output != null && output.covariance != null)
        {
            int length = output.covariance.length;
            String[] header = new String[length + 1];
            for(int i = 0; i < length; i++)
                header[i + 1] = output.covariance[i][0];            
            new MatrixShow(output.covariance, header, "Covariance of Estimate", 
                           "Covariance Matrix of Estimate",
                           width(length), height(length));    
        }
        else
            JOptionPane.showMessageDialog(null, "The COVARIANCE is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_covarianceMenuActionPerformed

    private void stdErrSigmaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdErrSigmaMenuActionPerformed
        if(output != null && output.stdErrSigma != null)
        {
            int length = output.stdErrSigma.length;
            String[] header = new String[length + 1];
            for(int i = 0; i < length; i++)
                header[i + 1] = output.stdErrSigma[i][0];     
            new MatrixShow(output.stdErrSigma, header, "Standard Error of Estimate", 
                           "SIGMA - Cov Matrix for Random Effects - ETAs",
                           width(length), height(length));  
        }
        else
            JOptionPane.showMessageDialog(null, "The standard error of SIGMA is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_stdErrSigmaMenuActionPerformed

    private void stdErrOmegaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdErrOmegaMenuActionPerformed
        if(output != null && output.stdErrOmega != null)
        {
            int length = output.stdErrOmega.length;
            String[] header = new String[length + 1];
            for(int i = 0; i < length; i++)
                header[i + 1] = output.stdErrOmega[i][0]; 
            new MatrixShow(output.stdErrOmega, header, "Standard Error of Estimate", 
                           "OMEGA - Cov Matrix for Random Effects - ETAs",
                           width(length), height(length));   
        }
        else
            JOptionPane.showMessageDialog(null, "The standard error of OMEGA is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_stdErrOmegaMenuActionPerformed

    private void stdErrThetaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdErrThetaMenuActionPerformed
        if(output != null && output.stdErrTheta != null)
        {
            int length = output.stdErrTheta.length;
            String[] header = new String[length];
            for(int i = 0; i < length; i++)
                header[i] = "TH " + (i + 1);        
            new VectorShow(output.stdErrTheta, header, "Standard Error of Estimate", 
                           "THETA - Vector of Fixed Effects Parameters",
                           width(length - 1)); 
        }
        else
            JOptionPane.showMessageDialog(null, "The standard error of THETA is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_stdErrThetaMenuActionPerformed

    private void SigmaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SigmaMenuActionPerformed
        if(output != null && output.sigma != null)
        {
            int length = output.sigma.length;
            String[] header = new String[length + 1];
            for(int i = 0; i < length; i++)
                header[i + 1] = output.sigma[i][0];            
            new MatrixShow(output.sigma, header, "SIGMA Parameter Estimate", 
                           "SIGMA - Cov Matrix for Random Effects - EPSILONs",
                           width(length), height(length));
        }
        else
            JOptionPane.showMessageDialog(null, "The SIGMA is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_SigmaMenuActionPerformed

    private void OmegaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OmegaMenuActionPerformed
        if(output != null && output.omega != null)
        {
            int length = output.omega.length;
            String[] header = new String[length + 1];
            for(int i = 0; i < length; i++)
                header[i + 1] = output.omega[i][0];
            new MatrixShow(output.omega, header, "OMEGA Parameter Estimate", 
                           "OMEGA - Cov Matrix for Random Effects - ETAs",
                           width(length), height(length)); 
        }
        else
            JOptionPane.showMessageDialog(null, "The OMEGA is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_OmegaMenuActionPerformed

    private void ThetaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThetaMenuActionPerformed
        if(output != null && output.theta != null)
        {
            int length = output.theta.length;
            String[] header = new String[length];
            for(int i = 0; i < length; i++)
                header[i] = "TH " + (i + 1);        
            new VectorShow(output.theta, header, "THETA Parameter Estimate", 
                           "THETA - Vector of Fixed Effects Parameters", 
                           width(length - 1)); 
        }
        else
            JOptionPane.showMessageDialog(null, "The THETA is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_ThetaMenuActionPerformed

    private void objectiveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectiveMenuActionPerformed
        if(output != null && output.objective != null)
        {
            jTextArea2.setText("Minimum Value of Objective Function: \n" + output.objective);
            objectiveDialog.setSize(300, 150);
            objectiveDialog.setVisible(true);
            objectiveDialog.show();
        }
        else
            JOptionPane.showMessageDialog(null, "The objective is not available", 
                                          "Data Not Found Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_objectiveMenuActionPerformed

    private void errorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorMenuActionPerformed
        if(output != null && output.error != null)
        {
            jTextArea1.setText(output.error);
            errorMessageDialog.setSize(300, 150);
            errorMessageDialog.setVisible(true);
            errorMessageDialog.show();
        }
        else
             JOptionPane.showMessageDialog(null, "The error message is not available", 
                                          "Error Message Error",               
                                          JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_errorMenuActionPerformed

    private void processOutputFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processOutputFileMenuActionPerformed
        readOutput();
    }//GEN-LAST:event_processOutputFileMenuActionPerformed

    private void receiveFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveFileMenuActionPerformed
        getReport();
    }//GEN-LAST:event_receiveFileMenuActionPerformed

    private void transmitFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transmitFileMenuActionPerformed
        submitJob();
    }//GEN-LAST:event_transmitFileMenuActionPerformed

    private void createInputFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createInputFileMenuActionPerformed
        writeInput();
    }//GEN-LAST:event_createInputFileMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        dispose();
    }//GEN-LAST:event_exitMenuActionPerformed

    private void printMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMenuActionPerformed
        String text = textArea.getText();
        if(!text.endsWith("\n"))
            text += "\n";
        Printer printable = new Printer(text);
			
	// Get a PrinterJob object
        PrinterJob printerJob = PrinterJob.getPrinterJob();

        // Display print dialog,if user return OK, setPrintable and print
        PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet(); 
//        PageFormat pageFormat = printerJob.pageDialog(attributes);
//        if(pageFormat != null)
        if(printerJob.printDialog(attributes))
        {
            printerJob.setPrintable(printable);
//            Book book = new Book();
//            book.append(printable, pageFormat, printable.getPageCount());   
//            printerJob.setPageable(book);
            try
	    {
                printerJob.print(attributes);
            }
            catch(PrinterException pe)
	    {
                JOptionPane.showMessageDialog(null, "Error printing " + pe,  // Display printing 
                                              "Printer Error",               // error message
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_printMenuActionPerformed

    private void savaAsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savaAsMenuActionPerformed
        int result = files.showSaveDialog(null);
        if(result == files.APPROVE_OPTION)
	{
            file = files.getSelectedFile();
            saveOperation(textArea.getText());
        }
    }//GEN-LAST:event_savaAsMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        if(file != null)
	{
            saveOperation(textArea.getText());
        }
        else
	{
            int result = files.showSaveDialog(null);
            if(result == files.APPROVE_OPTION)
	    {
                file = files.getSelectedFile();
                saveOperation(textArea.getText());
            }
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    private void closeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuActionPerformed
        textArea.setText("");
        jInternalFrame1.setTitle("");
        file = null;
    }//GEN-LAST:event_closeMenuActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        // Ask the user whether to save the text to a file
        saveFile();
        
        int result = files.showOpenDialog(null);
        if(result == files.APPROVE_OPTION) 
	{
            file = files.getSelectedFile();
            try
	    {
                BufferedReader in = new BufferedReader(new FileReader(file));
                StringBuffer buffer = new StringBuffer();
                boolean done = false;
                while(!done)
                {
                    // Read a line
                    String line = in.readLine();                            
                    if(line == null) 
                        done = true;
                    else
                        buffer.append(line).append("\n");
	        }
                textArea.setText(buffer.toString());
                jInternalFrame1.setTitle(file.getName());
                in.close();
            }
            catch(IOException ioe )
	    {
                System.err.println(ioe);
                JOptionPane.showMessageDialog(null, "Error opening file",  // Display opening file 
                                              "File Error",                // error message
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openMenuActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        jLabel2.setEnabled(false);
        jTextField2.setEnabled(false);
        jLabel3.setEnabled(false);
        jTextField3.setEnabled(false);         
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        jLabel2.setEnabled(false);
        jTextField2.setEnabled(false);
        jLabel3.setEnabled(true);
        jTextField3.setEnabled(true);       
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        jLabel2.setEnabled(true);
        jTextField2.setEnabled(true);
        jLabel3.setEnabled(false);
        jTextField3.setEnabled(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Collect model information        
        modelInfo = new ModelInfo(); 
        modelInfo.isNewModel = jRadioButton1.isSelected(); 
        modelInfo.isNewVersion = jRadioButton2.isSelected();
        modelInfo.name = jTextField1.getText();
        if(modelInfo.isNewModel)
            modelInfo.description = jTextField2.getText(); 
        else
            if(!modelInfo.isNewVersion)
                modelInfo.version = jTextField3.getText(); 
                     
        // Close the dialog
        jDialog1.dispose();
        
        // Write SPK input file in XML format
        XMLWriter writer = new XMLWriter(modelInfo, control, object);    
        files.setDialogTitle("Save SPK Input File");
        files.setSelectedFile(new File("input.txt"));                    
        int result = files.showSaveDialog(null); 
        if(result == files.APPROVE_OPTION)
	{
            file = files.getSelectedFile();
            writer.save(file.getPath());
            jInternalFrame1.setTitle(file.getName());
        }
        else
        {
            file = null;
            jInternalFrame1.setTitle("");
        }
        textArea.setText(writer.getDocument()); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    // This method performs save file operation.
    private void saveOperation(String text)
    {
        try
        {
            BufferedWriter out = new BufferedWriter(new FileWriter(file));
            out.write(text);
            out.close();
        }
        catch(IOException ioe )
        {
            System.err.println(ioe);
            JOptionPane.showMessageDialog(null, "Error saving file",  // Display saving file
                                          "File Error",               // error message
                                          JOptionPane.ERROR_MESSAGE);
        }
    }

    // Write input
    private void writeInput()
    {
        String[] names = {"Problem", "Data", "Input", "Pred", "Subroutines", "Aes", 
                          "Aesinitial", "Model", "PK", "Theta", "Omega", "Des", 
                          "Error", "Sigma", "Simulation", "TableSim", "ScatterPlotSim",
                          "Estimation", "Covariance", "TableEst", "ScatterPlotEst"};
        MDAIterator iterator = new MDAIterator();                  
        JWizardPane wp = new JWizardPane(iterator, object); 
        wp.getContentPanel().setBackground(new Color(240, 245, 255));   
        wp.setContentImage((new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/nonmem/wizard/nonmem-spk.gif"))).getImage()); 
        wp.createDialog(null , "Model Design agent Input File Generation Wizard").show();
             
        if(wp.getCustomizedObject() == null)
            return;
        object = (MDAObject)wp.getCustomizedObject();
        Properties records = object.getRecords();
        control = "";
        for(int i = 0; i < 21; i++)
        {
            if(!records.getProperty(names[i]).equals("")) 
                control = control + records.getProperty(names[i]) + "\n"; 
        }
        if(JOptionPane.showConfirmDialog(null, 
                                         "Do you want to save the NONMEM control file?",   
                                         "Question Dialog",
                                         JOptionPane.YES_NO_OPTION,
                                         JOptionPane.QUESTION_MESSAGE) == 0)
        {
            files.setDialogTitle("Save NONMEM Control File");
            files.setSelectedFile(new File("control.txt")); 
            int result = files.showSaveDialog(null);
            if(result == files.APPROVE_OPTION)
	    {
                file = files.getSelectedFile();
                saveOperation(control); 
            }   
        }
                
        if(JOptionPane.showConfirmDialog(null, 
                                         "Do you want to save the SPK input file?",   
                                         "Question Dialog",
                                         JOptionPane.YES_NO_OPTION,
                                         JOptionPane.QUESTION_MESSAGE) == 0)
        {
            // Collect model information
            modelInfo = null; 
            jDialog1.setSize(300, 280);
            jDialog1.setVisible(true);
        }        
    }
    
    // Submit job
    private void submitJob()
    {
        String fileName = JOptionPane.showInputDialog("Enter file name to transmit"); // Get filename 
                                                                                      // from the user
        if(fileName == null)
            return;
        else if(fileName.equals(""))
        {
            JOptionPane.showMessageDialog(null, "The file needs a name.",  // Display file name 
                                          "File Name Error",               // error message
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        try
        {      
            Network network = new Network("https://rose.rfpk.washington.edu:8443/spk/servlet/uw.rfpk.servlets.ReceiveFile",
                                          sessionId);

            String[] messages = new String[3];
            messages[0] = secret;
            messages[1] = fileName;
            messages[2] = textArea.getText();
            messages = network.talk(messages, 1);
                 
            if(messages[0] != "")
                JOptionPane.showMessageDialog(null, messages[0],                // Display the message 
                                              "Message from the server",        
                                              JOptionPane.INFORMATION_MESSAGE); 
        }
        catch(Exception ex)
	{
            JOptionPane.showMessageDialog(null, "Error transmitting " + ex,  // Display transmitting 
                                          "Network Error",             // error message
                                          JOptionPane.ERROR_MESSAGE);
        }        
    }
    
    // Get report
    private void getReport()
    {
        String fileName = JOptionPane.showInputDialog("Enter file name to receive");  // Get filename
                                                                                      // from the user
        if(fileName == null)
            return;
        else if(fileName.equals(""))
        {
            JOptionPane.showMessageDialog(null, "The file needs a name.",  // Display file name 
                                          "File Name Error",               // error message
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        try
        {
            Network network = new Network("https://rose.rfpk.washington.edu:8443/spk/servlet/uw.rfpk.servlets.TransmitFile",
                                          sessionId);  

            String[] messages = new String[2];
            messages[0] = secret;
            messages[1] = fileName;
            messages = network.talk(messages, 2);
            if(messages[0] != "") 
            {   
                // Display the file content and name
                textArea.setText(messages[0]); 
                jInternalFrame1.setTitle(fileName);   
                file = null;
            }
                                                                                    
            if(messages[1] != "")
                JOptionPane.showMessageDialog(null, messages[1],            // display the message 
                                              "Message from the server",   
                                              JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception ex)
	{
            JOptionPane.showMessageDialog(null, "Error receiving " + ex,    // Display receiving 
                                          "Network Error",                  // error message
                                          JOptionPane.ERROR_MESSAGE);
        }        
    }
    
    // Read report
    private void readOutput()
    { 
        String text = textArea.getText();
        if(text.indexOf("<spkreport>") == -1 || text.indexOf("<spksource>") == -1)
        {
            JOptionPane.showMessageDialog(null, "SPK output file is not loaded",  
                                          "File Error",            
                                          JOptionPane.ERROR_MESSAGE);            
            return;   
        }
        output = new Output();
        XMLReader reader = new XMLReader(text, output);
        
        // Promote user to save tables into files
        if(output.table != null)
        {        
            if(output.dataAll != null && output.dataItems != null && output.dataLabelMap != null)
            {
                tableShow = new TableShow(output.table, output.dataAll, output.dataItems,  
                                          output.dataLabelMap);
                for(int i = 0; i < output.table.length; i++)
                {
                    String[][] tableI = output.table[i];
                    if(tableI[0][0] != null && 
                       JOptionPane.showConfirmDialog(null, 
                                                     "Do you want to save the table file: " + tableI[0][0],   
                                                     "Question Dialog",
                                                     JOptionPane.YES_NO_OPTION,
                                                     JOptionPane.QUESTION_MESSAGE) == 0)
                    {
                        // Fill the table
                        String[][] data = new String[output.dataAll.length][tableI[1].length + 1]; 
                        String[] header = new String[tableI[1].length + 1];
                        String path = System.getProperty("user.home") + System.getProperty("file.separator");
                        for(int j = 0; j < tableI[1].length; j++)
                        {
                             // For item "DV" replace it by the alias
                             if(tableI[1][j].equals("DV"))
                                 tableI[1][j] = output.dataLabelMap.getProperty("DV");
                        }                        
                        
                        tableShow.fillTable(tableI, data, header);
                        files.setDialogTitle("Save table File");
                        files.setSelectedFile(new File(path + tableI[0][0])); 
                        int result = files.showSaveDialog(null);
                        if(result == files.APPROVE_OPTION)
	                {
                            file = files.getSelectedFile();
                            try
                            {
                                BufferedWriter out = new BufferedWriter(new FileWriter(file));
                                int nColumns = data[0].length;
                                int nRows = data.length;
                                
                                // Format and write header and data
                                DecimalFormat f = new DecimalFormat("0.0000E00");
                                int start = 0;
                                int k = 0;
                                while(k < nRows)
                                {    
                                    // Write headers
                                    if(tableI[0][1].equals("every") ||
                                       (tableI[0][1].equals("one") && k == 0))
                                    {
                                        out.write("TABLE NO.  " + (i + 1) + "\n");
                                        for(int j = 1; j < nColumns; j++)
                                        {                                            
                                            out.write(getSpace(12 - header[j].length()));
                                            out.write(header[j]);
                                        }      
                                    }
                                    else
                                        out.write("\n");
                                    out.write("\n");  
                                    
                                    // Format and write data
                                    for(k = start; k < nRows && k < start + 900; k++) 
                                    {
                                        // Format and write data
                                        for(int l = 1; l < nColumns; l++)
                                            out.write(" " + Utility.formatData(8, f.format(Double.parseDouble(data[k][l]))));
                                        out.write("\n");
                                    }
                                    start = k;
                                }
                
                                out.close();
                            }
                            catch(IOException ioe )
                            {
                                System.err.println(ioe);
                                JOptionPane.showMessageDialog(null, "Error saving file",  // Display saving file
                                                              "File Error",               // error message
                                                              JOptionPane.ERROR_MESSAGE);
                            }
                        }                           
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "The data is not available", 
                                              "Data Not Found Error",               
                                              JOptionPane.ERROR_MESSAGE);                
            }
        }

        // Promote user to save presentation data
        if(JOptionPane.showConfirmDialog(null, 
                                         "Do you want to save the SPK report data file?",   
                                         "Question Dialog",
                                         JOptionPane.YES_NO_OPTION,
                                         JOptionPane.QUESTION_MESSAGE) == 0)
        {
            files.setDialogTitle("Save SPK report data File");
            files.setSelectedFile(new File("data.txt")); 
            int result = files.showSaveDialog(null);
            if(result == files.APPROVE_OPTION)
	    {
                file = files.getSelectedFile();
                try
                {
                    BufferedWriter out = new BufferedWriter(new FileWriter(file));
                    int nColumns = output.dataItems.size();
                    int nRows = output.dataAll.length;
                    for(int i = 0; i < nColumns; i++)
                    {
                        String label = (String)output.dataItems.get(i);                        
                        out.write(getSpace(12 - label.length()));
                        out.write(label);
                    }
                    out.write("\n");
                    DecimalFormat f = new DecimalFormat("0.0000E00");
                    for(int j = 0; j < nRows; j++)
                    {
                        for(int i = 0; i < nColumns; i++)
                            out.write(" " + Utility.formatData(8, f.format(output.dataAll[j][i]))); 
                        out.write("\n");
                    }
                    out.close();
                }
                catch(IOException ioe )
                {
                    System.err.println(ioe);
                    JOptionPane.showMessageDialog(null, "Error saving file",  // Display saving file
                                                  "File Error",               // error message
                                                  JOptionPane.ERROR_MESSAGE);
                }
            }   
        }        
    }
    
    // This function return spaces
    private String getSpace(int n)
    {
        String s = "";
        for(int i = 0; i < n; i++)
            s += " ";
        return s;  
    }

    // This function returns matrix width
    private int width(int dimension) 
    {
        if(dimension < 3)
            dimension = 3;
        int width = (dimension + 1) * 80 + 60; 
        if(width > 800)
            width = 800;
        return width;
    }
    
    // This function returns matrix height
    private int height(int dimension)
    {
        int height = (dimension + 1) * 20 + 120;
        if(height > 600)
            height = 600;
        return height;
    }  
    
    // This function asks the user wether to save the text to a file
    private void saveFile()
    {
        if(!textArea.getText().equals(""))
        {
            String pathName = "untitled";
            if(file != null)
                pathName = file.getPath();
            if(JOptionPane.showConfirmDialog(null, 
                                             "Do you want to save the file " + pathName + "?",   
                                             "Question Dialog",
                                             JOptionPane.YES_NO_OPTION,
                                             JOptionPane.QUESTION_MESSAGE) == 0)
            {
                if(pathName.equals("untitled")) 
                {
                    int result = files.showSaveDialog(null);
                    if(result == files.APPROVE_OPTION)
                        file = files.getSelectedFile();
                }
                else
                {
                    file = new File(pathName);   
                }
                saveOperation(textArea.getText());    
            }  
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem OmegaMenu;
    private javax.swing.JMenuItem SigmaMenu;
    private javax.swing.JMenuItem ThetaMenu;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem closeMenu;
    private javax.swing.JMenuItem copyMenu;
    private javax.swing.JMenuItem correlationMenu;
    private javax.swing.JMenuItem covarianceMenu;
    private javax.swing.JMenuItem createInputFileMenu;
    private javax.swing.JMenuItem cutMenu;
    private javax.swing.JMenuItem errorMenu;
    private javax.swing.JDialog errorMessageDialog;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenuItem invCovarianceMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JDialog objectiveDialog;
    private javax.swing.JMenuItem objectiveMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenu parameterMenu;
    private javax.swing.JMenuItem pasteMenu;
    private javax.swing.JMenuItem plotMenu;
    private javax.swing.JMenuItem printMenu;
    private javax.swing.JMenuItem processOutputFileMenu;
    private javax.swing.JMenuItem receiveFileMenu;
    private javax.swing.JMenuItem savaAsMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenu statisticsMenu;
    private javax.swing.JMenuItem stdErrOmegaMenu;
    private javax.swing.JMenuItem stdErrSigmaMenu;
    private javax.swing.JMenuItem stdErrThetaMenu;
    private javax.swing.JMenu stdErrorMenu;
    private javax.swing.JMenuItem summary;
    private javax.swing.JMenuItem tableMenu;
    private javax.swing.JTextArea textArea;
    private javax.swing.JMenuItem transmitFileMenu;
    // End of variables declaration//GEN-END:variables

    // File chooser
    private JFileChooser files = new JFileChooser();

    // Current file
    private File file = null;

    // Session ID
    private String sessionId = null;

    // Secret code
    private String secret = null;
    
    // Model information
    private ModelInfo modelInfo = null;
    
    // Nonmem Control file text 
    private String control = null;
    
    // MDA object
    private MDAObject object = new MDAObject();
    
    // Spk output
    private Output output = null;
    
    // TableShow object
    private TableShow tableShow = null;
}
