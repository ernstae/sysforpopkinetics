/*
 * Sigma.java
 *
 * Created on August 15, 2003, 1:17 PM
 */

package uw.rfpk.mda.nonmem.wizard;

import uw.rfpk.mda.nonmem.Utility;
import org.netbeans.ui.wizard.*;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.table.*;
import javax.swing.JTable;
import javax.swing.JButton;
import javax.swing.JTextPane;
import javax.swing.JViewport; 
import javax.swing.DefaultListModel; 
import javax.swing.JScrollPane;
import javax.swing.SwingConstants; 
import javax.swing.JOptionPane;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent; 

/**
 * This class defines a step to create the $SIGMA record
 * @author  jiaji Du
 */
public class Sigma extends javax.swing.JPanel implements WizardStep {
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this; 
    private MDAIterator iterator = null;
    private DefaultListModel model = null;
    private TableModel tableModel = new ATableModel(); 
    private String attributes = "";
    private JWizardPane wizardPane = null;
    private boolean isValid = false;
    private boolean isDiagonal = true;
    private boolean isBlockFixed = false;
    private int dimension = 1;
    private int dimSum = 0;
    private int nEps = 0;
    private int index = -1;
    private Object[][] data = null; 
    private Vector dimList = new Vector();
    private String element = null;

    /** Creates new form Sigma
     * @param iter A MDAIterator object to initialize the field iterator
     */
    public Sigma(MDAIterator iter) {  
        initComponents();
        iterator = iter;     
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jTextPane3 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        help = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        addButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        changeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setBackground(java.awt.Color.white);
        jDialog1.setLocationRelativeTo(jDialog1);
        jDialog1.setModal(true);
        jDialog1.setResizable(false);
        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 12, 3);
        jDialog1.getContentPane().add(jTextPane3, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setMinimumSize(new java.awt.Dimension(600, 300));
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });

        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jDialog1.getContentPane().add(jScrollPane2, gridBagConstraints);

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(6, 54, 12, 54);
        jDialog1.getContentPane().add(jButton2, gridBagConstraints);

        jCheckBox1.setText("The entire block is fixed.");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 0, 12);
        jDialog1.getContentPane().add(jCheckBox1, gridBagConstraints);

        jDialog2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        help.setEditable(false);
        jScrollPane3.setViewportView(help);

        jDialog2.getContentPane().add(jScrollPane3, java.awt.BorderLayout.CENTER);

        setLayout(new java.awt.GridBagLayout());

        setEnabled(false);
        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox1.setEditable(true);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox1.setMinimumSize(new java.awt.Dimension(80, 24));
        jComboBox1.setPreferredSize(new java.awt.Dimension(31, 24));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 6, 15);
        add(jComboBox1, gridBagConstraints);

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 16, 7, 16);
        add(addButton, gridBagConstraints);

        upButton.setText("Up");
        upButton.setEnabled(false);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(16, 16, 6, 16);
        add(upButton, gridBagConstraints);

        downButton.setText("Down");
        downButton.setEnabled(false);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 16, 56, 16);
        add(downButton, gridBagConstraints);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Enter the initial estimates and constraints for the elements of one or\nserveral blocks of the SIGMA matrix.  You may either enter data for a\nnew  block or constrain the block to be equal to the preceding block.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 12, 12);
        add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setText("List of the  \nblocks\nyou have \nentered.");
        jTextPane2.setPreferredSize(new java.awt.Dimension(60, 66));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 16, 44, 0);
        add(jTextPane2, gridBagConstraints);

        changeButton.setText("Change");
        changeButton.setEnabled(false);
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 6, 16);
        add(changeButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 16);
        add(deleteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jSeparator2, gridBagConstraints);

        model = new DefaultListModel();
        jList1 = new javax.swing.JList(model);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFixedCellHeight(15);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 88;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 12, 16);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Dimension");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 37, 10, 11);
        add(jLabel1, gridBagConstraints);

        jButton1.setText("Enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 6, 16);
        add(jButton1, gridBagConstraints);

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Diagonal");
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 16);
        add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Full matrix");
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 7);
        add(jRadioButton2, gridBagConstraints);

        jRadioButton3.setSelected(true);
        jRadioButton3.setText("New block");
        buttonGroup2.add(jRadioButton3);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 14, 11, 0);
        add(jRadioButton3, gridBagConstraints);

        jRadioButton4.setText("Constrained to be equal to the preceding block");
        buttonGroup2.add(jRadioButton4);
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 13, 18, 13);
        add(jRadioButton4, gridBagConstraints);

    }//GEN-END:initComponents

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        if(model.getSize() == 0)
        {
            JOptionPane.showMessageDialog(null, 
                                          "No preceding block found.",
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
        jLabel1.setEnabled(false);
        jComboBox1.setEnabled(false);
        jButton1.setEnabled(false);
        addButton.setEnabled(model.getSize() > 0);
        changeButton.setEnabled(model.getSize() > 1);
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        jRadioButton1.setEnabled(true);
        jRadioButton2.setEnabled(true);
        jLabel1.setEnabled(true);
        jComboBox1.setEnabled(true);
        jButton1.setEnabled(true);
        addButton.setEnabled(false);
        changeButton.setEnabled(false);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        addButton.setEnabled(false);
        changeButton.setEnabled(false);
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        addButton.setEnabled(false);
        changeButton.setEnabled(false);
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        addButton.setEnabled(false);
        changeButton.setEnabled(false);
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        jButton2.setEnabled(true);
    }//GEN-LAST:event_jTable1KeyTyped

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        index = jList1.getSelectedIndex();    
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);        
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_jList1MouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        isBlockFixed = jCheckBox1.isSelected();
        if(isDiagonal)
        {
            for(int i = 0; i < dimension; i++)
                tableModel.setValueAt(new Boolean(isBlockFixed), i, 2);
            jTable1.repaint(); 
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Create an element to add to the list
        if(isDiagonal)
        {
            element = "DIAGONAL(" + dimension + ")";
            for(int i = 0; i < dimension; i++)
            {
                String value = ((String)tableModel.getValueAt(i, 1)).trim();
                if(!Utility.isFloatNumber(value)) 
                {
                    JOptionPane.showMessageDialog(null, 
                                          "The element [" + (i + 1) + "," + (i + 1) + 
                                          "] is not a floating point number.",
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                         
                    return;
                }
                element = element + " " + value; 
                if(tableModel.getValueAt(i, 2).toString() == "true") 
                    element = element + " FIXED"; 
            }
        }
        else
        {           
            element = "BLOCK(" + dimension + ")";
            for(int i = 0; i < dimension; i++)
            {
                for(int j = 1; j < i + 2; j++)
                {
                    String value = ((String)tableModel.getValueAt(i, j)).trim();
                    if(!Utility.isFloatNumber(value))
                    {
                        JOptionPane.showMessageDialog(null, 
                                          "The element [" + (i + 1) + "," + j + 
                                          "] is not a floating point number.",
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                          
                        return; 
                    }
                    element = element + " " + value;
                    if(isBlockFixed) 
                        element = element + " FIXED";
                }
            }
        }
       
        // Set add and change buttons
        addButton.setEnabled(true);
        if(model.getSize() > 0)
            changeButton.setEnabled(true);
        
        // Close the dialog
        jDialog1.setVisible(false);
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Check if number of EPSs
        if(nEps == 0)
        {
            JOptionPane.showMessageDialog(null, 
                                          "The number of EPSs is 0" + 
                                          " found in $PK or $PRED record.",
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);            
            return;
        }
        
        // Check dimension
        String size = ((String)jComboBox1.getSelectedItem()).trim();
        if(size.startsWith("+"))
            size = size.substring(1);
        if(!Utility.isPosIntNumber(size))
        {
            JOptionPane.showMessageDialog(null, 
                                          "The Dimension is not a positive " +
                                          "integer number.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE);                      
            return;
        }
        dimension = Integer.parseInt(size);
        isDiagonal = jRadioButton1.isSelected();
        if(isDiagonal)
        {
            data = new Object[dimension][3];
            for(int i = 0; i < dimension; i++)
            {
                data[i][0] = String.valueOf(i + 1) + "," + String.valueOf(i + 1);
                data[i][1] = "";
                data[i][2] = new Boolean(false);
            }            
        }
        else
        {
            data = new Object[dimension][dimension + 1];
            for(int i = 0; i < dimension; i++)
            {
                data[i][0] = String.valueOf(i + 1);
                for(int j = 1; j <= dimension; j++) 
                    if(j - i > 1) 
                    {
                        data[i][j] = "          ...";
                    }
                    else 
                    {
                        data[i][j] = "";
                    }
            }            
        }
        
        // Create a column model for the main table.  
        TableColumnModel cm = new DefaultTableColumnModel() {
            boolean first = true;
            public void addColumn(TableColumn tc) {
                // Drop the first column that will be the row header.
                if(first) {first = false; return; }
                tc.setMinWidth(100);
                super.addColumn(tc);
            }
        };
        // Create a column model that will serve the row header table.
        TableColumnModel rowHeaderModel = new DefaultTableColumnModel() {
            boolean first = true; 
            public void addColumn(TableColumn tc) {
                if(first) {
                    tc.setMaxWidth(100);
                    super.addColumn(tc);
                    first = false;
                }
                // Drop the rest of the col;umns.
            }
        };
        
        
        if(isDiagonal)
        {
            if(dimension < 7)
            {
                jDialog1.setSize(350,300);
                jScrollPane2.setMinimumSize(new Dimension(303, 120));
            }
            else 
            {
                jDialog1.setSize(365,300);
                jScrollPane2.setMinimumSize(new Dimension(318, 120));
            }
            jTextPane3.setText("Enter data for the diagonal elements of the block. " +
                               "Click the cell to enter the data.  You must " + 
                               "press the \"Enter\" key after typing in the last element.");  
            jDialog1.setTitle("Diagonal Matrix Enter Form");
        }
        else
        {
            jDialog1.setSize(560,300);  
            jTextPane3.setText("Enter initial estimates of the elements of the block.  " +
                               "Click the cell to enter data.  Only the data in " +
                               "the lower triangle elements are required.  You must " +
                               "press the \"Enter\" key after typing in the last element.");
            jScrollPane2.setMinimumSize(new Dimension(510, 120));
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); 
            jDialog1.setTitle("Full Matrix Enter Form");
        }
        jTable1.setModel(tableModel);  
        jTable1.setColumnModel(cm);
        
        // Set up the header column and get it hooked up to everything.
        JTable headerColumn = new JTable(tableModel, rowHeaderModel); 
        jTable1.createDefaultColumnsFromModel();
        headerColumn.createDefaultColumnsFromModel();
        jTable1.setSelectionModel(headerColumn.getSelectionModel());
        jTable1.setRowSelectionAllowed(false);
        rowHeaderModel.getColumn(0).setCellRenderer(new HeaderCellRenderer()); 
        
        // Make the header column look pretty.
        headerColumn.setMaximumSize(new Dimension(100,  dimension));
        headerColumn.setBackground(new Color(204, 204, 204));
        headerColumn.setColumnSelectionAllowed(false);
        headerColumn.setCellSelectionEnabled(false);

        // Put it in a viewport.
        JViewport jv = new JViewport();
        jv.setView(headerColumn);
        jv.setPreferredSize(headerColumn.getMaximumSize());

        // Shut off autoResizeMode.
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        // Attach the row headers.
        jScrollPane2.setRowHeader(jv);
        
        // Display the dialog
        jButton2.setEnabled(false);
        jCheckBox1.setSelected(false); 
        isBlockFixed = false;
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Remove the selected element
        model.removeElement(jList1.getSelectedValue());
        dimList.removeElementAt(index);
        jList1.setSelectedIndex(--index);
        
        // Update the followed blocks with "SAME" if any
        if(index >= 0)
        {
            updateBlockSame(((Integer)dimList.get(index)).intValue()); 
        }

        // Set change and delete buttons, and the check box for block with "SAME"
        if(model.getSize() == 0)
        {
            changeButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
            
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
        
        updateLeftButtons();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        // Set the element at the selected position
        if(jRadioButton4.isSelected())
        {
            if(index == 0 )
            {
                JOptionPane.showMessageDialog(null, 
                                          "No preceding block found.",
                                          "Input Error",  
                                          JOptionPane.ERROR_MESSAGE);                    
                return;
            }
            element = "BLOCK(" + dimList.get(index - 1) + ") SAME";
            dimList.set(index, dimList.get(index - 1)); 
        }
        else
        {
            dimList.set(index, new Integer(dimension));
        }
        model.set(index, "$SIGMA " + element);  
        
        // Update the followed elements with "SAME" if any
        updateBlockSame(dimension);
    
        updateLeftButtons();
    }//GEN-LAST:event_changeButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        jList1.setSelectedIndex(++index);
        if(index == 0)
        {
            changeButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_downButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Add the element into the selected position
        index++;
        if(jRadioButton4.isSelected())
        {
            element = "BLOCK(" + dimList.get(index - 1) + ") SAME";
            dimList.add(index, dimList.get(index - 1)); 
        }
        else
        {
            dimList.add(index, new Integer(dimension));
        }
        model.add(index, "$SIGMA " + element);  
        jList1.setSelectedIndex(index);
        
        // Update the followed elements with "SAME" if any
        updateBlockSame(dimension);

        // set change and delete buttons
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
        
        updateLeftButtons();
    }//GEN-LAST:event_addButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        jList1.setSelectedIndex(--index);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_upButtonActionPerformed
    private void updateLeftButtons()
    {
        // Check SIGMA size
        dimSum = 0;
        for(int i = 0; i < dimList.size(); i++)
            dimSum = dimSum + ((Integer)dimList.get(i)).intValue();  
        if(dimSum > nEps)
        {
            JOptionPane.showMessageDialog(null, 
                                          "The dimension of the SIGMA matrix " +
                                          "is greater than \nthe number of EPS " +
                                          "found in $PK or $PRED record.",   
                                          "Input Error",    
                                          JOptionPane.ERROR_MESSAGE); 
            if(isValid)
            {
                isValid = false;
                wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
            } 
            return;
        }
        if(dimSum == nEps && !isValid)
        {
            isValid = true;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        } 
        if(dimSum < nEps && isValid)
        {
            isValid = false;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        } 
    }
        
    private void updateBlockSame(int dimension)
    {
        for(int i = index + 1; i < model.getSize(); i++)
        {
            if(!((String)model.getElementAt(i)).endsWith("SAME")) 
                return;
            model.setElementAt("$SIGMA BLOCK(" + dimension + ") SAME", i);
            dimList.setElementAt(new Integer(dimension), i);
        }        
    }
    
    class ATableModel extends AbstractTableModel {
        public String getColumnName(int c) {
            String name = null;
            if(c == 0) 
            {
                name = "Index";
            }
            else
            {
                if(isDiagonal)
                {
                    if(c == 1) name = "Initial Estimate"; 
                    if(c == 2) name = "Value is fixed";
                }
                else
                {
                    name = String.valueOf(c);
                }
            }
            return name;
        }
        public Class getColumnClass(int c) {
            return data[0][c].getClass();
        }
        public int getColumnCount() {
            if(isDiagonal) return 3;
            else return dimension + 1; 
        }
        public int getRowCount() {
            return dimension;
        }
        public Object getValueAt(int r, int c) {
            return data[r][c];
        }
        public boolean isCellEditable(int r, int c) {
            boolean isEditable = true;
            if(isDiagonal) isEditable = !(c == 0);
            else isEditable = !(c == 0 || c - r > 1); 
            return isEditable;
        }
        public void setValueAt(Object value, int r, int c) {
            data[r][c] = value;
        }
    }

    class HeaderCellRenderer extends DefaultTableCellRenderer 
    {
        public Component getTableCellRendererComponent(JTable table,
            Object value,boolean isSelected, boolean hasFocus, int row,int col) 
        {
            super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,col);
            setHorizontalAlignment(SwingConstants.CENTER);
            return this;
	}
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JTextArea help;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
    
    /**
     * This method is to return the StepDescriptor object
     * @return A StepDescriptor object
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
  	    return "$SIGMA Record";
  	}

	public String getStepTitle(){
	    return "$SIGMA Record";
	}

	public void showingStep(JWizardPane wizard){
            wizardPane = wizard;
            if(nEps != iterator.getNEps())
                model.removeAllElements();
            nEps = iterator.getNEps(); 
	}

	public void hidingStep(JWizardPane wizard){
            int size = model.getSize();
            if(size != 0)
            {
                MDAObject object = (MDAObject)wizard.getCustomizedObject();
                String record = (String)model.get(0);  
                for(int i = 1; i < size; i++)
                    record = record + "\n" + model.get(i);
                object.getRecords().setProperty("Sigma", record);
                String[][] sigma = new String[nEps][];
                for(int i = 0; i < size; i++)
                {
                    String block = (String)model.get(i);
                    block = block.replaceAll(" FIXED", "F");
                    String[] items = block.split(" ");
                    sigma[i] = new String[items.length];
                    sigma[i][0] = items[1].substring(0, items[1].indexOf("(")).toLowerCase();  
                    sigma[i][1] = items[1].substring(items[1].indexOf("(") + 1, 
                                                     items[1].length() - 1);
                    for(int j = 2; j < items.length; j++)
                        sigma[i][j] = items[j];
                }
                object.getSource().sigma = sigma;
            }
	}

	public boolean isValid(){
            return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    jDialog2.setTitle("Help for " + getStepTitle());
                    jDialog2.setSize(600, 500);
                    jDialog2.setVisible(true);
                    jDialog2.show();  
                }
            };
	}
    }
}
