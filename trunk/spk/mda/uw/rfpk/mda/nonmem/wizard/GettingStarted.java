/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.wizard;

import uw.rfpk.mda.nonmem.Utility;
import org.netbeans.ui.wizard.*;
import java.util.Properties;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.*;
import java.util.regex.*;

/**
 * This class defines a step to collect general information.
 * @author  Jiaji Du
 */
public class GettingStarted extends javax.swing.JPanel implements WizardStep {
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this;
    private MDAIterator iterator = null;
    private JWizardPane wizardPane = null;
    private String subroutine = null;
    private boolean isValid = false;

    /** Creates new form GettingStarted.
     * @param iter a MDAIterator object to initialize the field iterator.
     */
    public GettingStarted(MDAIterator iter) {
        iterator = iter;
        initComponents();       
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        trans1 = new javax.swing.JMenuItem();
        trans2 = new javax.swing.JMenuItem();
        trans3 = new javax.swing.JMenuItem();
        trans4 = new javax.swing.JMenuItem();
        trans5 = new javax.swing.JMenuItem();
        trans6 = new javax.swing.JMenuItem();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jRadioButton6 = new javax.swing.JRadioButton();
        graphicalEditor = new javax.swing.JRadioButton();
        jSeparator6 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        textEditor = new javax.swing.JRadioButton();

        jPopupMenu1.setBackground(new java.awt.Color(255, 255, 255));
        jPopupMenu1.setAutoscrolls(true);
        jPopupMenu1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenu1PopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jMenuItem1.setText("SUBROUTINE ADVAN1");
        jMenuItem1.setToolTipText("One compartment linear model");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("SUBROUTINE ADVAN2");
        jMenuItem2.setToolTipText("One compartment linear model with first order absorption");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setText("SUBROUTINE ADVAN3");
        jMenuItem3.setToolTipText("Two compartment linear model");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem3);

        jMenuItem4.setText("SUBROUTINE ADVAN4");
        jMenuItem4.setToolTipText("Two compartment linear model with first order absorption");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem4);

        jMenuItem5.setText("SUBROUTINE ADVAN5");
        jMenuItem5.setToolTipText("General linear model");
        jMenuItem5.setEnabled(false);
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem5);

        jMenuItem6.setText("SUBROUTINE ADVAN6");
        jMenuItem6.setToolTipText("General nonlinear model");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem6);

        jMenuItem7.setText("SUBROUTINE ADVAN7");
        jMenuItem7.setToolTipText("General linear model with real eigenvalues");
        jMenuItem7.setEnabled(false);
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem7);

        jMenuItem8.setText("SUBROUTINE ADAVN8");
        jMenuItem8.setToolTipText("General nonlinear model with stiff differential equations");
        jMenuItem8.setEnabled(false);
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem8);

        jMenuItem9.setText("SUBROUTINE ADVAN9");
        jMenuItem9.setToolTipText("General nonlinear model with equilibrium compartments");
        jMenuItem9.setEnabled(false);
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem9);

        jMenuItem10.setText("SUBROUTINE ANVAN10");
        jMenuItem10.setToolTipText("One compartment model with Michaelis-Menten elimination");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem10);

        jMenuItem11.setText("SUBROUTINE ADVAN11");
        jMenuItem11.setToolTipText("Three compartment linear model");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem11);

        jMenuItem12.setText("SUBROUTINE ADVAN12");
        jMenuItem12.setToolTipText("Three compartment linear model with first order absorption");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem12);

        jPopupMenu2.setBackground(new java.awt.Color(255, 255, 255));
        jPopupMenu2.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenu2PopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        trans1.setBackground(new java.awt.Color(255, 255, 255));
        trans1.setText("Using TRANS1");
        trans1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trans1ActionPerformed(evt);
            }
        });

        jPopupMenu2.add(trans1);

        trans2.setBackground(new java.awt.Color(255, 255, 255));
        trans2.setText("Using TRANS2");
        trans2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trans2ActionPerformed(evt);
            }
        });

        jPopupMenu2.add(trans2);

        trans3.setBackground(new java.awt.Color(255, 255, 255));
        trans3.setText("Using TRANS3");
        trans3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trans3ActionPerformed(evt);
            }
        });

        jPopupMenu2.add(trans3);

        trans4.setBackground(new java.awt.Color(255, 255, 255));
        trans4.setText("Using TRANS4");
        trans4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trans4ActionPerformed(evt);
            }
        });

        jPopupMenu2.add(trans4);

        trans5.setBackground(new java.awt.Color(255, 255, 255));
        trans5.setText("Using TRANS5");
        trans5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trans5ActionPerformed(evt);
            }
        });

        jPopupMenu2.add(trans5);

        trans6.setBackground(new java.awt.Color(255, 255, 255));
        trans6.setText("Using TRANS6");
        trans6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trans6ActionPerformed(evt);
            }
        });

        jPopupMenu2.add(trans6);

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(500, 380));
        jRadioButton1.setText("Individual analysis");
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Population analysis");
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(jRadioButton2, gridBagConstraints);

        jRadioButton3.setText("Analytic/algebraic model");
        buttonGroup2.add(jRadioButton3);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(jRadioButton3, gridBagConstraints);

        jRadioButton4.setText("Model library and ODEs");
        buttonGroup2.add(jRadioButton4);
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(jRadioButton4, gridBagConstraints);

        jRadioButton5.setText("Computing statistics of parameter estimates");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 3, 0);
        add(jRadioButton5, gridBagConstraints);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Parametric model");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 8, 0, 0);
        add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("Data simulation");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 20);
        add(jCheckBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 2, 20);
        add(jSeparator1, gridBagConstraints);

        jCheckBox5.setText("Parameter identifiability analysis");
        jCheckBox5.setEnabled(false);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 32, 4, 0);
        add(jCheckBox5, gridBagConstraints);

        jCheckBox6.setText("Nonparametric model");
        jCheckBox6.setEnabled(false);
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 20);
        add(jCheckBox6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 20);
        add(jSeparator3, gridBagConstraints);

        jButton1.setText("Load Model or Input");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 12, 20);
        add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 21, 8, 20);
        add(jSeparator4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 20, 8, 20);
        add(jSeparator5, gridBagConstraints);

        jRadioButton6.setText("Two-stage analysis");
        buttonGroup1.add(jRadioButton6);
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jRadioButton6, gridBagConstraints);

        graphicalEditor.setText("Graphical model editor");
        buttonGroup3.add(graphicalEditor);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        add(graphicalEditor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 20, 0, 20);
        add(jSeparator6, gridBagConstraints);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Optional NONMEM Compatible Output: ");
        jPanel1.add(jLabel1);

        jCheckBox3.setText("Tables");
        jPanel1.add(jCheckBox3);

        jCheckBox4.setText("Scatterplots");
        jPanel1.add(jCheckBox4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 5, 20);
        add(jPanel1, gridBagConstraints);

        jLabel2.setText("Parameter estimation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 3, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel3.setText("Select Model and Analysis Options:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 0);
        add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setText("Select Analysis Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 20, 3, 0);
        add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel5.setText("Select Model Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 3, 0);
        add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel6.setText("Select Statistics Option:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 3, 0);
        add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel7.setText("Reload Previous SPK Model or Job XML Input:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 11, 0);
        add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 4, 20);
        add(jSeparator2, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel8.setText("Select Model Editor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        add(jLabel8, gridBagConstraints);

        textEditor.setSelected(true);
        textEditor.setText("Text model editor");
        buttonGroup3.add(textEditor);
        textEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textEditorActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        add(textEditor, gridBagConstraints);

    }//GEN-END:initComponents

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        if(jCheckBox6.isSelected())
        {
            jCheckBox1.setSelected(false);
            jCheckBox2.setSelected(false);
            jCheckBox5.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        if(jCheckBox5.isSelected())
        {
            jCheckBox1.setSelected(false);
            jCheckBox2.setSelected(false);
            jCheckBox6.setSelected(false);
        }
        refresh();
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void textEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textEditorActionPerformed
        if(jRadioButton4.isSelected() && isGraphicalModel()) 
            JOptionPane.showMessageDialog(null, "The graphical information will be gone",
                                          "Warning Message", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_textEditorActionPerformed

    private void trans6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trans6ActionPerformed
        iterator.trn = 6;
    }//GEN-LAST:event_trans6ActionPerformed

    private void trans5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trans5ActionPerformed
        iterator.trn = 5;
    }//GEN-LAST:event_trans5ActionPerformed

    private void trans4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trans4ActionPerformed
        iterator.trn = 4;
    }//GEN-LAST:event_trans4ActionPerformed

    private void trans3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trans3ActionPerformed
        iterator.trn = 3;
    }//GEN-LAST:event_trans3ActionPerformed

    private void trans2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trans2ActionPerformed
        iterator.trn = 2;
    }//GEN-LAST:event_trans2ActionPerformed

    private void trans1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trans1ActionPerformed
        iterator.trn = 1;
    }//GEN-LAST:event_trans1ActionPerformed

    private void jPopupMenu2PopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenu2PopupMenuCanceled
        iterator.initAdvan.clear();
        jRadioButton3.doClick();
        jRadioButton4.setText("Model library and ODEs");
    }//GEN-LAST:event_jPopupMenu2PopupMenuCanceled

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        refresh();
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jPopupMenu1PopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenu1PopupMenuCanceled
        iterator.initAdvan.clear();
        jRadioButton3.doClick();
        jRadioButton4.setText("Model library and ODEs");
    }//GEN-LAST:event_jPopupMenu1PopupMenuCanceled

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(iterator.reloadInput() == 0)
            setOptions();
    }//GEN-LAST:event_jButton1ActionPerformed

    /** Set the options on the first step. */
    public void setOptions()
    {
        Properties reload = iterator.getReload();
        if(reload.getProperty("ESTIMATION") != null)
            jCheckBox1.setSelected(true);
        else
            jCheckBox1.setSelected(false);
        if(reload.getProperty("SIMULATION") != null)
            jCheckBox2.setSelected(true);
        else
            jCheckBox2.setSelected(false);
        refresh();
        if(reload.getProperty("TABLE") != null)
            jCheckBox3.setSelected(true);
        else
            jCheckBox3.setSelected(false);
        if(reload.getProperty("SCATTERPLOT") != null)
            jCheckBox4.setSelected(true);
        else
            jCheckBox4.setSelected(false);
        if(reload.getProperty("SIGMA") == null)
            jRadioButton1.setSelected(true);
        else
            jRadioButton2.setSelected(true);
        if(reload.getProperty("METHOD") != null)
            jRadioButton6.setSelected(true);
        if(reload.getProperty("PRED") != null)
            jRadioButton3.setSelected(true);
        else
        {
            jRadioButton4.setSelected(true);
            String subroutines = reload.getProperty("SUBROUTINES").trim().concat(" ");
            int beginIndex = subroutines.indexOf("ADVAN");
            int endIndex = subroutines.indexOf(" ", beginIndex);
            subroutine = "SUBROUTINE " + subroutines.substring(beginIndex, endIndex);
            jRadioButton4.setText("Using " + subroutine);
            int advanNumber = Integer.parseInt(subroutine.substring(16));
            switch(advanNumber)
            {
                case 1: jMenuItem1.setSelected(true); break;
                case 2: jMenuItem2.setSelected(true); break; 
                case 3: jMenuItem3.setSelected(true); break;
                case 4: jMenuItem4.setSelected(true); break;
                case 5: jMenuItem5.setSelected(true); break;
                case 6: jMenuItem6.setSelected(true); break;
                case 7: jMenuItem7.setSelected(true); break;
                case 8: jMenuItem8.setSelected(true); break;
                case 9: jMenuItem9.setSelected(true); break;
                case 10: jMenuItem10.setSelected(true); break;
                case 11: jMenuItem11.setSelected(true); break;
                case 12: jMenuItem12.setSelected(true);
            }
        }
        iterator.initAdvan.clear();
        if(reload.getProperty("COVARIANCE") != null)
            jRadioButton5.setSelected(true);
        boolean is = isGraphicalModel();
        graphicalEditor.setEnabled(is);
        graphicalEditor.setSelected(is);
        setLeftOptions();        
    }
    
    // Find if reload graphical model
    private boolean isGraphicalModel()
    {
        if(iterator.getReload() != null && iterator.getReload().getProperty("MODEL") != null)
        {
            String text = iterator.getReload().getProperty("MODEL").substring(6);
            return text.split("\n")[1].matches("COMP=[(].+[)]\\s+;\\d+,\\d+");
        }
        return false;
    }
    
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if(jCheckBox2.isSelected())
        {
            jCheckBox5.setSelected(false);
            jCheckBox6.setSelected(false);
        }
        refresh();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void refresh()
    {
        boolean isCheckBox1 = jCheckBox1.isSelected();
        boolean isCheckBox2 = jCheckBox2.isSelected();
        boolean isCheckBox5 = jCheckBox5.isSelected();
        boolean isSelected = isCheckBox1 || isCheckBox2;
        jRadioButton1.setEnabled(isSelected || isCheckBox5);
        jRadioButton2.setEnabled(isSelected);
        jRadioButton3.setEnabled(isSelected);
        jRadioButton4.setEnabled(isSelected || isCheckBox5);
        jRadioButton5.setEnabled(isCheckBox1);
        jRadioButton6.setEnabled(isCheckBox1);
        jCheckBox3.setEnabled(isSelected);
        jCheckBox4.setEnabled(isSelected);
        if(jRadioButton6.isSelected())  // statistics not available for two-stage
        {
            jRadioButton5.setSelected(false);
            jRadioButton5.setEnabled(false);
        }
        if(!isCheckBox1)
        {
            jRadioButton5.setSelected(false);
            if(jRadioButton6.isSelected())
                jRadioButton1.doClick();
        }
        if(isCheckBox5)
        {
            jCheckBox3.setSelected(false);
            jCheckBox4.setSelected(false);
            jRadioButton1.doClick();
            jRadioButton4.doClick();
        }
        jCheckBox3.setEnabled(isSelected);
        jCheckBox4.setEnabled(isSelected);
        setLeftOptions();        
    }
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
        {
            jCheckBox5.setSelected(false);
            jCheckBox6.setSelected(false);
        }
        refresh();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        addSubroutine(evt, 12);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        addSubroutine(evt, 11);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        addSubroutine(evt, 10);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        addSubroutine(evt, 9);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        addSubroutine(evt, 7);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        addSubroutine(evt, 6);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        addSubroutine(evt, 5);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        addSubroutine(evt, 4);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        addSubroutine(evt, 3);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        iterator.initAdvan.clear();
        jRadioButton4.setText("Model library and ODEs");
        textEditor.setSelected(true);
        graphicalEditor.setSelected(false);
        graphicalEditor.setEnabled(false);
        setLeftOptions();
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        if(iterator.getReload() != null && iterator.getReload().getProperty("METHOD") != null)
            iterator.getReload().remove("METHOD");
        setLeftOptions();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        addSubroutine(evt, 2);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        addSubroutine(evt, 1);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        if(iterator.getReload() != null && iterator.getReload().getProperty("METHOD") != null)
            iterator.getReload().remove("METHOD");
        setLeftOptions();
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        addSubroutine(evt, 8);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        jPopupMenu1.show(this, 50, 220);
        graphicalEditor.setEnabled(true);
        graphicalEditor.setSelected(isGraphicalModel());
        setLeftOptions();
    }//GEN-LAST:event_jRadioButton4ActionPerformed
    
    private void addSubroutine(ActionEvent evt, int n)
    {
        trans(n);
        subroutine = ((javax.swing.JMenuItem)evt.getSource()).getText();
        jRadioButton4.setText(subroutine);
        jRadioButton4.setSelected(true);
    }
    
    private void setLeftOptions()
    {       
        isValid = (jCheckBox1.isSelected() || jCheckBox2.isSelected() || 
                   jCheckBox5.isSelected() || jCheckBox6.isSelected()) && 
                  (jRadioButton1.isSelected() || jRadioButton2.isSelected() ||
                   jRadioButton6.isSelected()) &&
                  (jRadioButton3.isSelected() || jRadioButton4.isSelected());
        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());                  
    }
    
    private boolean trans(int n)
    {
        iterator.adn = n;
        iterator.initAdvan.clear();
        if(n <= 4 || n >= 10)
        {
            iterator.initAdvan.clear();
            iterator.initAdvan.add("model");
            iterator.initAdvan.add("pk");
            iterator.initAdvan.add("des");
            iterator.initAdvan.add("theta");
            iterator.initAdvan.add("omega");
            trans1.setEnabled(true);
            trans2.setEnabled(n <= 2);
            trans3.setEnabled(n == 3 || n == 4);
            trans4.setEnabled(n == 3 || n == 4 || n >= 11);
            trans5.setEnabled(n == 3 || n == 4);
            trans6.setEnabled(n >= 11);
            jPopupMenu2.show(this, 50, 220);
        }
        else
            iterator.trn = 1;
        trans1.setToolTipText(null);
        trans2.setToolTipText(null);
        trans3.setToolTipText(null);
        trans4.setToolTipText(null);
        trans5.setToolTipText(null);
        trans6.setToolTipText(null);
        if(n == 1)
        {
            trans1.setToolTipText("Parameter: K10");
            trans2.setToolTipText("Parameters: CL, V");
        }
        if(n == 2)
        {
            trans1.setToolTipText("Parameters: K12, K20");
            trans2.setToolTipText("Parameters: CL, V, K12");   
        }
        if(n == 3)
        {
            trans1.setToolTipText("Parameters: K10, K12, K21");
            trans3.setToolTipText("Parameters: CL, V, Q, VSS");
            trans4.setToolTipText("Parameters: CL, V1, Q, V2");
            trans5.setToolTipText("Parameters: AOB, ALPHA, BETA");
        }
        if(n == 4)
        {
            trans1.setToolTipText("Parameters: K12, K20, K23, K32");
            trans3.setToolTipText("Parameters: CL, V, Q, VSS, K12");
            trans4.setToolTipText("Parameters: CL, V2, Q, V3, K12");
            trans5.setToolTipText("Parameters: AOB, ALPHA, BETA, K12");
        }
        if(n == 10)
        {
            trans1.setToolTipText("Parameters: VM, KM");
        }
        if(n == 11)
        {
            trans1.setToolTipText("Parameters: K10, K12, K21, K13, K31");
            trans4.setToolTipText("Parameters: CL, V1, Q2, V2, Q3, V3");
            trans6.setToolTipText("Parameters: ALPHA, BETA, GAMMA, K21, K31");
        }
        if(n == 12)
        {
            trans1.setToolTipText("Parameters: K12, K20, K23, K24, K32, K42");
            trans4.setToolTipText("Parameters: CL, V2, Q3, V3, Q4, V4, K12");
            trans6.setToolTipText("Parameters: ALPHA, BETA, GAMMA, K12, K32, K42");
        }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JRadioButton graphicalEditor;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JRadioButton textEditor;
    private javax.swing.JMenuItem trans1;
    private javax.swing.JMenuItem trans2;
    private javax.swing.JMenuItem trans3;
    private javax.swing.JMenuItem trans4;
    private javax.swing.JMenuItem trans5;
    private javax.swing.JMenuItem trans6;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is to return the StepDescriptor object.
     * @return a StepDescriptor object.
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
  	    return "Analysis Selection";
  	}

	public String getStepTitle(){
	    return "Analysis Selection";
	}

	public void showingStep(JWizardPane wizard){
            wizardPane = wizard;
            MDAObject object = (MDAObject)wizard.getCustomizedObject();
            Properties records = object.getRecords();
            Source control = object.getSource(); 
            String[] names = {"Problem", "Data", "Input", "Pred", "Subroutines", "Aes", 
                              "Aesinitial", "Model", "PK", "Theta", "Omega", "Des", 
                              "Error", "Sigma", "Estimation", "Covariance", 
                              "Simulation", "Table", "ScatterPlot"}; 
            for(int i = 0; i < 19; i++)
                records.setProperty(names[i], "");   
            control.aes = null;
            control.aesinitial = null;
            control.analysis = null;
            control.covariance = null;
//            control.data = null;
            control.des = null;
            control.error = null;
            control.pk = null;
            control.pred = null;
            control.problem = null;
            control.simulation = null;
            control.estimation = null;
            control.input = null;
            control.subroutines = null;
            control.model = null;
            control.omega = null;
            control.sigma = null;
            control.theta = null;            
            control.table = null;
            control.splot = null;
            
            graphicalEditor.setEnabled(iterator.getIsTester());
            jCheckBox5.setEnabled(iterator.getIsDeveloper());
	}

	public void hidingStep(JWizardPane wizard){
            iterator.setIsEstimation(jCheckBox1.isSelected()); 
            iterator.setIsSimulation(jCheckBox2.isSelected());
            iterator.isTable = jCheckBox3.isSelected();
            iterator.isPlot = jCheckBox4.isSelected();
            iterator.isIdentify = jCheckBox5.isSelected();
            iterator.isNonparam = jCheckBox6.isSelected();
            iterator.setIsCov(jRadioButton5.isSelected());
            iterator.setIsPred(jRadioButton3.isSelected());
            iterator.setIsInd(jRadioButton1.isSelected() || jCheckBox5.isSelected());
            iterator.setIsTwoStage(jRadioButton6.isSelected());
            
            if(jRadioButton1.isSelected())
            {
                iterator.setIsInd(true);
                iterator.setIsTwoStage(false);
            }
            if(jRadioButton2.isSelected())
            {
                iterator.setIsInd(false);
                iterator.setIsTwoStage(false);
            }
            if(jRadioButton6.isSelected())
            {
                iterator.setIsInd(false);
                iterator.setIsTwoStage(true);
            }
            
            if(jRadioButton4.isSelected())
            {
                int advanNumber = Integer.parseInt(subroutine.substring(16));
                if(advanNumber <= 4 || advanNumber >= 10) advanNumber = 6;
                iterator.setAdvan(advanNumber);                
            }
            if(jRadioButton2.isSelected())
                ((MDAObject)wizard.getCustomizedObject()).getSource().analysis = "population";
            if(jRadioButton1.isSelected())
                ((MDAObject)wizard.getCustomizedObject()).getSource().analysis = "individual";
            if(jRadioButton6.isSelected())
                ((MDAObject)wizard.getCustomizedObject()).getSource().analysis = "two-stage";
            if(jCheckBox5.isSelected())
                ((MDAObject)wizard.getCustomizedObject()).getSource().analysis = "identifiability";
            iterator.isGraphic = graphicalEditor.isSelected();
            if(graphicalEditor.isSelected()) iterator.setAdvan(6);
	}

	public boolean isValid(){
	    return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    if(!iterator.getIsOnline()) 
                        new Help("Help for Getting Started", 
                                 GettingStarted.class.getResource("/uw/rfpk/mda/nonmem/help/GettingStarted.html"));                        
                    else
                        Utility.openURL("https://" + iterator.getServerName() + 
                                        ":" + iterator.getServerPort() + "/user/help/GettingStarted.html");  
                }
            };
	}
        
        public String getHelpID() {
            return "Prepare_Input__Analysis_Selection";
        }
        
    }
}
