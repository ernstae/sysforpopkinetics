/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda.nonmem.wizard;

import uw.rfpk.mda.nonmem.Utility;
import org.netbeans.ui.wizard.*;
import javax.swing.JComponent;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.Vector;

/**
 * This class defines a step to create the $TABLE record.
 * @author  Jiaji Du
 */
public class Table extends javax.swing.JPanel implements WizardStep { 
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this; 
    private MDAIterator iterator = null;
    private DefaultListModel model = null; 
    private DefaultListModel leftModel = null;
    private DefaultListModel rightModel = null; 
    private JWizardPane wizardPane = null;
    private boolean isValid = false;
    private String table = "";
    private String which = "ESTIMATION";
    private int index = -1;
    private static int nTableEst = 0;
    private static int nTableSim = 0;
    private static final int maxNTable = 10;
                                
    /** Creates new form Table.
     * @param iter a MDAIterator object to initialize the field iterator.
     */
    public Table(MDAIterator iter) { 
        initComponents();
        iterator = iter; 
    }
    
    /** Set which output, table or scatterplot, is required.
     * @param s a String object to initialize field which.
     */  
    public void setWhich(String s) { which = s; }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jTextPane3 = new javax.swing.JTextPane();
        rightButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rightList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        leftList = new javax.swing.JList();
        jTextPane4 = new javax.swing.JTextPane();
        jTextPane5 = new javax.swing.JTextPane();
        jComboBox1 = new javax.swing.JComboBox();
        addItemButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();
        changeItemButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        changeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Item Lists");
        jDialog1.setBackground(java.awt.Color.white);
        jDialog1.setLocationRelativeTo(jButton1);
        jDialog1.setModal(true);
        jDialog1.setResizable(false);
        jDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jDialog1WindowClosing(evt);
            }
        });

        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setText("Select items from the comboBox and add them to the left list.  Then select items from the left list into the right list.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 6, 12);
        jDialog1.getContentPane().add(jTextPane3, gridBagConstraints);

        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/ui/wizard/plaf/basic/icons/next.gif")));
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 6, 0);
        jDialog1.getContentPane().add(rightButton, gridBagConstraints);

        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/ui/wizard/plaf/basic/icons/back.gif")));
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 24, 0);
        jDialog1.getContentPane().add(leftButton, gridBagConstraints);

        jLabel4.setText("Sorted By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
        jDialog1.getContentPane().add(jLabel4, gridBagConstraints);

        rightList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(rightList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 108;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jScrollPane2, gridBagConstraints);

        leftList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        leftList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftListMouseClicked(evt);
            }
        });

        jScrollPane3.setViewportView(leftList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 122;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jScrollPane3, gridBagConstraints);

        jTextPane4.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane4.setText("List of output items");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 12, 12);
        jDialog1.getContentPane().add(jTextPane4, gridBagConstraints);

        jTextPane5.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane5.setText("List of sorting orders");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 12, 12);
        jDialog1.getContentPane().add(jTextPane5, gridBagConstraints);

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 13, 12);
        jDialog1.getContentPane().add(jComboBox1, gridBagConstraints);

        addItemButton.setText("add");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 14, 0);
        jDialog1.getContentPane().add(addItemButton, gridBagConstraints);

        deleteItemButton.setText("Delete");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(14, 1, 14, 12);
        jDialog1.getContentPane().add(deleteItemButton, gridBagConstraints);

        changeItemButton.setText("Change");
        changeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        jDialog1.getContentPane().add(changeItemButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 12);
        jDialog1.getContentPane().add(jSeparator3, gridBagConstraints);

        jButton2.setText("OK");
        jButton2.setMaximumSize(new java.awt.Dimension(75, 25));
        jButton2.setMinimumSize(new java.awt.Dimension(75, 25));
        jButton2.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2);

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        jDialog1.getContentPane().add(jPanel1, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 0, 12, 16);
        add(jTextField1, gridBagConstraints);

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 16, 7, 16);
        add(addButton, gridBagConstraints);

        upButton.setText("Up");
        upButton.setEnabled(false);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(16, 16, 7, 16);
        add(upButton, gridBagConstraints);

        downButton.setText("Down");
        downButton.setEnabled(false);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 53, 16);
        add(downButton, gridBagConstraints);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Enter the output file name and select a header format.  The data items are\nlisted as columns and the order of the rows may be sorted.  If No Append\nis selected, data values, population prediction, residuals and weighted \nresiduals (i.e. DV, PRED, RES, WRES) will not be automatically in the output.");
        jTextPane1.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 2, 12);
        add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setText("List of the  \nTable options \nyou have \nselected in \nNONMEM \nsyntax");
        jTextPane2.setFocusable(false);
        jTextPane2.setMaximumSize(new java.awt.Dimension(90, 90));
        jTextPane2.setMinimumSize(new java.awt.Dimension(90, 90));
        jTextPane2.setPreferredSize(new java.awt.Dimension(90, 90));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 29, 0);
        add(jTextPane2, gridBagConstraints);

        changeButton.setText("Change");
        changeButton.setEnabled(false);
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 6, 16);
        add(changeButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 16);
        add(deleteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jSeparator2, gridBagConstraints);

        model = new DefaultListModel();
        jList1 = new javax.swing.JList(model);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFixedCellHeight(15);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 74;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 12, 16);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("File Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 18, 12, 0);
        add(jLabel1, gridBagConstraints);

        jLabel3.setText("Select items and sorting orders");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(9, 18, 21, 0);
        add(jLabel3, gridBagConstraints);

        jButton1.setText("Make Selection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 16);
        add(jButton1, gridBagConstraints);

        jRadioButton1.setText("No Header");
        buttonGroup1.add(jRadioButton1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(7, 17, 7, 0);
        add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("One Header");
        buttonGroup1.add(jRadioButton2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 7, 16);
        add(jRadioButton2, gridBagConstraints);

        jRadioButton3.setText("No Append");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 13, 7, 0);
        add(jRadioButton3, gridBagConstraints);

    }//GEN-END:initComponents

    private void jDialog1WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog1WindowClosing
        cleanLists();
    }//GEN-LAST:event_jDialog1WindowClosing

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        cleanLists();
        jDialog1.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cleanLists()
    {
        leftModel.removeAllElements();
        rightModel.removeAllElements();
    }
    
    private void leftListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftListMouseClicked
        changeItemButton.setEnabled(leftList.getSelectedIndex() >= 0);
        deleteItemButton.setEnabled(leftList.getSelectedIndex() >= 0); 
    }//GEN-LAST:event_leftListMouseClicked

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        index = jList1.getSelectedIndex();
        
        // Reload selected value
        String element = (String)jList1.getSelectedValue() + " ";
        
        // Find file name
        int ind = element.indexOf(" FILE=");
        if(ind != -1)
        {
            int end = element.indexOf(" ", ind + 5);
            jTextField1.setText(element.substring(ind + 6, end));                    
        }
        else
        {
            // Find header, append and the end index of list2
            ind = element.indexOf(" NOHEADER");
            if(ind == -1)
            {   
                jRadioButton1.setSelected(false);
                ind = element.indexOf(" ONEHEADER");
                if(ind == -1)
                {
                    jRadioButton2.setSelected(false);
                    ind = element.indexOf(" NOAPPEND");
                    if(ind == -1)
                    {
                        jRadioButton3.setSelected(false);
                        ind = element.length() - 1;
                    }
                    else
                        jRadioButton3.setSelected(true);
                }
                else
                    jRadioButton2.setSelected(true);
            }
            else
                jRadioButton1.setSelected(true);
        }

        // Find list1 and list2
        String lists = element.substring(0, ind);
        String[] list1 = null;
        String[] list2 = null;
        leftModel.removeAllElements();
        rightModel.removeAllElements();
 
        int indBy = lists.indexOf("BY ");
        if(indBy != -1)
        {
            list1 = lists.substring(7, indBy - 1).trim().split(" ");
            for(int i = 0; i < list1.length; i++)
                leftModel.addElement(list1[i]);
            list2 = lists.substring(indBy + 3).trim().split(" ");
            for(int i = 0; i < list2.length; i++)            
                rightModel.addElement(list2[i]);
        }
        else
        {
            if(lists.length() > 7)
            {
                list1 = lists.substring(7).trim().split(" ");
                for(int i = 0; i < list1.length; i++)
                    leftModel.addElement(list1[i]);
            }
        }
        
        changeItemButton.setEnabled(true);
        deleteItemButton.setEnabled(true);         
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);        
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_jList1MouseClicked

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        int index = rightList.getSelectedIndex();
        if(index < 0) return;
        leftList.setSelectedIndex(leftModel.indexOf(rightList.getSelectedValue()));
        rightModel.removeElement(rightList.getSelectedValue());
        rightList.setSelectedIndex(index - 1); 
        if(rightModel.getSize() == 0) 
            leftButton.setEnabled(false);  
        rightButton.setEnabled(true);
    }//GEN-LAST:event_leftButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        Object selectedValue = leftModel.get(leftList.getSelectedIndex());
        if(rightModel.indexOf(selectedValue) != -1) return;
        rightModel.add(rightList.getSelectedIndex() + 1, selectedValue);
        rightList.setSelectedIndex(rightList.getSelectedIndex() + 1);
        if(leftModel.getSize() == rightModel.getSize()) 
            rightButton.setEnabled(false);
        leftButton.setEnabled(true);        
    }//GEN-LAST:event_rightButtonActionPerformed

    private void changeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeItemButtonActionPerformed
        int index = leftList.getSelectedIndex();
        if(index < 0 || leftModel.indexOf(jComboBox1.getSelectedItem()) != -1) return;
        Object selectedValue = leftList.getSelectedValue(); 
        int rightIndex = rightModel.indexOf(selectedValue);
        if(rightIndex != -1)
        {
            rightModel.removeElement(selectedValue);
            rightModel.add(rightIndex, jComboBox1.getSelectedItem());
            rightList.setSelectedIndex(rightIndex);
        }
        leftModel.removeElement(selectedValue);
        leftModel.add(index, jComboBox1.getSelectedItem());      
        leftList.setSelectedIndex(index);
    }//GEN-LAST:event_changeItemButtonActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        int index = leftList.getSelectedIndex();
        if(index < 0) return;
        Object selectedValue = leftList.getSelectedValue();
        int rightIndex = rightModel.indexOf(selectedValue);
        if(rightIndex != -1)
        {
            rightModel.removeElement(selectedValue);
            rightList.setSelectedIndex(rightIndex - 1);
        }
        leftModel.removeElement(selectedValue);
        leftList.setSelectedIndex(index - 1);
        addItemButton.setEnabled(true);
        if(leftModel.getSize() == 0)
        {
            changeItemButton.setEnabled(false);
            deleteItemButton.setEnabled(false);
            leftButton.setEnabled(false);
            rightButton.setEnabled(false);
        }
        if(leftModel.getSize() == rightModel.getSize())
        {
            rightButton.setEnabled(false);
        }    
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        int index = leftList.getSelectedIndex() + 1;
        if(leftModel.indexOf(jComboBox1.getSelectedItem()) != -1)
            return;
        leftModel.add(index, jComboBox1.getSelectedItem());     
        leftList.setSelectedIndex(index);      
        if(leftModel.getSize() == 54 || (leftModel.getSize() == 50 && jRadioButton3.isSelected()))
            addItemButton.setEnabled(false);
        deleteItemButton.setEnabled(true);
        changeItemButton.setEnabled(true);
        rightButton.setEnabled(true); 
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(leftModel.getSize() == 0)
        {
            JOptionPane.showMessageDialog(null, "No output item was selected.",
                                          "Input Error", JOptionPane.ERROR_MESSAGE);
            return;   
        }
        table = "";
        for(int i = 0; i < leftModel.getSize(); i++)
            table = table + " " + (String)leftModel.get(i);  
        if(leftModel.getSize() < 9 && rightModel.getSize() > 0) 
        {
            table = table + " BY";
            for(int i = 0; i < rightModel.getSize(); i++)
                table = table + " " + (String)rightModel.get(i); 
        }
        
        addButton.setEnabled(true);
        jComboBox1.setSelectedIndex(-1);
        cleanLists();
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        leftList.setSelectedIndex(leftModel.size() - 1);
        rightList.setSelectedIndex(rightModel.size() - 1);
        addItemButton.setEnabled(true);
        changeItemButton.setEnabled(leftModel.size() > 0);
        deleteItemButton.setEnabled(leftModel.size() > 0);
        leftButton.setEnabled(false); 
        jDialog1.setLocationRelativeTo(this); 
        jDialog1.setSize(420,350);            
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        model.removeElement(jList1.getSelectedValue());
        jList1.setSelectedIndex(--index);
        if(model.getSize() == 0)
        {
            isValid = false;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        }
        addButton.setEnabled(true);
        if(model.getSize() == 0 || index == -1)
        {
            changeButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        model.removeElement(jList1.getSelectedValue());
        String element = "$TABLE" + table;
        String fileName = jTextField1.getText().trim();
        if(fileName.length() > 0)
        {
            if(fileName.indexOf(" ") != -1)
            {
                JOptionPane.showMessageDialog(null, "File name may not include space.",  
                                              "Input Error",               
                                              JOptionPane.ERROR_MESSAGE);
	         return;
            }
            else
                element = element + " FILE=" + fileName;
        }   
        if(jRadioButton1.isSelected())
            element = element + " NOHEADER";
        if(jRadioButton2.isSelected())
            element = element + " ONEHEADER";
        if(jRadioButton3.isSelected())
            element = element + " NOAPPEND";        
        model.add(index, element);     
    }//GEN-LAST:event_changeButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        jList1.setSelectedIndex(++index);
        if(index == 0)
        {
            changeButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
                
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_downButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(table.equals(""))
        {
            JOptionPane.showMessageDialog(null, "No output item was selected.",
                                          "Input Error", JOptionPane.ERROR_MESSAGE);
            return;   
        }
        String element = "$TABLE" + table;
        table = "";
        String fileName = jTextField1.getText().trim();
        if(fileName.length() > 0)
        {
            if(fileName.indexOf(" ") != -1)
            {
                JOptionPane.showMessageDialog(null, "File name may not include space.",  
                                              "Input Error",               
                                              JOptionPane.ERROR_MESSAGE);
	         return;
            }
            else
                element = element + " FILE=" + fileName;
        }
        if(jRadioButton1.isSelected())
            element = element + " NOHEADER";
        if(jRadioButton2.isSelected())
            element = element + " ONEHEADER";
        if(jRadioButton3.isSelected())
            element = element + " NOAPPEND";        
        if(model.indexOf(element) != -1) return;
        model.add(++index, element);     
        jList1.setSelectedIndex(index);
        isValid = true;
        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        int nTable = 0;
        if(which.equals("ESTIMATION"))
            nTable = nTableSim;
        if(which.equals("SIMULATION"))
            nTable = nTableEst;
        if(model.getSize() + nTable == maxNTable)
            addButton.setEnabled(false);
        deleteButton.setEnabled(true);
        changeButton.setEnabled(true);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);        
    }//GEN-LAST:event_addButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        jList1.setSelectedIndex(--index);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);        
    }//GEN-LAST:event_upButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addItemButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton changeItemButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    private javax.swing.JTextPane jTextPane5;
    private javax.swing.JButton leftButton;
    private javax.swing.JList leftList;
    private javax.swing.JButton rightButton;
    private javax.swing.JList rightList;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is to return the StepDescriptor object.
     * @return a StepDescriptor object.
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
            return "Table Output"; 
  	}

	public String getStepTitle(){
	    return "Table Output - Following " + which + " Step"; 
	}

	public void showingStep(JWizardPane wizard){
            wizardPane = wizard;
            MDAObject object = (MDAObject)wizard.getCustomizedObject();

            // Fill available items into the ComboBox
            jComboBox1.removeAllItems();
            String[] input = object.getRecords().getProperty("Input").split(" ");
            for(int i = 1; i < input.length; i++)       // input[0] = "$INPUT"
            {
                String item = null;
                String[] tokens = input[i].split("=");
                if(tokens.length == 2 && Utility.isStdItem(tokens[0])) 
                    item = tokens[1];
                else
                    item = tokens[0];
                if(!iterator.getIsInd())
                    jComboBox1.addItem(item);
                else
                    if(!item.equals("ID")) 
                        jComboBox1.addItem(item);               
            }
            jComboBox1.addItem("PRED");
            jComboBox1.addItem("RES");
            jComboBox1.addItem("WRES"); 
            if(!iterator.getIsInd() && which.equals("ESTIMATION") && iterator.getIsMethod1OrPosthoc())
                for(int i = 0; i < iterator.getNEta(); i++)
                    jComboBox1.addItem("ETA(" + (i + 1) +")");
            String record = null;
            if(!iterator.getIsPred())
                record = object.getRecords().getProperty("PK");
            else
                record = object.getRecords().getProperty("Pred");
            String[] p = Utility.eliminateComments(record).split("\n");  
            for(int i = 1; i < p.length; i++)
            {
                if(p[i].indexOf("=") > 0)
                {
                    String[] leftItems = p[i].split("=")[0].trim().split(" "); 
                    jComboBox1.addItem(leftItems[leftItems.length - 1]); 
                }
            }

            // Set models for list1 and list2
            leftModel = new DefaultListModel();
            leftList.setModel(leftModel);
            rightModel = new DefaultListModel();
            rightList.setModel(rightModel);

            if(iterator.getIsReload())
            {
                String text = null;
                if(which.equals("ESTIMATION"))
                {
                    text = iterator.getReload().getProperty("TABLEEST");
                    if(text != null)
                    {
                        iterator.getReload().remove("TABLEEST");
                        model.removeAllElements();
                        String[] values = text.split(",");
                        nTableEst = values.length;
                        for(int i = 0; i < nTableEst; i++)
                            model.addElement(checkItem("$TABLE " + values[i].substring(6).trim(), i));
                        index = nTableEst - 1;
                    }
                    else
                        for(int i = 0; i < model.size(); i++)
                            model.set(i, checkItem((String)model.get(i), i));                    
                }
                else
                {
                    text = iterator.getReload().getProperty("TABLESIM");
                    if(text != null)
                    {
                        iterator.getReload().remove("TABLESIM");
                        model.removeAllElements();
                        String[] values = text.split(",");
                        nTableSim = values.length;
                        for(int i = 0; i < values.length; i++)
                            model.addElement(checkItem("$TABLE " + values[i].substring(6).trim(), i));
                        index = values.length - 1;
                    }
                    else
                        for(int i = 0; i < model.size(); i++)
                            model.set(i, checkItem((String)model.get(i), i));                    
                }
            }
            else
                for(int i = 0; i < model.size(); i++)
                    model.set(i, checkItem((String)model.get(i), i));
                      
            // Check the number of tables
            isValid = index >= 0 ? true : false;            
            if(nTableEst + nTableSim == maxNTable)
            {
                JOptionPane.showMessageDialog(null, "The number of tables has reached\n" +
                                              "its limit, " + maxNTable + ".",   
                                              "Information for Input",               
                                              JOptionPane.INFORMATION_MESSAGE);
                isValid = true;
                addButton.setEnabled(false); 
            }
            if(nTableEst + nTableSim > maxNTable)
            {
                JOptionPane.showMessageDialog(null, "The number of tables has exceeded\n" +
                                              "its limit, " + maxNTable + ".",   
                                              "Information for Input",               
                                              JOptionPane.INFORMATION_MESSAGE);
                isValid = false;
                addButton.setEnabled(false); 
            }
            
            jList1.setSelectedIndex(index);
                        
            // Set delete button
            deleteButton.setEnabled(index >= 0);
                        
            // Set left options                        
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray());
                        
            // Set up and down buttons
            Utility.setUpDownButton(index, model, upButton, downButton);            
            
            // Request focus
            jTextField1.requestFocusInWindow(); 
	}
        
        private String checkItem(String record, int n)
        {
            String element = record;
            element = element.replaceAll(" NOHEADER", "").replaceAll(" ONEHEADER", "").replaceAll(" NOAPPEND", "");
            if(element.indexOf(" FILE=") != -1)
                element = element.substring(7, element.indexOf(" FILE="));
            else
                element = element.substring(7);
            if(element.indexOf(" BY ") != -1)
                element = element.substring(0, element.indexOf(" BY "));
            String[] items = element.trim().split(" ");
            Vector availableItems = new Vector();
            for(int i = 0; i < jComboBox1.getItemCount(); i++)
                availableItems.addElement(jComboBox1.getItemAt(i));
            for(int i = 0; i < items.length; i++)
                if(availableItems.indexOf(items[i]) == -1)
                {
                    record = record.replaceAll(" " + items[i], "");
                    JOptionPane.showMessageDialog(null, "The item '" + items[i] + "' has been removed from 'Table " + (n + 1) + "'\n" +
                                                  "because it is not available in the current setting.", 
                                                  "Input Error", JOptionPane.ERROR_MESSAGE);                       
                }
            return record;
        }
    
    	public void hidingStep(JWizardPane wizard){
            if(iterator.getIsBack())
            {
                iterator.setIsBack(false);
                return;
            }            
            int size = model.getSize();
            if(size == 0)
                return; 
            MDAObject object = (MDAObject)wizard.getCustomizedObject();  
            // Create and save record
            String record = ((String)model.get(0)).replaceAll("\r", "");
            for(int i = 1; i < size; i++)
                record = record + "\n" + model.get(i);            
            if(which.equals("ESTIMATION"))
            {
                nTableEst = size;
                object.getRecords().setProperty("TableEst", record); 
            }
            if(which.equals("SIMULATION")) 
            {
                nTableSim = size;
                object.getRecords().setProperty("TableSim", record);
            }
            
            String[][][] tables = new String[size][4][];
            for(int i = 0; i < size; i++)
            {
                String element = (String)model.get(i) + " ";                
                tables[i][0] = new String[2];                   // file and header

                // Find file name
                int ind = element.indexOf(" FILE=");
                if(ind != -1)
                {
                    int end = element.indexOf(" ", ind + 5);
                    tables[i][0][0] = element.substring(ind + 6, end);                    
                }
                else
                {
                    // Find end index of list2
                    ind = element.indexOf(" NOHEADER");
                    if(ind == -1)
                    {
                        ind = element.indexOf(" ONEHEADER");
                        if(ind == -1)
                        {
                            ind = element.indexOf(" NOAPPEND");
                            if(ind == -1)
                                ind = element.length() - 1;
                        }
                    }
                }
                
                // Find header                
                if(element.indexOf(" NOHEADER") != -1)
                    tables[i][0][1] = "none";
                else if(element.indexOf(" ONEHEADER") != -1)
                    tables[i][0][1] = "one";
                else   
                    tables[i][0][1] = "every";    
                    
                String lists = element.substring(0, ind);
                String[] list1 = null;
                String[] list2 = null;
                int indBy = lists.indexOf("BY ");
                if(indBy != -1)
                {
                    list1 = lists.substring(7, indBy - 1).trim().split(" "); 
                    list2 = lists.substring(indBy + 3).trim().split(" ");
                }
                else
                {
                    if(lists.length() > 7)
                        list1 = lists.substring(7).trim().split(" ");
                }
                
                // Append DV, PRED, RES and WRES to the left list
                if(element.indexOf(" NOAPPEND") == -1)
                {
                    int list1Length = list1.length;
                    Vector appendItems = new Vector();
                    if(!hasElement(list1, "DV"))
                        appendItems.add("DV");
                    if(!hasElement(list1, "PRED"))
                        appendItems.add("PRED");
                    if(!hasElement(list1, "RES"))
                        appendItems.add("RES");
                    if(!hasElement(list1, "WRES"))
                        appendItems.add("WRES");
                    String[] tempList = new String[list1Length + appendItems.size()];
                    for(int j = 0; j < list1Length; j++)
                        tempList[j] = list1[j];
                    for(int j = 0; j < appendItems.size(); j++)
                        tempList[list1Length + j] = (String)appendItems.get(j);
                    list1 = tempList;
                } 
                
                tables[i][1] = list1;                           // list1                
                if(list1 != null)
                {
                    tables[i][2] = new String[list1.length];    // appearance order
                    tables[i][3] = new String[list1.length];    // sorting order
                }
                
                // Find orders
                int start = 0;
                int length = 0;
                if(list2 != null)
                {
                    start = list2.length;
                    length = start;
                }
                for(int j = 0; j < list1.length; j++)
                {
                    int order = 0;
                    for(int k = 0; k < length; k++)
                    {
                        if(list1[j].equals(list2[k]))
                        {
                            order = k + 1;
                        }
                    }
                    if(order != 0)
                    {
                        tables[i][2][j] = String.valueOf(order);
                        tables[i][3][j] = String.valueOf(order);
                    }
                    else
                    {
                        tables[i][2][j] = String.valueOf(++start);
                        tables[i][3][j] = "0";                       
                    }
                }
            }
            if(which.equals("ESTIMATION"))
                object.getSource().tableEst = tables; 
            if(which.equals("SIMULATION")) 
                object.getSource().tableSim = tables;  
	}

        private boolean hasElement(String[] list, String element)
        {
            for(int i = 0; i < list.length; i++)
                if(list[i].equals(element))
                    return true;
            return false;
        }
        
	public boolean isValid(){
            return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    if(!iterator.getIsOnline()) 
                        new Help("Help for $TABLE Record", 
                                 Table.class.getResource("/uw/rfpk/mda/nonmem/help/Table.html"));
                    else
                        Utility.openURL("https://" + iterator.getServerName() + 
                                        ":" + iterator.getServerPort() + "/user/help/Table.html");  
                }
            };
	}
        
        public String getHelpID() {
            return "Prepare_Input_Table_Output";
        }
        
    }
}
