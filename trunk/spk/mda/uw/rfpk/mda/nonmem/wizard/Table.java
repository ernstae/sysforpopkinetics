/*
 * Table.java
 *
 * Created on August 15, 2003, 1:17 PM
 */

package uw.rfpk.mda.nonmem.wizard;

import org.netbeans.ui.wizard.*;
import javax.swing.JComponent;
import javax.swing.DefaultListModel;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * This class defines a step to create the $TABLE record
 * @author  jiaji
 */
public class Table extends javax.swing.JPanel implements WizardStep { 
    
    private StepDescriptor sd = new MyStepDescriptor(); 
    private JComponent panel = this; 
    private MDAIterator iterator = null;
    private DefaultListModel model = null; 
    private DefaultListModel leftModel = null;
    private DefaultListModel rightModel = null; 
    private JWizardPane wizardPane = null;
    private boolean isValid = false;
    private boolean isBoth = false;
    private String table = "";
    private String which = "$Estimation";
    private int index = -1;

    /** Creates new form Table 
     * @param iter A MDAIterator object to initialize the field iterator
     */
    public Table(MDAIterator iter) { 
        initComponents();
        iterator = iter; 
    }
    
    /** Set which output, table or scatterplot, is required
     * @param s A String object to initialize field which
     */  
    public void setWhich(String s) { which = s; }
    
    /** Set if both outputs, table and scatterplot, are required
     * @param b A boolean to initialize isBoth
     */  
    public void isBoth(boolean b) { isBoth = b; }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jButton2 = new javax.swing.JButton();
        jTextPane3 = new javax.swing.JTextPane();
        rightButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rightList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        leftList = new javax.swing.JList();
        jTextPane4 = new javax.swing.JTextPane();
        jTextPane5 = new javax.swing.JTextPane();
        jComboBox1 = new javax.swing.JComboBox();
        addItemButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();
        changeItemButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        help = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jTextPane1 = new javax.swing.JTextPane();
        jTextPane2 = new javax.swing.JTextPane();
        changeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Item Lists");
        jDialog1.setBackground(java.awt.Color.white);
        jDialog1.setLocationRelativeTo(jButton1);
        jDialog1.setModal(true);
        jDialog1.setResizable(false);
        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 12, 4);
        jDialog1.getContentPane().add(jButton2, gridBagConstraints);

        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setText("Select items from the comboBox and add them to the left list.  Then select items from the left list into the right list.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 6, 12);
        jDialog1.getContentPane().add(jTextPane3, gridBagConstraints);

        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/ui/wizard/plaf/basic/icons/next.gif")));
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 6, 0);
        jDialog1.getContentPane().add(rightButton, gridBagConstraints);

        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/ui/wizard/plaf/basic/icons/back.gif")));
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 24, 0);
        jDialog1.getContentPane().add(leftButton, gridBagConstraints);

        jLabel4.setText("Sorted By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 0);
        jDialog1.getContentPane().add(jLabel4, gridBagConstraints);

        rightList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(rightList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 108;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jScrollPane2, gridBagConstraints);

        leftList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        leftList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftListMouseClicked(evt);
            }
        });

        jScrollPane3.setViewportView(leftList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 122;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jDialog1.getContentPane().add(jScrollPane3, gridBagConstraints);

        jTextPane4.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane4.setText("List of output items");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 12, 12);
        jDialog1.getContentPane().add(jTextPane4, gridBagConstraints);

        jTextPane5.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane5.setText("List of sorting orders");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 12, 12);
        jDialog1.getContentPane().add(jTextPane5, gridBagConstraints);

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 13, 12);
        jDialog1.getContentPane().add(jComboBox1, gridBagConstraints);

        addItemButton.setText("add");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 14, 0);
        jDialog1.getContentPane().add(addItemButton, gridBagConstraints);

        deleteItemButton.setText("Delete");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(14, 1, 14, 12);
        jDialog1.getContentPane().add(deleteItemButton, gridBagConstraints);

        changeItemButton.setText("Change");
        changeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeItemButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        jDialog1.getContentPane().add(changeItemButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 12);
        jDialog1.getContentPane().add(jSeparator3, gridBagConstraints);

        jDialog2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        help.setEditable(false);
        jScrollPane4.setViewportView(help);

        jDialog2.getContentPane().add(jScrollPane4, java.awt.BorderLayout.CENTER);

        setLayout(new java.awt.GridBagLayout());

        jTextField1.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 12, 12, 16);
        add(jTextField1, gridBagConstraints);

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 16, 7, 16);
        add(addButton, gridBagConstraints);

        upButton.setText("Up");
        upButton.setEnabled(false);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(16, 16, 7, 16);
        add(upButton, gridBagConstraints);

        downButton.setText("Down");
        downButton.setEnabled(false);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 56, 16);
        add(downButton, gridBagConstraints);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setText("Enter the output file name and select a header format.  The data items\nare listed as columns and the order of the rows may be sorted.  If no \nitem is selected the DV, PRED, RES and WRES will be the default output.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 12);
        add(jTextPane1, gridBagConstraints);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setText("List of the  \n$TABLE \nrecords\nyou have \nentered.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 44, 15);
        add(jTextPane2, gridBagConstraints);

        changeButton.setText("Change");
        changeButton.setEnabled(false);
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 6, 16);
        add(changeButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 16);
        add(deleteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSeparator1, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(jSeparator2, gridBagConstraints);

        model = new DefaultListModel();
        jList1 = new javax.swing.JList(model);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFixedCellHeight(15);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 88;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 12, 12, 16);
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("File Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 18, 12, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Header Format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 18, 8, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Select items and sorting orders");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(9, 18, 21, 0);
        add(jLabel3, gridBagConstraints);

        jButton1.setText("Enter Selection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 16, 17, 16);
        add(jButton1, gridBagConstraints);

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("No Header");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 12, 8, 0);
        add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("One Header");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 16, 8, 16);
        add(jRadioButton2, gridBagConstraints);

    }//GEN-END:initComponents

    private void leftListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftListMouseClicked
        String selectedValue = (String)leftList.getSelectedValue();
        if(selectedValue.equals("DV") || selectedValue.equals("PRED") ||
           selectedValue.equals("RES") || selectedValue.equals("WRES"))
        {
            changeItemButton.setEnabled(false);
            deleteItemButton.setEnabled(false);
        }
        else
        {
            changeItemButton.setEnabled(true);
            deleteItemButton.setEnabled(true);
        }    
    }//GEN-LAST:event_leftListMouseClicked

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        index = jList1.getSelectedIndex(); 
        changeButton.setEnabled(true);
        deleteButton.setEnabled(true);        
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_jList1MouseClicked

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        int index = rightList.getSelectedIndex();
        if(index < 0) return;
        leftList.setSelectedIndex(leftModel.indexOf(rightList.getSelectedValue()));
        rightModel.removeElement(rightList.getSelectedValue());
        rightList.setSelectedIndex(index - 1); 
        if(rightModel.getSize() == 0) 
            leftButton.setEnabled(false);  
        rightButton.setEnabled(true);
        String selectedValue = (String)leftList.getSelectedValue();
        if(selectedValue.equals("DV") || selectedValue.equals("PRED") ||
           selectedValue.equals("RES") || selectedValue.equals("WRES"))
        {
            changeItemButton.setEnabled(false);
            deleteItemButton.setEnabled(false);
        }
    }//GEN-LAST:event_leftButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        Object selectedValue = leftModel.get(leftList.getSelectedIndex());
        if(rightModel.indexOf(selectedValue) != -1) return;
        rightModel.add(rightList.getSelectedIndex() + 1, selectedValue);
        rightList.setSelectedIndex(rightList.getSelectedIndex() + 1);
        if(leftModel.getSize() == rightModel.getSize()) 
            rightButton.setEnabled(false);
        leftButton.setEnabled(true);        
    }//GEN-LAST:event_rightButtonActionPerformed

    private void changeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeItemButtonActionPerformed
        int index = leftList.getSelectedIndex();
        if(index < 0 || leftModel.indexOf(jComboBox1.getSelectedItem()) != -1) return;
        Object selectedValue = leftList.getSelectedValue(); 
        int rightIndex = rightModel.indexOf(selectedValue);
        if(rightIndex != -1)
        {
            rightModel.removeElement(selectedValue);
            rightModel.add(rightIndex, jComboBox1.getSelectedItem());
            rightList.setSelectedIndex(rightIndex);
        }
        leftModel.removeElement(selectedValue);
        leftModel.add(index, jComboBox1.getSelectedItem());      
        leftList.setSelectedIndex(index);
    }//GEN-LAST:event_changeItemButtonActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        int index = leftList.getSelectedIndex();
        if(index < 0) return;
        Object selectedValue = leftList.getSelectedValue();
        int rightIndex = rightModel.indexOf(selectedValue);
        if(rightIndex != -1)
        {
            rightModel.removeElement(selectedValue);
            rightList.setSelectedIndex(rightIndex - 1);
        }
        leftModel.removeElement(selectedValue);
        leftList.setSelectedIndex(index - 1);
        addItemButton.setEnabled(true);
        if(leftModel.getSize() == 0)
        {
            changeItemButton.setEnabled(false);
            deleteItemButton.setEnabled(false);
            leftButton.setEnabled(false);
            rightButton.setEnabled(false);
        }
        if(leftModel.getSize() == rightModel.getSize())
        {
            rightButton.setEnabled(false);
        }    
        selectedValue = (String)leftList.getSelectedValue();
        if(selectedValue.equals("DV") || selectedValue.equals("PRED") ||
           selectedValue.equals("RES") || selectedValue.equals("WRES"))
        {
            changeItemButton.setEnabled(false);
            deleteItemButton.setEnabled(false);
        }
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        int index = leftList.getSelectedIndex() + 1;
        if(leftModel.indexOf(jComboBox1.getSelectedItem()) != -1)
            return;
        leftModel.add(index, jComboBox1.getSelectedItem());     
        leftList.setSelectedIndex(index);      
        if(leftModel.getSize() == 8)
            addItemButton.setEnabled(false);
        deleteItemButton.setEnabled(true);
        changeItemButton.setEnabled(true);
        rightButton.setEnabled(true); 
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(leftModel.getSize() > 0)
        {
            for(int i = 0; i < leftModel.getSize(); i++)
                table = table + " " + (String)leftModel.get(i);  
            if(rightModel.getSize() > 0) table = table + " BY";
            for(int i = 0; i < rightModel.getSize(); i++)
                table = table + " " + (String)rightModel.get(i);             
        }
        addButton.setEnabled(true);
        jDialog1.setVisible(false);
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        leftModel.removeAllElements();
        rightModel.removeAllElements();
        
        // Set the left list
        if(leftModel.getSize() == 0)
        {
            leftModel.add(0, "DV");  
            leftModel.add(1, "PRED");
            leftModel.add(2, "RES");
            leftModel.add(3, "WRES");
            leftList.setSelectedIndex(3);
        }
            
        changeItemButton.setEnabled(false);
        deleteItemButton.setEnabled(false);
        leftButton.setEnabled(false); 
        jDialog1.setLocationRelativeTo(this); 
        jDialog1.setSize(420,350);            
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        model.removeElement(jList1.getSelectedValue());
        jList1.setSelectedIndex(--index);
        if(model.getSize() == 0)
        {
            isValid = false;
            wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        }
        addButton.setEnabled(true);
        if(model.getSize() == 0)
        {
            changeButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        model.removeElement(jList1.getSelectedValue());
        String element = "$TABLE" + table;
        String fileName = jTextField1.getText().trim();
        if(fileName.length() > 0)
            element = element + " FILE=" + fileName;
        if(jRadioButton1.isSelected())
            element = element + " " + "NOHEADER";
        if(jRadioButton2.isSelected())
            element = element + " " + "ONEHEADER";        
        model.add(index, element);     
    }//GEN-LAST:event_changeButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        jList1.setSelectedIndex(++index);
        if(index == 0)
        {
            changeButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
                
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);
    }//GEN-LAST:event_downButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String element = "$TABLE" + table;
        String fileName = jTextField1.getText().trim();
        if(fileName.length() > 0)
            element = element + " FILE=" + fileName;
        if(jRadioButton1.isSelected())
            element = element + " NOHEADER";
        if(jRadioButton2.isSelected())
            element = element + " ONEHEADER";   
        if(model.indexOf(element) != -1) return;
        model.add(++index, element);     
        jList1.setSelectedIndex(index);
        isValid = true;
        wizardPane.setLeftOptions(wizardPane.getUpdatedLeftOptions().toArray()); 
        if(model.getSize() == 10)
            addButton.setEnabled(false);
        deleteButton.setEnabled(true);
        changeButton.setEnabled(true);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);        
    }//GEN-LAST:event_addButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        jList1.setSelectedIndex(--index);
        
        // Set up and down buttons
        Utility.setUpDownButton(index, model, upButton, downButton);        
    }//GEN-LAST:event_upButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton changeButton;
    private javax.swing.JButton changeItemButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JButton downButton;
    private javax.swing.JTextArea help;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    private javax.swing.JTextPane jTextPane5;
    private javax.swing.JButton leftButton;
    private javax.swing.JList leftList;
    private javax.swing.JButton rightButton;
    private javax.swing.JList rightList;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is to return the StepDescriptor object
     * @return A StepDescriptor object
     */    
    public StepDescriptor getStepDescription(){
	return sd;
    }

    private class MyStepDescriptor extends StepDescriptor{ 

	public Component getComponent(){
	    return panel;
	}
       
  	public String getContentItem(){
            if(isBoth)
            {
                if(which.equals("$ESTIMATION"))
                    return "$TABLE Record1";
                else
                    return "$TABLE Record2"; 
            }
            else
                return "$TABLE Record"; 
  	}

	public String getStepTitle(){
	    return "$TABLE Record - for the " + which + " step"; 
	}

	public void showingStep(JWizardPane wizard){
            wizardPane = wizard;
            MDAObject object = (MDAObject)wizard.getCustomizedObject();

            // Fill available items into the ComboBox
            String[] input = object.getRecords().getProperty("Input").split(" ");
            String[] pk = object.getRecords().getProperty("PK").split("\n");
            for(int i = 1; i < input.length; i++)
            {
                String item = input[i].split("=")[0];
                if(!item.equals("DV"))
                    jComboBox1.addItem(input[i].split("=")[0]);
            }
            for(int i = 1; i <= iterator.getNTheta(); i++)
                jComboBox1.addItem("ETA(" + i +")");
            for(int i = 1; i < pk.length; i++)
            {
                if(pk[i].indexOf("=") != -1)
                    jComboBox1.addItem(pk[i].substring(0, pk[i].indexOf('=')).trim());
            }
            
            // Set models for list1 and list2
            leftModel = new DefaultListModel();
            leftList.setModel(leftModel);
            rightModel = new DefaultListModel();
            rightList.setModel(rightModel);
	}

	public void hidingStep(JWizardPane wizard){
            int size = model.getSize();
            if(size == 0)
                return; 
            MDAObject object = (MDAObject)wizard.getCustomizedObject();  
            // Create and save record
            String record = (String)model.get(0);
            for(int i = 1; i < size; i++)
                record = record + "\n" + model.get(i);            
            if(which.equals("$ESTIMATION"))
                object.getRecords().setProperty("TableEst", record); 
            if(which.equals("$SIMULATION")) 
                object.getRecords().setProperty("TableEst", record); 
            
            String[][][] tables = new String[size][4][];
            for(int i = 0; i < size; i++)
            {
                String element = (String)model.get(i);
                int ind = element.indexOf("FILE=");
                if(ind == -1)
                {
                    ind = element.indexOf("NOHEADER=");
                    if(ind == -1)
                    {
                        ind = element.indexOf("ONEHEADER=");
                        if(ind == -1)
                            ind = element.length() + 1;
                    }
                }
                
                String lists = element.substring(0, ind - 1);
                String[] list1 = null;
                String[] list2 = null;
                int indBy = lists.indexOf("BY ");
                if(indBy != -1)
                {
                    list1 = lists.substring(7, indBy - 1).split(" "); 
                    list2 = lists.substring(indBy + 3).split(" ");
                }
                else
                {
                    list1 = lists.substring(7).split(" ");
                }
                tables[i][0] = new String[2];               // file and header
                tables[i][1] = new String[list1.length];    // list1
                tables[i][2] = new String[list1.length];    // appearance order
                tables[i][3] = new String[list1.length];    // sorting order
                // Find file name
                ind = element.indexOf("FILE=");
                if(ind != -1)
                    if(element.indexOf(" ", ind) != -1)
                        tables[i][0][0] = element.substring(ind + 5, element.indexOf(" ", ind));
                    else
                        tables[i][0][0] = element.substring(ind + 5, element.length());
                else
                    tables[i][0][0] = null;
                // Find header
                if(element.indexOf(" ONEHEADER") != -1)
                    tables[i][0][1] = "one";
                if(element.indexOf(" NOHEADER") != -1)
                    tables[i][0][1] = "none";
                if(element.indexOf("HEADER") == -1)
                    tables[i][0][1] = "every";
                // Set list1
                tables[i][1] = list1;
                // Find orders
                int start = 0;
                int length = 0;
                if(list2 != null)
                {
                    start = list2.length;
                    length = start;
                }
                for(int j = 0; j < list1.length; j++)
                {
                    int order = 0;
                    for(int k = 0; k < length; k++)
                    {
                        if(list1[j].equals(list2[k]))
                        {
                            order = k + 1;
                        }
                    }
                    if(order != 0)
                    {
                        tables[i][2][j] = String.valueOf(order);
                        tables[i][3][j] = String.valueOf(order);
                    }
                    else
                    {
                        tables[i][2][j] = String.valueOf(++start);
                        tables[i][3][j] = "0";                       
                    }
                }
            }
            if(which.equals("$ESTIMATION"))
                object.getControl().tableEst = tables; 
            if(which.equals("$SIMULATION")) 
                object.getControl().tableSim = tables;  
	}

	public boolean isValid(){
            return isValid;
	}

	public ActionListener getHelpAction(){
	    return new ActionListener(){
                public void actionPerformed(ActionEvent e){ 
                    jDialog2.setTitle("Help for " + getStepTitle());
                    jDialog2.setSize(600, 500);
                    jDialog2.setVisible(true);
                    jDialog2.show();
                }
            };
	}
    }
}
