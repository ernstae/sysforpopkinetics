/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/
package uw.rfpk.mda;

import java.util.ArrayList;
import java.util.Vector;
import java.awt.Color;
import java.awt.Font;
import java.awt.Dimension;
import javax.swing.JFrame;
import javax.swing.ListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/** This class generates default plots.
 *
 * @author  Jiaji Du
 */
public class DefaultPlot extends javax.swing.JDialog {
    
    /** Creates new form DefaultPlot
     * @param parent a JFrame object
     */
    private DefaultPlot(java.awt.Frame parent) {
        super(parent, false);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        curveList = new javax.swing.JList(model);
        displayButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Plot List");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Please select individuals");
        jTextField1.setFocusable(false);
        getContentPane().add(jTextField1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(curveList);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        getContentPane().add(displayButton, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        int[] selectedIndex = curveList.getSelectedIndices();
        if(selectedIndex.length == 1 && selectedIndex[0] < 0)
            return;
        int inds = indPoints.length;
        int[] startIndex = new int[inds];
        startIndex[0] = 0;
        for(int i = 1; i < inds; i++)
            startIndex[i] = startIndex[i - 1] + indPoints[i - 1];
        int nCurve = name.length;
        double[][] dataX, dataY;
        String title;
        int l;
        for(int j = 0; j < selectedIndex.length; j++)
        {
            int rows = indPoints[selectedIndex[j]];
            int startRow = startIndex[selectedIndex[j]];
            dataX = new double[nCurve][rows];
            dataY = new double[nCurve][rows];
            for(int i = 0; i < nCurve; i++)
            {
                for(int k = 0; k < rows; k++)
                {
                    l = startRow + k;
                    dataX[i][k] = dataXAll[i][l];    
                    dataY[i][k] = dataYAll[i][l];
                }
            }
            title = titleAll + " for ind = " + indIDNames[selectedIndex[j]];
            l = j - j / 10 * 10;
            plot(dataX, dataY, title, l * 50, l * 40, false, null);            
        }
    }//GEN-LAST:event_displayButtonActionPerformed
    
    /** This method generates a PRED or IPRED versus DV plot.
     * @param dataLabels an ArrayList object containing data labels.
     * @param dataValues a data value matrix.
     * @param indIDs individual IDs.
     * @param itemY either PRED or IPRED.
     * @param byID the flag to spicify if the plot should be divided by ID.
     */
    public static void plotPREDvsDV(ArrayList dataLabels, double[][] dataValues,
                                    String[] indIDs, String itemY, boolean byID)
    {
        titleX = "DV";
        titleY = itemY;
        int indexPRED = dataLabels.indexOf(titleY);
        int indexDV = dataLabels.indexOf(titleX);
        if(indexPRED == -1 || indexDV == -1)
        {
            JOptionPane.showMessageDialog(null, "Report data were not found.", "Input Error",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        int rows = dataValues.length;
        dataXAll = new double[1][rows];
        dataYAll = new double[1][rows];
        for(int i = 0; i < rows; i++)
        {
            dataYAll[0][i] = dataValues[i][indexPRED];
            dataXAll[0][i] = dataValues[i][indexDV];
        }
        name = new String[]{titleY};
        symbol = new int[]{0};
        color = new Color[]{Color.black};
        titleAll = titleY + " VS " + titleX;
        setPlotRange(dataXAll, dataYAll, true);
        uLine = true;
        xLine = false;
        yLine = false;
        if(!byID)
            plot(dataXAll, dataYAll, titleAll, 0, 0, true, indIDs);
        else
            plotIndividual(indIDs);
    }
    
    /** This method generates a DV and (PRED or IPRED) versus TIME plot.
     * @param dataLabels an ArrayList object containing data labels.
     * @param dataValues a data value matrix.
     * @param indIDs individual IDs.
     * @param itemY either PRED or IPRED.
     * @param byID the flag to spicify if the plot should be divided by ID.
     */    
    public static void plotDVPREDvsTIME(ArrayList dataLabels, double[][] dataValues,
                                        String[] indIDs, String itemY, boolean byID)
    {
        titleX = "TIME";
        titleY = "DV " + itemY;
        int indexPRED = dataLabels.indexOf(itemY);
        int indexDV = dataLabels.indexOf("DV");
        int indexTIME = dataLabels.indexOf(titleX);
        if(indexPRED == -1 || indexDV == -1 || indexTIME == -1)
        {
            JOptionPane.showMessageDialog(null, "Report data were not found.", "Input Error",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        int rows = dataValues.length;
        dataXAll = new double[2][rows];
        dataYAll = new double[2][rows];
        for(int i = 0; i < rows; i++)
        {
            dataYAll[0][i] = dataValues[i][indexPRED];
            dataYAll[1][i] = dataValues[i][indexDV];
            dataXAll[0][i] = dataValues[i][indexTIME];
            dataXAll[1][i] = dataValues[i][indexTIME];
        }
        name = new String[]{itemY, "DV"};
        symbol = new int[]{10, 0};
        color = new Color[]{Color.black, Color.black};
        titleAll = titleY + " Versus " + titleX;
        setPlotRange(dataXAll, dataYAll, false);
        xLine = false;
        yLine = false;
        uLine = false;
        if(!byID)
            plot(dataXAll, dataYAll, titleAll, 0, 0, true, indIDs);
        else
            plotIndividual(indIDs);
    }
    
    private static void setPlotRange(double[][] dataXAll, double[][] dataYAll, boolean isEqual)
    {
        if(isEqual)
        {
            double[] boundsX = findBounds(dataXAll);
            double[] boundsY = findBounds(dataYAll);
            double min = Math.min(boundsX[0], boundsY[0]);
            double max = Math.max(boundsX[1], boundsY[1]);
            double[] range = Plotter.optDivisions(6, min, max);
            minX = minY = range[0];
            maxX = maxY = range[1];
            nHDivi = nVDivi = (int)(range[2] + 0.1);
        }
        else
        {
            
            double[] rangeX = Plotter.getDefaultRange(dataXAll, false);
            double[] rangeY = Plotter.getDefaultRange(dataYAll, false);
            minX = rangeX[0];
            maxX = rangeX[1];
            minY = rangeY[0];
            maxY = rangeY[1];
            nHDivi = (int)(rangeX[2] + 0.1);
            nVDivi = (int)(rangeY[2] + 0.1);
        }
    }
    
    private static double[] findBounds(double[][] data)
    {
        double min = data[0][0];
        double max = min;
        for(int i = 0; i < data.length; i++)
            for(int j = 0; j < data[i].length; j++)
            {
                max = Math.max(max, data[i][j]);
                min = Math.min(min, data[i][j]);
            }
        double[] bounds = {min, max};
        return bounds;
    }
    
    private static void plotIndividual(String[] indIDs)
    {
        indPoints = getIndPoints(indIDs);
        indIDNames = new String[indPoints.length];
        indIDNames[0] = indIDs[0];
        model.clear();
        model.addElement("ind = " + indIDs[0]);
        int j = 0;
        for(int i = 1; i < indIDs.length; i++)
            if(!indIDs[i].equals(indIDNames[j]))
            {
                indIDNames[++j] = indIDs[i];
                model.addElement("ind = " + indIDs[i]);
            }
        DefaultPlot dialog = new DefaultPlot(new JFrame());
        dialog.setSize(160, 240);
        Dimension size = dialog.getToolkit().getScreenSize();
        dialog.setLocation(size.width / 2, size.height / 2);
        dialog.setVisible(true);
    }
    
    /** Get list of individual IDs.
     * @param indIDs list of IDs in the dataset.
     * @return list of individual IDs.
     */
    protected static int[] getIndPoints(String[] indIDs)
    {
        int count = 0;
        String id = indIDs[0];
        Vector<Integer> points = new Vector<Integer>();
        for(int i = 1; i < indIDs.length; i++)
        {
            count++;
            if(!id.equals(indIDs[i]))
            {
                points.add(new Integer(count));
                count = 0;
            }
            id = indIDs[i];
        }
        points.add(new Integer(++count));
        indPoints = new int[points.size()];
        for(int i = 0; i < points.size(); i++)
            indPoints[i] = ((Integer)points.get(i)).intValue();
        return indPoints;
    }
        
    private static void plot(double[][] dataX, double[][] dataY, String title, int x, int y,
                             boolean isIndividualized, String[] indIDs)
    {
        int[] indPoints = null;
        if(isIndividualized)
             indPoints = getIndPoints(indIDs);
        JFrame frame = new JFrame();
        Plotter plotter = new Plotter(dataX, dataY, title, titleX, titleY, name, symbol, color,
                                      xLine, yLine, uLine, false, false, true, true, 0, 0,
                                      null, null, addedLineColor, "Inside",
                                      nHDivi, nVDivi, 6, 6, 4, 4, 4, 4, maxX, minX, maxY, minY,
                                      titleFont, labelFont, legendFont, numberFont, 0, 0, 0, 0,
                                      true, true, false, false, false, 0, false, null, 2, 2, 
                                      frame, indPoints);
        plotter.setToolTipText("");
        frame.getContentPane().add(plotter);
        frame.setLocation(x, y);
	frame.setSize(500, 400);
	frame.setTitle("Model Design Agent Data Plot");	
	frame.setVisible(true);        
    }
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList curveList;
    private javax.swing.JButton displayButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
    private static double[][] dataXAll, dataYAll;
    private static double maxX, minX, maxY, minY;
    private static String[] name, indIDNames;
    private static int[] symbol, indPoints;
    private static int nHDivi, nVDivi;
    private static Color[] color;
    private static String titleAll, titleX, titleY;
    private static final Font titleFont = new Font("SansSerif", Font.BOLD, 14);
    private static final Font labelFont = new Font("SansSerif", Font.BOLD, 12);
    private static final Font legendFont = new Font("SansSerif", Font.BOLD, 11);
    private static final Font numberFont = new Font("SansSerif", Font.BOLD, 10);
    private static Color[] addedLineColor = new Color[]{Color.black, Color.black, Color.black};
    private static boolean uLine, xLine, yLine;
    private static DefaultListModel model = new DefaultListModel();
}
