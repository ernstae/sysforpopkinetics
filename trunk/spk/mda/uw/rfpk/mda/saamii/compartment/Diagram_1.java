/**********************************************************************
From:   Resource Facility for Population Kinetics                    
        Department of Bioengineering Box 352255                      
        University of Washington                                     
        Seattle, WA 98195-2255                                       

This file is part of the System for Population Kinetics (SPK), which
was developed with support from NIH grants RR-12609 and P41-
EB001975. Please cite these grants in any publication for which this
software is used and send a notification to the address given above.

SPK is Copyright (C) 1998-2003, by the University of Washington,
Resource Facility for Population Kinetics, and is made available as
free open source software under the terms of the University of
Washington Free-Fork License as a public service.  A copy of the
License can be found in the COPYING file in the root directory of this
distribution.
**********************************************************************/

package uw.rfpk.mda.saamii.compartment;

import java.awt.Font;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.Cursor;
import java.awt.BasicStroke;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author  jiaji Du
 */
public class Diagram_1 extends javax.swing.JPanel {
    
    /** Creates new form Diagram */
    public Diagram_1(DesignTool frame) {
        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.EtchedBorder());
        initComponents();
        area = new Dimension(0, 0);
        this.frame = frame;
        model = new Model(frame.models); 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        renameMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        attributeMenuItem = new javax.swing.JMenuItem();
        compDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        compOKButton = new javax.swing.JButton();
        compCancelButton = new javax.swing.JButton();
        compHelpButton = new javax.swing.JButton();
        fluxDialog = new javax.swing.JDialog();
        additionalRadioButton = new javax.swing.JRadioButton();
        proportionalRadioButton = new javax.swing.JRadioButton();
        exponentialRadioButton = new javax.swing.JRadioButton();
        userDefinedRadioButton = new javax.swing.JRadioButton();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        userDefinedTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        fluxOKButton = new javax.swing.JButton();
        fluxCancelButton = new javax.swing.JButton();
        fluxHelpButton = new javax.swing.JButton();
        delayDialog = new javax.swing.JDialog();
        inputDialog = new javax.swing.JDialog();
        sampleDialog = new javax.swing.JDialog();

        renameMenuItem.setText("Rename");
        renameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameMenuItemActionPerformed(evt);
            }
        });

        jPopupMenu1.add(renameMenuItem);

        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });

        jPopupMenu1.add(deleteMenuItem);

        attributeMenuItem.setText("Attributes");
        attributeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeMenuItemActionPerformed(evt);
            }
        });

        jPopupMenu1.add(attributeMenuItem);

        compDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        compDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        compDialog.setTitle("Compatment Attributes");
        compDialog.setModal(true);
        compDialog.setResizable(false);
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Select attribute(s).");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 8, 12);
        compDialog.getContentPane().add(jLabel1, gridBagConstraints);

        jCheckBox1.setText("INITIALOFF");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("NOOFF");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText("NODOSE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setText("EQUILIBRIUM");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jCheckBox4, gridBagConstraints);

        jCheckBox5.setText("EXCLUDE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jCheckBox5, gridBagConstraints);

        jCheckBox6.setText("DEFOBSERVATION");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jCheckBox6, gridBagConstraints);

        jCheckBox7.setText("DEFDOSE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        compDialog.getContentPane().add(jCheckBox7, gridBagConstraints);

        compOKButton.setText("OK");
        compOKButton.setPreferredSize(new java.awt.Dimension(75, 25));
        compOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compOKButtonActionPerformed(evt);
            }
        });

        jPanel1.add(compOKButton);

        compCancelButton.setText("Cancel");
        jPanel1.add(compCancelButton);

        compHelpButton.setText("Help");
        compHelpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel1.add(compHelpButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        compDialog.getContentPane().add(jPanel1, gridBagConstraints);

        fluxDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        fluxDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        fluxDialog.setTitle("Mixed Effect Model");
        additionalRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        additionalRadioButton.setSelected(true);
        additionalRadioButton.setText("Additional");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(additionalRadioButton, gridBagConstraints);

        proportionalRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        proportionalRadioButton.setText("Proportional");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(proportionalRadioButton, gridBagConstraints);

        exponentialRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        exponentialRadioButton.setText("Exponential");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(exponentialRadioButton, gridBagConstraints);

        userDefinedRadioButton.setFont(new java.awt.Font("Dialog", 0, 12));
        userDefinedRadioButton.setText("User Defined");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        fluxDialog.getContentPane().add(userDefinedRadioButton, gridBagConstraints);

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setText("Select or enter a mixed effect model for the flow rate of\nthe flux.  The model consists of a fixed effect parameter\ndenoted by F and a random effect parameters denoted \nby R.  The fixed effects are used to model the flow rate of\nthe population and the random effects are used to model\nthe flow rate variations among the individual subjects.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        fluxDialog.getContentPane().add(jTextArea1, gridBagConstraints);

        jLabel3.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 5, 0);
        fluxDialog.getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("Expression");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel4, gridBagConstraints);

        jLabel5.setText("Distribution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel6.setText("F + R");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel7.setText("Normal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel8.setText("F + F * R");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel8, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel9.setText("Normal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel9, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel10.setText("F * exp(R)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel11.setText("Lognormal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(userDefinedTextField, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel12.setText("Note: R is a zero mean Normal random variable in SPK.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(8, 12, 0, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel12, gridBagConstraints);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/saamii/compartment/normal.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel13, gridBagConstraints);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/saamii/compartment/normal.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel14, gridBagConstraints);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uw/rfpk/mda/saamii/compartment/lognormal.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fluxDialog.getContentPane().add(jLabel15, gridBagConstraints);

        fluxOKButton.setText("OK");
        fluxOKButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel5.add(fluxOKButton);

        fluxCancelButton.setText("Cancel");
        jPanel5.add(fluxCancelButton);

        fluxHelpButton.setText("Help");
        fluxHelpButton.setPreferredSize(new java.awt.Dimension(75, 25));
        jPanel5.add(fluxHelpButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        fluxDialog.getContentPane().add(jPanel5, gridBagConstraints);

        setLayout(new java.awt.BorderLayout());

        setToolTipText("");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

    }//GEN-END:initComponents

    private void compOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compOKButtonActionPerformed
        StringBuffer sb = new StringBuffer();
        if(jCheckBox1.isSelected()) sb.append(" INITIALOFF");
        if(jCheckBox2.isSelected()) sb.append(" NOOFF");
        if(jCheckBox3.isSelected()) sb.append(" NODOSE");
        if(jCheckBox4.isSelected()) sb.append(" EQUILIBRIUM");
        if(jCheckBox5.isSelected()) sb.append(" EXCLUDE");
        if(jCheckBox6.isSelected()) sb.append(" DEFOBSERVATION");
        if(jCheckBox7.isSelected()) sb.append(" DEFDOSE");
        ((Element.Compartment)model.selectedElement).attributes = sb.toString();
        if(frame.isModelApplied)
            frame.jButton1.doClick();
        compDialog.hide();
    }//GEN-LAST:event_compOKButtonActionPerformed

    private void attributeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeMenuItemActionPerformed
        if(model.selectedElement instanceof Element.Compartment)
        {
            compDialog.setSize(175, 250);
            compDialog.setLocation(x + 200, y + 100);
            compDialog.show();
        }
        if(model.selectedElement instanceof Element.Delay)
        {
            delayDialog.setSize(175, 250);
            delayDialog.setLocation(x + 200, y + 100);
            delayDialog.show();
        }
        if(model.selectedElement instanceof Element.Flux && 
           ((Element.Flux)model.selectedElement).element1 != null)
        {
            fluxDialog.setSize(380, 380);
            fluxDialog.setLocation(x + 200, y + 100);
            fluxDialog.show();
        }
        if(model.selectedElement instanceof Element.Input)
        {
            inputDialog.setSize(175, 250);
            inputDialog.setLocation(x + 200, y + 100);
            inputDialog.show();
        }
        if(model.selectedElement instanceof Element.Sample)
        {
            sampleDialog.setSize(175, 250);
            sampleDialog.setLocation(x + 200, y + 100);
            sampleDialog.show();
        }
    }//GEN-LAST:event_attributeMenuItemActionPerformed

    private void renameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameMenuItemActionPerformed
        String name = JOptionPane.showInputDialog(null, "Enter new name.", model.selectedElement.name);
        if(name != null && !name.trim().equals(""))
        {
            model.selectedElement.name = name;
            if(frame.isModelApplied)
                frame.jButton1.doClick();
            repaint();
        }
    }//GEN-LAST:event_renameMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        model.remove(model.selectedElement);
        if(frame.isModelApplied)
            frame.jButton1.doClick();
        repaint();
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(tempElement != null && (evt.getModifiers() & evt.BUTTON1_MASK) != 0 && start != null)
        {            
            last = evt.getPoint();
            tempElement.xCenter += last.getX() - start.getX();
            tempElement.yCenter += last.getY() - start.getY();
            start = last;
            repaint();
        }        
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(!frame.pickedElement.equals("")) return;
        start = evt.getPoint();
        x = (int)(start.getX() / frame.scale);
        y = (int)(start.getY() / frame.scale);
        if(evt.isPopupTrigger())
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        if((evt.getModifiers() & evt.BUTTON1_MASK) != 0)
            gc2D.setXORMode(Color.white);
      
        for(int i = 0; i < Model.elements.size(); i++)
        {
            if(((Element)Model.elements.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)Model.elements.get(i);
                if(!evt.isPopupTrigger())
                    tempElement = (Element)model.selectedElement.clone();
                else
                    tempElement = null;
                return;
            }
        }
        for(int i = 0; i < Model.fluxes.size(); i++)
        {
            if(((Element)Model.fluxes.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)Model.fluxes.get(i);
                return;
            }
        }
        for(int i = 0; i < model.inputs.size(); i++)
        {
            if(((Element)model.inputs.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)model.inputs.get(i);
                if(!evt.isPopupTrigger())
                    tempElement = (Element)model.selectedElement.clone();
                else
                    tempElement = null;
                return;
            }
        }
        for(int i = 0; i < model.samples.size(); i++)
        {
            if(((Element)model.samples.get(i)).contains(x, y))
            {
                model.selectedElement = (Element)model.samples.get(i);
                if(!evt.isPopupTrigger())
                    tempElement = (Element)model.selectedElement.clone();
                else
                    tempElement = null;
                return;
            }
        }
        model.selectedElement = null;
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if(tempElement != null && (evt.getModifiers() & evt.BUTTON1_MASK) != 0 && start != null && last != null)
        {
            last = null;
            gc2D.setPaintMode();
            isMouseDragged = false;
            model.selectedElement.xCenter = tempElement.xCenter;
            model.selectedElement.yCenter = tempElement.yCenter;
            tempElement = null;
            repaint();
        }
        if (evt.isPopupTrigger()) 
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        final int W = 50;
        final int H = 50;
        boolean changed = false;
        if (SwingUtilities.isRightMouseButton(evt)) 
        {

        } 
        else 
        {
            int x = evt.getX() - W/2;
            int y = evt.getY() - H/2;
            if (x < 0) x = 0;
            if (y < 0) y = 0;
            Rectangle rect = new Rectangle(x, y, W, H);
            scrollRectToVisible(rect);

            int this_width = (x + W + 2);
            if (this_width > area.width) {
                area.width = this_width; changed=true;
            }

            int this_height = (y + H + 2);
            if (this_height > area.height) {
                area.height = this_height; changed=true;
            }
        }
        if (changed) {
            //Update client's preferred size because
            //the area taken up by the graphics has
            //gotten larger or smaller (if cleared).
            setPreferredSize(area);

            //Let the scroll pane know to update itself
            //and its scrollbars.
            revalidate();
        }
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        x = (int)(evt.getX() / frame.scale);
        y = (int)(evt.getY() / frame.scale);
        if(frame.pickedElement.equals("compartment"))
        {
            Element.Compartment compartment = new Element.Compartment(x, y, model);
            Model.elements.add(compartment);                
            frame.clearButton.setEnabled(true);
            frame.addButton.setEnabled(true);
            frame.pickedElement = "";
            repaint();
        }
        else if(frame.pickedElement.equals("delay"))
        {
            if(model.nElement == 9)
            {
                JOptionPane.showMessageDialog(null, "The total number of Compartments and Delays must be <= 9.",
                                              "Input Error", JOptionPane.ERROR_MESSAGE);
                frame.pickedElement = "";
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                return;
            }
            Element.Delay delay = new Element.Delay(x, y, model);
            model.elements.add(delay);                
            frame.clearButton.setEnabled(true);
            frame.addButton.setEnabled(true);            
            frame.pickedElement = "";
            repaint();
        }
        else if(frame.pickedElement.equals("flux"))
        {
            
            
/*            
            if(startElement == null)
            {
                startElement = getSelectedElement();
                if(startElement == null)
                {
                    frame.pickedElement = "";
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
                return;   
            }
*/
            
            if(startElement == null && !isBackgroundClicked)
            {
                startElement = getSelectedElement();
                if(startElement == null)
                    isBackgroundClicked = true;
                return;   
            }
            else if(startElement == null && isBackgroundClicked)
            {
                endElement = getSelectedElement();
                isBackgroundClicked = false;
                frame.pickedElement = "";
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                if(endElement != null)
                    addFlux();
                return;   
            }
            else
            {
                endElement = getSelectedElement();
                if(startElement instanceof Element.Delay)
                {
                    if(endElement instanceof Element.Delay && startElement != endElement)
                    {
                        JOptionPane.showMessageDialog(null, "A flux from a Delay to another Delay is not allowed.",
                                                      "Input Error", JOptionPane.ERROR_MESSAGE);
                        startElement = null;
                        frame.pickedElement = "";
                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        return;
                    }
                    if(endElement == null)
                    {
                        JOptionPane.showMessageDialog(null, "A flux from a Delay to the background is not allowed.",
                                                      "Input Error", JOptionPane.ERROR_MESSAGE);
                        startElement = null;
                        frame.pickedElement = "";
                        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        return;
                    }
                }
                if(startElement instanceof Element.Compartment && startElement == endElement)
                {
                    startElement = null;
                    endElement = null;
                    frame.pickedElement = "";
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    return;                    
                }
            }
            if(startElement != null && endElement != startElement)
                addFlux();
            frame.pickedElement = "";
        }
        else if(frame.pickedElement.equals("input"))
        {
            Element element = getSelectedElement();
            if(element instanceof Element.Compartment)
            {
                boolean hasInput = false;
                for(int i = 0; i < model.inputs.size(); i++)
                    if(((Element.Input)model.inputs.get(i)).compartment == element)
                    {
                        hasInput = true;
                        break;
                    }
                if(!hasInput)
                {
                    Element.Input input = new Element.Input((Element.Compartment)element, model);
                    model.inputs.add(input);                    
                    repaint();                  
                }
            }
            frame.pickedElement = "";
        }
        else if(frame.pickedElement.equals("sample"))
        {
            Element element = getSelectedElement();
            if(element instanceof Element.Compartment)
            {
                Element.Sample sample = new Element.Sample((Element.Compartment)element, model);
                model.samples.add(sample);                
                repaint();
                              
            }
            frame.pickedElement = "";
        }
        if(frame.isModelApplied)
            frame.jButton1.doClick();
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_formMouseClicked
    
    private Element getSelectedElement()
    {
        for(int i = 0; i < model.elements.size(); i++)
        {
            Element element = (Element)model.elements.get(i);
            if(element.contains(x, y))
                return element;
        }
        return null;
    }
    
    private void addFlux()
    {
        boolean isExist = false;
        for(int i = 0; i < model.fluxes.size(); i++)
        {
            Element.Flux flux = (Element.Flux)model.fluxes.get(i);
            if(flux.element1 == startElement && flux.element2 == endElement)
            {
                isExist = true;
                break;
            }
        }
        if(!isExist)
        {
            Element.Flux flux = new Element.Flux(startElement, endElement, model);
            model.fluxes.add(flux);               
            startElement = null;
            endElement = null;
            repaint();
        }    
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton additionalRadioButton;
    private javax.swing.JMenuItem attributeMenuItem;
    private javax.swing.JButton compCancelButton;
    private javax.swing.JDialog compDialog;
    private javax.swing.JButton compHelpButton;
    private javax.swing.JButton compOKButton;
    private javax.swing.JDialog delayDialog;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JRadioButton exponentialRadioButton;
    private javax.swing.JButton fluxCancelButton;
    private javax.swing.JDialog fluxDialog;
    private javax.swing.JButton fluxHelpButton;
    private javax.swing.JButton fluxOKButton;
    private javax.swing.JDialog inputDialog;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JRadioButton proportionalRadioButton;
    private javax.swing.JMenuItem renameMenuItem;
    private javax.swing.JDialog sampleDialog;
    private javax.swing.JRadioButton userDefinedRadioButton;
    private javax.swing.JTextField userDefinedTextField;
    // End of variables declaration//GEN-END:variables
    public void paintComponent(Graphics gc) 
    {
        super.paintComponent(gc);
        gc2D = ((Graphics2D)gc);
        gc2D.setBackground(Color.white);
        gc2D.setFont(new Font("SansSerif", Font.BOLD, 10));
        gc2D.setStroke(new BasicStroke(2.0f));
        gc2D.setPaintMode();
        gc2D.scale(frame.scale, frame.scale);
        model.draw(gc2D);
        if(tempElement != null) tempElement.drawBoundary(gc2D);
    }

    private DesignTool frame;
    private Graphics2D gc2D;
    private Point2D start, last;
    private int x,y;
    protected Model model;
    protected Element startElement = null;
    protected Element endElement = null;
    private Dimension area;
    private boolean isMouseDragged = false;
    private boolean isBackgroundClicked = false;
    protected Element tempElement;
}
