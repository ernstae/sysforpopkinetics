$begin spk_model$$
$spell 
    ind
    distrib
    inv 
    non 
    const 
    virtuals 
    instantiate 
    fi 
    Ri 
    RiInv 
    Dinv 
    seta 
    setb 
    seti 
    int
    nr
    Spk
    cerr
    endl
    covariance
    covariances
    inx
    Bayesian
$$

$section SPK Model Base Class$$

$index SPK_Model$$
$cindex \SPK Model Base Class$$

$head Description$$
$code SPK_Model$$ serves as the base class for SPK model classes.
This class provides the mechanism for SPK to obtain values from 
model functions at various evaluation points.
In particular, objects of type $code SPK_Model$$ possess member 
functions that return values for the mean of the data $math%f%$$, 
the covariance of the data $math%R%$$, 
the covariance of the individual parameters $math%D%$$,
and their derivatives with respect to both the 
population parameter $italic alp$$ and the individual parameter
$italic b$$.
$pre

$$
There are two ways to implement $code SPK_Model$$ subclasses 
depending on whether these $code SPK_Model$$ objects will be used
for individual analysis, i.e., for estimating individual parameters,
or whether they will be used for the population analysis, i.e.,
for estimating population parameters.

$head Note on Redefining Virtual Functions$$
Many of the virtual functions of this base class are provided 
with default implementations that will throw an exception if they
are called.
Before any of these virtual functions can be 
called they must therefore be redefined.
However, if some of these virtual functions are not required for 
the type of analysis that the $code SPK_Model$$ object will be 
used to perform, then those functions can be left as they are.
$pre

$$
For example, if the model will only be used for individual 
analysis, then the functions required for population analysis
do not need to be redefined.
Or, if the model will only be used to estimate individual parameters
using an extended least squares objective function rather than
a MAP Bayesian objective function, then the function
$tref Model_D$$ will not be called and does not need a new
definition.

$head Individual Analysis$$
In order to implement a concrete subclass of $code SPK_Model$$ 
that will be used for individual analysis some of the virtual 
functions of the class must be provided with new definitions. 

$subhead Functions that Must be Redefined$$
For estimating an individual parameters using an extended least 
squares objective function, the following virtual functions must 
be redefined.
$pre

$$
$table
$tref Model_setb$$  $rend
$tref Model_fi$$    $rend
$tref Model_fi_b$$  $rend
$tref Model_Ri$$    $rend
$tref Model_Ri_b$$
$tend

$subhead Functions that may be Redefined Optionally$$
The following function is optional for individual analysis.  
It must be defined, however, if the
model will be used to estimate individual parameters
using a MAP Bayesian objective function, i.e., one that includes 
the terms involving the covariance of the individual parameters
$pre

$$
$table
$tref Model_D$$
$tend

$subhead Functions that Can be Redefined for Better Performance$$
The following are provided with default definitions that may 
be redefined to make them faster.
$pre

$$
$table
$tref Model_RiInv$$   $rend
$tref Model_RiInv_b$$
$tend
$pre

$$
The following is also provided with a default definition that may 
be redefined to make it faster if the
model will be used to estimate individual parameters
using a Bayesian objective function.
$pre

$$
$table
$tref Model_Dinv$$
$tend

$head Population Analysis$$
In order to implement a concrete subclass of $code SPK_Model$$ 
that will be used for population analysis some of the virtual 
functions of the class must be provided with new definitions. 

$subhead Functions that Must be Redefined$$
For estimating population parameters, the following virtual functions 
must be redefined in addition to both the required and optional 
functions definitions for individual analysis that were listed above.
$pre

$$
$table
$tref Model_seta$$       $rend
$tref Model_seti$$       $rend      
$tref Model_fi_a$$       $rend
$tref Model_Ri_a$$       $rend
$tref Model_D$$          $rend
$tref Model_D_a$$
$tend

$subhead Functions that Can be Redefined for Better Performance$$
The following are provided with default definitions that may 
be redefined to make them faster.
$pre

$$
$table
$tref Model_RiInv_a$$    $rend
$tref Model_Dinv$$       $rend
$tref Model_Dinv_a$$
$tend

$head State Considerations$$

Objects of type $code SPK_Model$$ possess state setting 
functions that SPK calls
in order to set the current individual $math%i%$$, 
the current population parameter $math%alp%$$, and 
the current individual parameter $math%b%$$.
SPK uses the state setting functions to indicate for which 
values of $math%i%$$, $math%alp%$$, and $math%b%$$ that 
$math%f%$$, $math%R%$$, $math%D%$$, and their derivatives 
should be evaluated.

$subhead Making the Model Functions Depend on i, alp, and b$$
If the individual state setting function of a 
$italic model$$ is called with the value $italic i$$,
and if the population parameter state setting function of  
that $italic model$$ is called with the value $italic alp$$,
and if the individual parameter state setting function of 
that $italic model$$ is called with the value $italic b$$,
then the values returned by the $italic model$$
member functions correspond to the values in the following table.
Note that this table uses 
$xref/glossary/Population Notation/population notation/$$.
$pre

$$
$center
$table
$bold Member Function$$
	$cend $bold Value$$ 
	$cend $bold Comments$$ $rend
$code dataMean()$$
	$cend $math%f_i(alp, b)%$$ 
	$cend model for the mean of $math%y%$$ given $math%b%$$ $rend
$code dataMean_popPar()$$ 
	$cend $math%f_i_alp(alp, b)%$$ 
	$cend derivative of $math%f_i(alp, b)%$$ with respect to $math%alp%$$ $rend
$code dataMean_indPar()$$ 
	$cend $math%f_i_b(alp, b)%$$ 
	$cend derivative of $math%f_i(alp, b)%$$ with respect to $math%b%$$ $rend
$code dataVariance()$$ 
	$cend $math%R_i(alp, b)%$$ 
	$cend model for the covariance of $math%y%$$ given $math%b%$$ $rend
$code dataVariance_popPar()$$
	$cend $math%R_i_alp(alp, b)%$$ 
	$cend derivative of $math%R_i(alp, b)%$$ with respect to $math%alp%$$ $rend
$code dataVariance_indPar()$$
	$cend $math%R_i_b(alp, b)%$$ 
	$cend derivative of $math%R_i(alp, b)%$$ with respect to $math%b%$$ $rend
$code indParVariance()$$ 
	$cend $math%D(alp)%$$ 
	$cend model for the covariance of $math%b%$$ $rend
$code indParVariance_popPar()$$
	$cend $math%D_alp(alp)%$$ 
	$cend derivative of $math%D(alp)%$$ with respect to $math%alp%$$
$tend
$$

$subhead Making the Model Functions Depend on alp and b$$
It is possible to make the model functions depend on 
$italic alp$$ and $italic b$$ only.
First, if the values that will be returned by the model functions depend 
on the value for $italic i$$, then the individual state 
setting function should be called with that value and then
not called again.
After that, if the population parameter state setting function of a 
$italic model$$ is called with the value $italic alp$$,
and if the individual parameter state setting function of 
that $italic model$$ is called with the value $italic b$$,
then the values returned by the $italic model$$
member functions correspond to the values in the following table.
Note that this table uses 
$xref/glossary/Individual Notation/individual notation/$$.
$pre

$$
$center
$table
$bold Member Function$$
	$cend $bold Value$$ 
	$cend $bold Comments$$ $rend
$code dataMean()$$
	$cend $math%f(alp, b)%$$ 
	$cend model for the mean of $math%y%$$ given $math%b%$$ $rend
$code dataMean_popPar()$$ 
	$cend $math%f_alp(alp, b)%$$ 
	$cend derivative of $math%f(alp, b)%$$ with respect to $math%alp%$$ $rend
$code dataMean_indPar()$$ 
	$cend $math%f_b(alp, b)%$$ 
	$cend derivative of $math%f(alp, b)%$$ with respect to $math%b%$$ $rend
$code dataVariance()$$ 
	$cend $math%R(alp, b)%$$ 
	$cend model for the covariance of $math%y%$$ given $math%b%$$ $rend
$code dataVariance_popPar()$$
	$cend $math%R_alp(alp, b)%$$ 
	$cend derivative of $math%R(alp, b)%$$ with respect to $math%alp%$$ $rend
$code dataVariance_indPar()$$
	$cend $math%R_b(alp, b)%$$ 
	$cend derivative of $math%R(alp, b)%$$ with respect to $math%b%$$ $rend
$code indParVariance()$$ 
	$cend $math%D(alp)%$$ 
	$cend model for the covariance of $math%b%$$ $rend
$code indParVariance_popPar()$$
	$cend $math%D_alp(alp)%$$ 
	$cend derivative of $math%D(alp)%$$ with respect to $math%alp%$$
$tend
$$


$subhead Making the Model Functions Depend on only b$$
It is possible to make the model functions depend on 
$italic b$$ only.
First, if the values that will be returned by the model functions depend 
on the value for $italic i$$ or $italic alp$$, then the individual state 
setting function should be called with these values and then
not called again.
After that, if the individual parameter state setting function of 
that $italic model$$ is called with the value $italic b$$,
then the values returned by the $italic model$$
member functions correspond to the values in the following table.
Note that this table uses 
$xref/glossary/Individual Notation/individual notation/$$.
$pre

$$
$center
$table
$bold Member Function$$
	$cend $bold Value$$ 
	$cend $bold Comments$$ $rend
$code dataMean()$$
	$cend $math%f(b)%$$ 
	$cend model for the mean of $math%y%$$ given $math%b%$$ $rend
$code dataMean_indPar()$$ 
	$cend $math%f_b(b)%$$ 
	$cend derivative of $math%f(b)%$$ with respect to $math%b%$$ $rend
$code dataVariance()$$ 
	$cend $math%R(b)%$$ 
	$cend model for the covariance of $math%y%$$ given $math%b%$$ $rend
$code dataVariance_indPar()$$
	$cend $math%R_b(b)%$$ 
	$cend derivative of $math%R(b)%$$ with respect to $math%b%$$ $rend
$code indParVariance()$$ 
	$cend $math%D%$$ 
	$cend model for the covariance of $math%b%$$ $rend
$tend
$$

$head Example$$
The following code demonstrates an implementation of $code SPK_Model$$ for 
the population analysis, using the default implementations of
$code RiInv()$$, $code RiInv_b()$$, $code RiInv_a()$$, $code Dinv()$$,
and $code Dinv_a()$$.

$codep

    #include "SPK_ModelWithCovariances.h"
    #include "DoubleMatrix.h"
    #include "SpkException.h"

    const int N = 10;                     // #of individuals in the population
    const int Y = {3,2,4,1,5,3,4,10,8, 5} // #of measurements for each individuals
    const MAX_POP_ITER = 10;              // max# of iterations for population parameter optimization
    const MAX_INT_ITER = 5;               // max# of iterations for individual parameter optimization

    class UserPopModel : public SPK_ModelWithCovariances
    {
        int _who;
        DoubleMatrix _pop, _ind;
    public:
        UserPopModel(){}
        ~UserPopModel(){}

    protected:
        virtual void seti(int who) // 1 <= who <= N
        {
          _who = who;
        }
        virtual void setb(const DoubleMatrix& b)
        {
            _ind = b;
        }
        virtual void seta(const DoubleMatrix& a)
        {
            _pop = a;
        }
        virtual const DoubleMatrix fi() const
        {
          if( _who == 4 )
          {
            DoubleMatrix f4Out( Y[_who-1], 1 );
            //
            // compute the mean of data for the 4th individual
            //
            return f4Out;
          }
          ...
        }
        virtual const DoubleMatrix fi_b() const
        {
           if( _who == 4 )
           {
            DoubleMatrix f4_bOut( Y[_who-1], _ind.nr());
            //
            // compute the derivative of the mean of data
            // for the 4th individual, with respect to
            // _ind.
            //
            return f4_bOut;
           }
           ...
        }
        virtual const DoubleMatrix fi_a() const
        {
           if( _who == 4 )
           {
            DoubleMatrix f4_aOut( Y[_who-1], _pop.nr());
            //
            // compute the derivative of the mean of data
            // for the 4th individual, with respect to
            // _pop.
            //
            return f4_aOut;
           }
           ...
        }
        virtual const DoubleMatrix Ri() const
        {
          if( _who == 4 )
          {
            DoubleMatrix R4Out( Y[_who-1], Y[_who-1] );
            //
            // compute the variance of data for the 4th individual
            //
            return R4Out;
          }
          ...
        }
        virtual const DoubleMatrix Ri_b() const
        {
           if( _who == 4 )
           {
            DoubleMatrix R4_bOut( Y[_who-1]*Y[_who-1], _ind.nr());
            //
            // compute the derivative of the variance of data
            // for the 4th individual, with respect to
            // _ind.
            //
            return R4_bOut;
           }
           ...
        }
        virtual const DoubleMatrix Ri_a() const
        {
           if( _who == 4 )
           {
            DoubleMatrix R4_aOut( Y[i]*Y[i], _pop.nr());
            //
            // compute the derivative of the variance of data
            // for the 4th individual, with respect to
            // _pop.
            //
            return R4_aOut;
           }
           ...
        }
        virtual const DoubleMatrix D() const
        {
            DoubleMatrix DOut(_ind.nr(), _ind.nr());

            //
            // compute the variance of individual parameter
            //
            return DOut;
        }
        virtual const DoubleMatrix D_a() const
        {
            DoubleMatrix D_aOut(_ind.nr()*_ind.nr(), _pop.nr());

            //
            // compute the derivative of the
            // variance of individual parameter
            // with respect to the population parameter
            //
            return D_aOut;
        }
    }
    void main()
    {
      // Instantiate the user-implemented SPK_Model
      UserPopModel model;
      
      for( int j=0; j<MAX_POP_ITER; j++ )
      {        
        // The population parameter
        DoubleMatrix popPar(nPopPar, 1);
        ... initialize it for j-th iteration ...

        DoubleMatrix dataMean_popParOut;
        DoubleMatrix dataVariance_popParOut;
        DoubleMatrix dataVarianceInv_popParOut;
        DoubleMatrix indParVariance_popParOut;
        DoubleMatrix indParVarianceInv_popParOut;

        // Derivatives with respect to the population parameter
        try{
            dataMean_popParOut         = model.dataMean_popPar();
            dataVariance_popParOut     = model.dataVariance_popPar();
            dataVarianceInv_popParOut  = model.dataVarianceInv_popPar();
            indParVariance_popParOut   = model.indParVariance_popPar();
            indParVarianceInv_popParOut= model.indParVarianceInv_popPar();
        }
        catch(const SpkException& e)
        {
            cerr << e << endl;
            exit(-1);
        }

        for(int i=0; i<MAX_IND_ITER; i++)
        {
            DoubleMatrix indPar(nIndPar, 1);
            ... initialize indPar for i-th iteration

            model.setIndPar(indPar);

            for(int inx=0; inx<N; inx++)
            {
              model.setIndex(inx);

              DoubleMatrix dataMeanOut;
              DoubleMatrix dataMean_indParOut;

              DoubleMatrix dataVarianceOut;
              DoubleMatrix dataVariance_indParOut;

              DoubleMatrix dataVarianceInvOut;
              DoubleMatrix dataVarianceInv_indParOut;

              DoubleMatrix indParVarianceOut;

              DoubleMatrix indParVarianceInvOut;
          
              try{
                 dataMeanOut               = model.dataMean();
                 dataMean_indParOut        = model.dataMean_indPar();

                 dataVarianceOut           = model.dataVariance();
                 dataVariance_indParOut    = model.dataVariance_indPar();

                 dataVarianceInvOut        = model.dataVarianceInv();
                 dataVarianceInv_indParOut = model.dataVarianceInv_indPar();

                 indParVarianceOut         = model.indParVariance();
                 indParVarianceInvOut      = model.indParVarianceInv();

              }
              catch( const SpkException& e )
              {
                cerr << e << endl;
                exit(-1);
              }
            }
          }
        }
      }
    }
$$
$childtable/
        SPK_Model.cpp/$$
$end