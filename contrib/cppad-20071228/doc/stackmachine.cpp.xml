<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Example Differentiating a Stack Machine Interpreter</title>
<meta name="description" id="description" content="Example Differentiating a Stack Machine Interpreter"/>
<meta name="keywords" id="keywords" content=" interpreter example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_stackmachine.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>StackMachine.cpp</option>
</select>
</td>
<td><a href="ode_taylor_adolc.cpp.xml" target="_top">Prev</a>
</td><td><a href="mul_level.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>test_vector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>Interface2C.cpp</option>
<option>JacMinorDet.cpp</option>
<option>JacLuDet.cpp</option>
<option>HesMinorDet.cpp</option>
<option>HesLuDet.cpp</option>
<option>OdeStiff.cpp</option>
<option>ode_taylor.cpp</option>
<option>ode_taylor_adolc.cpp</option>
<option>StackMachine.cpp</option>
<option>mul_level</option>
</select>
</td>
<td>StackMachine.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Example Differentiating a Stack Machine Interpreter</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cstddef&gt;<br/>
#&#xA0;include&#xA0;&lt;cstdlib&gt;<br/>
#&#xA0;include&#xA0;&lt;cctype&gt;<br/>
#&#xA0;include&#xA0;&lt;cassert&gt;<br/>
#&#xA0;include&#xA0;&lt;stack&gt;<br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
<br/>
namespace&#xA0;{&#xA0;<br/>
//&#xA0;Begin&#xA0;empty&#xA0;namespace&#xA0;------------------------------------------------<br/>
<br/>
bool&#xA0;is_number(&#xA0;const&#xA0;std::string&#xA0;&amp;s&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;ch&#xA0;=&#xA0;s[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;number&#xA0;=&#xA0;(strchr(&quot;0123456789.&quot;,&#xA0;ch)&#xA0;!=&#xA0;0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;number;<br/>
}<br/>
bool&#xA0;is_binary(&#xA0;const&#xA0;std::string&#xA0;&amp;s&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;ch&#xA0;=&#xA0;s[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;binary&#xA0;=&#xA0;(strchr(&quot;+-*/.&quot;,&#xA0;ch)&#xA0;!=&#xA0;0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;binary;<br/>
}<br/>
bool&#xA0;is_variable(&#xA0;const&#xA0;std::string&#xA0;&amp;s&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;ch&#xA0;=&#xA0;s[0];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;variable&#xA0;=&#xA0;('a'&#xA0;&lt;=&#xA0;ch)&#xA0;&amp;&#xA0;(ch&#xA0;&lt;=&#xA0;'z');<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;variable;<br/>
}<br/>
<br/>
void&#xA0;StackMachine(&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::stack&lt;&#xA0;std::string&#xA0;&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;token_stack&#xA0;&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;&#xA0;CppAD::AD&lt;double&gt;&#xA0;&gt;&#xA0;&amp;variable&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::string;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::stack;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;stack&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;value_stack;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;string&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;token;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_one;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_two;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(&#xA0;!&#xA0;token_stack.empty()&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;string&#xA0;s&#xA0;=&#xA0;token_stack.top();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;token_stack.pop();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;is_number(s)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;value_one&#xA0;=&#xA0;std::atof(&#xA0;s.c_str()&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.push(&#xA0;value_one&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;is_variable(s)&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;value_one&#xA0;=&#xA0;variable[&#xA0;size_t(s[0])&#xA0;-&#xA0;size_t('a')&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.push(&#xA0;value_one&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;is_binary(s)&#xA0;)&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;value_stack.size()&#xA0;&gt;=&#xA0;2&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_one&#xA0;=&#xA0;value_stack.top();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.pop();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_two&#xA0;=&#xA0;value_stack.top();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.pop();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;switch(&#xA0;s[0]&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;case&#xA0;'+':<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.push(value_one&#xA0;+&#xA0;value_two);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;case&#xA0;'-':<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.push(value_one&#xA0;-&#xA0;value_two);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;case&#xA0;'*':<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.push(value_one&#xA0;*&#xA0;value_two);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;case&#xA0;'/':<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.push(value_one&#xA0;/&#xA0;value_two);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;default:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;s[0]&#xA0;==&#xA0;'='&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;value_stack.size()&#xA0;&gt;=&#xA0;1&#xA0;);&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;token_stack.size()&#xA0;&gt;=&#xA0;1&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;s&#xA0;=&#xA0;token_stack.top();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;token_stack.pop();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;is_variable(&#xA0;s&#xA0;)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_one&#xA0;=&#xA0;value_stack.top();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;value_stack.pop();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;variable[&#xA0;size_t(s[0])&#xA0;-&#xA0;size_t('a')&#xA0;]&#xA0;=&#xA0;value_one;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;assert(0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;<br/>
}<br/>
<br/>
//&#xA0;End&#xA0;empty&#xA0;namespace&#xA0;-------------------------------------------------------<br/>
}<br/>
<br/>
bool&#xA0;StackMachine(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::string;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::stack;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::NearEqual;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::vector;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;The&#xA0;users&#xA0;program&#xA0;in&#xA0;that&#xA0;stack&#xA0;machine&#xA0;language<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;*program[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;1.0&quot;,&#xA0;&quot;a&quot;,&#xA0;&quot;+&quot;,&#xA0;&quot;=&quot;,&#xA0;&quot;b&quot;,&#xA0;&#xA0;//&#xA0;b&#xA0;=&#xA0;a&#xA0;+&#xA0;1<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;2.0&quot;,&#xA0;&quot;b&quot;,&#xA0;&quot;*&quot;,&#xA0;&quot;=&quot;,&#xA0;&quot;c&quot;,&#xA0;&#xA0;//&#xA0;c&#xA0;=&#xA0;b&#xA0;*&#xA0;2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;3.0&quot;,&#xA0;&quot;c&quot;,&#xA0;&quot;-&quot;,&#xA0;&quot;=&quot;,&#xA0;&quot;d&quot;,&#xA0;&#xA0;//&#xA0;d&#xA0;=&#xA0;c&#xA0;-&#xA0;3<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;4.0&quot;,&#xA0;&quot;d&quot;,&#xA0;&quot;/&quot;,&#xA0;&quot;=&quot;,&#xA0;&quot;e&quot;&#xA0;&#xA0;&#xA0;//&#xA0;e&#xA0;=&#xA0;d&#xA0;/&#xA0;4<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n_program&#xA0;=&#xA0;sizeof(&#xA0;program&#xA0;)&#xA0;/&#xA0;sizeof(&#xA0;program[0]&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;put&#xA0;the&#xA0;program&#xA0;in&#xA0;the&#xA0;token&#xA0;stack<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;stack&lt;&#xA0;string&#xA0;&gt;&#xA0;token_stack;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i&#xA0;=&#xA0;n_program;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(i--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;token_stack.push(&#xA0;program[i]&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;domain&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;X(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;0.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables&#xA0;and&#xA0;start&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(X);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;x[0]&#xA0;corresponds&#xA0;to&#xA0;a&#xA0;in&#xA0;the&#xA0;stack&#xA0;machine<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;variable(26);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;variable[0]&#xA0;=&#xA0;X[0];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;calculate&#xA0;the&#xA0;resutls&#xA0;of&#xA0;the&#xA0;program<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;StackMachine(&#xA0;token_stack&#xA0;,&#xA0;variable);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;range&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;4;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;variable[1];&#xA0;&#xA0;&#xA0;//&#xA0;b&#xA0;=&#xA0;a&#xA0;+&#xA0;1<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[1]&#xA0;=&#xA0;variable[2];&#xA0;&#xA0;&#xA0;//&#xA0;c&#xA0;=&#xA0;(a&#xA0;+&#xA0;1)&#xA0;*&#xA0;2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[2]&#xA0;=&#xA0;variable[3];&#xA0;&#xA0;&#xA0;//&#xA0;d&#xA0;=&#xA0;(a&#xA0;+&#xA0;1)&#xA0;*&#xA0;2&#xA0;-&#xA0;3<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[3]&#xA0;=&#xA0;variable[4];&#xA0;&#xA0;&#xA0;//&#xA0;e&#xA0;=&#xA0;(&#xA0;(a&#xA0;+&#xA0;1)&#xA0;*&#xA0;2&#xA0;-&#xA0;3&#xA0;)&#xA0;/&#xA0;4&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f&#xA0;:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;and&#xA0;stop&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;double&gt;&#xA0;f(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;forward&#xA0;mode&#xA0;to&#xA0;evaluate&#xA0;function&#xA0;at&#xA0;different&#xA0;argument&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;double&gt;&#xA0;x(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;double&gt;&#xA0;y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(p,&#xA0;x);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;function&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[0]&#xA0;==&#xA0;x[0]&#xA0;+&#xA0;1.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[1]&#xA0;==&#xA0;(x[0]&#xA0;+&#xA0;1.)&#xA0;*&#xA0;2.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[2]&#xA0;==&#xA0;(x[0]&#xA0;+&#xA0;1.)&#xA0;*&#xA0;2.&#xA0;-&#xA0;3.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(y[3]&#xA0;==&#xA0;(&#xA0;(x[0]&#xA0;+&#xA0;1.)&#xA0;*&#xA0;2.&#xA0;-&#xA0;3.)&#xA0;/&#xA0;4.);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Use&#xA0;forward&#xA0;mode&#xA0;(because&#xA0;x&#xA0;is&#xA0;shorter&#xA0;than&#xA0;y)&#xA0;to&#xA0;calculate&#xA0;Jacobian<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;p&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;double&gt;&#xA0;dx(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;double&gt;&#xA0;dy(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dy&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(p,&#xA0;dx);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[0],&#xA0;1.,&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[1],&#xA0;2.,&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[2],&#xA0;2.,&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[3],&#xA0;.5,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Use&#xA0;Jacobian&#xA0;routine&#xA0;(which&#xA0;automatically&#xA0;decides&#xA0;which&#xA0;mode&#xA0;to&#xA0;use)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dy&#xA0;=&#xA0;f.Jacobian(x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[0],&#xA0;1.,&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[1],&#xA0;2.,&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[2],&#xA0;2.,&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[3],&#xA0;.5,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: example/stack_machine.cpp

</body>
</html>
