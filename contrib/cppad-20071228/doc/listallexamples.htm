<html><head>
<title>List of All the CppAD Examples</title>
<meta name="description" id="description" content="List of All the CppAD Examples">
<meta name="keywords" id="keywords" content=" ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_listallexamples_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>ListAllExamples</option>
</select>
</td>
<td><a href="luvecadok.cpp.htm" target="_top">Prev</a>
</td><td><a href="test_vector.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>test_vector</option>
</select>
</td>
<td>ListAllExamples</td>
<td>Headings</td>
</tr></table><br>
<center><b><big><big>List of All the CppAD Examples</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<a href="abs.cpp.htm" target="_top">Abs.cpp</a></td><td>
AD Absolute Value Function: Example and Test</td></tr>
<tr><td>
<a href="acos.cpp.htm" target="_top">Acos.cpp</a></td><td>
The AD acos Function: Example and Test</td></tr>
<tr><td>
<a href="add.cpp.htm" target="_top">Add.cpp</a></td><td>
AD Binary Addition: Example and Test</td></tr>
<tr><td>
<a href="addeq.cpp.htm" target="_top">AddEq.cpp</a></td><td>
AD Computed Assignment Addition: Example and Test</td></tr>
<tr><td>
<a href="asin.cpp.htm" target="_top">Asin.cpp</a></td><td>
The AD asin Function: Example and Test</td></tr>
<tr><td>
<a href="atan.cpp.htm" target="_top">Atan.cpp</a></td><td>
The AD atan Function: Example and Test</td></tr>
<tr><td>
<a href="atan2.cpp.htm" target="_top">Atan2.cpp</a></td><td>
The AD atan2 Function: Example and Test</td></tr>
<tr><td>
<a href="base_adolc.hpp.htm" target="_top">base_adolc.hpp</a></td><td>
Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type</td></tr>
<tr><td>
<a href="base_complex.hpp.htm" target="_top">base_complex.hpp</a></td><td>
Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;</td></tr>
<tr><td>
<a href="benderquad.cpp.htm" target="_top">BenderQuad.cpp</a></td><td>
BenderQuad: Example and Test</td></tr>
<tr><td>
<a href="boolfun.cpp.htm" target="_top">BoolFun.cpp</a></td><td>
AD Boolean Functions: Example and Test</td></tr>
<tr><td>
<a href="checknumerictype.cpp.htm" target="_top">CheckNumericType.cpp</a></td><td>
The CheckNumericType Function: Example and Test</td></tr>
<tr><td>
<a href="checksimplevector.cpp.htm" target="_top">CheckSimpleVector.cpp</a></td><td>
The CheckSimpleVector Function: Example and Test</td></tr>
<tr><td>
<a href="compare.cpp.htm" target="_top">Compare.cpp</a></td><td>
AD Binary Comparison Operators: Example and Test</td></tr>
<tr><td>
<a href="comparechange.cpp.htm" target="_top">CompareChange.cpp</a></td><td>
CompareChange and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="complexpoly.cpp.htm" target="_top">ComplexPoly.cpp</a></td><td>
Complex Polynomial: Example and Test</td></tr>
<tr><td>
<a href="condexp.cpp.htm" target="_top">CondExp.cpp</a></td><td>
Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="copyad.cpp.htm" target="_top">CopyAD.cpp</a></td><td>
AD Copy Constructor: Example and Test</td></tr>
<tr><td>
<a href="copybase.cpp.htm" target="_top">CopyBase.cpp</a></td><td>
AD Constructor From Base Type: Example and Test</td></tr>
<tr><td>
<a href="cos.cpp.htm" target="_top">Cos.cpp</a></td><td>
The AD cos Function: Example and Test</td></tr>
<tr><td>
<a href="cosh.cpp.htm" target="_top">Cosh.cpp</a></td><td>
The AD cosh Function: Example and Test</td></tr>
<tr><td>
<a href="cppad_vector.cpp.htm" target="_top">CppAD_vector.cpp</a></td><td>
CppAD::vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="default.cpp.htm" target="_top">Default.cpp</a></td><td>
Default AD Constructor: Example and Test</td></tr>
<tr><td>
<a href="det_by_lu.cpp.htm" target="_top">det_by_lu.cpp</a></td><td>
Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="det_by_minor.cpp.htm" target="_top">det_by_minor.cpp</a></td><td>
Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="det_of_minor.cpp.htm" target="_top">det_of_minor.cpp</a></td><td>
Determinant of a Minor: Example and Test</td></tr>
<tr><td>
<a href="div.cpp.htm" target="_top">Div.cpp</a></td><td>
AD Binary Division: Example and Test</td></tr>
<tr><td>
<a href="diveq.cpp.htm" target="_top">DivEq.cpp</a></td><td>
AD Computed Assignment Division: Example and Test</td></tr>
<tr><td>
<a href="eq.cpp.htm" target="_top">Eq.cpp</a></td><td>
AD Assignment Operator: Example and Test</td></tr>
<tr><td>
<a href="equalopseq.cpp.htm" target="_top">EqualOpSeq.cpp</a></td><td>
EqualOpSeq: Example and Test</td></tr>
<tr><td>
<a href="erf.cpp.htm" target="_top">Erf.cpp</a></td><td>
The AD erf Function: Example and Test</td></tr>
<tr><td>
<a href="errorhandler.cpp.htm" target="_top">ErrorHandler.cpp</a></td><td>
Replacing The CppAD Error Handler: Example and Test</td></tr>
<tr><td>
<a href="example.cpp.htm" target="_top">Example.cpp</a></td><td>
Program That Runs the CppAD Examples</td></tr>
<tr><td>
<a href="exp.cpp.htm" target="_top">Exp.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="forone.cpp.htm" target="_top">ForOne.cpp</a></td><td>
First Order Partial Driver: Example and Test</td></tr>
<tr><td>
<a href="fortwo.cpp.htm" target="_top">ForTwo.cpp</a></td><td>
Subset of Second Order Partials: Example and Test</td></tr>
<tr><td>
<a href="forward.cpp.htm" target="_top">Forward.cpp</a></td><td>
Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="forsparsejac.cpp.htm" target="_top">ForSparseJac.cpp</a></td><td>
Forward Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="funcheck.cpp.htm" target="_top">FunCheck.cpp</a></td><td>
ADFun Check and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="get_started.cpp.htm" target="_top">get_started.cpp</a></td><td>
A Simple Program Using CppAD to Compute Derivatives</td></tr>
<tr><td>
<a href="heslagrangian.cpp.htm" target="_top">HesLagrangian.cpp</a></td><td>
Hessian of Lagrangian and  ADFun Default Constructor: Example and Test</td></tr>
<tr><td>
<a href="hesludet.cpp.htm" target="_top">HesLuDet.cpp</a></td><td>
Gradient of Determinant Using LU Factorization: Example and Test</td></tr>
<tr><td>
<a href="hesminordet.cpp.htm" target="_top">HesMinorDet.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="hestimesdir.cpp.htm" target="_top">HesTimesDir.cpp</a></td><td>
Hessian Times Direction: Example and Test</td></tr>
<tr><td>
<a href="hessian.cpp.htm" target="_top">Hessian.cpp</a></td><td>
Hessian: Example and Test</td></tr>
<tr><td>
<a href="independent.cpp.htm" target="_top">Independent.cpp</a></td><td>
Independent and ADFun Constructor: Example and Test</td></tr>
<tr><td>
<a href="integer.cpp.htm" target="_top">Integer.cpp</a></td><td>
Convert From AD to Integer: Example and Test</td></tr>
<tr><td>
<a href="interface2c.cpp.htm" target="_top">Interface2C.cpp</a></td><td>
Interfacing to C: Example and Test</td></tr>
<tr><td>
<a href="interp_onetape.cpp.htm" target="_top">interp_onetape.cpp</a></td><td>
Interpolation With Out Retaping: Example and Test</td></tr>
<tr><td>
<a href="interp_retape.cpp.htm" target="_top">interp_retape.cpp</a></td><td>
Interpolation With Retaping: Example and Test</td></tr>
<tr><td>
<a href="jacludet.cpp.htm" target="_top">JacLuDet.cpp</a></td><td>
Gradient of Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="jacminordet.cpp.htm" target="_top">JacMinorDet.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="jacobian.cpp.htm" target="_top">Jacobian.cpp</a></td><td>
Jacobian: Example and Test</td></tr>
<tr><td>
<a href="log.cpp.htm" target="_top">Log.cpp</a></td><td>
The AD log Function: Example and Test</td></tr>
<tr><td>
<a href="log10.cpp.htm" target="_top">Log10.cpp</a></td><td>
The AD log10 Function: Example and Test</td></tr>
<tr><td>
<a href="lufactor.cpp.htm" target="_top">LuFactor.cpp</a></td><td>
LuFactor: Example and Test</td></tr>
<tr><td>
<a href="luinvert.cpp.htm" target="_top">LuInvert.cpp</a></td><td>
LuInvert: Example and Test</td></tr>
<tr><td>
<a href="luratio.cpp.htm" target="_top">LuRatio.cpp</a></td><td>
LuRatio: Example and Test</td></tr>
<tr><td>
<a href="lusolve.cpp.htm" target="_top">LuSolve.cpp</a></td><td>
LuSolve With Complex Arguments: Example and Test</td></tr>
<tr><td>
<a href="luvecadok.cpp.htm" target="_top">LuVecADOk.cpp</a></td><td>
Lu Factor and Solve With Recorded Pivoting: Example and Test</td></tr>
<tr><td>
<a href="mul.cpp.htm" target="_top">Mul.cpp</a></td><td>
AD Binary Multiplication: Example and Test</td></tr>
<tr><td>
<a href="muleq.cpp.htm" target="_top">MulEq.cpp</a></td><td>
AD Computed Assignment Multiplication: Example and Test</td></tr>
<tr><td>
<a href="mul_level.cpp.htm" target="_top">mul_level.cpp</a></td><td>
Multiple Tapes: Example and Test</td></tr>
<tr><td>
<a href="mul_level_adolc.cpp.htm" target="_top">mul_level_adolc.cpp</a></td><td>
Using Adolc with Multiple Levels of Taping: Example and Test</td></tr>
<tr><td>
<a href="multi_newton.cpp.htm" target="_top">multi_newton.cpp</a></td><td>
Multi-Threaded Newton's Method Main Program</td></tr>
<tr><td>
<a href="nan.cpp.htm" target="_top">nan.cpp</a></td><td>
nan: Example and Test</td></tr>
<tr><td>
<a href="nearequalext.cpp.htm" target="_top">NearEqualExt.cpp</a></td><td>
Compare AD with Base Objects: Example and Test</td></tr>
<tr><td>
<a href="near_equal.cpp.htm" target="_top">Near_Equal.cpp</a></td><td>
NearEqual Function: Example and Test</td></tr>
<tr><td>
<a href="not_complex_ad.cpp.htm" target="_top">not_complex_ad.cpp</a></td><td>
Not Complex Differentiable: Example and Test</td></tr>
<tr><td>
<a href="numerictype.cpp.htm" target="_top">NumericType.cpp</a></td><td>
The NumericType: Example and Test</td></tr>
<tr><td>
<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl.cpp</a></td><td>
OdeErrControl: Example and Test</td></tr>
<tr><td>
<a href="odeerrmaxabs.cpp.htm" target="_top">OdeErrMaxabs.cpp</a></td><td>
OdeErrControl: Example and Test Using Maxabs Argument</td></tr>
<tr><td>
<a href="odegear.cpp.htm" target="_top">OdeGear.cpp</a></td><td>
OdeGear: Example and Test</td></tr>
<tr><td>
<a href="odegearcontrol.cpp.htm" target="_top">OdeGearControl.cpp</a></td><td>
OdeGearControl: Example and Test</td></tr>
<tr><td>
<a href="odestiff.cpp.htm" target="_top">OdeStiff.cpp</a></td><td>
A Stiff Ode: Example and Test</td></tr>
<tr><td>
<a href="ode_taylor.cpp.htm" target="_top">ode_taylor.cpp</a></td><td>
Taylor's Ode Solver: An Example and Test</td></tr>
<tr><td>
<a href="ode_taylor_adolc.cpp.htm" target="_top">ode_taylor_adolc.cpp</a></td><td>
Using Adolc with Taylor's Ode Solver: An Example and Test</td></tr>
<tr><td>
<a href="output.cpp.htm" target="_top">Output.cpp</a></td><td>
AD Output Operator: Example and Test</td></tr>
<tr><td>
<a href="parvar.cpp.htm" target="_top">ParVar.cpp</a></td><td>
AD Parameter and Variable Functions: Example and Test</td></tr>
<tr><td>
<a href="poly.cpp.htm" target="_top">Poly.cpp</a></td><td>
Polynomial Evaluation: Example and Test</td></tr>
<tr><td>
<a href="pow.cpp.htm" target="_top">Pow.cpp</a></td><td>
The AD Power Function: Example and Test</td></tr>
<tr><td>
<a href="pow_int.cpp.htm" target="_top">pow_int.cpp</a></td><td>
The Pow Integer Exponent: Example and Test</td></tr>
<tr><td>
<a href="printfor.cpp.htm" target="_top">PrintFor.cpp</a></td><td>
Printing During Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="revone.cpp.htm" target="_top">RevOne.cpp</a></td><td>
First Order Derivative Driver: Example and Test</td></tr>
<tr><td>
<a href="revsparsehes.cpp.htm" target="_top">RevSparseHes.cpp</a></td><td>
Reverse Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="revsparsejac.cpp.htm" target="_top">RevSparseJac.cpp</a></td><td>
Reverse Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="revtwo.cpp.htm" target="_top">RevTwo.cpp</a></td><td>
Second Partials Reverse Driver: Example and Test</td></tr>
<tr><td>
<a href="reverse_any.cpp.htm" target="_top">reverse_any.cpp</a></td><td>
Any Order Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="reverse_one.cpp.htm" target="_top">reverse_one.cpp</a></td><td>
First Order Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="reverse_two.cpp.htm" target="_top">reverse_two.cpp</a></td><td>
Second Order Reverse ModeExample and Test</td></tr>
<tr><td>
<a href="rombergmul.cpp.htm" target="_top">RombergMul.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="rombergone.cpp.htm" target="_top">RombergOne.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="rosen34.cpp.htm" target="_top">Rosen34.cpp</a></td><td>
Rosen34: Example and Test</td></tr>
<tr><td>
<a href="runge45.cpp.htm" target="_top">Runge45.cpp</a></td><td>
Runge45: Example and Test</td></tr>
<tr><td>
<a href="seqproperty.cpp.htm" target="_top">SeqProperty.cpp</a></td><td>
ADFun Sequence Properties: Example and Test</td></tr>
<tr><td>
<a href="simplevector.cpp.htm" target="_top">SimpleVector.cpp</a></td><td>
Simple Vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="sin.cpp.htm" target="_top">Sin.cpp</a></td><td>
The AD sin Function: Example and Test</td></tr>
<tr><td>
<a href="sinh.cpp.htm" target="_top">Sinh.cpp</a></td><td>
The AD sinh Function: Example and Test</td></tr>
<tr><td>
<a href="speed_test.cpp.htm" target="_top">speed_test.cpp</a></td><td>
speed_test: Example and test</td></tr>
<tr><td>
<a href="speedtest.cpp.htm" target="_top">speedtest.cpp</a></td><td>
Example Use of SpeedTest</td></tr>
<tr><td>
<a href="sqrt.cpp.htm" target="_top">Sqrt.cpp</a></td><td>
The AD sqrt Function: Example and Test</td></tr>
<tr><td>
<a href="stackmachine.cpp.htm" target="_top">StackMachine.cpp</a></td><td>
Example Differentiating a Stack Machine Interpreter</td></tr>
<tr><td>
<a href="sub.cpp.htm" target="_top">Sub.cpp</a></td><td>
AD Binary Subtraction: Example and Test</td></tr>
<tr><td>
<a href="subeq.cpp.htm" target="_top">SubEq.cpp</a></td><td>
AD Computed Assignment Subtraction: Example and Test</td></tr>
<tr><td>
<a href="tan.cpp.htm" target="_top">Tan.cpp</a></td><td>
The AD tan Function: Example and Test</td></tr>
<tr><td>
<a href="tapeindex.cpp.htm" target="_top">TapeIndex.cpp</a></td><td>
Taping Array Index Operation: Example and Test</td></tr>
<tr><td>
<a href="tracknewdel.cpp.htm" target="_top">TrackNewDel.cpp</a></td><td>
Tracking Use of New and Delete: Example and Test</td></tr>
<tr><td>
<a href="unaryminus.cpp.htm" target="_top">UnaryMinus.cpp</a></td><td>
AD Unary Minus Operator: Example and Test</td></tr>
<tr><td>
<a href="unaryplus.cpp.htm" target="_top">UnaryPlus.cpp</a></td><td>
AD Unary Plus Operator: Example and Test</td></tr>
<tr><td>
<a href="value.cpp.htm" target="_top">Value.cpp</a></td><td>
Convert From AD to its Base Type: Example and Test</td></tr>
<tr><td>
<a href="var2par.cpp.htm" target="_top">Var2Par.cpp</a></td><td>
Convert an AD Variable to a Parameter: Example and Test</td></tr>
<tr><td>
<a href="vecad.cpp.htm" target="_top">VecAD.cpp</a></td><td>
AD Vectors that Record Index Operations: Example and Test</td></tr>
<tr><td>
<a href="vectorbool.cpp.htm" target="_top">vectorBool.cpp</a></td><td>
CppAD::vectorBool Class: Example and Test</td></tr>
<tr><td>
</td></tr>
</table>

<hr>Input File: omh/example_list.omh

</body>
</html>
