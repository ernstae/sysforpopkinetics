<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Independent and ADFun Constructor: Example and Test</title>
<meta name="description" id="description" content="Independent and ADFun Constructor: Example and Test"/>
<meta name="keywords" id="keywords" content=" Independent example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_independent.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Independent</option>
<option>Independent.cpp</option>
</select>
</td>
<td><a href="independent.xml" target="_top">Prev</a>
</td><td><a href="funconstruct.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Independent-&gt;</option>
<option>Independent.cpp</option>
</select>
</td>
<td>Independent.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Independent and ADFun Constructor: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
<br/>
namespace&#xA0;{&#xA0;//&#xA0;--------------------------------------------------------<br/>
//&#xA0;define&#xA0;the&#xA0;template&#xA0;function&#xA0;Test&lt;VectorAD&gt;(void)&#xA0;in&#xA0;empty&#xA0;namespace<br/>
template&#xA0;&lt;class&#xA0;VectorAD&gt;<br/>
bool&#xA0;Test(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::NearEqual;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;domain&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;n&#xA0;&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorAD&#xA0;X(n);&#xA0;&#xA0;//&#xA0;VectorAD&#xA0;is&#xA0;the&#xA0;template&#xA0;parameter&#xA0;in&#xA0;call&#xA0;to&#xA0;Test<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables&#xA0;and&#xA0;start&#xA0;recording&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;the&#xA0;template&#xA0;parameter&#xA0;VectorAD&#xA0;for&#xA0;the&#xA0;vector&#xA0;type<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;a&#xA0;=&#xA0;X[0]&#xA0;+&#xA0;X[1];&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;first&#xA0;AD&#xA0;operation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;b&#xA0;=&#xA0;X[0]&#xA0;*&#xA0;X[1];&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;second&#xA0;AD&#xA0;operation<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;range&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VectorAD&#xA0;Y(m);&#xA0;&#xA0;//&#xA0;VectorAD&#xA0;is&#xA0;the&#xA0;template&#xA0;paraemter&#xA0;in&#xA0;call&#xA0;to&#xA0;Test<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;a;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[1]&#xA0;=&#xA0;b;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;and&#xA0;stop&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;the&#xA0;template&#xA0;parameter&#xA0;VectorAD&#xA0;for&#xA0;the&#xA0;vector&#xA0;type<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;double&gt;&#xA0;f(X,&#xA0;Y);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;value&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(Y[0]&#xA0;,&#xA0;1.,&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(Y[1]&#xA0;,&#xA0;0.,&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;f(1,&#xA0;2)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;x(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;=&#xA0;2.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(0,&#xA0;x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(y[0]&#xA0;,&#xA0;3.,&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(y[1]&#xA0;,&#xA0;2.,&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;partial&#xA0;of&#xA0;f&#xA0;w.r.t&#xA0;x[0]&#xA0;at&#xA0;(1,&#xA0;2)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;dx(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;dy(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[1]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dy&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;dx);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dy[0]&#xA0;,&#xA0;&#xA0;&#xA0;1.,&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dy[1]&#xA0;,&#xA0;x[1],&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;partial&#xA0;of&#xA0;f&#xA0;w.r.t&#xA0;x[1]&#xA0;at&#xA0;(1,&#xA0;2)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[0]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[1]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dy&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;dx);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dy[0]&#xA0;,&#xA0;&#xA0;&#xA0;1.,&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dy[1]&#xA0;,&#xA0;x[0],&#xA0;&#xA0;1e-10&#xA0;,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
}&#xA0;//&#xA0;End&#xA0;of&#xA0;empty&#xA0;namespace&#xA0;-------------------------------------------<br/>
<br/>
#&#xA0;include&#xA0;&lt;vector&gt;<br/>
#&#xA0;include&#xA0;&lt;valarray&gt;<br/>
bool&#xA0;Independent(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;CppAD::AD&lt;double&gt;&#xA0;ADdouble;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Run&#xA0;with&#xA0;VectorAD&#xA0;equal&#xA0;to&#xA0;three&#xA0;different&#xA0;cases<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;all&#xA0;of&#xA0;which&#xA0;are&#xA0;Simple&#xA0;Vectors&#xA0;with&#xA0;elements&#xA0;of&#xA0;type&#xA0;AD&lt;double&gt;.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Test&lt;&#xA0;CppAD::vector&#xA0;&#xA0;&lt;ADdouble&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Test&lt;&#xA0;std::vector&#xA0;&#xA0;&#xA0;&#xA0;&lt;ADdouble&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Test&lt;&#xA0;std::valarray&#xA0;&#xA0;&lt;ADdouble&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/independent.cpp

</body>
</html>
