<html><head>
<title>An Arbitrary Order Gear Method</title>
<meta name="description" id="description" content="An Arbitrary Order Gear Method">
<meta name="keywords" id="keywords" content=" Odegear Ode Gear stiff differential equation ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_odegear_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>OdeGear</option>
</select>
</td>
<td><a href="odeerrmaxabs.cpp.htm" target="_top">Prev</a>
</td><td><a href="odegear.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>OdeGear-&gt;</option>
<option>OdeGear.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Include</option>
<option>Fun</option>
<option>---..t</option>
<option>---..x</option>
<option>---..f</option>
<option>---..f_x</option>
<option>---..Warning</option>
<option>m</option>
<option>n</option>
<option>T</option>
<option>X</option>
<option>e</option>
<option>Scalar</option>
<option>Vector</option>
<option>Example</option>
<option>Source Code</option>
<option>Theory</option>
<option>Gear's Method</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>An Arbitrary Order Gear Method</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>
<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/ode_gear.hpp&gt;<br>
</span></font></code><code><font color="blue"><span style='white-space: nowrap'>OdeGear(</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>T</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>X</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>e</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine applies
<a href="odegear.htm#Gear's Method" target="_top"><span style='white-space: nowrap'>Gear's&nbsp;Method</span></a>

to solve an explicit set of ordinary differential equations.
We are given 
<code>
<span style='white-space: nowrap'>&nbsp;f&nbsp;:&nbsp;\R&nbsp;\times&nbsp;\R^n&nbsp;\rightarrow&nbsp;\R^n</span></code>
 be a smooth function.
This routine solves the following initial value problem
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x(&nbsp;t_{m-1}&nbsp;)&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;x^0&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x^\prime&nbsp;(t)&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;f[t&nbsp;,&nbsp;x(t)]&nbsp;<br>
\end{array}<br>
\]&nbsp;</span></code>

for the value of <code>
<span style='white-space: nowrap'>&nbsp;x(&nbsp;t_m&nbsp;)</span></code>
.
If your set of  ordinary differential equations are not stiff
an explicit method may be better (perhaps <a href="runge45.htm" target="_top"><span style='white-space: nowrap'>Runge45</span></a>
.)

<br>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
The file <code><font color="blue">cppad/ode_gear.hpp</font></code> is included by <code><font color="blue">cppad/cppad.hpp</font></code>
but it can also be included separately with out the rest of 
the <code><font color="blue">CppAD</font></code> routines.

<br>
<br>
<b><big><a name="Fun" id="Fun">Fun</a></big></b>
<br>
The class <i>Fun</i> 
and the object <i>F</i> satisfy the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Fun</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>This must support the following set of calls
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode(</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode_dep(</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>f_x</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><br>
<b><a name="Fun.t" id="Fun.t">t</a></b>
<br>
The argument <i>t</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see description of <a href="odegear.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 below). 

<br>
<br>
<b><a name="Fun.x" id="Fun.x">x</a></b>
<br>
The argument <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and has size <i>n</i>
(see description of <a href="odegear.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below). 

<br>
<br>
<b><a name="Fun.f" id="Fun.f">f</a></b>
<br>
The argument <i>f</i> to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode</span></font></code> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>On input and output, <i>f</i> is a vector of size <i>n</i>
and the input values of the elements of <i>f</i> do not matter.
On output,
<i>f</i> is set equal to <code>
<span style='white-space: nowrap'>&nbsp;f(t,&nbsp;x)</span></code>

(see <i>f(t, x)</i> in <a href="odegear.htm#Purpose" target="_top"><span style='white-space: nowrap'>Purpose</span></a>
). 

<br>
<br>
<b><a name="Fun.f_x" id="Fun.f_x">f_x</a></b>
<br>
The argument <i>f_x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>f_x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>On input and output, <i>f_x</i> is a vector of size <code>
<span style='white-space: nowrap'>&nbsp;n&nbsp;*&nbsp;n</span></code>

and the input values of the elements of <i>f_x</i> do not matter.
On output, 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f\_x&nbsp;[i&nbsp;*&nbsp;n&nbsp;+&nbsp;j]&nbsp;=&nbsp;\partial_{x(j)}&nbsp;f_i&nbsp;(&nbsp;t&nbsp;,&nbsp;x&nbsp;)<br>
\]&nbsp;</span></code>
 

<br>
<br>
<b><a name="Fun.Warning" id="Fun.Warning">Warning</a></b>
<br>
The arguments <i>f</i>, and <i>f_x</i>
must have a call by reference in their prototypes; i.e.,
do not forget the <code><font color="blue">&amp;</font></code> in the prototype for 
<i>f</i> and <i>f_x</i>.

<br>
<br>
<b><big><a name="m" id="m">m</a></big></b>
<br>
The argument <i>m</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font></code><i><span style='white-space: nowrap'>m</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the order (highest power of <code>
<span style='white-space: nowrap'>&nbsp;t</span></code>
) 
used to represent the function <code>
<span style='white-space: nowrap'>&nbsp;x(t)</span></code>
 in the multi-step method. 
Upon return from <code><font color="blue">OdeGear</font></code>,
the <i>i</i>-th component of the polynomial is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_i&nbsp;(&nbsp;t_j&nbsp;)&nbsp;=&nbsp;X[&nbsp;j&nbsp;*&nbsp;n&nbsp;+&nbsp;i&nbsp;]<br>
\]&nbsp;</span></code>

for <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;m</span></code>
 (where <code>
<span style='white-space: nowrap'>&nbsp;0&nbsp;\leq&nbsp;i&nbsp;&lt;&nbsp;n</span></code>
).
The value of <code>
<span style='white-space: nowrap'>&nbsp;m</span></code>
 must be greater than or equal one.

<br>
<br>
<b><big><a name="n" id="n">n</a></big></b>
<br>
The argument <i>n</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the range space dimension of the 
vector valued function <code>
<span style='white-space: nowrap'>&nbsp;x(t)</span></code>
.

<br>
<br>
<b><big><a name="T" id="T">T</a></big></b>
<br>
The argument <i>T</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>T</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and size greater than or equal to <code>
<span style='white-space: nowrap'>&nbsp;m+1</span></code>
.
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;m</span></code>
, <code>
<span style='white-space: nowrap'>&nbsp;T[j]</span></code>
 is the time 
corresponding to time corresponding 
to a previous point in the multi-step method.
The value <code>
<span style='white-space: nowrap'>&nbsp;T[m]</span></code>
 is the time 
of the next point in the multi-step method.
The array <code>
<span style='white-space: nowrap'>&nbsp;T</span></code>
 must be monotone increasing; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;T[j]&nbsp;&lt;&nbsp;T[j+1]</span></code>
.
Above and below we often use the shorthand <code>
<span style='white-space: nowrap'>&nbsp;t_j</span></code>
 for <code>
<span style='white-space: nowrap'>&nbsp;T[j]</span></code>
.


<br>
<br>
<b><big><a name="X" id="X">X</a></big></b>
<br>
The argument <i>X</i> has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>X</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and size greater than or equal to <code>
<span style='white-space: nowrap'>&nbsp;(m+1)&nbsp;*&nbsp;n</span></code>
.
On input to <code><font color="blue">OdeGear</font></code>,
for <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;m-1</span></code>
, and
<code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[&nbsp;j&nbsp;*&nbsp;n&nbsp;+&nbsp;i&nbsp;]&nbsp;=&nbsp;x_i&nbsp;(&nbsp;t_j&nbsp;)<br>
\]&nbsp;</span></code>

Upon return from <code><font color="blue">OdeGear</font></code>,
for <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[&nbsp;m&nbsp;*&nbsp;n&nbsp;+&nbsp;i&nbsp;]&nbsp;\approx&nbsp;x_i&nbsp;(&nbsp;t_m&nbsp;)&nbsp;<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="e" id="e">e</a></big></b>
<br>
The vector <i>e</i> is an approximate error bound for the result; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e[i]&nbsp;\geq&nbsp;|&nbsp;X[&nbsp;m&nbsp;*&nbsp;n&nbsp;+&nbsp;i&nbsp;]&nbsp;-&nbsp;x_i&nbsp;(&nbsp;t_m&nbsp;)&nbsp;|<br>
\]&nbsp;</span></code>

The order of this approximation is one less than the order of
the solution; i.e., 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;=&nbsp;O&nbsp;(&nbsp;h^m&nbsp;)<br>
\]&nbsp;</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;h</span></code>
 is the maximum of <code>
<span style='white-space: nowrap'>&nbsp;t_{j+1}&nbsp;-&nbsp;t_j</span></code>
.

<br>
<br>
<b><big><a name="Scalar" id="Scalar">Scalar</a></big></b>
<br>
The type <i>Scalar</i> must satisfy the conditions
for a <a href="numerictype.htm" target="_top"><span style='white-space: nowrap'>NumericType</span></a>
 type.
The routine <a href="checknumerictype.htm" target="_top"><span style='white-space: nowrap'>CheckNumericType</span></a>
 will generate an error message
if this is not the case.
In addition, the following operations must be defined for 
<i>Scalar</i> objects <i>a</i> and <i>b</i>:

<table><tr><td align='left'  valign='top'>

<b>Operation</b> </td><td align='left'  valign='top'>
 <b>Description</b>  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue"></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>b</span></i> </td><td align='left'  valign='top'>

	less than operator (returns a <code><font color="blue">bool</font></code> object)
</td></tr>
</table>
<br>
<b><big><a name="Vector" id="Vector">Vector</a></big></b>
<br>
The type <i>Vector</i> must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;Scalar</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="odegear.cpp.htm" target="_top"><span style='white-space: nowrap'>OdeGear.cpp</span></a>

contains an example and test a test of using this routine.
It returns true if it succeeds and false otherwise.

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>
<br>
The source code for this routine is in the file
<code><font color="blue">cppad/ode_gear.hpp</font></code>.

<br>
<br>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br>
For this discussion we use the shorthand <code>
<span style='white-space: nowrap'>&nbsp;x_j</span></code>
 
for the value <code>
<span style='white-space: nowrap'>&nbsp;x&nbsp;(&nbsp;t_j&nbsp;)&nbsp;\in&nbsp;\R^n</span></code>
 which is not to be confused
with <code>
<span style='white-space: nowrap'>&nbsp;x_i&nbsp;(t)&nbsp;\in&nbsp;\R</span></code>
 in the notation above.
The interpolating polynomial <code>
<span style='white-space: nowrap'>&nbsp;p(t)</span></code>
 is given by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
p(t)&nbsp;=&nbsp;<br>
\sum_{j=0}^m&nbsp;<br>
x_j<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\prod_{i&nbsp;\neq&nbsp;j}&nbsp;(&nbsp;t&nbsp;-&nbsp;t_i&nbsp;)<br>
}{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\prod_{i&nbsp;\neq&nbsp;j}&nbsp;(&nbsp;t_j&nbsp;-&nbsp;t_i&nbsp;)&nbsp;<br>
}<br>
\]&nbsp;</span></code>

The derivative <code>
<span style='white-space: nowrap'>&nbsp;p^\prime&nbsp;(t)</span></code>
 is given by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
p^\prime&nbsp;(t)&nbsp;=&nbsp;<br>
\sum_{j=0}^m&nbsp;<br>
x_j<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\sum_{i&nbsp;\neq&nbsp;j}&nbsp;\prod_{k&nbsp;\neq&nbsp;i,j}&nbsp;(&nbsp;t&nbsp;-&nbsp;t_k&nbsp;)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\prod_{k&nbsp;\neq&nbsp;j}&nbsp;(&nbsp;t_j&nbsp;-&nbsp;t_k&nbsp;)&nbsp;<br>
}<br>
\]&nbsp;</span></code>

Evaluating the derivative at the point <code>
<span style='white-space: nowrap'>&nbsp;t_\ell</span></code>
 we have
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
p^\prime&nbsp;(&nbsp;t_\ell&nbsp;)&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;<br>
x_\ell<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\sum_{i&nbsp;\neq&nbsp;\ell}&nbsp;\prod_{k&nbsp;\neq&nbsp;i,\ell}&nbsp;(&nbsp;t_\ell&nbsp;-&nbsp;t_k&nbsp;)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\prod_{k&nbsp;\neq&nbsp;\ell}&nbsp;(&nbsp;t_\ell&nbsp;-&nbsp;t_k&nbsp;)&nbsp;<br>
}<br>
+<br>
\sum_{j&nbsp;\neq&nbsp;\ell}<br>
x_j<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\sum_{i&nbsp;\neq&nbsp;j}&nbsp;\prod_{k&nbsp;\neq&nbsp;i,j}&nbsp;(&nbsp;t_\ell&nbsp;-&nbsp;t_k&nbsp;)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\prod_{k&nbsp;\neq&nbsp;j}&nbsp;(&nbsp;t_j&nbsp;-&nbsp;t_k&nbsp;)&nbsp;<br>
}<br>
\\<br>
&amp;&nbsp;=&nbsp;&amp;<br>
x_\ell<br>
\sum_{i&nbsp;\neq&nbsp;\ell}&nbsp;<br>
\frac{&nbsp;1&nbsp;}{&nbsp;t_\ell&nbsp;-&nbsp;t_i&nbsp;}<br>
+<br>
\sum_{j&nbsp;\neq&nbsp;\ell}<br>
x_j<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\prod_{k&nbsp;\neq&nbsp;\ell,j}&nbsp;(&nbsp;t_\ell&nbsp;-&nbsp;t_k&nbsp;)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\prod_{k&nbsp;\neq&nbsp;j}&nbsp;(&nbsp;t_j&nbsp;-&nbsp;t_k&nbsp;)&nbsp;<br>
}<br>
\\<br>
&amp;&nbsp;=&nbsp;&amp;<br>
x_\ell<br>
\sum_{k&nbsp;\neq&nbsp;\ell}&nbsp;(&nbsp;t_\ell&nbsp;-&nbsp;t_k&nbsp;)^{-1}<br>
+<br>
\sum_{j&nbsp;\neq&nbsp;\ell}<br>
x_j<br>
(&nbsp;t_j&nbsp;-&nbsp;t_\ell&nbsp;)^{-1}<br>
\prod_{k&nbsp;\neq&nbsp;\ell&nbsp;,j}&nbsp;(&nbsp;t_\ell&nbsp;-&nbsp;t_k&nbsp;)&nbsp;/&nbsp;(&nbsp;t_j&nbsp;-&nbsp;t_k&nbsp;)<br>
\end{array}<br>
\]&nbsp;</span></code>

We define the vector <code>
<span style='white-space: nowrap'>&nbsp;\alpha&nbsp;\in&nbsp;\R^{m+1}</span></code>
 by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\alpha_j&nbsp;=&nbsp;\left\{&nbsp;\begin{array}{ll}<br>
\sum_{k&nbsp;\neq&nbsp;m}&nbsp;(&nbsp;t_m&nbsp;-&nbsp;t_k&nbsp;)^{-1}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;{\rm&nbsp;if}&nbsp;\;&nbsp;j&nbsp;=&nbsp;m<br>
\\<br>
(&nbsp;t_j&nbsp;-&nbsp;t_m&nbsp;)^{-1}<br>
\prod_{k&nbsp;\neq&nbsp;m,j}&nbsp;(&nbsp;t_m&nbsp;-&nbsp;t_k&nbsp;)&nbsp;/&nbsp;(&nbsp;t_j&nbsp;-&nbsp;t_k&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;{\rm&nbsp;otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>

It follows that
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p^\prime&nbsp;(&nbsp;t_m&nbsp;)&nbsp;=&nbsp;\alpha_0&nbsp;x_0&nbsp;+&nbsp;\cdots&nbsp;+&nbsp;\alpha_m&nbsp;x_m<br>
\]&nbsp;</span></code>

Gear's method determines <code>
<span style='white-space: nowrap'>&nbsp;x_m</span></code>
 by solving the following 
nonlinear equation
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f(&nbsp;t_m&nbsp;,&nbsp;x_m&nbsp;)&nbsp;=&nbsp;\alpha_0&nbsp;x_0&nbsp;+&nbsp;\cdots&nbsp;+&nbsp;\alpha_m&nbsp;x_m<br>
\]&nbsp;</span></code>

Newton's method for solving this equation determines iterates, 
which we denote by <code>
<span style='white-space: nowrap'>&nbsp;x_m^k</span></code>
, by solving the following affine 
approximation of the equation above
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
f(&nbsp;t_m&nbsp;,&nbsp;x_m^{k-1}&nbsp;)&nbsp;+&nbsp;\partial_x&nbsp;f(&nbsp;t_m&nbsp;,&nbsp;x_m^{k-1}&nbsp;)&nbsp;(&nbsp;x_m^k&nbsp;-&nbsp;x_m^{k-1}&nbsp;)<br>
&amp;&nbsp;=&nbsp;&amp;<br>
\alpha_0&nbsp;x_0^k&nbsp;+&nbsp;\alpha_1&nbsp;x_1&nbsp;+&nbsp;\cdots&nbsp;+&nbsp;\alpha_m&nbsp;x_m<br>
\\<br>
\left[&nbsp;\alpha_m&nbsp;I&nbsp;-&nbsp;\partial_x&nbsp;f(&nbsp;t_m&nbsp;,&nbsp;x_m^{k-1}&nbsp;)&nbsp;\right]&nbsp;&nbsp;x_m<br>
&amp;&nbsp;=&nbsp;&amp;<br>
\left[&nbsp;<br>
f(&nbsp;t_m&nbsp;,&nbsp;x_m^{k-1}&nbsp;)&nbsp;-&nbsp;\partial_x&nbsp;f(&nbsp;t_m&nbsp;,&nbsp;x_m^{k-1}&nbsp;)&nbsp;x_m^{k-1}&nbsp;<br>
-&nbsp;\alpha_0&nbsp;x_0&nbsp;-&nbsp;\cdots&nbsp;-&nbsp;\alpha_{m-1}&nbsp;x_{m-1}<br>
\right]<br>
\end{array}<br>
\]&nbsp;</span></code>

In order to initialize Newton's method; i.e. choose <code>
<span style='white-space: nowrap'>&nbsp;x_m^0</span></code>

we define the vector <code>
<span style='white-space: nowrap'>&nbsp;\beta&nbsp;\in&nbsp;\R^{m+1}</span></code>
 by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\beta_j&nbsp;=&nbsp;\left\{&nbsp;\begin{array}{ll}<br>
\sum_{k&nbsp;\neq&nbsp;m-1}&nbsp;(&nbsp;t_{m-1}&nbsp;-&nbsp;t_k&nbsp;)^{-1}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;{\rm&nbsp;if}&nbsp;\;&nbsp;j&nbsp;=&nbsp;m-1<br>
\\<br>
(&nbsp;t_j&nbsp;-&nbsp;t_{m-1}&nbsp;)^{-1}<br>
\prod_{k&nbsp;\neq&nbsp;m-1,j}&nbsp;(&nbsp;t_{m-1}&nbsp;-&nbsp;t_k&nbsp;)&nbsp;/&nbsp;(&nbsp;t_j&nbsp;-&nbsp;t_k&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;{\rm&nbsp;otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>

It follows that
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p^\prime&nbsp;(&nbsp;t_{m-1}&nbsp;)&nbsp;=&nbsp;\beta_0&nbsp;x_0&nbsp;+&nbsp;\cdots&nbsp;+&nbsp;\beta_m&nbsp;x_m<br>
\]&nbsp;</span></code>

We solve the following approximation of the equation above to determine
<code>
<span style='white-space: nowrap'>&nbsp;x_m^0</span></code>
:
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f(&nbsp;t_{m-1}&nbsp;,&nbsp;x_{m-1}&nbsp;)&nbsp;=&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\beta_0&nbsp;x_0&nbsp;+&nbsp;\cdots&nbsp;+&nbsp;\beta_{m-1}&nbsp;x_{m-1}&nbsp;+&nbsp;\beta_m&nbsp;x_m^0<br>
\]&nbsp;</span></code>



<br>
<br>
<b><big><a name="Gear's Method" id="Gear's Method">Gear's Method</a></big></b>
<br>
C. W. Gear, 
``Simultaneous Numerical Solution of Differential-Algebraic Equations,'' 
IEEE Transactions on Circuit Theory, 
vol. 18, no. 1, pp. 89-95, Jan. 1971.



<hr>Input File: cppad/ode_gear.hpp

</body>
</html>
