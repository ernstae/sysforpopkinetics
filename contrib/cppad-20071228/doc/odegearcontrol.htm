<html><head>
<title>An Error Controller for Gear's Ode Solvers</title>
<meta name="description" id="description" content="An Error Controller for Gear's Ode Solvers">
<meta name="keywords" id="keywords" content=" Odegearcontrol control Ode Gear error differential equation ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_odegearcontrol_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>OdeGearControl</option>
</select>
</td>
<td><a href="odegear.cpp.htm" target="_top">Prev</a>
</td><td><a href="odegearcontrol.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>OdeGearControl-&gt;</option>
<option>OdeGearControl.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Include</option>
<option>Notation</option>
<option>xf</option>
<option>Fun</option>
<option>---..t</option>
<option>---..x</option>
<option>---..f</option>
<option>---..f_x</option>
<option>---..Warning</option>
<option>M</option>
<option>ti</option>
<option>tf</option>
<option>xi</option>
<option>smin</option>
<option>smax</option>
<option>sini</option>
<option>eabs</option>
<option>erel</option>
<option>ef</option>
<option>maxabs</option>
<option>nstep</option>
<option>Error Criteria Discussion</option>
<option>Scalar</option>
<option>Vector</option>
<option>Example</option>
<option>Theory</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>An Error Controller for Gear's Ode Solvers</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>
<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/ode_gear_control.hpp&gt;<br>
</span></font></code><code><font color="blue"></font></code><i><span style='white-space: nowrap'>xf</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;OdeGearControl(</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>M</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>ti</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>tf</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>xi</span></i><code><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>smin</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>smax</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>sini</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>eabs</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>erel</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>ef</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font></code><i><span style='white-space: nowrap'>maxabs</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>nstep</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Let <code>
<span style='white-space: nowrap'>&nbsp;\R</span></code>
 denote the real numbers
and let <code>
<span style='white-space: nowrap'>&nbsp;f&nbsp;:&nbsp;\R&nbsp;\times&nbsp;\R^n&nbsp;\rightarrow&nbsp;\R^n</span></code>
 be a smooth function.
We define <code>
<span style='white-space: nowrap'>&nbsp;X&nbsp;:&nbsp;[ti&nbsp;,&nbsp;tf]&nbsp;\rightarrow&nbsp;\R^n</span></code>
 by 
the following initial value problem:
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X(ti)&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;xi&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X'(t)&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;f[t&nbsp;,&nbsp;X(t)]&nbsp;<br>
\end{array}<br>
\]&nbsp;</span></code>

The routine <a href="odegear.htm" target="_top"><span style='white-space: nowrap'>OdeGear</span></a>
 is a stiff multi-step method that
can be used to approximate the solution to this equation.
The routine <code><font color="blue">OdeGearControl</font></code> sets up this multi-step method
and controls the error during such an approximation.

<br>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
The file <code><font color="blue">cppad/ode_gear_control.hpp</font></code> 
is included by <code><font color="blue">cppad/cppad.hpp</font></code>
but it can also be included separately with out the rest of 
the <code><font color="blue">CppAD</font></code> routines.

<br>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>
<br>
The template parameter types <a href="odegearcontrol.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 and
<a href="odegearcontrol.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 are documented below.

<br>
<br>
<b><big><a name="xf" id="xf">xf</a></big></b>
<br>
The return value <i>xf</i> has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>xf</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and the size of <i>xf</i> is equal to <i>n</i>
(see description of <a href="odegear.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below).
It is the approximation for <code>
<span style='white-space: nowrap'>&nbsp;X(tf)</span></code>
.

<br>
<br>
<b><big><a name="Fun" id="Fun">Fun</a></big></b>
<br>
The class <i>Fun</i> 
and the object <i>F</i> satisfy the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Fun</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>This must support the following set of calls
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode(</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode_dep(</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>f_x</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><br>
<b><a name="Fun.t" id="Fun.t">t</a></b>
<br>
The argument <i>t</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>t</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>(see description of <a href="odegear.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 below). 

<br>
<br>
<b><a name="Fun.x" id="Fun.x">x</a></b>
<br>
The argument <i>x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and has size <i>N</i>
(see description of <a href="odegear.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below). 

<br>
<br>
<b><a name="Fun.f" id="Fun.f">f</a></b>
<br>
The argument <i>f</i> to <code><font color="blue"></font></code><i><span style='white-space: nowrap'>F</span></i><code><font color="blue"><span style='white-space: nowrap'>.Ode</span></font></code> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>f</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>On input and output, <i>f</i> is a vector of size <i>N</i>
and the input values of the elements of <i>f</i> do not matter.
On output,
<i>f</i> is set equal to <code>
<span style='white-space: nowrap'>&nbsp;f(t,&nbsp;x)</span></code>

(see <i>f(t, x)</i> in <a href="odegear.htm#Purpose" target="_top"><span style='white-space: nowrap'>Purpose</span></a>
). 

<br>
<br>
<b><a name="Fun.f_x" id="Fun.f_x">f_x</a></b>
<br>
The argument <i>f_x</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>f_x</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>On input and output, <i>f_x</i> is a vector of size <code>
<span style='white-space: nowrap'>&nbsp;N&nbsp;*&nbsp;N</span></code>

and the input values of the elements of <i>f_x</i> do not matter.
On output, 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f\_x&nbsp;[i&nbsp;*&nbsp;n&nbsp;+&nbsp;j]&nbsp;=&nbsp;\partial_{x(j)}&nbsp;f_i&nbsp;(&nbsp;t&nbsp;,&nbsp;x&nbsp;)<br>
\]&nbsp;</span></code>
 

<br>
<br>
<b><a name="Fun.Warning" id="Fun.Warning">Warning</a></b>
<br>
The arguments <i>f</i>, and <i>f_x</i>
must have a call by reference in their prototypes; i.e.,
do not forget the <code><font color="blue">&amp;</font></code> in the prototype for 
<i>f</i> and <i>f_x</i>.

<br>
<br>
<b><big><a name="M" id="M">M</a></big></b>
<br>
The argument <i>M</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font></code><i><span style='white-space: nowrap'>M</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the order of the multi-step method; i.e.,
the order of the approximating polynomial
(after the initialization process).
The argument <i>M</i> must greater than or equal one.

<br>
<br>
<b><big><a name="ti" id="ti">ti</a></big></b>
<br>
The argument <i>ti</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ti</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the initial time for the integration of 
the differential equation.

<br>
<br>
<b><big><a name="tf" id="tf">tf</a></big></b>
<br>
The argument <i>tf</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>tf</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the final time for the integration of 
the differential equation.

<br>
<br>
<b><big><a name="xi" id="xi">xi</a></big></b>
<br>
The argument <i>xi</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>xi</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and size <i>n</i>.
It specifies value of <code>
<span style='white-space: nowrap'>&nbsp;X(ti)</span></code>
.

<br>
<br>
<b><big><a name="smin" id="smin">smin</a></big></b>
<br>
The argument <i>smin</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>smin</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The minimum value of <code>
<span style='white-space: nowrap'>&nbsp;T[M]&nbsp;-&nbsp;&nbsp;T[M-1]</span></code>
 in a call to <code><font color="blue">OdeGear</font></code>
will be <code>
<span style='white-space: nowrap'>&nbsp;smin</span></code>
 except for the last two calls where it may be
as small as <code>
<span style='white-space: nowrap'>&nbsp;smin&nbsp;/&nbsp;2</span></code>
.
The value of <i>smin</i> must be less than or equal <i>smax</i>.

<br>
<br>
<b><big><a name="smax" id="smax">smax</a></big></b>
<br>
The argument <i>smax</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>smax</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the maximum step size to use during the integration; 
i.e., the maximum value for <code>
<span style='white-space: nowrap'>&nbsp;T[M]&nbsp;-&nbsp;T[M-1]</span></code>
 
in a call to <code><font color="blue">OdeGear</font></code>.

<br>
<br>
<b><big><a name="sini" id="sini">sini</a></big></b>
<br>
The argument <i>sini</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>sini</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The value of <i>sini</i> is the minimum 
step size to use during initialization of the multi-step method; i.e.,
for calls to <code><font color="blue">OdeGear</font></code> where <code>
<span style='white-space: nowrap'>&nbsp;m&nbsp;&lt;&nbsp;M</span></code>
.
The value of <i>sini</i> must be less than or equal <i>smax</i>
(and can also be less than <i>smin</i>).

<br>
<br>
<b><big><a name="eabs" id="eabs">eabs</a></big></b>
<br>
The argument <i>eabs</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>eabs</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and size <i>n</i>.
Each of the elements of <i>eabs</i> must be 
greater than or equal zero.
It specifies a bound for the absolute
error in the return value <i>xf</i> as an approximation for <code>
<span style='white-space: nowrap'>&nbsp;X(tf)</span></code>
.
(see the 
<a href="odegearcontrol.htm#Error Criteria Discussion" target="_top"><span style='white-space: nowrap'>error&nbsp;criteria&nbsp;discussion</span></a>
 
below). 

<br>
<br>
<b><big><a name="erel" id="erel">erel</a></big></b>
<br>
The argument <i>erel</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Scalar</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>erel</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and is greater than or equal zero.
It specifies a bound for the relative 
error in the return value <i>xf</i> as an approximation for <code>
<span style='white-space: nowrap'>&nbsp;X(tf)</span></code>

(see the 
<a href="odegearcontrol.htm#Error Criteria Discussion" target="_top"><span style='white-space: nowrap'>error&nbsp;criteria&nbsp;discussion</span></a>
 
below). 

<br>
<br>
<b><big><a name="ef" id="ef">ef</a></big></b>
<br>
The argument value <i>ef</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>ef</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and size <i>n</i>.
The input value of its elements does not matter.
On output, 
it contains an estimated bound for the 
absolute error in the approximation <i>xf</i>; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ef_i&nbsp;&gt;&nbsp;|&nbsp;X(&nbsp;tf&nbsp;)_i&nbsp;-&nbsp;xf_i&nbsp;|<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="maxabs" id="maxabs">maxabs</a></big></b>
<br>
The argument <i>maxabs</i> is optional in the call to <code><font color="blue">OdeGearControl</font></code>.
If it is present, it has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Vector</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>maxabs</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>and size <i>n</i>.
The input value of its elements does not matter.
On output, 
it contains an estimate for the 
maximum absolute value of <code>
<span style='white-space: nowrap'>&nbsp;X(t)</span></code>
; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxabs[i]&nbsp;\approx&nbsp;\max&nbsp;\left\{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;X(&nbsp;t&nbsp;)_i&nbsp;|&nbsp;\;&nbsp;:&nbsp;\;&nbsp;&nbsp;t&nbsp;\in&nbsp;[ti,&nbsp;tf]&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\right\}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="nstep" id="nstep">nstep</a></big></b>
<br>
The argument <i>nstep</i> has the prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>size_t</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>nstep</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>Its input value does not matter and its output value
is the number of calls to <a href="odegear.htm" target="_top"><span style='white-space: nowrap'>OdeGear</span></a>

used by <code><font color="blue">OdeGearControl</font></code>.

<br>
<br>
<b><big><a name="Error Criteria Discussion" id="Error Criteria Discussion">Error Criteria Discussion</a></big></b>
<br>
The relative error criteria <i>erel</i> and
absolute error criteria <i>eabs</i> are enforced during each step of the
integration of the ordinary differential equations.
In addition, they are inversely scaled by the step size so that
the total error bound is less than the sum of the error bounds.
To be specific, if <code>
<span style='white-space: nowrap'>&nbsp;\tilde{X}&nbsp;(t)</span></code>
 is the approximate solution
at time <code>
<span style='white-space: nowrap'>&nbsp;t</span></code>
, 
<i>ta</i> is the initial step time,
and <i>tb</i> is the final step time,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\left|&nbsp;\tilde{X}&nbsp;(tb)_j&nbsp;&nbsp;-&nbsp;X&nbsp;(tb)_j&nbsp;\right|&nbsp;<br>
\leq&nbsp;<br>
\frac{tf&nbsp;-&nbsp;ti}{tb&nbsp;-&nbsp;ta}<br>
\left[&nbsp;eabs[j]&nbsp;+&nbsp;erel&nbsp;\;&nbsp;&nbsp;|&nbsp;\tilde{X}&nbsp;(tb)_j&nbsp;|&nbsp;\right]&nbsp;<br>
\]&nbsp;</span></code>

If <code>
<span style='white-space: nowrap'>&nbsp;X(tb)_j</span></code>
 is near zero for some <code>
<span style='white-space: nowrap'>&nbsp;tb&nbsp;\in&nbsp;[ti&nbsp;,&nbsp;tf]</span></code>
,
and one uses an absolute error criteria <code>
<span style='white-space: nowrap'>&nbsp;eabs[j]</span></code>
 of zero,
the error criteria above will force <code><font color="blue">OdeGearControl</font></code>
to use step sizes equal to 
<a href="odegearcontrol.htm#smin" target="_top"><span style='white-space: nowrap'>smin</span></a>

for steps ending near <code>
<span style='white-space: nowrap'>&nbsp;tb</span></code>
.
In this case, the error relative to <i>maxabs</i> can be judged after
<code><font color="blue">OdeGearControl</font></code> returns.
If <i>ef</i> is to large relative to <i>maxabs</i>, 
<code><font color="blue">OdeGearControl</font></code> can be called again 
with a smaller value of <i>smin</i>.

<br>
<br>
<b><big><a name="Scalar" id="Scalar">Scalar</a></big></b>
<br>
The type <i>Scalar</i> must satisfy the conditions
for a <a href="numerictype.htm" target="_top"><span style='white-space: nowrap'>NumericType</span></a>
 type.
The routine <a href="checknumerictype.htm" target="_top"><span style='white-space: nowrap'>CheckNumericType</span></a>
 will generate an error message
if this is not the case.
In addition, the following operations must be defined for 
<i>Scalar</i> objects <i>a</i> and <i>b</i>:

<table><tr><td align='left'  valign='top'>

<b>Operation</b> </td><td align='left'  valign='top'>
 <b>Description</b>  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue"></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>b</span></i> </td><td align='left'  valign='top'>

	returns true (false) if <i>a</i> is less than or equal 
	(greater than) <i>b</i>.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue"></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;</span></font></code><i><span style='white-space: nowrap'>b</span></i> </td><td align='left'  valign='top'>

	returns true (false) if <i>a</i> is equal to <i>b</i>.
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>log(</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code> </td><td align='left'  valign='top'>

	returns a <i>Scalar</i> equal to the logarithm of <i>a</i>
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue"><span style='white-space: nowrap'>exp(</span></font></code><i><span style='white-space: nowrap'>a</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code> </td><td align='left'  valign='top'>

	returns a <i>Scalar</i> equal to the exponential of <i>a</i>
</td></tr>
</table>
<br>
<b><big><a name="Vector" id="Vector">Vector</a></big></b>
<br>
The type <i>Vector</i> must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;Scalar</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="odegearcontrol.cpp.htm" target="_top"><span style='white-space: nowrap'>OdeGearControl.cpp</span></a>

contains an example and test a test of using this routine.
It returns true if it succeeds and false otherwise.

<br>
<br>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br>
Let <code>
<span style='white-space: nowrap'>&nbsp;e(s)</span></code>
 be the error as a function of the
step size <code>
<span style='white-space: nowrap'>&nbsp;s</span></code>
 and suppose that there is a constant
<code>
<span style='white-space: nowrap'>&nbsp;K</span></code>
 such that <code>
<span style='white-space: nowrap'>&nbsp;e(s)&nbsp;=&nbsp;K&nbsp;s^m</span></code>
.
Let <code>
<span style='white-space: nowrap'>&nbsp;a</span></code>
 be our error bound.
Given the value of <code>
<span style='white-space: nowrap'>&nbsp;e(s)</span></code>
, a step of size <code>
<span style='white-space: nowrap'>&nbsp;\lambda&nbsp;s</span></code>

would be ok provided that
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;&nbsp;&amp;&nbsp;\geq&nbsp;&amp;&nbsp;e(&nbsp;\lambda&nbsp;s&nbsp;)&nbsp;(tf&nbsp;-&nbsp;ti)&nbsp;/&nbsp;(&nbsp;\lambda&nbsp;s&nbsp;)&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;&nbsp;&amp;&nbsp;\geq&nbsp;&amp;&nbsp;K&nbsp;\lambda^m&nbsp;s^m&nbsp;(tf&nbsp;-&nbsp;ti)&nbsp;/&nbsp;(&nbsp;\lambda&nbsp;s&nbsp;)&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;&nbsp;&amp;&nbsp;\geq&nbsp;&amp;&nbsp;\lambda^{m-1}&nbsp;s^{m-1}&nbsp;(tf&nbsp;-&nbsp;ti)&nbsp;e(s)&nbsp;/&nbsp;s^m&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;&nbsp;&amp;&nbsp;\geq&nbsp;&amp;&nbsp;\lambda^{m-1}&nbsp;(tf&nbsp;-&nbsp;ti)&nbsp;e(s)&nbsp;/&nbsp;s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\lambda^{m-1}&nbsp;&amp;&nbsp;\leq&nbsp;&amp;&nbsp;\frac{a}{e(s)}&nbsp;\frac{s}{tf&nbsp;-&nbsp;ti}<br>
\end{array}<br>
\]&nbsp;</span></code>

Thus if the right hand side of the last inequality is greater 
than or equal to one, the step of size <code>
<span style='white-space: nowrap'>&nbsp;s</span></code>
 is ok. 

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>
<br>
The source code for this routine is in the file
<code><font color="blue">cppad/ode_gear_control.hpp</font></code>.


<hr>Input File: cppad/ode_gear_control.hpp

</body>
</html>
