<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Source: det_by_lu</title>
<meta name="description" id="description" content="Source: det_by_lu"/>
<meta name="keywords" id="keywords" content=" det_by_lu source "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_det_by_lu.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>speed</option>
<option>speed_utility</option>
<option>det_by_lu</option>
<option>det_by_lu.hpp</option>
</select>
</td>
<td><a href="det_by_lu.cpp.xml" target="_top">Prev</a>
</td><td><a href="det_33.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>speed</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>whats_new</option>
<option>include_deprecated</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed_utility-&gt;</option>
<option>uniform_01</option>
<option>det_of_minor</option>
<option>det_by_minor</option>
<option>det_by_lu</option>
<option>det_33</option>
<option>det_grad_33</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>det_by_lu-&gt;</option>
<option>det_by_lu.cpp</option>
<option>det_by_lu.hpp</option>
</select>
</td>
<td>det_by_lu.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Source: det_by_lu</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_DET_BY_LU_INCLUDED 
<code><span style='white-space: nowrap'><br/>
</span></code># define CPPAD_DET_BY_LU_INCLUDED

<span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;complex&gt;<br/>
<br/>
//&#xA0;BEGIN&#xA0;CppAD&#xA0;namespace<br/>
namespace&#xA0;CppAD&#xA0;{<br/>
<br/>
//&#xA0;The&#xA0;AD&#xA0;complex&#xA0;case&#xA0;is&#xA0;used&#xA0;by&#xA0;examples&#xA0;by&#xA0;not&#xA0;used&#xA0;by&#xA0;speed&#xA0;tests&#xA0;<br/>
//&#xA0;Must&#xA0;define&#xA0;a&#xA0;specializatgion&#xA0;of&#xA0;LeqZero,AbsGeq&#xA0;for&#xA0;the&#xA0;ADComplex&#xA0;case<br/>
typedef&#xA0;std::complex&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Complex;<br/>
typedef&#xA0;CppAD::AD&lt;Complex&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADComplex;<br/>
CPPAD_BOOL_UNARY(Complex,&#xA0;&#xA0;LeqZero&#xA0;)<br/>
CPPAD_BOOL_BINARY(Complex,&#xA0;AbsGeq&#xA0;)<br/>
<br/>
template&#xA0;&lt;class&#xA0;Scalar&gt;<br/>
class&#xA0;det_by_lu&#xA0;{<br/>
private:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;m;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;Scalar&gt;&#xA0;A;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;Scalar&gt;&#xA0;B;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;Scalar&gt;&#xA0;X;<br/>
public:<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;det_by_lu(size_t&#xA0;n_)&#xA0;:&#xA0;m(0),&#xA0;n(n_),&#xA0;A(n_&#xA0;*&#xA0;n_)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;template&#xA0;&lt;class&#xA0;Vector&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inline&#xA0;Scalar&#xA0;operator()(const&#xA0;Vector&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::exp;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Scalar&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;logdet;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Scalar&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;det;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;i;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;matrix&#xA0;so&#xA0;it&#xA0;is&#xA0;not&#xA0;overwritten<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;=&#xA0;x[i];<br/>
&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;comput&#xA0;log&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet&#xA0;=&#xA0;CppAD::LuSolve(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n,&#xA0;m,&#xA0;A,&#xA0;B,&#xA0;X,&#xA0;logdet);<br/>
<br/>
#&#xA0;if&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Do&#xA0;not&#xA0;do&#xA0;this&#xA0;for&#xA0;speed&#xA0;test&#xA0;because&#xA0;it&#xA0;makes&#xA0;floating&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;point&#xA0;operation&#xA0;sequence&#xA0;very&#xA0;simple.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;signdet&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;det&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;det&#xA0;=&#xA0;&#xA0;Scalar(&#xA0;signdet&#xA0;)&#xA0;*&#xA0;exp(&#xA0;logdet&#xA0;);<br/>
#&#xA0;endif<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;convert&#xA0;to&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;det&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;Scalar(&#xA0;signdet&#xA0;)&#xA0;*&#xA0;exp(&#xA0;logdet&#xA0;);&#xA0;<br/>
<br/>
#&#xA0;ifdef&#xA0;FADBAD<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Fadbad&#xA0;requires&#xA0;tempories&#xA0;to&#xA0;be&#xA0;set&#xA0;to&#xA0;constants<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;=&#xA0;0;<br/>
#&#xA0;endif<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;det;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
};<br/>
}&#xA0;//&#xA0;END&#xA0;CppAD&#xA0;namespace<br/>
</span># endif
</font></code>


<hr/>Input File: omh/det_by_lu_hpp.omh

</body>
</html>
