<html><head>
<title>Alphabetic Listing of Cross Reference Tags</title>
<meta name="description" id="description" content="Alphabetic Listing of Cross Reference Tags">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='__reference_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>_reference</option>
</select>
</td>
<td><a href="license.htm" target="_top">Prev</a>
</td><td><a href="_index.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down1(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>_reference</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>A</option>
<option>B</option>
<option>C</option>
<option>D</option>
<option>E</option>
<option>F</option>
<option>G</option>
<option>H</option>
<option>I</option>
<option>J</option>
<option>L</option>
<option>M</option>
<option>N</option>
<option>O</option>
<option>P</option>
<option>R</option>
<option>S</option>
<option>T</option>
<option>U</option>
<option>V</option>
<option>W</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>Alphabetic Listing of Cross Reference Tags</big></big></b></center>
<table>
<tr valign="top"><td>

<b><big><a name="A">A</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="abs.htm" target="_top">abs</a><br> </td><td> AD Absolute Value Function </td></tr><tr valign="top"><td>
<a href="abs.cpp.htm" target="_top">Abs.cpp</a><br> </td><td> AD Absolute Value Function: Example and Test </td></tr><tr valign="top"><td>
<a href="acos.cpp.htm" target="_top">Acos.cpp</a><br> </td><td> The AD acos Function: Example and Test </td></tr><tr valign="top"><td>
<a href="acosforward.htm" target="_top">AcosForward</a><br> </td><td> Arccosine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="acosreverse.htm" target="_top">AcosReverse</a><br> </td><td> Arccosine Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="ad.htm" target="_top">AD</a><br> </td><td> AD Objects </td></tr><tr valign="top"><td>
<a href="ad_binary.htm" target="_top">ad_binary</a><br> </td><td> AD Binary Arithmetic Operators </td></tr><tr valign="top"><td>
<a href="ad_copy.htm" target="_top">ad_copy</a><br> </td><td> AD Copy Constructor and Assignment Operator </td></tr><tr valign="top"><td>
<a href="add.cpp.htm" target="_top">Add.cpp</a><br> </td><td> AD Binary Addition: Example and Test </td></tr><tr valign="top"><td>
<a href="addeq.cpp.htm" target="_top">AddEq.cpp</a><br> </td><td> AD Computed Assignment Addition: Example and Test </td></tr><tr valign="top"><td>
<a href="adfun.htm" target="_top">ADFun</a><br> </td><td> ADFun Objects </td></tr><tr valign="top"><td>
<a href="adolc_det_lu.cpp.htm" target="_top">adolc_det_lu.cpp</a><br> </td><td> Adolc Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="adolc_det_minor.cpp.htm" target="_top">adolc_det_minor.cpp</a><br> </td><td> Adolc Speed: Gradient of Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="adolc_poly.cpp.htm" target="_top">adolc_poly.cpp</a><br> </td><td> Adolc Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="advalued.htm" target="_top">ADValued</a><br> </td><td> AD Valued Operations and Functions </td></tr><tr valign="top"><td>
<a href="appendix.htm" target="_top">Appendix</a><br> </td><td> Appendix </td></tr><tr valign="top"><td>
<a href="arithmetic.htm" target="_top">Arithmetic</a><br> </td><td> AD Arithmetic Operators and Computed Assignments </td></tr><tr valign="top"><td>
<a href="asin.cpp.htm" target="_top">Asin.cpp</a><br> </td><td> The AD asin Function: Example and Test </td></tr><tr valign="top"><td>
<a href="asinforward.htm" target="_top">AsinForward</a><br> </td><td> Arcsine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="asinreverse.htm" target="_top">AsinReverse</a><br> </td><td> Arcsine Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="atan.cpp.htm" target="_top">Atan.cpp</a><br> </td><td> The AD atan Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atan2.htm" target="_top">atan2</a><br> </td><td> AD Two Argument Inverse Tangent Function </td></tr><tr valign="top"><td>
<a href="atan2.cpp.htm" target="_top">Atan2.cpp</a><br> </td><td> The AD atan2 Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atanforward.htm" target="_top">AtanForward</a><br> </td><td> Arctangent Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="atanreverse.htm" target="_top">AtanReverse</a><br> </td><td> Arctangent Function Reverse Mode Theory </td></tr><tr valign="top"><td>

<b><big><a name="B">B</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="base_adolc.hpp.htm" target="_top">base_adolc.hpp</a><br> </td><td> Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type </td></tr><tr valign="top"><td>
<a href="base_complex.hpp.htm" target="_top">base_complex.hpp</a><br> </td><td> Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt; </td></tr><tr valign="top"><td>
<a href="base_require.htm" target="_top">base_require</a><br> </td><td> AD&lt;Base&gt; Requirements for Base Type </td></tr><tr valign="top"><td>
<a href="benderquad.htm" target="_top">BenderQuad</a><br> </td><td> Computing Jacobian and Hessian of Bender's Reduced Objective </td></tr><tr valign="top"><td>
<a href="benderquad.cpp.htm" target="_top">BenderQuad.cpp</a><br> </td><td> BenderQuad: Example and Test </td></tr><tr valign="top"><td>
<a href="bib.htm" target="_top">Bib</a><br> </td><td> Bibliography </td></tr><tr valign="top"><td>
<a href="boolfun.htm" target="_top">BoolFun</a><br> </td><td> AD Boolean Functions </td></tr><tr valign="top"><td>
<a href="boolfun.cpp.htm" target="_top">BoolFun.cpp</a><br> </td><td> AD Boolean Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="boolvalued.htm" target="_top">BoolValued</a><br> </td><td> Bool Valued Operations and Functions with AD Arguments </td></tr><tr valign="top"><td>
<a href="bugs.htm" target="_top">Bugs</a><br> </td><td> Know Bugs and Problems Using CppAD </td></tr><tr valign="top"><td>

<b><big><a name="C">C</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="capacity_taylor.htm" target="_top">capacity_taylor</a><br> </td><td> Controlling Taylor Coefficients Memory Allocation </td></tr><tr valign="top"><td>
<a href="checknumerictype.htm" target="_top">CheckNumericType</a><br> </td><td> Check NumericType Class Concept </td></tr><tr valign="top"><td>
<a href="checknumerictype.cpp.htm" target="_top">CheckNumericType.cpp</a><br> </td><td> The CheckNumericType Function: Example and Test </td></tr><tr valign="top"><td>
<a href="checksimplevector.htm" target="_top">CheckSimpleVector</a><br> </td><td> Check Simple Vector Concept </td></tr><tr valign="top"><td>
<a href="checksimplevector.cpp.htm" target="_top">CheckSimpleVector.cpp</a><br> </td><td> The CheckSimpleVector Function: Example and Test </td></tr><tr valign="top"><td>
<a href="compare.htm" target="_top">Compare</a><br> </td><td> AD Binary Comparison Operators </td></tr><tr valign="top"><td>
<a href="compare.cpp.htm" target="_top">Compare.cpp</a><br> </td><td> AD Binary Comparison Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="comparechange.htm" target="_top">CompareChange</a><br> </td><td> Comparison Changes During Zero Order Forward Mode </td></tr><tr valign="top"><td>
<a href="comparechange.cpp.htm" target="_top">CompareChange.cpp</a><br> </td><td> CompareChange and Re-Tape: Example and Test </td></tr><tr valign="top"><td>
<a href="complexpoly.cpp.htm" target="_top">ComplexPoly.cpp</a><br> </td><td> Complex Polynomial: Example and Test </td></tr><tr valign="top"><td>
<a href="compute_assign.htm" target="_top">compute_assign</a><br> </td><td> AD Computed Assignment Operators </td></tr><tr valign="top"><td>
<a href="condexp.htm" target="_top">CondExp</a><br> </td><td> AD Conditional Expressions </td></tr><tr valign="top"><td>
<a href="condexp.cpp.htm" target="_top">CondExp.cpp</a><br> </td><td> Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="convert.htm" target="_top">Convert</a><br> </td><td> Conversion and Printing of AD Objects </td></tr><tr valign="top"><td>
<a href="copyad.cpp.htm" target="_top">CopyAD.cpp</a><br> </td><td> AD Copy Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="copybase.cpp.htm" target="_top">CopyBase.cpp</a><br> </td><td> AD Constructor From Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="cos.cpp.htm" target="_top">Cos.cpp</a><br> </td><td> The AD cos Function: Example and Test </td></tr><tr valign="top"><td>
<a href="cosh.cpp.htm" target="_top">Cosh.cpp</a><br> </td><td> The AD cosh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="cppad.htm" target="_top">CppAD</a><br> </td><td> CppAD: A Package for Differentiation of C++ Algorithms </td></tr><tr valign="top"><td>
<a href="cppad_assert.htm" target="_top">cppad_assert</a><br> </td><td> CppAD Assertions During Execution </td></tr><tr valign="top"><td>
<a href="cppad_det_lu.cpp.htm" target="_top">cppad_det_lu.cpp</a><br> </td><td> CppAD Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="cppad_det_minor.cpp.htm" target="_top">cppad_det_minor.cpp</a><br> </td><td> CppAD Speed: Gradient of Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="cppad_poly.cpp.htm" target="_top">cppad_poly.cpp</a><br> </td><td> CppAD Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="cppad_vector.htm" target="_top">CppAD_vector</a><br> </td><td> The CppAD::vector Template Class </td></tr><tr valign="top"><td>
<a href="cppad_vector.cpp.htm" target="_top">CppAD_vector.cpp</a><br> </td><td> CppAD::vector Template Class: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="D">D</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="default.htm" target="_top">Default</a><br> </td><td> AD Default Constructor </td></tr><tr valign="top"><td>
<a href="default.cpp.htm" target="_top">Default.cpp</a><br> </td><td> Default AD Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="dependent.htm" target="_top">Dependent</a><br> </td><td> Stop Recording and Store Operation Sequence </td></tr><tr valign="top"><td>
<a href="det_33.htm" target="_top">det_33</a><br> </td><td> Check Determinant of 3 by 3 matrix </td></tr><tr valign="top"><td>
<a href="det_33.hpp.htm" target="_top">det_33.hpp</a><br> </td><td> Source: det_33 </td></tr><tr valign="top"><td>
<a href="det_by_lu.htm" target="_top">det_by_lu</a><br> </td><td> Determinant Using Expansion by Lu Factorization </td></tr><tr valign="top"><td>
<a href="det_by_lu.cpp.htm" target="_top">det_by_lu.cpp</a><br> </td><td> Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="det_by_lu.hpp.htm" target="_top">det_by_lu.hpp</a><br> </td><td> Source: det_by_lu </td></tr><tr valign="top"><td>
<a href="det_by_minor.htm" target="_top">det_by_minor</a><br> </td><td> Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="det_by_minor.cpp.htm" target="_top">det_by_minor.cpp</a><br> </td><td> Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="det_by_minor.hpp.htm" target="_top">det_by_minor.hpp</a><br> </td><td> Source: det_by_minor </td></tr><tr valign="top"><td>
<a href="det_grad_33.htm" target="_top">det_grad_33</a><br> </td><td> Check Gradient of Determinant of 3 by 3 matrix </td></tr><tr valign="top"><td>
<a href="det_grad_33.hpp.htm" target="_top">det_grad_33.hpp</a><br> </td><td> Source: det_grad_33 </td></tr><tr valign="top"><td>
<a href="det_of_minor.htm" target="_top">det_of_minor</a><br> </td><td> Determinant of a Minor </td></tr><tr valign="top"><td>
<a href="det_of_minor.cpp.htm" target="_top">det_of_minor.cpp</a><br> </td><td> Determinant of a Minor: Example and Test </td></tr><tr valign="top"><td>
<a href="det_of_minor.hpp.htm" target="_top">det_of_minor.hpp</a><br> </td><td> Source: det_of_minor </td></tr><tr valign="top"><td>
<a href="discrete.htm" target="_top">Discrete</a><br> </td><td> Discrete AD Functions </td></tr><tr valign="top"><td>
<a href="div.cpp.htm" target="_top">Div.cpp</a><br> </td><td> AD Binary Division: Example and Test </td></tr><tr valign="top"><td>
<a href="diveq.cpp.htm" target="_top">DivEq.cpp</a><br> </td><td> AD Computed Assignment Division: Example and Test </td></tr><tr valign="top"><td>
<a href="double_det_lu.cpp.htm" target="_top">double_det_lu.cpp</a><br> </td><td> Double Speed: Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="double_det_minor.cpp.htm" target="_top">double_det_minor.cpp</a><br> </td><td> Double Speed: Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="double_poly.cpp.htm" target="_top">double_poly.cpp</a><br> </td><td> Double Speed: Evaluate a Polynomial </td></tr><tr valign="top"><td>
<a href="drivers.htm" target="_top">Drivers</a><br> </td><td> First and Second Derivatives: Easy Drivers </td></tr><tr valign="top"><td>

<b><big><a name="E">E</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="eq.cpp.htm" target="_top">Eq.cpp</a><br> </td><td> AD Assignment Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="equalopseq.htm" target="_top">EqualOpSeq</a><br> </td><td> Check if Equal and Correspond to Same Operation Sequence </td></tr><tr valign="top"><td>
<a href="equalopseq.cpp.htm" target="_top">EqualOpSeq.cpp</a><br> </td><td> EqualOpSeq: Example and Test </td></tr><tr valign="top"><td>
<a href="erf.htm" target="_top">erf</a><br> </td><td> The AD Error Function </td></tr><tr valign="top"><td>
<a href="erf.cpp.htm" target="_top">Erf.cpp</a><br> </td><td> The AD erf Function: Example and Test </td></tr><tr valign="top"><td>
<a href="errorhandler.htm" target="_top">ErrorHandler</a><br> </td><td> Replacing the CppAD Error Handler </td></tr><tr valign="top"><td>
<a href="errorhandler.cpp.htm" target="_top">ErrorHandler.cpp</a><br> </td><td> Replacing The CppAD Error Handler: Example and Test </td></tr><tr valign="top"><td>
<a href="example.htm" target="_top">Example</a><br> </td><td> Examples </td></tr><tr valign="top"><td>
<a href="example.cpp.htm" target="_top">Example.cpp</a><br> </td><td> Program That Runs the CppAD Examples </td></tr><tr valign="top"><td>
<a href="example_a11c.cpp.htm" target="_top">example_a11c.cpp</a><br> </td><td> A Simple Parallel Loop </td></tr><tr valign="top"><td>
<a href="exampleutility.htm" target="_top">ExampleUtility</a><br> </td><td> Utility Routines used by CppAD Examples </td></tr><tr valign="top"><td>
<a href="exp.cpp.htm" target="_top">Exp.cpp</a><br> </td><td> The AD exp Function: Example and Test </td></tr><tr valign="top"><td>
<a href="exp_2.htm" target="_top">exp_2</a><br> </td><td> Second Order Exponential Approximation </td></tr><tr valign="top"><td>
<a href="exp_2.cpp.htm" target="_top">exp_2.cpp</a><br> </td><td> exp_2: Test </td></tr><tr valign="top"><td>
<a href="exp_2.hpp.htm" target="_top">exp_2.hpp</a><br> </td><td> exp_2: Implementation </td></tr><tr valign="top"><td>
<a href="exp_2_cppad.htm" target="_top">exp_2_cppad</a><br> </td><td> exp_2: CppAD Forward and Reverse Sweeps </td></tr><tr valign="top"><td>
<a href="exp_2_for0.htm" target="_top">exp_2_for0</a><br> </td><td> exp_2: Operation Sequence and Zero Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_2_for0.cpp.htm" target="_top">exp_2_for0.cpp</a><br> </td><td> exp_2: Verify Zero Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_for1.htm" target="_top">exp_2_for1</a><br> </td><td> exp_2: First Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_2_for1.cpp.htm" target="_top">exp_2_for1.cpp</a><br> </td><td> exp_2: Verify First Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_for2.htm" target="_top">exp_2_for2</a><br> </td><td> exp_2: Second Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_2_for2.cpp.htm" target="_top">exp_2_for2.cpp</a><br> </td><td> exp_2: Verify Second Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_rev1.htm" target="_top">exp_2_rev1</a><br> </td><td> exp_2: First Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="exp_2_rev1.cpp.htm" target="_top">exp_2_rev1.cpp</a><br> </td><td> exp_2: Verify First Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_rev2.htm" target="_top">exp_2_rev2</a><br> </td><td> exp_2: Second Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="exp_2_rev2.cpp.htm" target="_top">exp_2_rev2.cpp</a><br> </td><td> exp_2: Verify Second Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_apx_main.cpp.htm" target="_top">exp_apx_main.cpp</a><br> </td><td> Run the exp_2 and exp_eps Tests </td></tr><tr valign="top"><td>
<a href="exp_eps.htm" target="_top">exp_eps</a><br> </td><td> An Epsilon Accurate Exponential Approximation </td></tr><tr valign="top"><td>
<a href="exp_eps.cpp.htm" target="_top">exp_eps.cpp</a><br> </td><td> exp_eps: Test of exp_eps </td></tr><tr valign="top"><td>
<a href="exp_eps.hpp.htm" target="_top">exp_eps.hpp</a><br> </td><td> exp_eps: Implementation </td></tr><tr valign="top"><td>
<a href="exp_eps_cppad.htm" target="_top">exp_eps_cppad</a><br> </td><td> exp_eps: CppAD Forward and Reverse Sweeps </td></tr><tr valign="top"><td>
<a href="exp_eps_for0.htm" target="_top">exp_eps_for0</a><br> </td><td> exp_eps: Operation Sequence and Zero Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for0.cpp.htm" target="_top">exp_eps_for0.cpp</a><br> </td><td> exp_eps: Verify Zero Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for1.htm" target="_top">exp_eps_for1</a><br> </td><td> exp_eps: First Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for1.cpp.htm" target="_top">exp_eps_for1.cpp</a><br> </td><td> exp_eps: Verify First Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for2.htm" target="_top">exp_eps_for2</a><br> </td><td> exp_eps: Second Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_eps_for2.cpp.htm" target="_top">exp_eps_for2.cpp</a><br> </td><td> exp_eps: Verify Second Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev1.htm" target="_top">exp_eps_rev1</a><br> </td><td> exp_eps: First Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev1.cpp.htm" target="_top">exp_eps_rev1.cpp</a><br> </td><td> exp_eps: Verify First Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev2.htm" target="_top">exp_eps_rev2</a><br> </td><td> exp_eps: Second Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev2.cpp.htm" target="_top">exp_eps_rev2.cpp</a><br> </td><td> exp_eps: Verify Second Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="expforward.htm" target="_top">ExpForward</a><br> </td><td> Exponential Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="expreverse.htm" target="_top">ExpReverse</a><br> </td><td> Exponential Function Reverse Mode Theory </td></tr><tr valign="top"><td>

<b><big><a name="F">F</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="fadbad_det_lu.cpp.htm" target="_top">fadbad_det_lu.cpp</a><br> </td><td> Fadbad Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="fadbad_det_minor.cpp.htm" target="_top">fadbad_det_minor.cpp</a><br> </td><td> Fadbad Speed: Gradient of Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="fadbad_poly.cpp.htm" target="_top">fadbad_poly.cpp</a><br> </td><td> Fadbad Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="faq.htm" target="_top">Faq</a><br> </td><td> Frequently Asked Questions and Answers </td></tr><tr valign="top"><td>
<a href="forone.htm" target="_top">ForOne</a><br> </td><td> First Order Partial Derivative: Driver Routine </td></tr><tr valign="top"><td>
<a href="forone.cpp.htm" target="_top">ForOne.cpp</a><br> </td><td> First Order Partial Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="forsparsejac.htm" target="_top">ForSparseJac</a><br> </td><td> Jacobian Sparsity Pattern: Forward Mode </td></tr><tr valign="top"><td>
<a href="forsparsejac.cpp.htm" target="_top">ForSparseJac.cpp</a><br> </td><td> Forward Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="fortwo.htm" target="_top">ForTwo</a><br> </td><td> Forward Mode Second Partial Derivative Driver </td></tr><tr valign="top"><td>
<a href="fortwo.cpp.htm" target="_top">ForTwo.cpp</a><br> </td><td> Subset of Second Order Partials: Example and Test </td></tr><tr valign="top"><td>
<a href="forward.htm" target="_top">Forward</a><br> </td><td> Forward Mode </td></tr><tr valign="top"><td>
<a href="forward.cpp.htm" target="_top">Forward.cpp</a><br> </td><td> Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="forwardany.htm" target="_top">ForwardAny</a><br> </td><td> Any Order Forward Mode </td></tr><tr valign="top"><td>
<a href="forwardone.htm" target="_top">ForwardOne</a><br> </td><td> First Order Forward Mode: Derivative Values </td></tr><tr valign="top"><td>
<a href="forwardtheory.htm" target="_top">ForwardTheory</a><br> </td><td> The Theory of Forward Mode </td></tr><tr valign="top"><td>
<a href="forwardzero.htm" target="_top">ForwardZero</a><br> </td><td> Zero Order Forward Mode: Function Values </td></tr><tr valign="top"><td>
<a href="funcheck.htm" target="_top">FunCheck</a><br> </td><td> Check an ADFun Sequence of Operations </td></tr><tr valign="top"><td>
<a href="funcheck.cpp.htm" target="_top">FunCheck.cpp</a><br> </td><td> ADFun Check and Re-Tape: Example and Test </td></tr><tr valign="top"><td>
<a href="funconstruct.htm" target="_top">FunConstruct</a><br> </td><td> Construct an ADFun Object and Stop Recording </td></tr><tr valign="top"><td>
<a href="fundeprecated.htm" target="_top">FunDeprecated</a><br> </td><td> ADFun Object Deprecated Member Functions </td></tr><tr valign="top"><td>
<a href="funeval.htm" target="_top">FunEval</a><br> </td><td> Evaluate ADFun Functions, Derivatives, and Sparsity Patterns </td></tr><tr valign="top"><td>

<b><big><a name="G">G</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="general.htm" target="_top">General</a><br> </td><td> General Examples </td></tr><tr valign="top"><td>
<a href="get_started.cpp.htm" target="_top">get_started.cpp</a><br> </td><td> A Simple Program Using CppAD to Compute Derivatives </td></tr><tr valign="top"><td>
<a href="glossary.htm" target="_top">glossary</a><br> </td><td> Glossary </td></tr><tr valign="top"><td>

<b><big><a name="H">H</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="heslagrangian.cpp.htm" target="_top">HesLagrangian.cpp</a><br> </td><td> Hessian of Lagrangian and  ADFun Default Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="hesludet.cpp.htm" target="_top">HesLuDet.cpp</a><br> </td><td> Gradient of Determinant Using LU Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="hesminordet.cpp.htm" target="_top">HesMinorDet.cpp</a><br> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="hessian.htm" target="_top">Hessian</a><br> </td><td> Hessian: Easy Driver </td></tr><tr valign="top"><td>
<a href="hessian.cpp.htm" target="_top">Hessian.cpp</a><br> </td><td> Hessian: Example and Test </td></tr><tr valign="top"><td>
<a href="hestimesdir.cpp.htm" target="_top">HesTimesDir.cpp</a><br> </td><td> Hessian Times Direction: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="I">I</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="include_deprecated.htm" target="_top">include_deprecated</a><br> </td><td> Deprecated Include Files </td></tr><tr valign="top"><td>
<a href="independent.htm" target="_top">Independent</a><br> </td><td> Declare Independent Variables and Start Recording </td></tr><tr valign="top"><td>
<a href="independent.cpp.htm" target="_top">Independent.cpp</a><br> </td><td> Independent and ADFun Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="install.htm" target="_top">Install</a><br> </td><td> CppAD Download, Test, and Installation Instructions </td></tr><tr valign="top"><td>
<a href="installunix.htm" target="_top">InstallUnix</a><br> </td><td> Unix Download, Test and Installation </td></tr><tr valign="top"><td>
<a href="installwindows.htm" target="_top">InstallWindows</a><br> </td><td> Windows Download and Test </td></tr><tr valign="top"><td>
<a href="integer.htm" target="_top">Integer</a><br> </td><td> Convert From AD to Integer </td></tr><tr valign="top"><td>
<a href="integer.cpp.htm" target="_top">Integer.cpp</a><br> </td><td> Convert From AD to Integer: Example and Test </td></tr><tr valign="top"><td>
<a href="interface2c.cpp.htm" target="_top">Interface2C.cpp</a><br> </td><td> Interfacing to C: Example and Test </td></tr><tr valign="top"><td>
<a href="interp_onetape.cpp.htm" target="_top">interp_onetape.cpp</a><br> </td><td> Interpolation With Out Retaping: Example and Test </td></tr><tr valign="top"><td>
<a href="interp_retape.cpp.htm" target="_top">interp_retape.cpp</a><br> </td><td> Interpolation With Retaping: Example and Test </td></tr><tr valign="top"><td>
<a href="introduction.htm" target="_top">Introduction</a><br> </td><td> An Introduction by Example to Algorithmic Differentiation </td></tr><tr valign="top"><td>

<b><big><a name="J">J</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="jacludet.cpp.htm" target="_top">JacLuDet.cpp</a><br> </td><td> Gradient of Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="jacminordet.cpp.htm" target="_top">JacMinorDet.cpp</a><br> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="jacobian.htm" target="_top">Jacobian</a><br> </td><td> Jacobian: Driver Routine </td></tr><tr valign="top"><td>
<a href="jacobian.cpp.htm" target="_top">Jacobian.cpp</a><br> </td><td> Jacobian: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="L">L</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="library.htm" target="_top">library</a><br> </td><td> The CppAD General Purpose Library </td></tr><tr valign="top"><td>
<a href="license.htm" target="_top">License</a><br> </td><td> Your License for the CppAD Software </td></tr><tr valign="top"><td>
<a href="listallexamples.htm" target="_top">ListAllExamples</a><br> </td><td> List of All the CppAD Examples </td></tr><tr valign="top"><td>
<a href="log.cpp.htm" target="_top">Log.cpp</a><br> </td><td> The AD log Function: Example and Test </td></tr><tr valign="top"><td>
<a href="log10.cpp.htm" target="_top">Log10.cpp</a><br> </td><td> The AD log10 Function: Example and Test </td></tr><tr valign="top"><td>
<a href="logforward.htm" target="_top">LogForward</a><br> </td><td> Logarithm Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="logreverse.htm" target="_top">LogReverse</a><br> </td><td> Logarithm Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="lu_factor.hpp.htm" target="_top">lu_factor.hpp</a><br> </td><td> Source: LuFactor </td></tr><tr valign="top"><td>
<a href="lu_invert.hpp.htm" target="_top">lu_invert.hpp</a><br> </td><td> Source: LuInvert </td></tr><tr valign="top"><td>
<a href="lu_solve.hpp.htm" target="_top">lu_solve.hpp</a><br> </td><td> Source: LuSolve </td></tr><tr valign="top"><td>
<a href="ludetandsolve.htm" target="_top">LuDetAndSolve</a><br> </td><td> Compute Determinants and Solve Equations by LU Factorization </td></tr><tr valign="top"><td>
<a href="lufactor.htm" target="_top">LuFactor</a><br> </td><td> LU Factorization of A Square Matrix </td></tr><tr valign="top"><td>
<a href="lufactor.cpp.htm" target="_top">LuFactor.cpp</a><br> </td><td> LuFactor: Example and Test </td></tr><tr valign="top"><td>
<a href="luinvert.htm" target="_top">LuInvert</a><br> </td><td> Invert an LU Factored Equation </td></tr><tr valign="top"><td>
<a href="luinvert.cpp.htm" target="_top">LuInvert.cpp</a><br> </td><td> LuInvert: Example and Test </td></tr><tr valign="top"><td>
<a href="luratio.htm" target="_top">LuRatio</a><br> </td><td> LU Factorization of A Square Matrix and Stability Calculation </td></tr><tr valign="top"><td>
<a href="luratio.cpp.htm" target="_top">LuRatio.cpp</a><br> </td><td> LuRatio: Example and Test </td></tr><tr valign="top"><td>
<a href="lusolve.htm" target="_top">LuSolve</a><br> </td><td> Compute Determinant and Solve Linear Equations </td></tr><tr valign="top"><td>
<a href="lusolve.cpp.htm" target="_top">LuSolve.cpp</a><br> </td><td> LuSolve With Complex Arguments: Example and Test </td></tr><tr valign="top"><td>
<a href="luvecad.htm" target="_top">LuVecAD</a><br> </td><td> Lu Factor and Solve with Recorded Pivoting </td></tr><tr valign="top"><td>
<a href="luvecadok.cpp.htm" target="_top">LuVecADOk.cpp</a><br> </td><td> Lu Factor and Solve With Recorded Pivoting: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="M">M</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="mathother.htm" target="_top">MathOther</a><br> </td><td> Other AD Math Functions </td></tr><tr valign="top"><td>
<a href="mul.cpp.htm" target="_top">Mul.cpp</a><br> </td><td> AD Binary Multiplication: Example and Test </td></tr><tr valign="top"><td>
<a href="mul_level.htm" target="_top">mul_level</a><br> </td><td> Using Multiple Levels of AD </td></tr><tr valign="top"><td>
<a href="mul_level.cpp.htm" target="_top">mul_level.cpp</a><br> </td><td> Multiple Tapes: Example and Test </td></tr><tr valign="top"><td>
<a href="mul_level_adolc.cpp.htm" target="_top">mul_level_adolc.cpp</a><br> </td><td> Using Adolc with Multiple Levels of Taping: Example and Test </td></tr><tr valign="top"><td>
<a href="muleq.cpp.htm" target="_top">MulEq.cpp</a><br> </td><td> AD Computed Assignment Multiplication: Example and Test </td></tr><tr valign="top"><td>
<a href="multi_newton.htm" target="_top">multi_newton</a><br> </td><td> Multi-Threaded Newton's Method Routine </td></tr><tr valign="top"><td>
<a href="multi_newton.cpp.htm" target="_top">multi_newton.cpp</a><br> </td><td> Multi-Threaded Newton's Method Main Program </td></tr><tr valign="top"><td>
<a href="multi_newton.hpp.htm" target="_top">multi_newton.hpp</a><br> </td><td> OpenMP Multi-Threading Newton's Method Source Code </td></tr><tr valign="top"><td>

<b><big><a name="N">N</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="nan.htm" target="_top">nan</a><br> </td><td> Obtain Nan and Determine if a Value is Nan </td></tr><tr valign="top"><td>
<a href="nan.cpp.htm" target="_top">nan.cpp</a><br> </td><td> nan: Example and Test </td></tr><tr valign="top"><td>
<a href="near_equal.cpp.htm" target="_top">Near_Equal.cpp</a><br> </td><td> NearEqual Function: Example and Test </td></tr><tr valign="top"><td>
<a href="nearequal.htm" target="_top">NearEqual</a><br> </td><td> Determine if Two Values Are Nearly Equal </td></tr><tr valign="top"><td>
<a href="nearequalext.htm" target="_top">NearEqualExt</a><br> </td><td> Compare AD and Base Objects for Nearly Equal </td></tr><tr valign="top"><td>
<a href="nearequalext.cpp.htm" target="_top">NearEqualExt.cpp</a><br> </td><td> Compare AD with Base Objects: Example and Test </td></tr><tr valign="top"><td>
<a href="not_complex_ad.cpp.htm" target="_top">not_complex_ad.cpp</a><br> </td><td> Not Complex Differentiable: Example and Test </td></tr><tr valign="top"><td>
<a href="numerictype.htm" target="_top">NumericType</a><br> </td><td> Definition of a Numeric Type </td></tr><tr valign="top"><td>
<a href="numerictype.cpp.htm" target="_top">NumericType.cpp</a><br> </td><td> The NumericType: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="O">O</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="ode_taylor.cpp.htm" target="_top">ode_taylor.cpp</a><br> </td><td> Taylor's Ode Solver: An Example and Test </td></tr><tr valign="top"><td>
<a href="ode_taylor_adolc.cpp.htm" target="_top">ode_taylor_adolc.cpp</a><br> </td><td> Using Adolc with Taylor's Ode Solver: An Example and Test </td></tr><tr valign="top"><td>
<a href="odeerrcontrol.htm" target="_top">OdeErrControl</a><br> </td><td> An Error Controller for ODE Solvers </td></tr><tr valign="top"><td>
<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl.cpp</a><br> </td><td> OdeErrControl: Example and Test </td></tr><tr valign="top"><td>
<a href="odeerrmaxabs.cpp.htm" target="_top">OdeErrMaxabs.cpp</a><br> </td><td> OdeErrControl: Example and Test Using Maxabs Argument </td></tr><tr valign="top"><td>
<a href="odegear.htm" target="_top">OdeGear</a><br> </td><td> An Arbitrary Order Gear Method </td></tr><tr valign="top"><td>
<a href="odegear.cpp.htm" target="_top">OdeGear.cpp</a><br> </td><td> OdeGear: Example and Test </td></tr><tr valign="top"><td>
<a href="odegearcontrol.htm" target="_top">OdeGearControl</a><br> </td><td> An Error Controller for Gear's Ode Solvers </td></tr><tr valign="top"><td>
<a href="odegearcontrol.cpp.htm" target="_top">OdeGearControl.cpp</a><br> </td><td> OdeGearControl: Example and Test </td></tr><tr valign="top"><td>
<a href="odestiff.cpp.htm" target="_top">OdeStiff.cpp</a><br> </td><td> A Stiff Ode: Example and Test </td></tr><tr valign="top"><td>
<a href="omp_max_thread.htm" target="_top">omp_max_thread</a><br> </td><td> OpenMP Maximum Thread Number </td></tr><tr valign="top"><td>
<a href="openmp_run.sh.htm" target="_top">openmp_run.sh</a><br> </td><td> Compile and Run the OpenMP Test </td></tr><tr valign="top"><td>
<a href="output.htm" target="_top">Output</a><br> </td><td> AD Output Stream Operator </td></tr><tr valign="top"><td>
<a href="output.cpp.htm" target="_top">Output.cpp</a><br> </td><td> AD Output Operator: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="P">P</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="parvar.htm" target="_top">ParVar</a><br> </td><td> Is an AD Object a Parameter or Variable </td></tr><tr valign="top"><td>
<a href="parvar.cpp.htm" target="_top">ParVar.cpp</a><br> </td><td> AD Parameter and Variable Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="poly.htm" target="_top">Poly</a><br> </td><td> Evaluate a Polynomial or its Derivative </td></tr><tr valign="top"><td>
<a href="poly.cpp.htm" target="_top">Poly.cpp</a><br> </td><td> Polynomial Evaluation: Example and Test </td></tr><tr valign="top"><td>
<a href="poly.hpp.htm" target="_top">poly.hpp</a><br> </td><td> Source: Poly </td></tr><tr valign="top"><td>
<a href="pow.htm" target="_top">pow</a><br> </td><td> The AD Power Function </td></tr><tr valign="top"><td>
<a href="pow.cpp.htm" target="_top">Pow.cpp</a><br> </td><td> The AD Power Function: Example and Test </td></tr><tr valign="top"><td>
<a href="pow_int.htm" target="_top">pow_int</a><br> </td><td> The Integer Power Function </td></tr><tr valign="top"><td>
<a href="pow_int.cpp.htm" target="_top">pow_int.cpp</a><br> </td><td> The Pow Integer Exponent: Example and Test </td></tr><tr valign="top"><td>
<a href="preprocessor.htm" target="_top">preprocessor</a><br> </td><td> Preprocessor Definitions Used by CppAD </td></tr><tr valign="top"><td>
<a href="printfor.htm" target="_top">PrintFor</a><br> </td><td> Printing AD Values During Forward Mode </td></tr><tr valign="top"><td>
<a href="printfor.cpp.htm" target="_top">PrintFor.cpp</a><br> </td><td> Printing During Forward Mode: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="R">R</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="reverse.htm" target="_top">Reverse</a><br> </td><td> Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_any.htm" target="_top">reverse_any</a><br> </td><td> Any Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_any.cpp.htm" target="_top">reverse_any.cpp</a><br> </td><td> Any Order Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="reverse_identity.htm" target="_top">reverse_identity</a><br> </td><td> An Important Reverse Mode Identity </td></tr><tr valign="top"><td>
<a href="reverse_one.htm" target="_top">reverse_one</a><br> </td><td> First Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_one.cpp.htm" target="_top">reverse_one.cpp</a><br> </td><td> First Order Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="reverse_two.htm" target="_top">reverse_two</a><br> </td><td> Second Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_two.cpp.htm" target="_top">reverse_two.cpp</a><br> </td><td> Second Order Reverse ModeExample and Test </td></tr><tr valign="top"><td>
<a href="reversetheory.htm" target="_top">ReverseTheory</a><br> </td><td> The Theory of Reverse Mode </td></tr><tr valign="top"><td>
<a href="revone.htm" target="_top">RevOne</a><br> </td><td> First Order Derivative: Driver Routine </td></tr><tr valign="top"><td>
<a href="revone.cpp.htm" target="_top">RevOne.cpp</a><br> </td><td> First Order Derivative Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="revsparsehes.htm" target="_top">RevSparseHes</a><br> </td><td> Hessian Sparsity Pattern: Reverse Mode </td></tr><tr valign="top"><td>
<a href="revsparsehes.cpp.htm" target="_top">RevSparseHes.cpp</a><br> </td><td> Reverse Mode Hessian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="revsparsejac.htm" target="_top">RevSparseJac</a><br> </td><td> Jacobian Sparsity Pattern: Reverse Mode </td></tr><tr valign="top"><td>
<a href="revsparsejac.cpp.htm" target="_top">RevSparseJac.cpp</a><br> </td><td> Reverse Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="revtwo.htm" target="_top">RevTwo</a><br> </td><td> Reverse Mode Second Partial Derivative Driver </td></tr><tr valign="top"><td>
<a href="revtwo.cpp.htm" target="_top">RevTwo.cpp</a><br> </td><td> Second Partials Reverse Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="rombergmul.htm" target="_top">RombergMul</a><br> </td><td> Multi-dimensional Romberg Integration </td></tr><tr valign="top"><td>
<a href="rombergmul.cpp.htm" target="_top">RombergMul.cpp</a><br> </td><td> One Dimensional Romberg Integration: Example and Test </td></tr><tr valign="top"><td>
<a href="rombergone.htm" target="_top">RombergOne</a><br> </td><td> One DimensionalRomberg Integration </td></tr><tr valign="top"><td>
<a href="rombergone.cpp.htm" target="_top">RombergOne.cpp</a><br> </td><td> One Dimensional Romberg Integration: Example and Test </td></tr><tr valign="top"><td>
<a href="rosen34.htm" target="_top">Rosen34</a><br> </td><td> A 3rd and 4th Order Rosenbrock ODE Solver </td></tr><tr valign="top"><td>
<a href="rosen34.cpp.htm" target="_top">Rosen34.cpp</a><br> </td><td> Rosen34: Example and Test </td></tr><tr valign="top"><td>
<a href="runge45.htm" target="_top">Runge45</a><br> </td><td> An Embedded 4th and 5th Order Runge-Kutta ODE Solver </td></tr><tr valign="top"><td>
<a href="runge45.cpp.htm" target="_top">Runge45.cpp</a><br> </td><td> Runge45: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="S">S</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="sacado_det_lu.cpp.htm" target="_top">sacado_det_lu.cpp</a><br> </td><td> Sacado Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="sacado_det_minor.cpp.htm" target="_top">sacado_det_minor.cpp</a><br> </td><td> Sacado Speed: Gradient of Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="sacado_poly.cpp.htm" target="_top">sacado_poly.cpp</a><br> </td><td> Sacado Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="seqproperty.htm" target="_top">SeqProperty</a><br> </td><td> ADFun Sequence Properties </td></tr><tr valign="top"><td>
<a href="seqproperty.cpp.htm" target="_top">SeqProperty.cpp</a><br> </td><td> ADFun Sequence Properties: Example and Test </td></tr><tr valign="top"><td>
<a href="simplevector.htm" target="_top">SimpleVector</a><br> </td><td> Definition of a Simple Vector </td></tr><tr valign="top"><td>
<a href="simplevector.cpp.htm" target="_top">SimpleVector.cpp</a><br> </td><td> Simple Vector Template Class: Example and Test </td></tr><tr valign="top"><td>
<a href="sin.cpp.htm" target="_top">Sin.cpp</a><br> </td><td> The AD sin Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sincosforward.htm" target="_top">SinCosForward</a><br> </td><td> Trigonometric and Hyperbolic Sine and Cosine Forward Theory </td></tr><tr valign="top"><td>
<a href="sincosreverse.htm" target="_top">SinCosReverse</a><br> </td><td> Trigonometric and Hyperbolic Sine and Cosine Reverse Theory </td></tr><tr valign="top"><td>
<a href="sinh.cpp.htm" target="_top">Sinh.cpp</a><br> </td><td> The AD sinh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="size_taylor.htm" target="_top">size_taylor</a><br> </td><td> Number Taylor Coefficients, Per Variable, Currently Stored </td></tr><tr valign="top"><td>
<a href="sparse.htm" target="_top">Sparse</a><br> </td><td> Calculating Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="speed.htm" target="_top">speed</a><br> </td><td> Speed Test Routines </td></tr><tr valign="top"><td>
<a href="speed_adolc.htm" target="_top">speed_adolc</a><br> </td><td> Speed Test Derivatives Using Adolc </td></tr><tr valign="top"><td>
<a href="speed_cppad.htm" target="_top">speed_cppad</a><br> </td><td> Speed Test Derivatives Using CppAD </td></tr><tr valign="top"><td>
<a href="speed_double.htm" target="_top">speed_double</a><br> </td><td> Speed Test Functions in Double </td></tr><tr valign="top"><td>
<a href="speed_example.cpp.htm" target="_top">speed_example.cpp</a><br> </td><td> Program That Runs the Speed Examples </td></tr><tr valign="top"><td>
<a href="speed_fadbad.htm" target="_top">speed_fadbad</a><br> </td><td> Speed Test Derivatives Using Fadbad </td></tr><tr valign="top"><td>
<a href="speed_main.htm" target="_top">speed_main</a><br> </td><td> Speed Testing Main Program </td></tr><tr valign="top"><td>
<a href="speed_sacado.htm" target="_top">speed_sacado</a><br> </td><td> Speed Test Derivatives Using Sacado </td></tr><tr valign="top"><td>
<a href="speed_test.htm" target="_top">speed_test</a><br> </td><td> Run One Speed Test and Return Results </td></tr><tr valign="top"><td>
<a href="speed_test.cpp.htm" target="_top">speed_test.cpp</a><br> </td><td> speed_test: Example and test </td></tr><tr valign="top"><td>
<a href="speed_utility.htm" target="_top">speed_utility</a><br> </td><td> Speed Testing Utilities </td></tr><tr valign="top"><td>
<a href="speedtest.htm" target="_top">SpeedTest</a><br> </td><td> Run One Speed Test and Print Results </td></tr><tr valign="top"><td>
<a href="speedtest.cpp.htm" target="_top">SpeedTest.cpp</a><br> </td><td> Example Use of SpeedTest </td></tr><tr valign="top"><td>
<a href="sqrt.cpp.htm" target="_top">Sqrt.cpp</a><br> </td><td> The AD sqrt Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sqrtforward.htm" target="_top">SqrtForward</a><br> </td><td> Square Root Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="sqrtreverse.htm" target="_top">SqrtReverse</a><br> </td><td> Square Root Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="stackmachine.cpp.htm" target="_top">StackMachine.cpp</a><br> </td><td> Example Differentiating a Stack Machine Interpreter </td></tr><tr valign="top"><td>
<a href="std_math_ad.htm" target="_top">std_math_ad</a><br> </td><td> AD Standard Math Unary Functions </td></tr><tr valign="top"><td>
<a href="std_math_unary.htm" target="_top">std_math_unary</a><br> </td><td> Float and Double Standard Math Unary Functions </td></tr><tr valign="top"><td>
<a href="sub.cpp.htm" target="_top">Sub.cpp</a><br> </td><td> AD Binary Subtraction: Example and Test </td></tr><tr valign="top"><td>
<a href="subeq.cpp.htm" target="_top">SubEq.cpp</a><br> </td><td> AD Computed Assignment Subtraction: Example and Test </td></tr><tr valign="top"><td>
<a href="subversion.htm" target="_top">subversion</a><br> </td><td> Using Subversion To Download Source Code </td></tr><tr valign="top"><td>
<a href="sum_i_inv.cpp.htm" target="_top">sum_i_inv.cpp</a><br> </td><td> Sum of 1/i Main Program </td></tr><tr valign="top"><td>

<b><big><a name="T">T</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="tan.cpp.htm" target="_top">Tan.cpp</a><br> </td><td> The AD tan Function: Example and Test </td></tr><tr valign="top"><td>
<a href="tapeindex.cpp.htm" target="_top">TapeIndex.cpp</a><br> </td><td> Taping Array Index Operation: Example and Test </td></tr><tr valign="top"><td>
<a href="test_vector.htm" target="_top">test_vector</a><br> </td><td> Choosing The Vector Testing Template Class </td></tr><tr valign="top"><td>
<a href="theory.htm" target="_top">Theory</a><br> </td><td> The Theory of Derivative Calculations </td></tr><tr valign="top"><td>
<a href="tracknewdel.htm" target="_top">TrackNewDel</a><br> </td><td> Routines That Track Use of New and Delete </td></tr><tr valign="top"><td>
<a href="tracknewdel.cpp.htm" target="_top">TrackNewDel.cpp</a><br> </td><td> Tracking Use of New and Delete: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="U">U</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="unaryminus.htm" target="_top">UnaryMinus</a><br> </td><td> AD Unary Minus Operator </td></tr><tr valign="top"><td>
<a href="unaryminus.cpp.htm" target="_top">UnaryMinus.cpp</a><br> </td><td> AD Unary Minus Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="unaryplus.htm" target="_top">UnaryPlus</a><br> </td><td> AD Unary Plus Operator </td></tr><tr valign="top"><td>
<a href="unaryplus.cpp.htm" target="_top">UnaryPlus.cpp</a><br> </td><td> AD Unary Plus Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="uniform_01.htm" target="_top">uniform_01</a><br> </td><td> Simulate a [0,1] Uniform Random Variate </td></tr><tr valign="top"><td>
<a href="uniform_01.hpp.htm" target="_top">uniform_01.hpp</a><br> </td><td> Source: uniform_01 </td></tr><tr valign="top"><td>

<b><big><a name="V">V</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="value.htm" target="_top">Value</a><br> </td><td> Convert From an AD Type to its Base Type </td></tr><tr valign="top"><td>
<a href="value.cpp.htm" target="_top">Value.cpp</a><br> </td><td> Convert From AD to its Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="var2par.htm" target="_top">Var2Par</a><br> </td><td> Convert an AD Variable to a Parameter </td></tr><tr valign="top"><td>
<a href="var2par.cpp.htm" target="_top">Var2Par.cpp</a><br> </td><td> Convert an AD Variable to a Parameter: Example and Test </td></tr><tr valign="top"><td>
<a href="vecad.htm" target="_top">VecAD</a><br> </td><td> AD Vectors that Record Index Operations </td></tr><tr valign="top"><td>
<a href="vecad.cpp.htm" target="_top">VecAD.cpp</a><br> </td><td> AD Vectors that Record Index Operations: Example and Test </td></tr><tr valign="top"><td>
<a href="vectorbool.cpp.htm" target="_top">vectorBool.cpp</a><br> </td><td> CppAD::vectorBool Class: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="W">W</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="whats_new.htm" target="_top">whats_new</a><br> </td><td> Changes and Additions to CppAD </td></tr><tr valign="top"><td>
<a href="whats_new_03.htm" target="_top">whats_new_03</a><br> </td><td> Changes and Additions to CppAD During 2003 </td></tr><tr valign="top"><td>
<a href="whats_new_04.htm" target="_top">whats_new_04</a><br> </td><td> Changes and Additions to CppAD During 2004 </td></tr><tr valign="top"><td>
<a href="whats_new_05.htm" target="_top">whats_new_05</a><br> </td><td> Changes and Additions to CppAD During 2005 </td></tr><tr valign="top"><td>
<a href="whats_new_06.htm" target="_top">whats_new_06</a><br> </td><td> Changes and Additions to CppAD During 2006 </td></tr><tr valign="top"><td>
<a href="whats_new_07.htm" target="_top">whats_new_07</a><br> </td><td> Changes and Additions to CppAD During 2007 </td></tr><tr valign="top"><td>
<a href="wishlist.htm" target="_top">WishList</a><br> </td><td> The CppAD Wish List </td></tr><tr valign="top"><td>
</td></tr></table>

</body>
</html>
