<html><head>
<title>Reverse Mode Hessian Sparsity: Example and Test</title>
<meta name="description" id="description" content="Reverse Mode Hessian Sparsity: Example and Test">
<meta name="keywords" id="keywords" content=" Revsparsehes example sparsity Hessian test ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_revsparsehes.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Sparse</option>
<option>RevSparseHes</option>
<option>RevSparseHes.cpp</option>
</select>
</td>
<td><a href="revsparsehes.htm" target="_top">Prev</a>
</td><td><a href="drivers.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Sparse-&gt;</option>
<option>ForSparseJac</option>
<option>RevSparseJac</option>
<option>RevSparseHes</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>RevSparseHes-&gt;</option>
<option>RevSparseHes.cpp</option>
</select>
</td>
<td>RevSparseHes.cpp</td>
<td>Headings</td>
</tr></table><br>



<center><b><big><big>Reverse Mode Hessian Sparsity: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;<br>
namespace&nbsp;{&nbsp;//&nbsp;-------------------------------------------------------------<br>
//&nbsp;define&nbsp;the&nbsp;template&nbsp;function&nbsp;RevSparseHesCases&lt;Vector&gt;&nbsp;in&nbsp;empty&nbsp;namespace<br>
template&nbsp;&lt;typename&nbsp;Vector&gt;&nbsp;//&nbsp;vector&nbsp;class,&nbsp;elements&nbsp;of&nbsp;type&nbsp;bool<br>
bool&nbsp;RevSparseHesCases(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::AD;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;domain&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;3;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;X(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[0]&nbsp;=&nbsp;0.;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[1]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[2]&nbsp;=&nbsp;2.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;independent&nbsp;variables&nbsp;and&nbsp;start&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::Independent(X);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;range&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;m&nbsp;=&nbsp;2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Y(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;sin(&nbsp;X[2]&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[1]&nbsp;=&nbsp;X[0]&nbsp;*&nbsp;X[1];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;f:&nbsp;X&nbsp;-&gt;&nbsp;Y&nbsp;and&nbsp;stop&nbsp;tape&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;double&gt;&nbsp;f(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;sparsity&nbsp;pattern&nbsp;for&nbsp;the&nbsp;identity&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector&nbsp;r(n&nbsp;*&nbsp;n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i,&nbsp;j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r[&nbsp;i&nbsp;*&nbsp;n&nbsp;+&nbsp;j&nbsp;]&nbsp;=&nbsp;false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r[&nbsp;i&nbsp;*&nbsp;n&nbsp;+&nbsp;i&nbsp;]&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;sparsity&nbsp;pattern&nbsp;for&nbsp;J(x)&nbsp;=&nbsp;F^{(1)}&nbsp;(x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.ForSparseJac(n,&nbsp;r);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;sparsity&nbsp;pattern&nbsp;for&nbsp;H(x)&nbsp;=&nbsp;F_0^{(2)}&nbsp;(x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector&nbsp;s(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;m;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[i]&nbsp;=&nbsp;false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[0]&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector&nbsp;h(n&nbsp;*&nbsp;n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.RevSparseHes(n,&nbsp;s);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;values<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;0&nbsp;*&nbsp;n&nbsp;+&nbsp;0&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[0],&nbsp;X[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;0&nbsp;*&nbsp;n&nbsp;+&nbsp;1&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[0],&nbsp;X[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;0&nbsp;*&nbsp;n&nbsp;+&nbsp;2&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[0],&nbsp;X[2]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;1&nbsp;*&nbsp;n&nbsp;+&nbsp;0&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[1],&nbsp;X[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;1&nbsp;*&nbsp;n&nbsp;+&nbsp;1&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[1],&nbsp;X[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;1&nbsp;*&nbsp;n&nbsp;+&nbsp;2&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[1],&nbsp;X[2]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;2&nbsp;*&nbsp;n&nbsp;+&nbsp;0&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[2],&nbsp;X[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;2&nbsp;*&nbsp;n&nbsp;+&nbsp;1&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[2],&nbsp;X[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;2&nbsp;*&nbsp;n&nbsp;+&nbsp;2&nbsp;]&nbsp;==&nbsp;true);&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[2],&nbsp;X[2]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;sparsity&nbsp;pattern&nbsp;for&nbsp;H(x)&nbsp;=&nbsp;F_1^{(2)}&nbsp;(x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;m;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[i]&nbsp;=&nbsp;false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[1]&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.RevSparseHes(n,&nbsp;s);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;values<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;0&nbsp;*&nbsp;n&nbsp;+&nbsp;0&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[0],&nbsp;X[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;0&nbsp;*&nbsp;n&nbsp;+&nbsp;1&nbsp;]&nbsp;==&nbsp;true);&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[0],&nbsp;X[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;0&nbsp;*&nbsp;n&nbsp;+&nbsp;2&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[0],&nbsp;X[2]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;1&nbsp;*&nbsp;n&nbsp;+&nbsp;0&nbsp;]&nbsp;==&nbsp;true);&nbsp;&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[1],&nbsp;X[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;1&nbsp;*&nbsp;n&nbsp;+&nbsp;1&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[1],&nbsp;X[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;1&nbsp;*&nbsp;n&nbsp;+&nbsp;2&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[1],&nbsp;X[2]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;2&nbsp;*&nbsp;n&nbsp;+&nbsp;0&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[2],&nbsp;X[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;2&nbsp;*&nbsp;n&nbsp;+&nbsp;1&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[2],&nbsp;X[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(h[&nbsp;2&nbsp;*&nbsp;n&nbsp;+&nbsp;2&nbsp;]&nbsp;==&nbsp;false);&nbsp;&nbsp;//&nbsp;second&nbsp;partial&nbsp;w.r.t&nbsp;X[2],&nbsp;X[2]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
}&nbsp;//&nbsp;End&nbsp;empty&nbsp;namespace<br>
<br>
#&nbsp;include&nbsp;&lt;vector&gt;<br>
#&nbsp;include&nbsp;&lt;valarray&gt;<br>
bool&nbsp;RevSparseHes(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Run&nbsp;with&nbsp;Vector&nbsp;equal&nbsp;to&nbsp;four&nbsp;different&nbsp;cases<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;all&nbsp;of&nbsp;which&nbsp;are&nbsp;Simple&nbsp;Vectors&nbsp;with&nbsp;elements&nbsp;of&nbsp;type&nbsp;bool.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;RevSparseHesCases&lt;&nbsp;CppAD::vector&nbsp;&nbsp;&lt;bool&gt;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;RevSparseHesCases&lt;&nbsp;CppAD::vectorBool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;RevSparseHesCases&lt;&nbsp;std::vector&nbsp;&nbsp;&nbsp;&nbsp;&lt;bool&gt;&nbsp;&gt;();&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;RevSparseHesCases&lt;&nbsp;std::valarray&nbsp;&nbsp;&lt;bool&gt;&nbsp;&gt;();&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
<br>
<br>
</span></font></code>
<hr>Input File: example/rev_sparse_hes.cpp

</body>
</html>
