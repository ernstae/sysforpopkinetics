<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>A Simple Parallel Loop</title>
<meta name="description" id="description" content="A Simple Parallel Loop"/>
<meta name="keywords" id="keywords" content=" Openmp example A.1.1c "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_example_a11c.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>omp_max_thread</option>
<option>openmp_run.sh</option>
<option>example_a11c.cpp</option>
</select>
</td>
<td><a href="openmp_run.sh.xml" target="_top">Prev</a>
</td><td><a href="multi_newton.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>omp_max_thread-&gt;</option>
<option>openmp_run.sh</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>openmp_run.sh-&gt;</option>
<option>example_a11c.cpp</option>
<option>multi_newton.cpp</option>
<option>sum_i_inv.cpp</option>
</select>
</td>
<td>example_a11c.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>n_thread</option>
<option>repeat</option>
<option>size</option>
<option>Example Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>A Simple Parallel Loop</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>
<code><font color="blue"><span style='white-space: nowrap'>example_a11c&#xA0;</span></font></code><i><span style='white-space: nowrap'>n_thread</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>repeat</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>size</span></i>

<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Runs a timing test of Example A.1.1.1c of the OpenMP 2.5 standard document.

<br/>
<br/>
<b><big><a name="n_thread" id="n_thread">n_thread</a></big></b>
<br/>
If the argument <i>n_thread</i> is equal to <code><font color="blue">automatic</font></code>, 
dynamic thread adjustment is used.
Otherwise, <i>n_thread</i> must be a positive number
specifying the number of OpenMP threads to use.

<br/>
<br/>
<b><big><a name="repeat" id="repeat">repeat</a></big></b>
<br/>
If the argument <i>repeat</i> is equal to <code><font color="blue">automatic</font></code>,
the number of times to repeat the calculation of the number of zeros
in total interval is automatically determined.
In this case, the rate of execution of the total solution is reported.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the argument <i>repeat</i> is not equal to <i>automatic</i>,
it must be a positive integer.
In this case <i>repeat</i> determination of the number of times 
the calculation of the zeros in the total interval is repeated.
The rate of execution is not reported (it is assumed that the
program execution time is being calculated some other way).

<br/>
<br/>
<b><big><a name="size" id="size">size</a></big></b>
<br/>
The argument <i>size</i> is the length of the arrays in the example code.

<br/>
<br/>
<b><big><a name="Example Source" id="Example Source">Example Source</a></big></b>


<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;ifdef&#xA0;_OPENMP<br/>
#&#xA0;include&#xA0;&lt;omp.h&gt;<br/>
#&#xA0;endif<br/>
<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
#&#xA0;include&#xA0;&lt;cstring&gt;<br/>
#&#xA0;include&#xA0;&lt;cstdlib&gt;<br/>
<br/>
//&#xA0;see&#xA0;http://www.coin-or.org/CppAD/Doc/cppad_vector.htm<br/>
#&#xA0;include&#xA0;&lt;cppad/vector.hpp&gt;<br/>
<br/>
//&#xA0;see&#xA0;http://www.coin-or.org/CppAD/Doc/speed_test.htm<br/>
#&#xA0;include&#xA0;&lt;cppad/speed_test.hpp&gt;<br/>
<br/>
//&#xA0;Beginning&#xA0;of&#xA0;Example&#xA0;A.1.1.1c&#xA0;of&#xA0;OpenMP&#xA0;2.5&#xA0;standard&#xA0;document&#xA0;---------<br/>
void&#xA0;a1(int&#xA0;n,&#xA0;float&#xA0;*a,&#xA0;float&#xA0;*b)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;i;<br/>
#&#xA0;ifdef&#xA0;_OPENMP<br/>
#&#xA0;pragma&#xA0;omp&#xA0;parallel&#xA0;for<br/>
#&#xA0;endif<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;1;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)&#xA0;/*&#xA0;i&#xA0;is&#xA0;private&#xA0;by&#xA0;default&#xA0;*/<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;b[i]&#xA0;=&#xA0;(a[i]&#xA0;+&#xA0;a[i-1])&#xA0;/&#xA0;2.0;<br/>
}<br/>
//&#xA0;End&#xA0;of&#xA0;Example&#xA0;A.1.1.1c&#xA0;of&#xA0;OpenMP&#xA0;2.5&#xA0;standard&#xA0;document&#xA0;---------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
//&#xA0;routine&#xA0;that&#xA0;is&#xA0;called&#xA0;to&#xA0;repeat&#xA0;the&#xA0;example&#xA0;a&#xA0;number&#xA0;of&#xA0;times<br/>
void&#xA0;test(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;setup<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;float&#xA0;*a&#xA0;=&#xA0;new&#xA0;float[size];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;float&#xA0;*b&#xA0;=&#xA0;new&#xA0;float[size];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i]&#xA0;=&#xA0;float(i);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;n&#xA0;=&#xA0;int(size);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;run&#xA0;test<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;repeat;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a1(n,&#xA0;a,&#xA0;b);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tear&#xA0;down<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;a;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;b;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;<br/>
}<br/>
<br/>
//&#xA0;main&#xA0;program<br/>
int&#xA0;main(int&#xA0;argc,&#xA0;char&#xA0;*argv[])<br/>
{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::cout;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;std::endl;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;get&#xA0;command&#xA0;line&#xA0;arguments&#xA0;-----------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;*usage&#xA0;=&#xA0;&quot;example_a11c&#xA0;n_thread&#xA0;repeat&#xA0;size&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;argc&#xA0;!=&#xA0;4&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;std::cerr&#xA0;&lt;&lt;&#xA0;usage&#xA0;&lt;&lt;&#xA0;endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;exit(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;argv++;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;n_thread&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;n_thread;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;std::strcmp(*argv,&#xA0;&quot;automatic&quot;)&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n_thread&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;n_thread&#xA0;=&#xA0;std::atoi(*argv);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;argv++;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;repeat&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;repeat;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;std::strcmp(*argv,&#xA0;&quot;automatic&quot;)&#xA0;==&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;repeat&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;std::atoi(*argv)&#xA0;&gt;&#xA0;0&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;repeat&#xA0;=&#xA0;std::atoi(*argv);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;argv++;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;size&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;std::atoi(*argv)&#xA0;&gt;&#xA0;1&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;size&#xA0;=&#xA0;std::atoi(*argv++);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;---------------------------------------------------------------<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;minimum&#xA0;time&#xA0;for&#xA0;test&#xA0;(repeat&#xA0;until&#xA0;this&#xA0;much&#xA0;time)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;time_min&#xA0;=&#xA0;1.;<br/>
#&#xA0;ifdef&#xA0;_OPENMP<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;n_thread&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;omp_set_dynamic(0);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;off&#xA0;dynamic&#xA0;thread&#xA0;adjust<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;omp_set_num_threads(n_thread);&#xA0;//&#xA0;set&#xA0;the&#xA0;number&#xA0;of&#xA0;threads&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;now&#xA0;determine&#xA0;the&#xA0;maximum&#xA0;number&#xA0;of&#xA0;threads<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n_thread&#xA0;=&#xA0;omp_get_max_threads();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;n_thread&#xA0;&gt;&#xA0;0&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;inform&#xA0;the&#xA0;user&#xA0;of&#xA0;the&#xA0;maximum&#xA0;number&#xA0;of&#xA0;threads<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;OpenMP:&#xA0;version&#xA0;=&#xA0;&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;_OPENMP;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;,&#xA0;max&#xA0;number&#xA0;of&#xA0;threads&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;n_thread&#xA0;&lt;&lt;&#xA0;endl;<br/>
#&#xA0;else<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;_OPENMP&#xA0;is&#xA0;not&#xA0;defined,&#xA0;&quot;;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;running&#xA0;in&#xA0;single&#xA0;tread&#xA0;mode&quot;&#xA0;&lt;&lt;&#xA0;endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n_thread&#xA0;=&#xA0;1;<br/>
#&#xA0;endif<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Correctness&#xA0;check&#xA0;(store&#xA0;result&#xA0;in&#xA0;ok)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;float&#xA0;*a&#xA0;=&#xA0;new&#xA0;float[size];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;float&#xA0;*b&#xA0;=&#xA0;new&#xA0;float[size];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i]&#xA0;=&#xA0;float(i);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;n&#xA0;=&#xA0;size;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a1(n,&#xA0;a,&#xA0;b);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;1;&#xA0;i&#xA0;&lt;&#xA0;size&#xA0;;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;std::fabs(&#xA0;2.&#xA0;*&#xA0;b[i]&#xA0;-&#xA0;a[i]&#xA0;-&#xA0;a[i-1]&#xA0;)&#xA0;&lt;=&#xA0;1e-6;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;a;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;b;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;repeat&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;user&#xA0;specified&#xA0;the&#xA0;number&#xA0;of&#xA0;times&#xA0;to&#xA0;repeat&#xA0;the&#xA0;test<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;test(size,&#xA0;repeat);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;automatic&#xA0;determination&#xA0;of&#xA0;number&#xA0;of&#xA0;times&#xA0;to&#xA0;repeat&#xA0;test<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;speed&#xA0;test&#xA0;uses&#xA0;a&#xA0;SimpleVector&#xA0;with&#xA0;size_t&#xA0;elements<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;size_t&gt;&#xA0;size_vec(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_vec[0]&#xA0;=&#xA0;size;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;size_t&gt;&#xA0;rate_vec&#xA0;=<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::speed_test(test,&#xA0;size_vec,&#xA0;time_min);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;report&#xA0;results<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;size&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;size_vec[0]&#xA0;&lt;&lt;&#xA0;endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;repeats&#xA0;per&#xA0;sec&#xA0;&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;rate_vec[0]&#xA0;&lt;&lt;&#xA0;endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;ok&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;Correctness&#xA0;Test&#xA0;Passed&quot;&#xA0;&lt;&lt;&#xA0;endl;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;cout&#xA0;&lt;&lt;&#xA0;&quot;Correctness&#xA0;Test&#xA0;Failed&quot;&#xA0;&lt;&lt;&#xA0;endl;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;static_cast&lt;int&gt;(&#xA0;!&#xA0;ok&#xA0;);<br/>
}<br/>
</span>
</font></code>

<hr/>Input File: openmp/example_a11c.cpp

</body>
</html>
