<html><head>
<title>LuRatio: Example and Test</title>
<meta name="description" id="description" content="LuRatio: Example and Test">
<meta name="keywords" id="keywords" content=" example Luratio test ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_luratio.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuRatio</option>
<option>LuRatio.cpp</option>
</select>
</td>
<td><a href="luratio.htm" target="_top">Prev</a>
</td><td><a href="std_math_unary.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuRatio-&gt;</option>
<option>LuRatio.cpp</option>
</select>
</td>
<td>LuRatio.cpp</td>
<td>Headings</td>
</tr></table><br>



<center><b><big><big>LuRatio: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
#&nbsp;include&nbsp;&lt;cstdlib&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;for&nbsp;rand&nbsp;function<br>
#&nbsp;include&nbsp;&lt;cassert&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;<br>
<br>
namespace&nbsp;{&nbsp;//&nbsp;Begin&nbsp;empty&nbsp;namespace<br>
<br>
CppAD::ADFun&lt;double&gt;&nbsp;*NewFactor(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;&amp;x&nbsp;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ok&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;size_t&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ip&nbsp;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;size_t&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;jp&nbsp;)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::AD;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::ADFun;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;i,&nbsp;j,&nbsp;k;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;values&nbsp;for&nbsp;independent&nbsp;and&nbsp;dependent&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Y(n*n+1),&nbsp;X(n*n);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;values&nbsp;for&nbsp;the&nbsp;LU&nbsp;factor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;LU(n*n);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;record&nbsp;the&nbsp;LU&nbsp;factorization&nbsp;corresponding&nbsp;to&nbsp;this&nbsp;value&nbsp;of&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;Ratio;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(k&nbsp;=&nbsp;0;&nbsp;k&nbsp;&lt;&nbsp;n*n;&nbsp;k++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[k]&nbsp;=&nbsp;x[k];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(X);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(k&nbsp;=&nbsp;0;&nbsp;k&nbsp;&lt;&nbsp;n*n;&nbsp;k++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LU[k]&nbsp;=&nbsp;X[k];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::LuRatio(ip,&nbsp;jp,&nbsp;LU,&nbsp;Ratio);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(k&nbsp;=&nbsp;0;&nbsp;k&nbsp;&lt;&nbsp;n*n;&nbsp;k++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[k]&nbsp;=&nbsp;LU[k];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[n*n]&nbsp;=&nbsp;Ratio;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;a&nbsp;function&nbsp;pointer&nbsp;so&nbsp;can&nbsp;return&nbsp;ADFun&nbsp;object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;double&gt;&nbsp;*FunPtr&nbsp;=&nbsp;new&nbsp;ADFun&lt;double&gt;(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;value&nbsp;of&nbsp;ratio&nbsp;during&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(Ratio&nbsp;==&nbsp;1.);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;that&nbsp;ip&nbsp;and&nbsp;jp&nbsp;are&nbsp;permutations&nbsp;of&nbsp;the&nbsp;indices&nbsp;0,&nbsp;...&nbsp;,&nbsp;n-1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(ip[i]&nbsp;&lt;&nbsp;n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(jp[i]&nbsp;&lt;&nbsp;n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;i&nbsp;!=&nbsp;j&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(ip[i]&nbsp;!=&nbsp;ip[j]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(jp[i]&nbsp;!=&nbsp;jp[j]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;FunPtr;&nbsp;<br>
}<br>
bool&nbsp;CheckLuFactor(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;&amp;x&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;&amp;y&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CPPAD_TEST_VECTOR&lt;size_t&gt;&nbsp;&amp;ip&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CPPAD_TEST_VECTOR&lt;size_t&gt;&nbsp;&amp;jp&nbsp;)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;=&nbsp;true;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;sum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;element&nbsp;of&nbsp;L&nbsp;*&nbsp;U<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;pij;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;element&nbsp;of&nbsp;permuted&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;i,&nbsp;j,&nbsp;k;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;temporary&nbsp;indices<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;L&nbsp;and&nbsp;U&nbsp;factors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;&nbsp;L(n*n),&nbsp;U(n*n);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Extract&nbsp;L&nbsp;from&nbsp;LU&nbsp;factorization<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;elements&nbsp;along&nbsp;and&nbsp;below&nbsp;the&nbsp;diagonal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;=&nbsp;i;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L[i&nbsp;*&nbsp;n&nbsp;+&nbsp;j]&nbsp;=&nbsp;y[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[j]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;elements&nbsp;above&nbsp;the&nbsp;diagonal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;i+1;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L[i&nbsp;*&nbsp;n&nbsp;+&nbsp;j]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Extract&nbsp;U&nbsp;from&nbsp;LU&nbsp;factorization<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;elements&nbsp;below&nbsp;the&nbsp;diagonal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;i;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U[i&nbsp;*&nbsp;n&nbsp;+&nbsp;j]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;elements&nbsp;along&nbsp;the&nbsp;diagonal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U[i&nbsp;*&nbsp;n&nbsp;+&nbsp;i]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;elements&nbsp;above&nbsp;the&nbsp;diagonal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;i+1;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U[i&nbsp;*&nbsp;n&nbsp;+&nbsp;j]&nbsp;=&nbsp;y[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[j]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Compute&nbsp;L&nbsp;*&nbsp;U&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;element&nbsp;(i,j)&nbsp;entry&nbsp;in&nbsp;L&nbsp;*&nbsp;U<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(k&nbsp;=&nbsp;0;&nbsp;k&nbsp;&lt;&nbsp;n;&nbsp;k++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum&nbsp;+=&nbsp;L[i&nbsp;*&nbsp;n&nbsp;+&nbsp;k]&nbsp;*&nbsp;U[k&nbsp;*&nbsp;n&nbsp;+&nbsp;j];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;element&nbsp;(i,j)&nbsp;in&nbsp;permuted&nbsp;version&nbsp;of&nbsp;A<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pij&nbsp;&nbsp;=&nbsp;x[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[j]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&amp;=&nbsp;CppAD::NearEqual(pij,&nbsp;sum,&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
<br>
}&nbsp;//&nbsp;end&nbsp;Empty&nbsp;namespace<br>
<br>
bool&nbsp;LuRatio(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;&nbsp;ok&nbsp;=&nbsp;true;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;n&nbsp;=&nbsp;2;&nbsp;//&nbsp;number&nbsp;rows&nbsp;in&nbsp;A&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;ratio;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;values&nbsp;for&nbsp;independent&nbsp;and&nbsp;dependent&nbsp;variables<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;&nbsp;x(n*n),&nbsp;y(n*n+1);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pivot&nbsp;vectors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;size_t&gt;&nbsp;ip(n),&nbsp;jp(n);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;set&nbsp;x&nbsp;equal&nbsp;to&nbsp;the&nbsp;identity&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;=&nbsp;1.;&nbsp;x[1]&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[2]&nbsp;=&nbsp;0.;&nbsp;x[3]&nbsp;=&nbsp;1.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;a&nbsp;fnction&nbsp;object&nbsp;corresponding&nbsp;to&nbsp;this&nbsp;value&nbsp;of&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;double&gt;&nbsp;*FunPtr&nbsp;=&nbsp;NewFactor(n,&nbsp;x,&nbsp;ok,&nbsp;ip,&nbsp;jp);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;function&nbsp;object&nbsp;to&nbsp;factor&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;FunPtr-&gt;Forward(0,&nbsp;x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio&nbsp;=&nbsp;y[n*n];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;(ratio&nbsp;==&nbsp;1.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;CheckLuFactor(n,&nbsp;x,&nbsp;y,&nbsp;ip,&nbsp;jp);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;set&nbsp;x&nbsp;so&nbsp;that&nbsp;the&nbsp;pivot&nbsp;ratio&nbsp;will&nbsp;be&nbsp;infinite<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;=&nbsp;0.&nbsp;;&nbsp;x[1]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[2]&nbsp;=&nbsp;1.&nbsp;;&nbsp;x[3]&nbsp;=&nbsp;0.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;try&nbsp;to&nbsp;use&nbsp;old&nbsp;function&nbsp;pointer&nbsp;to&nbsp;factor&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;FunPtr-&gt;Forward(0,&nbsp;x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio&nbsp;=&nbsp;y[n*n];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;to&nbsp;see&nbsp;if&nbsp;we&nbsp;need&nbsp;to&nbsp;refactor&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(ratio&nbsp;&gt;&nbsp;10.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;ratio&nbsp;&gt;&nbsp;10.&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;FunPtr;&nbsp;//&nbsp;to&nbsp;avoid&nbsp;a&nbsp;memory&nbsp;leak&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FunPtr&nbsp;=&nbsp;NewFactor(n,&nbsp;x,&nbsp;ok,&nbsp;ip,&nbsp;jp);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;now&nbsp;we&nbsp;can&nbsp;use&nbsp;the&nbsp;function&nbsp;object&nbsp;to&nbsp;factor&nbsp;matrix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;FunPtr-&gt;Forward(0,&nbsp;x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio&nbsp;=&nbsp;y[n*n];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;(ratio&nbsp;==&nbsp;1.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;CheckLuFactor(n,&nbsp;x,&nbsp;y,&nbsp;ip,&nbsp;jp);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;FunPtr;&nbsp;&nbsp;//&nbsp;avoid&nbsp;memory&nbsp;leak<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
</span></font></code>
<hr>Input File: example/lu_ratio.cpp

</body>
</html>
