<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>LuSolve With Complex Arguments: Example and Test</title>
<meta name="description" id="description" content="LuSolve With Complex Arguments: Example and Test"/>
<meta name="keywords" id="keywords" content=" complex Lusolve example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_lusolve.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuDetAndSolve</option>
<option>LuSolve</option>
<option>LuSolve.cpp</option>
</select>
</td>
<td><a href="lusolve.xml" target="_top">Prev</a>
</td><td><a href="lu_solve.hpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>LuDetAndSolve-&gt;</option>
<option>LuSolve</option>
<option>LuFactor</option>
<option>LuInvert</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuSolve-&gt;</option>
<option>LuSolve.cpp</option>
<option>lu_solve.hpp</option>
</select>
</td>
<td>LuSolve.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>LuSolve With Complex Arguments: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/lu_solve.hpp&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;for&#xA0;CppAD::LuSolve<br/>
#&#xA0;include&#xA0;&lt;cppad/near_equal.hpp&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;for&#xA0;CppAD::NearEqual<br/>
#&#xA0;include&#xA0;&lt;cppad/vector.hpp&gt;&#xA0;&#xA0;//&#xA0;for&#xA0;CppAD::vector<br/>
#&#xA0;include&#xA0;&lt;complex&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;for&#xA0;std::complex<br/>
<br/>
typedef&#xA0;std::complex&lt;double&gt;&#xA0;Complex;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;define&#xA0;the&#xA0;Complex&#xA0;type<br/>
bool&#xA0;LuSolve(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;n&#xA0;=&#xA0;3;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;rows&#xA0;in&#xA0;A&#xA0;and&#xA0;B<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;m&#xA0;=&#xA0;2;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;columns&#xA0;in&#xA0;B,&#xA0;X&#xA0;and&#xA0;S<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;A&#xA0;is&#xA0;an&#xA0;n&#xA0;by&#xA0;n&#xA0;matrix,&#xA0;B,&#xA0;X,&#xA0;and&#xA0;S&#xA0;are&#xA0;n&#xA0;by&#xA0;m&#xA0;matrices<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;Complex&gt;&#xA0;A(n&#xA0;*&#xA0;n),&#xA0;B(n&#xA0;*&#xA0;m),&#xA0;X(n&#xA0;*&#xA0;m)&#xA0;,&#xA0;S(n&#xA0;*&#xA0;m);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Complex&#xA0;&#xA0;logdet;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;log&#xA0;of&#xA0;determinant&#xA0;of&#xA0;A<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;zero&#xA0;if&#xA0;A&#xA0;is&#xA0;singular<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Complex&#xA0;&#xA0;det;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;determinant&#xA0;of&#xA0;A<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;i,&#xA0;j,&#xA0;k;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;some&#xA0;temporary&#xA0;indices<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;set&#xA0;A&#xA0;equal&#xA0;to&#xA0;the&#xA0;n&#xA0;by&#xA0;n&#xA0;Hilbert&#xA0;Matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;=&#xA0;1.&#xA0;/&#xA0;(double)&#xA0;(i&#xA0;+&#xA0;j&#xA0;+&#xA0;1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;set&#xA0;S&#xA0;to&#xA0;the&#xA0;solution&#xA0;of&#xA0;the&#xA0;equation&#xA0;we&#xA0;will&#xA0;solve<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;S[&#xA0;j&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;=&#xA0;Complex(j,&#xA0;j&#xA0;+&#xA0;k);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;set&#xA0;B&#xA0;=&#xA0;A&#xA0;*&#xA0;S&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;ik;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Complex&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;A[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;S[j&#xA0;*&#xA0;m&#xA0;+&#xA0;k];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[i&#xA0;*&#xA0;m&#xA0;+&#xA0;k]&#xA0;=&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;solve&#xA0;the&#xA0;equation&#xA0;A&#xA0;*&#xA0;X&#xA0;=&#xA0;B&#xA0;and&#xA0;compute&#xA0;determinant&#xA0;of&#xA0;A<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet&#xA0;=&#xA0;CppAD::LuSolve(n,&#xA0;m,&#xA0;A,&#xA0;B,&#xA0;X,&#xA0;logdet);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;det&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;Complex(&#xA0;signdet&#xA0;)&#xA0;*&#xA0;exp(&#xA0;logdet&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;cond&#xA0;&#xA0;=&#xA0;4.62963e-4;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;condition&#xA0;number&#xA0;of&#xA0;A&#xA0;when&#xA0;n&#xA0;=&#xA0;3<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;determinant&#xA0;=&#xA0;1.&#xA0;/&#xA0;2160.;&#xA0;//&#xA0;determinant&#xA0;of&#xA0;A&#xA0;when&#xA0;n&#xA0;=&#xA0;3<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;delta&#xA0;=&#xA0;1e-14&#xA0;/&#xA0;cond;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;accuracy&#xA0;expected&#xA0;in&#xA0;X<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(det,&#xA0;determinant,&#xA0;delta,&#xA0;delta);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(ik&#xA0;=&#xA0;0;&#xA0;ik&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;m;&#xA0;ik++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(X[ik],&#xA0;S[ik],&#xA0;delta,&#xA0;delta);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: example/lu_solve.cpp

</body>
</html>
