<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Interpolation With Out Retaping: Example and Test</title>
<meta name="description" id="description" content="Interpolation With Out Retaping: Example and Test"/>
<meta name="keywords" id="keywords" content=" interpolate example test tape retape "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_interp_onetape.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>Discrete</option>
<option>interp_onetape.cpp</option>
</select>
</td>
<td><a href="tapeindex.cpp.xml" target="_top">Prev</a>
</td><td><a href="interp_retape.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Discrete-&gt;</option>
<option>TapeIndex.cpp</option>
<option>interp_onetape.cpp</option>
<option>interp_retape.cpp</option>
</select>
</td>
<td>interp_onetape.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Interpolation With Out Retaping: Example and Test</big></big></b></center>
<br/>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br/>
<a href="interp_retape.cpp.xml" target="_top"><span style='white-space: nowrap'>interp_retape.cpp</span></a>

<code><span style='white-space: nowrap'><br/>
<br/>
</span></code><code><font color="blue"><span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cassert&gt;<br/>
#&#xA0;include&#xA0;&lt;cmath&gt;<br/>
<br/>
namespace&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;ArgumentValue[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.0&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.2&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.4&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.8&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;FunctionValue[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::sin(&#xA0;ArgumentValue[0]&#xA0;)&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::sin(&#xA0;ArgumentValue[1]&#xA0;)&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::sin(&#xA0;ArgumentValue[2]&#xA0;)&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::sin(&#xA0;ArgumentValue[3]&#xA0;)&#xA0;,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;std::sin(&#xA0;ArgumentValue[4]&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;TableLength&#xA0;=&#xA0;5;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;Index(const&#xA0;double&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;determine&#xA0;the&#xA0;index&#xA0;j&#xA0;such&#xA0;that&#xA0;x&#xA0;is&#xA0;between<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;ArgumentValue[j]&#xA0;and&#xA0;ArgumentValue[j+1]&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;static&#xA0;size_t&#xA0;j&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while&#xA0;(&#xA0;x&#xA0;&lt;&#xA0;ArgumentValue[j]&#xA0;&amp;&amp;&#xA0;j&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;j--;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while&#xA0;(&#xA0;x&#xA0;&gt;&#xA0;ArgumentValue[j+1]&#xA0;&amp;&amp;&#xA0;j&#xA0;&lt;&#xA0;TableLength&#xA0;-&#xA0;2)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;j++;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;assert&#xA0;conditions&#xA0;that&#xA0;must&#xA0;be&#xA0;true&#xA0;given&#xA0;logic&#xA0;above<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;assert(&#xA0;j&#xA0;&gt;=&#xA0;0&#xA0;&amp;&amp;&#xA0;j&#xA0;&lt;&#xA0;TableLength&#xA0;-&#xA0;1&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Argument(const&#xA0;double&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j&#xA0;=&#xA0;Index(x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ArgumentValue[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Function(const&#xA0;double&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j&#xA0;=&#xA0;Index(x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;FunctionValue[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Slope(const&#xA0;double&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j&#xA0;&#xA0;=&#xA0;Index(x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;dx&#xA0;=&#xA0;ArgumentValue[j+1]&#xA0;-&#xA0;ArgumentValue[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;dy&#xA0;=&#xA0;FunctionValue[j+1]&#xA0;-&#xA0;FunctionValue[j];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;dy&#xA0;/&#xA0;dx;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_DISCRETE_FUNCTION(double,&#xA0;Argument)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_DISCRETE_FUNCTION(double,&#xA0;Function)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_DISCRETE_FUNCTION(double,&#xA0;Slope)<br/>
}<br/>
<br/>
<br/>
bool&#xA0;interp_onetape(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::NearEqual;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;domain&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;X(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;.4&#xA0;*&#xA0;ArgumentValue[1]&#xA0;+&#xA0;.6&#xA0;*&#xA0;ArgumentValue[2];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables&#xA0;and&#xA0;start&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;piecewise&#xA0;linear&#xA0;interpolant&#xA0;at&#xA0;X[0]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;A&#xA0;=&#xA0;Argument(X[0]);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;F&#xA0;=&#xA0;Function(X[0]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;S&#xA0;=&#xA0;Slope(X[0]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;I&#xA0;=&#xA0;F&#xA0;+&#xA0;(X[0]&#xA0;-&#xA0;A)&#xA0;*&#xA0;S;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;range&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;I;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;and&#xA0;stop&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;double&gt;&#xA0;f(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vectors&#xA0;for&#xA0;arguments&#xA0;to&#xA0;the&#xA0;function&#xA0;object&#xA0;f<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;x(n);&#xA0;&#xA0;&#xA0;//&#xA0;argument&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;y(m);&#xA0;&#xA0;&#xA0;//&#xA0;function&#xA0;values&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;dx(n);&#xA0;&#xA0;//&#xA0;differentials&#xA0;in&#xA0;x&#xA0;space<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;dy(m);&#xA0;&#xA0;//&#xA0;differentials&#xA0;in&#xA0;y&#xA0;space<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;to&#xA0;check&#xA0;function&#xA0;value&#xA0;we&#xA0;use&#xA0;the&#xA0;fact&#xA0;that&#xA0;X[0]&#xA0;is&#xA0;between&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;ArgumentValue[1]&#xA0;and&#xA0;ArgumentValue[2]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;Value(X[0]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;delta&#xA0;&#xA0;=&#xA0;ArgumentValue[2]&#xA0;-&#xA0;ArgumentValue[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;check&#xA0;&#xA0;=&#xA0;FunctionValue[2]&#xA0;*&#xA0;(x[0]&#xA0;-&#xA0;ArgumentValue[1])&#xA0;/&#xA0;delta<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;FunctionValue[1]&#xA0;*&#xA0;(ArgumentValue[2]&#xA0;-&#xA0;x[0])&#xA0;/&#xA0;delta;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(Y[0],&#xA0;check,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;f&#xA0;where&#xA0;x&#xA0;has&#xA0;different&#xA0;value<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;&#xA0;&#xA0;=&#xA0;.7&#xA0;*&#xA0;ArgumentValue[2]&#xA0;+&#xA0;.3&#xA0;*&#xA0;ArgumentValue[3];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(0,&#xA0;x);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;function&#xA0;value&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delta&#xA0;&#xA0;=&#xA0;ArgumentValue[3]&#xA0;-&#xA0;ArgumentValue[2];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;check&#xA0;&#xA0;=&#xA0;FunctionValue[3]&#xA0;*&#xA0;(x[0]&#xA0;-&#xA0;ArgumentValue[2])&#xA0;/&#xA0;delta<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;FunctionValue[2]&#xA0;*&#xA0;(ArgumentValue[3]&#xA0;-&#xA0;x[0])&#xA0;/&#xA0;delta;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(y[0],&#xA0;check,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;partials&#xA0;w.r.t.&#xA0;x[0]&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dy&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;dx);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;that&#xA0;the&#xA0;derivative&#xA0;is&#xA0;the&#xA0;slope<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;check&#xA0;=&#xA0;(FunctionValue[3]&#xA0;-&#xA0;FunctionValue[2])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/&#xA0;(ArgumentValue[3]&#xA0;-&#xA0;ArgumentValue[2]);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[0],&#xA0;check,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/interp_onetape.cpp

</body>
</html>
