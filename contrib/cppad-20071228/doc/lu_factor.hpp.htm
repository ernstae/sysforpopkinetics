<html><head>
<title>Source: LuFactor</title>
<meta name="description" id="description" content="Source: LuFactor">
<meta name="keywords" id="keywords" content=" Lufactor source ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_lu_factor.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuDetAndSolve</option>
<option>LuFactor</option>
<option>lu_factor.hpp</option>
</select>
</td>
<td><a href="lufactor.cpp.htm" target="_top">Prev</a>
</td><td><a href="luinvert.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>LuDetAndSolve-&gt;</option>
<option>LuSolve</option>
<option>LuFactor</option>
<option>LuInvert</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuFactor-&gt;</option>
<option>LuFactor.cpp</option>
<option>lu_factor.hpp</option>
</select>
</td>
<td>lu_factor.hpp</td>
<td>Headings</td>
</tr></table><br>
<center><b><big><big>Source: LuFactor</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_LU_FACTOR_INCLUDED 
<code><span style='white-space: nowrap'><br>
</span></code># define CPPAD_LU_FACTOR_INCLUDED

<span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;complex&gt;<br>
#&nbsp;include&nbsp;&lt;vector&gt;<br>
<br>
#&nbsp;include&nbsp;&lt;cppad/local/cppad_assert.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/check_simple_vector.hpp&gt;<br>
#&nbsp;include&nbsp;&lt;cppad/check_numeric_type.hpp&gt;<br>
<br>
namespace&nbsp;CppAD&nbsp;{&nbsp;//&nbsp;BEGIN&nbsp;CppAD&nbsp;namespace<br>
<br>
//&nbsp;AbsGeq<br>
template&nbsp;&lt;typename&nbsp;Float&gt;<br>
inline&nbsp;bool&nbsp;AbsGeq(const&nbsp;Float&nbsp;&amp;x,&nbsp;const&nbsp;Float&nbsp;&amp;y)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;xabs&nbsp;=&nbsp;x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;xabs&nbsp;&lt;=&nbsp;Float(0)&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xabs&nbsp;=&nbsp;-&nbsp;xabs;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;yabs&nbsp;=&nbsp;y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;yabs&nbsp;&lt;=&nbsp;Float(0)&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yabs&nbsp;=&nbsp;-&nbsp;yabs;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;xabs&nbsp;&gt;=&nbsp;yabs;<br>
}<br>
inline&nbsp;bool&nbsp;AbsGeq(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::complex&lt;double&gt;&nbsp;&amp;x,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::complex&lt;double&gt;&nbsp;&amp;y)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;xsq&nbsp;=&nbsp;x.real()&nbsp;*&nbsp;x.real()&nbsp;+&nbsp;x.imag()&nbsp;*&nbsp;x.imag();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;ysq&nbsp;=&nbsp;y.real()&nbsp;*&nbsp;y.real()&nbsp;+&nbsp;y.imag()&nbsp;*&nbsp;y.imag();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;xsq&nbsp;&gt;=&nbsp;ysq;<br>
}<br>
inline&nbsp;bool&nbsp;AbsGeq(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::complex&lt;float&gt;&nbsp;&amp;x,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::complex&lt;float&gt;&nbsp;&amp;y)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;xsq&nbsp;=&nbsp;x.real()&nbsp;*&nbsp;x.real()&nbsp;+&nbsp;x.imag()&nbsp;*&nbsp;x.imag();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;ysq&nbsp;=&nbsp;y.real()&nbsp;*&nbsp;y.real()&nbsp;+&nbsp;y.imag()&nbsp;*&nbsp;y.imag();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;xsq&nbsp;&gt;=&nbsp;ysq;<br>
}<br>
<br>
//&nbsp;Lines&nbsp;that&nbsp;are&nbsp;different&nbsp;from&nbsp;code&nbsp;in&nbsp;cppad/local/lu_ratio.hpp&nbsp;end&nbsp;with&nbsp;//<br>
template&nbsp;&lt;class&nbsp;SizeVector,&nbsp;class&nbsp;FloatVector&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
int&nbsp;LuFactor(SizeVector&nbsp;&amp;ip,&nbsp;SizeVector&nbsp;&amp;jp,&nbsp;FloatVector&nbsp;&amp;LU)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
{&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;type&nbsp;of&nbsp;the&nbsp;elements&nbsp;of&nbsp;LU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;typename&nbsp;FloatVector::value_type&nbsp;Float;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;numeric&nbsp;type&nbsp;specifications<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckNumericType&lt;Float&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;simple&nbsp;vector&nbsp;class&nbsp;specifications<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckSimpleVector&lt;Float,&nbsp;FloatVector&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckSimpleVector&lt;size_t,&nbsp;SizeVector&gt;();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;i,&nbsp;j;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;some&nbsp;temporary&nbsp;indices<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;Float&nbsp;zero(&nbsp;0&nbsp;);&nbsp;//&nbsp;the&nbsp;value&nbsp;zero&nbsp;as&nbsp;a&nbsp;Float&nbsp;object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;imax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;row&nbsp;index&nbsp;of&nbsp;maximum&nbsp;element<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;jmax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;column&nbsp;indx&nbsp;of&nbsp;maximum&nbsp;element<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;&nbsp;&nbsp;&nbsp;emax;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;maximum&nbsp;absolute&nbsp;value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;count&nbsp;pivots<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;sign&nbsp;of&nbsp;the&nbsp;permutation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;&nbsp;&nbsp;etmp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;temporary&nbsp;element<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Float&nbsp;&nbsp;&nbsp;pivot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pivot&nbsp;element<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;-------------------------------------------------------<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;ip.size();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jp.size()&nbsp;==&nbsp;n,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuFactor:&nbsp;jp&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;n&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LU.size()&nbsp;==&nbsp;n&nbsp;*&nbsp;n,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Error&nbsp;in&nbsp;LuFactor:&nbsp;LU&nbsp;must&nbsp;have&nbsp;size&nbsp;equal&nbsp;to&nbsp;n&nbsp;*&nbsp;m&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;-------------------------------------------------------<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;initialize&nbsp;row&nbsp;and&nbsp;column&nbsp;order&nbsp;in&nbsp;matrix&nbsp;not&nbsp;yet&nbsp;pivoted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;ip[i]&nbsp;=&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jp[i]&nbsp;=&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;initialize&nbsp;the&nbsp;sign&nbsp;of&nbsp;the&nbsp;permutation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign&nbsp;=&nbsp;1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;---------------------------------------------------------<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Reduce&nbsp;the&nbsp;matrix&nbsp;P&nbsp;to&nbsp;L&nbsp;*&nbsp;U&nbsp;using&nbsp;n&nbsp;pivots<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(p&nbsp;=&nbsp;0;&nbsp;p&nbsp;&lt;&nbsp;n;&nbsp;p++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;determine&nbsp;row&nbsp;and&nbsp;column&nbsp;corresponding&nbsp;to&nbsp;element&nbsp;of&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;maximum&nbsp;absolute&nbsp;value&nbsp;in&nbsp;remaining&nbsp;part&nbsp;of&nbsp;P<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imax&nbsp;=&nbsp;jmax&nbsp;=&nbsp;n;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emax&nbsp;=&nbsp;zero;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;p;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;p;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_UNKNOWN(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ip[i]&nbsp;&lt;&nbsp;n)&nbsp;&amp;&nbsp;(jp[j]&nbsp;&lt;&nbsp;n)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etmp&nbsp;=&nbsp;LU[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[j]&nbsp;];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;if&nbsp;maximum&nbsp;absolute&nbsp;value&nbsp;so&nbsp;far<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;AbsGeq&nbsp;(etmp,&nbsp;emax)&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;imax&nbsp;=&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jmax&nbsp;=&nbsp;j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emax&nbsp;=&nbsp;etmp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_ASSERT_KNOWN(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(imax&nbsp;&lt;&nbsp;n)&nbsp;&amp;&nbsp;(jmax&nbsp;&lt;&nbsp;n)&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;AbsGeq&nbsp;must&nbsp;return&nbsp;true&nbsp;when&nbsp;second&nbsp;argument&nbsp;is&nbsp;zero&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;imax&nbsp;!=&nbsp;p&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;switch&nbsp;rows&nbsp;so&nbsp;max&nbsp;absolute&nbsp;element&nbsp;is&nbsp;in&nbsp;row&nbsp;p<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;ip[p];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip[p]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;ip[imax];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ip[imax]&nbsp;=&nbsp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;-sign;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;jmax&nbsp;!=&nbsp;p&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;switch&nbsp;columns&nbsp;so&nbsp;max&nbsp;absolute&nbsp;element&nbsp;is&nbsp;in&nbsp;column&nbsp;p<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;jp[p];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jp[p]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;jp[jmax];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jp[jmax]&nbsp;=&nbsp;j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;-sign;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pivot&nbsp;using&nbsp;the&nbsp;max&nbsp;absolute&nbsp;element<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pivot&nbsp;&nbsp;&nbsp;=&nbsp;LU[&nbsp;ip[p]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[p]&nbsp;];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;for&nbsp;determinant&nbsp;equal&nbsp;to&nbsp;zero<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;pivot&nbsp;==&nbsp;zero&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;abort&nbsp;the&nbsp;mission<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Reduce&nbsp;U&nbsp;by&nbsp;the&nbsp;elementary&nbsp;transformations&nbsp;that&nbsp;maps&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;LU(&nbsp;ip[p],&nbsp;jp[p]&nbsp;)&nbsp;to&nbsp;one.&nbsp;&nbsp;Only&nbsp;need&nbsp;transform&nbsp;elements<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;above&nbsp;the&nbsp;diagonal&nbsp;in&nbsp;U&nbsp;and&nbsp;LU(&nbsp;ip[p]&nbsp;,&nbsp;jp[p]&nbsp;)&nbsp;is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;corresponding&nbsp;value&nbsp;below&nbsp;diagonal&nbsp;in&nbsp;L.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;p+1;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LU[&nbsp;ip[p]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[j]&nbsp;]&nbsp;/=&nbsp;pivot;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Reduce&nbsp;U&nbsp;by&nbsp;the&nbsp;elementary&nbsp;transformations&nbsp;that&nbsp;maps&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;LU(&nbsp;ip[i],&nbsp;jp[p]&nbsp;)&nbsp;to&nbsp;zero.&nbsp;Only&nbsp;need&nbsp;transform&nbsp;elements&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;above&nbsp;the&nbsp;diagonal&nbsp;in&nbsp;U&nbsp;and&nbsp;LU(&nbsp;ip[i],&nbsp;jp[p]&nbsp;)&nbsp;is&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;corresponding&nbsp;value&nbsp;below&nbsp;diagonal&nbsp;in&nbsp;L.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i&nbsp;=&nbsp;p+1;&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;etmp&nbsp;=&nbsp;LU[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[p]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j&nbsp;=&nbsp;p+1;&nbsp;j&nbsp;&lt;&nbsp;n;&nbsp;j++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;LU[&nbsp;ip[i]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[j]&nbsp;]&nbsp;-=&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etmp&nbsp;*&nbsp;LU[&nbsp;ip[p]&nbsp;*&nbsp;n&nbsp;+&nbsp;jp[j]&nbsp;];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sign;<br>
}<br>
}&nbsp;//&nbsp;END&nbsp;CppAD&nbsp;namespace&nbsp;<br>
</span># endif
</font></code>


<hr>Input File: omh/lu_factor_hpp.omh

</body>
</html>
