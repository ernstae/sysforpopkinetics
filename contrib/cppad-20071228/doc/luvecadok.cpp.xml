<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Lu Factor and Solve With Recorded Pivoting: Example and Test</title>
<meta name="description" id="description" content="Lu Factor and Solve With Recorded Pivoting: Example and Test"/>
<meta name="keywords" id="keywords" content=" Lu record pivot example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_luvecadok.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>ExampleUtility</option>
<option>LuVecAD</option>
<option>LuVecADOk.cpp</option>
</select>
</td>
<td><a href="luvecad.xml" target="_top">Prev</a>
</td><td><a href="listallexamples.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>test_vector</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ExampleUtility-&gt;</option>
<option>Example.cpp</option>
<option>speed_example.cpp</option>
<option>LuVecAD</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuVecAD-&gt;</option>
<option>LuVecADOk.cpp</option>
</select>
</td>
<td>LuVecADOk.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Lu Factor and Solve With Recorded Pivoting: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
#&#xA0;include&#xA0;&quot;lu_vec_ad.hpp&quot;<br/>
#&#xA0;include&#xA0;&lt;cppad/speed/det_by_minor.hpp&gt;<br/>
<br/>
bool&#xA0;LuVecADOk(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;AD&lt;double&gt;&#xA0;ADdouble;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;CPPAD_TEST_VECTOR&lt;ADdouble&gt;&#xA0;ADVector;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;=&#xA0;3;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;m&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;a1[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;3.,&#xA0;0.,&#xA0;0.,&#xA0;//&#xA0;(1,1)&#xA0;is&#xA0;first&#xA0;&#xA0;pivot<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;2.,&#xA0;1.,&#xA0;//&#xA0;(2,2)&#xA0;is&#xA0;second&#xA0;pivot<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;0.,&#xA0;.5&#xA0;&#xA0;//&#xA0;(3,3)&#xA0;is&#xA0;third&#xA0;&#xA0;pivot<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;a2[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;2.,&#xA0;1.,&#xA0;//&#xA0;(1,2)&#xA0;is&#xA0;second&#xA0;pivot<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;3.,&#xA0;0.,&#xA0;0.,&#xA0;//&#xA0;(2,1)&#xA0;is&#xA0;first&#xA0;&#xA0;pivot<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;0.,&#xA0;.5&#xA0;&#xA0;//&#xA0;(3,3)&#xA0;is&#xA0;third&#xA0;&#xA0;pivot<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;rhs[]&#xA0;=&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.,&#xA0;3.,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;2.,&#xA0;2.,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;3.,&#xA0;1.<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;};<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VecAD&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Copy&#xA0;&#xA0;&#xA0;&#xA0;(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VecAD&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rhs&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(n&#xA0;*&#xA0;m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VecAD&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Result&#xA0;&#xA0;(n&#xA0;*&#xA0;m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADdouble&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;logdet;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADdouble&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;routine&#xA0;for&#xA0;checking&#xA0;determinants&#xA0;using&#xA0;expansion&#xA0;by&#xA0;minors<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;det_by_minor&lt;ADdouble&gt;&#xA0;Det(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;matrix&#xA0;we&#xA0;are&#xA0;computing&#xA0;the&#xA0;determinant&#xA0;of<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;ADdouble&gt;&#xA0;A(n&#xA0;*&#xA0;n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dependent&#xA0;variable&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;ADdouble&gt;&#xA0;Y(1&#xA0;+&#xA0;n&#xA0;*&#xA0;m);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;k;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Original&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;=&#xA0;a1[i];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;right&#xA0;hand&#xA0;side<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Rhs[&#xA0;j&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;=&#xA0;rhs[&#xA0;j&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Declare&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Copy&#xA0;the&#xA0;matrix<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADdouble&#xA0;index(0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n*n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Copy[index]&#xA0;=&#xA0;A[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;index&#xA0;+=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Solve&#xA0;the&#xA0;equation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;signdet&#xA0;=&#xA0;LuVecAD(n,&#xA0;m,&#xA0;Copy,&#xA0;Rhs,&#xA0;Result,&#xA0;logdet);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Result&#xA0;is&#xA0;the&#xA0;first&#xA0;n&#xA0;*&#xA0;m&#xA0;dependent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;index&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;m;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Y[i]&#xA0;=&#xA0;Result[index];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;index&#xA0;+=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Determinant&#xA0;is&#xA0;last&#xA0;component&#xA0;of&#xA0;the&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[&#xA0;n&#xA0;*&#xA0;m&#xA0;]&#xA0;=&#xA0;signdet&#xA0;*&#xA0;exp(&#xA0;logdet&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;construct&#xA0;f:&#xA0;A&#xA0;-&gt;&#xA0;Y<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;f(A,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;determinant&#xA0;using&#xA0;minors&#xA0;routine<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADdouble&#xA0;determinant&#xA0;=&#xA0;Det(&#xA0;A&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(Y[n&#xA0;*&#xA0;m],&#xA0;determinant,&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Check&#xA0;solution&#xA0;of&#xA0;Rhs&#xA0;=&#xA0;A&#xA0;*&#xA0;Result<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;a1[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;Value(&#xA0;Y[j&#xA0;*&#xA0;m&#xA0;+&#xA0;k]&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(&#xA0;rhs[i&#xA0;*&#xA0;m&#xA0;+&#xA0;k],&#xA0;sum,&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;y2(1&#xA0;+&#xA0;n&#xA0;*&#xA0;m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;A2(n&#xA0;*&#xA0;n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n&#xA0;*&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;=&#xA0;A2[i]&#xA0;=&#xA0;a2[i];<br/>
<br/>
&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y2&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(0,&#xA0;A2);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;determinant&#xA0;=&#xA0;Det(A);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(y2[&#xA0;n&#xA0;*&#xA0;m],&#xA0;Value(determinant),&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Check&#xA0;solution&#xA0;of&#xA0;Rhs&#xA0;=&#xA0;A2&#xA0;*&#xA0;Result<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;a2[i&#xA0;*&#xA0;n&#xA0;+&#xA0;j]&#xA0;*&#xA0;y2[j&#xA0;*&#xA0;m&#xA0;+&#xA0;k];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(&#xA0;rhs[i&#xA0;*&#xA0;m&#xA0;+&#xA0;k],&#xA0;sum,&#xA0;1e-10,&#xA0;1e-10&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/lu_vec_ad_ok.cpp

</body>
</html>
