<html><head>
<title>AD Assignment Operator: Example and Test</title>
<meta name="description" id="description" content="AD Assignment Operator: Example and Test">
<meta name="keywords" id="keywords" content=" assignment Ad example test ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_eq.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ad_copy</option>
<option>Eq.cpp</option>
</select>
</td>
<td><a href="copybase.cpp.htm" target="_top">Prev</a>
</td><td><a href="convert.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ad_copy-&gt;</option>
<option>CopyAD.cpp</option>
<option>CopyBase.cpp</option>
<option>Eq.cpp</option>
</select>
</td>
<td>Eq.cpp</td>
<td>Headings</td>
</tr></table><br>
<center><b><big><big>AD Assignment Operator: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;<br>
<br>
bool&nbsp;Eq(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::AD;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;domain&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;x(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;AD&lt;double&gt;&nbsp;=&nbsp;int<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;3.;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;AD&lt;double&gt;&nbsp;=&nbsp;double<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[2]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;x[1];&nbsp;&nbsp;&nbsp;//&nbsp;AD&lt;double&gt;&nbsp;=&nbsp;AD&lt;double&gt;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;independent&nbsp;variables&nbsp;and&nbsp;start&nbsp;tape&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::Independent(x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;range&nbsp;space&nbsp;vector&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;m&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;y(m);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;assign&nbsp;an&nbsp;AD&lt;Base&gt;&nbsp;object&nbsp;equal&nbsp;to&nbsp;an&nbsp;independent&nbsp;variable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;(choose&nbsp;the&nbsp;first&nbsp;independent&nbsp;variable&nbsp;to&nbsp;check&nbsp;a&nbsp;special&nbsp;case)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;the&nbsp;value&nbsp;returned&nbsp;by&nbsp;the&nbsp;assignment&nbsp;(for&nbsp;another&nbsp;assignment)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y[0]&nbsp;=&nbsp;y[1]&nbsp;=&nbsp;x[0];&nbsp;&nbsp;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;assign&nbsp;an&nbsp;AD&lt;Base&gt;&nbsp;object&nbsp;equal&nbsp;to&nbsp;an&nbsp;expression&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y[1]&nbsp;=&nbsp;x[1]&nbsp;+&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y[2]&nbsp;=&nbsp;x[2]&nbsp;+&nbsp;2.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;that&nbsp;all&nbsp;the&nbsp;resulting&nbsp;components&nbsp;of&nbsp;y&nbsp;depend&nbsp;on&nbsp;x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;Variable(y[0]);&nbsp;&nbsp;//&nbsp;y[0]&nbsp;=&nbsp;x[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;Variable(y[1]);&nbsp;&nbsp;//&nbsp;y[1]&nbsp;=&nbsp;x[1]&nbsp;+&nbsp;1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;Variable(y[2]);&nbsp;&nbsp;//&nbsp;y[2]&nbsp;=&nbsp;x[2]&nbsp;+&nbsp;2<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;construct&nbsp;f&nbsp;:&nbsp;x&nbsp;-&gt;&nbsp;y&nbsp;and&nbsp;stop&nbsp;the&nbsp;tape&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;double&gt;&nbsp;f(x,&nbsp;y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;variable&nbsp;values<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(&nbsp;y[0]&nbsp;==&nbsp;2.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(&nbsp;y[1]&nbsp;==&nbsp;4.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;(&nbsp;y[2]&nbsp;==&nbsp;5.);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;partials&nbsp;w.r.t&nbsp;x[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;dx(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;dy(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[0]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[1]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[2]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy&nbsp;&nbsp;&nbsp;=&nbsp;f.Forward(1,&nbsp;dx);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&amp;=&nbsp;(dy[0]&nbsp;==&nbsp;0.);&nbsp;&nbsp;//&nbsp;dy[0]&nbsp;/&nbsp;dx[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&amp;=&nbsp;(dy[1]&nbsp;==&nbsp;1.);&nbsp;&nbsp;//&nbsp;dy[1]&nbsp;/&nbsp;dx[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&amp;=&nbsp;(dy[2]&nbsp;==&nbsp;0.);&nbsp;&nbsp;//&nbsp;dy[2]&nbsp;/&nbsp;dx[1]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;compute&nbsp;the&nbsp;derivative&nbsp;y[2]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;&nbsp;w(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;double&gt;&nbsp;dw(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[0]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[1]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[2]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dw&nbsp;&nbsp;&nbsp;=&nbsp;f.Reverse(1,&nbsp;w);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&amp;=&nbsp;(dw[0]&nbsp;==&nbsp;0.);&nbsp;&nbsp;//&nbsp;dy[2]&nbsp;/&nbsp;dx[0]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&amp;=&nbsp;(dw[1]&nbsp;==&nbsp;0.);&nbsp;&nbsp;//&nbsp;dy[2]&nbsp;/&nbsp;dx[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&amp;=&nbsp;(dw[2]&nbsp;==&nbsp;1.);&nbsp;&nbsp;//&nbsp;dy[2]&nbsp;/&nbsp;dx[2]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;assign&nbsp;a&nbsp;VecAD&lt;Base&gt;::reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::VecAD&lt;double&gt;&nbsp;v(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;zero(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[zero]&nbsp;=&nbsp;5.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;(v[0]&nbsp;==&nbsp;5.);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
<br>
</span></font></code>
<hr>Input File: example/eq.cpp

</body>
</html>
