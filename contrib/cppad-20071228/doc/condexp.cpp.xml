<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Conditional Expressions: Example and Test</title>
<meta name="description" id="description" content="Conditional Expressions: Example and Test"/>
<meta name="keywords" id="keywords" content=" Condexp example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_condexp.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>CondExp</option>
<option>CondExp.cpp</option>
</select>
</td>
<td><a href="condexp.xml" target="_top">Prev</a>
</td><td><a href="discrete.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>CondExp-&gt;</option>
<option>CondExp.cpp</option>
</select>
</td>
<td>CondExp.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Description</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Conditional Expressions: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Description" id="Description">Description</a></big></b>
<br/>
Use <code><font color="blue">CondExp</font></code> to compute

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<munderover><mo stretchy='false' minsize='2em'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>j</mi>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow>
<mrow><mi mathvariant='italic'>m</mi>
<mn>-1</mn>
</mrow>
</munderover>
<mi>log</mi>
<mo stretchy="false">(</mo>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>j</mi>
</msub>
<mo stretchy="false">|</mo>
<mo stretchy="false">)</mo>
</mrow></math>

and its derivative at various argument values
with out having to re-tape; i.e.,
using only one <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object.

<code><font color="blue">
<span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
<br/>
namespace&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;Infinity(double&#xA0;zero)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;1.&#xA0;/&#xA0;zero;&#xA0;}<br/>
}<br/>
<br/>
bool&#xA0;CondExp(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::NearEqual;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::log;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::abs;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;domain&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;5;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;X(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[j]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables&#xA0;and&#xA0;start&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;sum&#xA0;with&#xA0;respect&#xA0;to&#xA0;j&#xA0;of&#xA0;log&#xA0;of&#xA0;absolute&#xA0;value&#xA0;of&#xA0;X[j]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;sould&#xA0;be&#xA0;-&#xA0;infinity&#xA0;if&#xA0;any&#xA0;of&#xA0;the&#xA0;X[j]&#xA0;are&#xA0;zero<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;MinusInfinity&#xA0;=&#xA0;-&#xA0;Infinity(0.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;Sum&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;Zero(0);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;if&#xA0;X[j]&#xA0;&gt;&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Sum&#xA0;+=&#xA0;CppAD::CondExpGt(X[j],&#xA0;Zero,&#xA0;log(X[j]),&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Zero);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;if&#xA0;X[j]&#xA0;&lt;&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Sum&#xA0;+=&#xA0;CppAD::CondExpLt(X[j],&#xA0;Zero,&#xA0;log(-X[j]),&#xA0;&#xA0;&#xA0;&#xA0;Zero);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;if&#xA0;X[j]&#xA0;==&#xA0;0<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Sum&#xA0;+=&#xA0;CppAD::CondExpEq(X[j],&#xA0;Zero,&#xA0;MinusInfinity,&#xA0;Zero);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;range&#xA0;space&#xA0;vector&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;Sum;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;and&#xA0;stop&#xA0;tape&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;double&gt;&#xA0;f(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vectors&#xA0;for&#xA0;arguments&#xA0;to&#xA0;the&#xA0;function&#xA0;object&#xA0;f<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;x(n);&#xA0;&#xA0;&#xA0;//&#xA0;argument&#xA0;values<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;y(m);&#xA0;&#xA0;&#xA0;//&#xA0;function&#xA0;values&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;w(m);&#xA0;&#xA0;&#xA0;//&#xA0;function&#xA0;weights&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TEST_VECTOR&lt;double&gt;&#xA0;dw(n);&#xA0;&#xA0;//&#xA0;derivative&#xA0;of&#xA0;weighted&#xA0;function<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;case&#xA0;where&#xA0;abs(&#xA0;x[j]&#xA0;)&#xA0;&gt;&#xA0;0&#xA0;for&#xA0;all&#xA0;j<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;check&#xA0;&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;sign&#xA0;&#xA0;&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sign&#xA0;*=&#xA0;-1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[j]&#xA0;=&#xA0;sign&#xA0;*&#xA0;double(j&#xA0;+&#xA0;1);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;check&#xA0;+=&#xA0;log(&#xA0;abs(&#xA0;x[j]&#xA0;)&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;function&#xA0;value&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;&#xA0;=&#xA0;f.Forward(0,&#xA0;x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;y[0]&#xA0;==&#xA0;check&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;derivative&#xA0;of&#xA0;y[0]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dw&#xA0;&#xA0;&#xA0;=&#xA0;f.Reverse(1,&#xA0;w);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;x[j]&#xA0;&gt;&#xA0;0.&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dw[j],&#xA0;1./abs(&#xA0;x[j]&#xA0;),&#xA0;1e-10,&#xA0;1e-10);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dw[j],&#xA0;-1./abs(&#xA0;x[j]&#xA0;),&#xA0;1e-10,&#xA0;1e-10);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;case&#xA0;where&#xA0;x[0]&#xA0;is&#xA0;equal&#xA0;to&#xA0;zero<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sign&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;sign&#xA0;*=&#xA0;-1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[j]&#xA0;=&#xA0;sign&#xA0;*&#xA0;double(j);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;function&#xA0;value&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(0,&#xA0;x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;y[0]&#xA0;==&#xA0;-Infinity(0.)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;derivative&#xA0;of&#xA0;y[0]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dw&#xA0;&#xA0;&#xA0;=&#xA0;f.Reverse(1,&#xA0;w);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;n;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;x[j]&#xA0;&gt;&#xA0;0.&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dw[j],&#xA0;1./abs(&#xA0;x[j]&#xA0;),&#xA0;1e-10,&#xA0;1e-10);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if(&#xA0;x[j]&#xA0;&lt;&#xA0;0.&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dw[j],&#xA0;-1./abs(&#xA0;x[j]&#xA0;),&#xA0;1e-10,&#xA0;1e-10);&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;in&#xA0;this&#xA0;case&#xA0;computing&#xA0;dw[j]&#xA0;ends&#xA0;up&#xA0;multiplying&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-infinity&#xA0;*&#xA0;zero&#xA0;and&#xA0;hence&#xA0;results&#xA0;in&#xA0;Nan<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: example/cond_exp.cpp

</body>
</html>
