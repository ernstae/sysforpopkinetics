<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Constructor From Base Type: Example and Test</title>
<meta name="description" id="description" content="AD Constructor From Base Type: Example and Test"/>
<meta name="keywords" id="keywords" content=" construct from base type convert to Ad example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_copybase.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ad_copy</option>
<option>CopyBase.cpp</option>
</select>
</td>
<td><a href="copyad.cpp.xml" target="_top">Prev</a>
</td><td><a href="eq.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ad_copy-&gt;</option>
<option>CopyAD.cpp</option>
<option>CopyBase.cpp</option>
<option>Eq.cpp</option>
</select>
</td>
<td>CopyBase.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>AD Constructor From Base Type: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;cppad/cppad.hpp&gt;<br/>
<br/>
bool&#xA0;CopyBase(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initialize&#xA0;test&#xA0;result&#xA0;flag<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;&#xA0;&#xA0;&#xA0;//&#xA0;so&#xA0;can&#xA0;use&#xA0;AD&#xA0;in&#xA0;place&#xA0;of&#xA0;CppAD::AD<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;construct&#xA0;directly&#xA0;from&#xA0;Base&#xA0;where&#xA0;Base&#xA0;is&#xA0;double&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;x(1.);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;construct&#xA0;from&#xA0;a&#xA0;type&#xA0;that&#xA0;converts&#xA0;to&#xA0;Base&#xA0;where&#xA0;Base&#xA0;is&#xA0;double<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;double&gt;&#xA0;y&#xA0;=&#xA0;2;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;construct&#xA0;from&#xA0;a&#xA0;type&#xA0;that&#xA0;converts&#xA0;to&#xA0;Base&#xA0;where&#xA0;Base&#xA0;=&#xA0;AD&lt;double&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;z(3);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;that&#xA0;resulting&#xA0;objects&#xA0;are&#xA0;parameters<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Parameter(x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Parameter(y);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;Parameter(z);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;values&#xA0;of&#xA0;objects&#xA0;(compare&#xA0;AD&lt;double&gt;&#xA0;with&#xA0;double)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;x&#xA0;==&#xA0;1.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;y&#xA0;==&#xA0;2.);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;Value(z)&#xA0;==&#xA0;3.);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;user&#xA0;constructor&#xA0;through&#xA0;the&#xA0;static_cast&#xA0;template&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x&#xA0;&#xA0;&#xA0;=&#xA0;static_cast&#xA0;&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;(&#xA0;4&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;z&#xA0;&#xA0;=&#xA0;static_cast&#xA0;&lt;&#xA0;AD&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;&gt;(&#xA0;5&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;x&#xA0;==&#xA0;4.&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;(&#xA0;Value(z)&#xA0;==&#xA0;5.&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: example/copy_base.cpp

</body>
</html>
