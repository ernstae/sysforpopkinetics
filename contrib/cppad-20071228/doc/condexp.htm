<html><head>
<title>AD Conditional Expressions</title>
<meta name="description" id="description" content="AD Conditional Expressions">
<meta name="keywords" id="keywords" content=" conditional expression assign ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_condexp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>CondExp</option>
</select>
</td>
<td><a href="pow_int.cpp.htm" target="_top">Prev</a>
</td><td><a href="condexp.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>CondExp-&gt;</option>
<option>CondExp.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Type</option>
<option>Op</option>
<option>left</option>
<option>right</option>
<option>trueCase</option>
<option>falseCase</option>
<option>result</option>
<option>CondExp</option>
<option>Operation Sequence</option>
<option>Example</option>
<option>Test</option>
<option>Atan2</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>AD Conditional Expressions</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>result</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;CondExp</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Record, 
as part of an AD of <i>Base</i>
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
,
a the conditional result of the form 
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>op</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>result</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;</span></font></code><i><span style='white-space: nowrap'>result</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>The notation <i>Op</i> and <i>op</i> 
above have the following correspondence: 
<table><tr><td align='left'  valign='top'>

<i>Op</i> 
	<code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Lt</font></code>
	<code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Le</font></code>
	<code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Eq</font></code>
	<code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Ge</font></code>
	<code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Gt</font></code>
</td></tr><tr><td align='left'  valign='top'>

<i>op</i> 
	</td><td align='left'  valign='top'>
 <code><font color="blue">&lt;</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">&lt;=</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">==</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">&gt;=</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">&gt;</font></code>
</td></tr>
</table>
If <i>f</i> is the <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object corresponding to the
AD operation sequence,
the choice in an AD conditional expression is made each time
<a href="forward.htm" target="_top"><span style='white-space: nowrap'>f.Forward</span></a>
 is used to evaluate the zero order Taylor
coefficients with new values for the 
<a href="glossary.htm#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&nbsp;variables</span></a>
.
This is in contrast to the <a href="compare.htm" target="_top"><span style='white-space: nowrap'>AD&nbsp;comparison&nbsp;operators</span></a>

which are boolean valued and not included in the AD operation sequence. 

<br>
<br>
<b><big><a name="Type" id="Type">Type</a></big></b>
<br>
We use <i>Type</i> for the type of
<i>left</i>, <i>right</i>, <i>trueCase</i>, and <i>falseCase</i>
(which must all have the same type). 
This type must be
<code><font color="blue">float</font></code>, <code><font color="blue">double</font></code>, or in the 
<a href="glossary.htm#AD Levels Above Base" target="_top"><span style='white-space: nowrap'>AD&nbsp;levels&nbsp;above</span></a>

above <code><font color="blue">float</font></code> or <code><font color="blue">double</font></code>.

<br>
<br>
<b><big><a name="Op" id="Op">Op</a></big></b>
<br>
In the syntax above, <i>Op</i> represents one of the following
two characters: <code><font color="blue">Lt</font></code>, <code><font color="blue">Le</font></code>, <code><font color="blue">Eq</font></code>, <code><font color="blue">Ge</font></code>, <code><font color="blue">Gt</font></code>. 
As in the table above,
<i>Op</i> determines the comparison operator <i>op</i>.
 
<br>
<br>
<b><big><a name="left" id="left">left</a></big></b>
<br>
The argument <i>left</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the value for the left side of the comparison operator.
 
<br>
<br>
<b><big><a name="right" id="right">right</a></big></b>
<br>
The argument <i>right</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the value for the right side of the comparison operator.

<br>
<br>
<b><big><a name="trueCase" id="trueCase">trueCase</a></big></b>
<br>
The argument <i>trueCase</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the return value if the result of the comparison is true.

<br>
<br>
<b><big><a name="falseCase" id="falseCase">falseCase</a></big></b>
<br>
The argument <i>falseCase</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>It specifies the return value if the result of the comparison is false.

<br>
<br>
<b><big><a name="result" id="result">result</a></big></b>
<br>
The <i>result</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code><br>
<b><big><a name="CondExp" id="CondExp">CondExp</a></big></b>
<br>
Previous versions of CppAD used 
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CondExp(</span></font></code><i><span style='white-space: nowrap'>flag</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>for the same meaning as 
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CondExpGt(</span></font></code><i><span style='white-space: nowrap'>flag</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>(0),&nbsp;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>Use of <code><font color="blue">CondExp</font></code> is deprecated, but continues to be supported.

<br>
<br>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br>
This is an AD of <i>Base</i>
<a href="glossary.htm#Operation.Atomic" target="_top"><span style='white-space: nowrap'>atomic&nbsp;operation</span></a>

and hence is part of the current
AD of <i>Base</i>
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>


<br>
<br>
<b><big><a name="Test" id="Test">Test</a></big></b>

<br>
The file
<a href="condexp.cpp.htm" target="_top"><span style='white-space: nowrap'>CondExp.cpp</span></a>

contains an example and test of this function.   
It returns true if it succeeds and false otherwise.

<br>
<br>
<b><big><a name="Atan2" id="Atan2">Atan2</a></big></b>
<br>
The following implementation of the
AD <a href="atan2.htm" target="_top"><span style='white-space: nowrap'>atan2</span></a>
 function is a more complex
example of using conditional expressions:
<code><font color="blue">
<span style='white-space: nowrap'><br>
template&nbsp;&lt;class&nbsp;Base&gt;<br>
AD&lt;Base&gt;&nbsp;atan2&nbsp;(const&nbsp;AD&lt;Base&gt;&nbsp;&amp;y,&nbsp;const&nbsp;AD&lt;Base&gt;&nbsp;&amp;x)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;alpha;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;beta;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;theta;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;zero&nbsp;=&nbsp;0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;pi2&nbsp;&nbsp;=&nbsp;2.&nbsp;*&nbsp;atan(1.);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;pi&nbsp;&nbsp;&nbsp;=&nbsp;2.&nbsp;*&nbsp;pi2;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;ax&nbsp;=&nbsp;abs(x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;Base&gt;&nbsp;ay&nbsp;=&nbsp;abs(y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;if(&nbsp;ax&nbsp;&gt;&nbsp;ay&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;theta&nbsp;=&nbsp;atan(ay&nbsp;/&nbsp;ax);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;else&nbsp;&nbsp;&nbsp;theta&nbsp;=&nbsp;pi2&nbsp;-&nbsp;atan(ax&nbsp;/&nbsp;ay);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;=&nbsp;atan(ay&nbsp;/&nbsp;ax);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta&nbsp;&nbsp;=&nbsp;pi2&nbsp;-&nbsp;atan(ax&nbsp;/&nbsp;ay);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta&nbsp;=&nbsp;CondExpGt(ax,&nbsp;ay,&nbsp;alpha,&nbsp;beta);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;of&nbsp;CondExp<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;if(&nbsp;x&nbsp;&lt;=&nbsp;0&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;theta&nbsp;=&nbsp;pi&nbsp;-&nbsp;theta;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta&nbsp;=&nbsp;CondExpLe(x,&nbsp;zero,&nbsp;pi&nbsp;-&nbsp;theta,&nbsp;theta);&nbsp;&nbsp;//&nbsp;use&nbsp;of&nbsp;CondExp<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;if(&nbsp;y&nbsp;&lt;=&nbsp;0&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;theta&nbsp;=&nbsp;-&nbsp;theta;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta&nbsp;=&nbsp;CondExpLe(y,&nbsp;zero,&nbsp;-theta,&nbsp;theta);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;of&nbsp;CondExp<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;theta;<br>
}<br>
</span></font></code>
<hr>Input File: cppad/local/cond_exp.hpp

</body>
</html>
