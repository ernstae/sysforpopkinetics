<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Source: LuInvert</title>
<meta name="description" id="description" content="Source: LuInvert"/>
<meta name="keywords" id="keywords" content=" Luinvert source "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_lu_invert.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>library</option>
<option>LuDetAndSolve</option>
<option>LuInvert</option>
<option>lu_invert.hpp</option>
</select>
</td>
<td><a href="luinvert.cpp.xml" target="_top">Prev</a>
</td><td><a href="rombergone.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>BenderQuad</option>
<option>LuRatio</option>
<option>std_math_unary</option>
<option>CppAD_vector</option>
<option>TrackNewDel</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>LuDetAndSolve-&gt;</option>
<option>LuSolve</option>
<option>LuFactor</option>
<option>LuInvert</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuInvert-&gt;</option>
<option>LuInvert.cpp</option>
<option>lu_invert.hpp</option>
</select>
</td>
<td>lu_invert.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Source: LuInvert</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_LU_INVERT_INCLUDED 
<code><span style='white-space: nowrap'><br/>
</span></code># define CPPAD_LU_INVERT_INCLUDED

<span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;cppad/local/cppad_assert.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/check_simple_vector.hpp&gt;<br/>
#&#xA0;include&#xA0;&lt;cppad/check_numeric_type.hpp&gt;<br/>
<br/>
namespace&#xA0;CppAD&#xA0;{&#xA0;//&#xA0;BEGIN&#xA0;CppAD&#xA0;namespace<br/>
<br/>
//&#xA0;LuInvert<br/>
template&#xA0;&lt;typename&#xA0;SizeVector,&#xA0;typename&#xA0;FloatVector&gt;<br/>
void&#xA0;LuInvert(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;SizeVector&#xA0;&#xA0;&amp;ip,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;SizeVector&#xA0;&#xA0;&amp;jp,&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;FloatVector&#xA0;&amp;LU,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;FloatVector&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;B&#xA0;)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;k;&#xA0;//&#xA0;column&#xA0;index&#xA0;in&#xA0;X<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p;&#xA0;//&#xA0;index&#xA0;along&#xA0;diagonal&#xA0;in&#xA0;LU<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;&#xA0;//&#xA0;row&#xA0;index&#xA0;in&#xA0;LU&#xA0;and&#xA0;X<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;typename&#xA0;FloatVector::value_type&#xA0;Float;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;numeric&#xA0;type&#xA0;specifications<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CheckNumericType&lt;Float&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;simple&#xA0;vector&#xA0;class&#xA0;specifications<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CheckSimpleVector&lt;Float,&#xA0;FloatVector&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CheckSimpleVector&lt;size_t,&#xA0;SizeVector&gt;();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Float&#xA0;etmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;ip.size();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_ASSERT_KNOWN(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;jp.size()&#xA0;==&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuInvert:&#xA0;jp&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;n&#xA0;*&#xA0;n&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_ASSERT_KNOWN(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;LU.size()&#xA0;==&#xA0;n&#xA0;*&#xA0;n,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuInvert:&#xA0;Lu&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;n&#xA0;*&#xA0;m&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;B.size()&#xA0;/&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_ASSERT_KNOWN(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B.size()&#xA0;==&#xA0;n&#xA0;*&#xA0;m,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;Error&#xA0;in&#xA0;LuSolve:&#xA0;B&#xA0;must&#xA0;have&#xA0;size&#xA0;equal&#xA0;to&#xA0;a&#xA0;multiple&#xA0;of&#xA0;n&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;temporary&#xA0;storage&#xA0;for&#xA0;reordered&#xA0;solution<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;FloatVector&#xA0;x(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;loop&#xA0;over&#xA0;equations<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(k&#xA0;=&#xA0;0;&#xA0;k&#xA0;&lt;&#xA0;m;&#xA0;k++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;invert&#xA0;the&#xA0;equation&#xA0;c&#xA0;=&#xA0;L&#xA0;*&#xA0;b<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(p&#xA0;=&#xA0;0;&#xA0;p&#xA0;&lt;&#xA0;n;&#xA0;p++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;solve&#xA0;for&#xA0;c[p]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;=&#xA0;B[&#xA0;ip[p]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;/&#xA0;LU[&#xA0;ip[p]&#xA0;*&#xA0;n&#xA0;+&#xA0;jp[p]&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[&#xA0;ip[p]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;=&#xA0;etmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;subtract&#xA0;off&#xA0;effect&#xA0;on&#xA0;other&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;p+1;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[&#xA0;ip[i]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;-=<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;*&#xA0;LU[&#xA0;ip[i]&#xA0;*&#xA0;n&#xA0;+&#xA0;jp[p]&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;invert&#xA0;the&#xA0;equation&#xA0;x&#xA0;=&#xA0;U&#xA0;*&#xA0;c<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;p&#xA0;=&#xA0;n;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(&#xA0;p&#xA0;&gt;&#xA0;0&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;--p;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;B[&#xA0;ip[p]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[&#xA0;jp[p]&#xA0;]&#xA0;=&#xA0;etmp;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;p;&#xA0;i++&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[&#xA0;ip[i]&#xA0;*&#xA0;m&#xA0;+&#xA0;k&#xA0;]&#xA0;-=&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;etmp&#xA0;*&#xA0;LU[&#xA0;ip[i]&#xA0;*&#xA0;n&#xA0;+&#xA0;jp[p]&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;reordered&#xA0;solution&#xA0;into&#xA0;B<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;B[i&#xA0;*&#xA0;m&#xA0;+&#xA0;k]&#xA0;=&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;<br/>
}<br/>
}&#xA0;//&#xA0;END&#xA0;CppAD&#xA0;namespace&#xA0;<br/>
</span># endif
</font></code>


<hr/>Input File: omh/lu_invert_hpp.omh

</body>
</html>
