<html><head>
<title>Any Order Reverse Mode: Example and Test</title>
<meta name="description" id="description" content="Any Order Reverse Mode: Example and Test">
<meta name="keywords" id="keywords" content=" reverse any order example test ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_reverse_any.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Reverse</option>
<option>reverse_any</option>
<option>reverse_any.cpp</option>
</select>
</td>
<td><a href="reverse_any.htm" target="_top">Prev</a>
</td><td><a href="sparse.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Reverse-&gt;</option>
<option>reverse_one</option>
<option>reverse_two</option>
<option>reverse_any</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>reverse_any-&gt;</option>
<option>reverse_any.cpp</option>
</select>
</td>
<td>reverse_any.cpp</td>
<td>Headings</td>
</tr></table><br>
<center><b><big><big>Any Order Reverse Mode: Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br>
#&nbsp;include&nbsp;&lt;cppad/cppad.hpp&gt;<br>
namespace&nbsp;{&nbsp;//&nbsp;----------------------------------------------------------<br>
//&nbsp;define&nbsp;the&nbsp;template&nbsp;function&nbsp;reverse_any_cases&lt;Vector&gt;&nbsp;in&nbsp;empty&nbsp;namespace<br>
template&nbsp;&lt;typename&nbsp;Vector&gt;&nbsp;<br>
bool&nbsp;reverse_any_cases(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::AD;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;CppAD::NearEqual;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;domain&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;n&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;X(n);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[0]&nbsp;=&nbsp;0.;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[1]&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[2]&nbsp;=&nbsp;2.;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declare&nbsp;independent&nbsp;variables&nbsp;and&nbsp;start&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::Independent(X);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;range&nbsp;space&nbsp;vector<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;m&nbsp;=&nbsp;1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TEST_VECTOR&lt;&nbsp;AD&lt;double&gt;&nbsp;&gt;&nbsp;Y(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y[0]&nbsp;=&nbsp;X[0]&nbsp;*&nbsp;X[1]&nbsp;*&nbsp;X[2];<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;create&nbsp;f&nbsp;:&nbsp;X&nbsp;-&gt;&nbsp;Y&nbsp;and&nbsp;stop&nbsp;recording<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;double&gt;&nbsp;f(X,&nbsp;Y);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;define&nbsp;W(t,&nbsp;u)&nbsp;=&nbsp;(u_0&nbsp;+&nbsp;dx_0*t)*(u_1&nbsp;+&nbsp;dx_1*t)*(u_2&nbsp;+&nbsp;dx_2*t)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;zero&nbsp;order&nbsp;forward&nbsp;to&nbsp;evaluate&nbsp;W0(u)&nbsp;=&nbsp;W(0,&nbsp;u)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector&nbsp;u(n),&nbsp;W0(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[0]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;2.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[1]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;3.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u[2]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;4.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Forward(0,&nbsp;u);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;check;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;u[0]*u[1]*u[2];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(W0[0]&nbsp;,&nbsp;check,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;define&nbsp;W_t(t,&nbsp;u)&nbsp;=&nbsp;partial&nbsp;W(t,&nbsp;u)&nbsp;w.r.t&nbsp;t<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;W_t(t,&nbsp;u)&nbsp;&nbsp;=&nbsp;(u_0&nbsp;+&nbsp;dx_0*t)*(u_1&nbsp;+&nbsp;dx_1*t)*dx_2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(u_0&nbsp;+&nbsp;dx_0*t)*(u_2&nbsp;+&nbsp;dx_2*t)*dx_1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(u_1&nbsp;+&nbsp;dx_1*t)*(u_2&nbsp;+&nbsp;dx_2*t)*dx_0<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;first&nbsp;order&nbsp;forward&nbsp;mode&nbsp;to&nbsp;evaluate&nbsp;W1(u)&nbsp;=&nbsp;W_t(0,&nbsp;u)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector&nbsp;dx(n),&nbsp;W1(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[0]&nbsp;=&nbsp;.2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[1]&nbsp;=&nbsp;.3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx[2]&nbsp;=&nbsp;.4;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W1&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Forward(1,&nbsp;dx);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check&nbsp;=&nbsp;&nbsp;u[0]*u[1]*dx[2]&nbsp;+&nbsp;u[0]*u[2]*dx[1]&nbsp;+&nbsp;u[1]*u[2]*dx[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(W1[0],&nbsp;check,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;define&nbsp;W_tt&nbsp;(t,&nbsp;u)&nbsp;=&nbsp;partial&nbsp;W_t(t,&nbsp;u)&nbsp;w.r.t&nbsp;t<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;W_tt(t,&nbsp;u)&nbsp;=&nbsp;2*(u_0&nbsp;+&nbsp;dx_0*t)*dx_1*dx_2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;2*(u_1&nbsp;+&nbsp;dx_1*t)*dx_0*dx_2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;2*(u_3&nbsp;+&nbsp;dx_3*t)*dx_0*dx_1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;second&nbsp;order&nbsp;forward&nbsp;to&nbsp;evaluate&nbsp;W2(u)&nbsp;=&nbsp;1/2&nbsp;*&nbsp;W_tt(0,&nbsp;u)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector&nbsp;ddx(n),&nbsp;W2(m);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ddx[0]&nbsp;=&nbsp;ddx[1]&nbsp;=&nbsp;ddx[2]&nbsp;=&nbsp;0.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Forward(2,&nbsp;ddx);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;check&nbsp;&nbsp;=&nbsp;&nbsp;u[0]*dx[1]*dx[2]&nbsp;+&nbsp;u[1]*dx[0]*dx[2]&nbsp;+&nbsp;u[2]*dx[0]*dx[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(W2[0],&nbsp;check,&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;third&nbsp;order&nbsp;reverse&nbsp;mode&nbsp;to&nbsp;evaluate&nbsp;derivatives<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;p&nbsp;=&nbsp;3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector&nbsp;w(m),&nbsp;dw(n&nbsp;*&nbsp;p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[0]&nbsp;&nbsp;&nbsp;=&nbsp;1.;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Reverse(p,&nbsp;w);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;derivative&nbsp;of&nbsp;W0(u)&nbsp;w.r.t.&nbsp;u<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[0*p+0],&nbsp;u[1]*u[2],&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[1*p+0],&nbsp;u[0]*u[2],&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[2*p+0],&nbsp;u[0]*u[1],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;derivative&nbsp;of&nbsp;W1(u)&nbsp;w.r.t.&nbsp;u<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[0*p+1],&nbsp;u[1]*dx[2]&nbsp;+&nbsp;u[2]*dx[1],&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[1*p+1],&nbsp;u[0]*dx[2]&nbsp;+&nbsp;u[2]*dx[0],&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[2*p+1],&nbsp;u[0]*dx[1]&nbsp;+&nbsp;u[1]*dx[0],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;check&nbsp;derivative&nbsp;of&nbsp;W2(u)&nbsp;w.r.t&nbsp;u<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[0*p+2],&nbsp;dx[1]*dx[2],&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[1*p+2],&nbsp;dx[0]*dx[2],&nbsp;1e-10,&nbsp;1e-10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&nbsp;&nbsp;&nbsp;&amp;=&nbsp;NearEqual(dw[2*p+2],&nbsp;dx[0]*dx[1],&nbsp;1e-10,&nbsp;1e-10);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
}&nbsp;//&nbsp;End&nbsp;empty&nbsp;namespace&nbsp;<br>
#&nbsp;include&nbsp;&lt;vector&gt;<br>
#&nbsp;include&nbsp;&lt;valarray&gt;<br>
bool&nbsp;reverse_any(void)<br>
{&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;ok&nbsp;=&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;reverse_any_cases&lt;&nbsp;CppAD::vector&nbsp;&nbsp;&lt;double&gt;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;reverse_any_cases&lt;&nbsp;std::vector&nbsp;&nbsp;&nbsp;&nbsp;&lt;double&gt;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;&amp;=&nbsp;reverse_any_cases&lt;&nbsp;std::valarray&nbsp;&nbsp;&lt;double&gt;&nbsp;&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ok;<br>
}<br>
</span></font></code>
<hr>Input File: example/reverse_any.cpp

</body>
</html>
