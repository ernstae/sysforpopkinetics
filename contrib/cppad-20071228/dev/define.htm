<html><head>
<title>Macros Used by CppAD Implementation</title>
<meta name="description" id="description" content="Macros Used by CppAD Implementation">
<meta name="keywords" id="keywords" content=" macro definition cppad_null cppad_max_num_threads cppad_fold_assignment_operator cppad_fold_ad_valued_binary_operator cppad_fold_bool_valued_binary_operator ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_define_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="newfeature.htm" target="_top">Prev</a>
</td><td><a href="greaterthanzero.htm" target="_top">Next</a>
</td><td><a href="cppad.htm" target="_top">Top</a>
</td><td>
<select onchange='choose_down1(this)'>
<option>CppAD-&gt;</option>
<option>Distribute</option>
<option>NewFeature</option>
<option>Define</option>
<option>GreaterThanZero</option>
<option>GreaterThanOrZero</option>
<option>LessThanZero</option>
<option>LessThanOrZero</option>
<option>IdenticalPar</option>
<option>IdenticalZero</option>
<option>IdenticalOne</option>
<option>IdenticalEqualPar</option>
<option>OpCode</option>
<option>printOp</option>
<option>NumInd</option>
<option>NumVar</option>
<option>tape_link</option>
<option>TapeRec</option>
<option>ADTape</option>
<option>BoolFunLink</option>
<option>Op</option>
<option>ForwardSweep</option>
<option>ReverseSweep</option>
<option>ForJacSweep</option>
<option>RevJacSweep</option>
</select>
</td>
<td>Define</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>CPPAD_NULL</option>
<option>CPPAD_MAX_NUM_THREADS</option>
<option>CPPAD_FOLD_ASSIGNMENT_OPERATOR</option>
<option>CPPAD_FOLD_AD_VALUED_BINARY_OPERATOR</option>
<option>CPPAD_FOLD_BOOL_VALUED_BINARY_OPERATOR</option>
</select>
</td>
</tr></table><br>
 




<center><b><big><big>Macros Used by CppAD Implementation</big></big></b></center>
<br>
<b><big><a name="CPPAD_NULL" id="CPPAD_NULL">CPPAD_NULL</a></big></b>
<br>
The preprocessor symbol <code><font color="blue">CPPAD_NULL</font></code> is used for a null pointer. 
If it is not yet defined,
it is defined when <code><font color="blue">cppad/local/define.hpp/</font></code> is included.

<br>
<br>
<b><big><a name="CPPAD_MAX_NUM_THREADS" id="CPPAD_MAX_NUM_THREADS">CPPAD_MAX_NUM_THREADS</a></big></b>
<br>
The preprocessor symbol <code><font color="blue">CPPAD_MAX_NUM_THREADS</font></code> 
is the maximum number of OpenMp threads that can
be used with CppAD.
If it is not yet defined,
it is defined when <code><font color="blue">cppad/local/define.hpp/</font></code> is included.

<br>
<br>
<b><big><a name="CPPAD_FOLD_ASSIGNMENT_OPERATOR" id="CPPAD_FOLD_ASSIGNMENT_OPERATOR">CPPAD_FOLD_ASSIGNMENT_OPERATOR</a></big></b>
<br>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_FOLD_ASSIGNMENT_OPERATOR(</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>assumes that the operator
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is defined for the case where <i>left</i> and <i>right</i> 
have type <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>.
It uses this case to define the cases where
<i>left</i> has type <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> and
<i>right</i> has type
<code><font color="blue"><span style='white-space: nowrap'>VecAD_reference&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
<i>Base</i>, or
<code><font color="blue">double</font></code>.
The argument <i>right</i> is <code><font color="blue">const</font></code> and call by reference.
This macro converts the operands to <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> and then
uses the definition of the same operation for that case. 

<br>
<br>
<b><big><a name="CPPAD_FOLD_AD_VALUED_BINARY_OPERATOR" id="CPPAD_FOLD_AD_VALUED_BINARY_OPERATOR">CPPAD_FOLD_AD_VALUED_BINARY_OPERATOR</a></big></b>
<br>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_FOLD_AD_VALUED_BINARY_OPERATOR(</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>assumes that the operator
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is defined for the case where <i>left</i> and <i>right</i> 
and the result of the operation all 
have type <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>.
It uses this case to define the cases either <i>left</i>
or <i>right</i> has type
<code><font color="blue"><span style='white-space: nowrap'>VecAD_reference&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> or
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
and the type of the other operand is one of the following:
<code><font color="blue"><span style='white-space: nowrap'>VecAD_reference&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
<i>Base</i>,
<code><font color="blue">double</font></code>.
All of the arguments are <code><font color="blue">const</font></code> and call by reference.
This macro converts the operands to <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> and then
uses the definition of the same operation for that case. 

<br>
<br>
<b><big><a name="CPPAD_FOLD_BOOL_VALUED_BINARY_OPERATOR" id="CPPAD_FOLD_BOOL_VALUED_BINARY_OPERATOR">CPPAD_FOLD_BOOL_VALUED_BINARY_OPERATOR</a></big></b>
<br>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_FOLD_BOOL_VALUED_BINARY_OPERATOR(</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>assumes that the operator
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>is defined for the case where <i>left</i> and <i>right</i> 
have type <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
and the result has type <code><font color="blue">bool</font></code>.
It uses this case to define the cases either <i>left</i>
or <i>right</i> has type
<code><font color="blue"><span style='white-space: nowrap'>VecAD_reference&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> or
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
and the type of the other operand is one of the following:
<code><font color="blue"><span style='white-space: nowrap'>VecAD_reference&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>,
<i>Base</i>,
<code><font color="blue">double</font></code>.
All of the arguments are <code><font color="blue">const</font></code> and call by reference.
This macro converts the operands to <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> and then
uses the definition of the same operation for that case. 



<hr>Input File: cppad/local/define.hpp

</body>
</html>
