<html><head>
<title>File class</title>
<meta name="description" id="description" content="File class">
<meta name="keywords" id="keywords" content=" File "><style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
</head>
<body>
<div align='right'>&nbsp;&nbsp;This:&nbsp;&nbsp;<a href="file.htm" target="_top">section</a>, <a href="file_frame2.htm" target="_top">frame</a></div>

<center><i>Copyright (C) 2002, University of Washington, Resource Facility for Population Kinetics. All Rights Reserved.

</i>
</center><code><span style='white-space: nowrap'><br>
</span></code><b><big><a name="Description" id="Description">Description</a></big></b>

<code><font color="blue"><br>
File</font></code> provides a convenient way of maintaining and accessing the path and name of a file.
The class does not validate the name or path.
In this way, user can use <code><font color="blue">File</font></code> object as a mere place holder for
accessing these strings (path and filename) in ways as you like.  
Either or both strings can be empty as well.

<br>
<br>
<b><big><a name="Constructors" id="Constructors">Constructors</a></big></b>


<br>
<code><font color="blue"><span style='white-space: nowrap'>File::File()<br>
</span></font></code>is the default constructor.
<code><span style='white-space: nowrap'><br>
<br>
</span></code><code><font color="blue"><span style='white-space: nowrap'>File::File(const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>path</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>filename</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><code><font color="blue"><span style='white-space: nowrap'>File::File(const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>path</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>filename</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><code><font color="blue"><span style='white-space: nowrap'>File::File(const&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>path</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>filename</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code><code><font color="blue"><span style='white-space: nowrap'>File::File(const&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>path</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;char*&nbsp;</span></font></code><i><span style='white-space: nowrap'>filename</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
<br>
</span></font></code><i>path</i> specifies the path to <i>filename</i> that may or may not be
terminated by a path delimiter such as back-slush (\) for Windows_.  You can
obtain your local operation system's path delimiter by using a method in 
<a href="system.htm" target="_top">System Utilities Class</a> (in <code><font color="blue">System</font></code> class).
<code><span style='white-space: nowrap'><br>
<br>
</span></code>If <i>path</i> is not terminated by a delimiter,
then the system always adds a delimiter to the tail automatically.
The file specified by <i>filename</i> does not have to exist physically.  It can
be, for example, empty (&quot;&quot;) or wildcard (*.*, *, 80abc*...).


<br>
<br>
<b><big><a name="Public Members" id="Public Members">Public Members</a></big></b>


<code><font color="blue"><span style='white-space: nowrap'><br>
public&nbsp;void&nbsp;setPath(const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>str</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>sets (or replace) the file path with <i>str</i>.  If <i>str</i> is terminated by a path delimiter,
it will be removed.  The path does not have to be necessarily valid.  
In other words, user can specify anything here such as empty (&quot;&quot;).

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
public&nbsp;void&nbsp;setName(const&nbsp;string&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>str</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>sets (or replace) the file name with <i>str</i>.  The file name does not have to be necessarily valid.  
In other words, user can specify anything here such as empty (&quot;&quot;) and wildcard (*.*, *, abc*...).

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
public&nbsp;const&nbsp;string&nbsp;getPath()&nbsp;const<br>
</span></font></code>returns the path to a file always terminated by a path delimiter (even if user did not provide it
with).

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
public&nbsp;const&nbsp;string&nbsp;getName()&nbsp;const<br>
</span></font></code>returns <i>filename</i> exactly as given at the time of construction.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
public&nbsp;const&nbsp;string&nbsp;getFullname()&nbsp;const<br>
</span></font></code>returns a string concatenating the values returned by <code><font color="blue">getPath()</font></code> (terminated by a path delimiter)
 and <code><font color="blue">getName()</font></code>, in the preserved order.

<br>
<br>
<b><big><a name="Operator Overloads" id="Operator Overloads">Operator Overloads</a></big></b>

<code><font color="blue"><span style='white-space: nowrap'><br>
File&amp;&nbsp;File::operator=(const&nbsp;File&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>copies information from <i>right</i> into <code><font color="blue">this</font></code>.  Self-assignment is prohibited.
If such operation is attempted, the system terminates.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
bool&nbsp;File::operator&nbsp;!=(const&nbsp;File&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>returns true if either or both the path or/and filename does not exactly match 
(as strings) between <code><font color="blue">this</font></code> and <i>right</i>; false otherwise.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
friend&nbsp;public&nbsp;ostream&amp;&nbsp;operator&lt;&lt;(ostream&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>stream</span></i><code><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;File&amp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>file</span></i><code><font color="blue"><span style='white-space: nowrap'>)&nbsp;const<br>
</span></font></code>returns a reference to an ostream object that contains the value returned by <code><font color="blue">getFullname()</font></code>.


<hr>Input File: ../../spk/File.cpp

</body>
</html>
