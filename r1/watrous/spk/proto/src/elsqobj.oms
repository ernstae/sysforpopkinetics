#begin##
%************************************************************************
%                                                                       *
%  From:   Resource Facility for Population Kinetics                    *
%          Department of Bioengineering Box 352255                      *
%          University of Washington                                     *
%          Seattle, WA 98195-2255                                       *
%                                                                       *
%  Copyright (C) 2002, University of Washington,                        *
%  Resource Facility for Population Kinetics. All Rights Reserved.      *
%                                                                       *
%  This software was developed with support from NIH grant RR-12609.    *
%  Please cite this grant in any publication for which this software    *
%  is used and send a notification to the address given above.          *
%                                                                       *
%  Check for updates and notices at:                                    *
%  http://www.rfpk.washington.edu                                       *
%                                                                       *
%************************************************************************

#end##
#begin##
$begin ElsqObj$$
$escape #$$

$spell
	Elsq
	Rval
	fval
	ok
	Obj
	oms
$$

$section Extended Least Squares Objective Function$$

$index ElsqObj$$
$cindex extended least squares objective function$$

$table
$bold Syntax:$$ $cend
$syntax/ElsqObj( ...
function /Model/, ...
/y/,  ...
/b/, ...
/ElsqObjOut/, /ElsqObj_bOut/, ...
)/$$

$tend

$fend 25$$

$head Description$$
Evaluates the extended least squares objective function. To be specific,
$math%
             1 %          %            1          T   -1
ElsqObj(b) = - #logdet[ 2 #pi R(b) ] + - [y - f(b)] R(b) [y - f(b)]
             2 %          %            2

%$$

$head Arguments$$
The return value of $code ElsqObj$$ is true, if it succeeds,
and false otherwise.
$syntax/

/Model/(/b/, /fOut/, /f_bOut/, /ROut/, /R_bOut/)
/$$
The double-precision column vector $italic b$$
specifies a value for the parameter vector.
The $xref/glossary/Output Value/output value/$$ $italic fOut$$
is a double-precision column vector equal to $math%f(b)%$$.
The output value $italic f_bOut$$
is a double-precision matrix equal to $math%f_b(b)%$$.
The output value $italic ROut$$
is a double-precision column vector equal to $math%R(b)%$$.
The output value $italic R_bOut$$
is a double-precision matrix equal to $math%R_b(b)%$$.
The return value of $italic Model$$ is true if it succeeds and false otherwise.
$syntax/

/y/
/$$
is a double-precision column vector containing the data vector.
$syntax/

/b/
/$$
The double-precision column vector $italic b$$
specifies a value for the parameter vector.
$syntax/

/ElsqObjOut/
/$$
the output value $italic ElsqObjOut$$
is a column vector containing the value of the objective function.
$syntax/

/ElsqObj_bOut/
/$$
the output value $italic ElsqObj_bOut$$
is a row vector containing the derivative of the objective function; i.e.,
$math%ElsqObj_b(b)%$$.

$head Example$$
Suppose that
$math%
       /  b(1)     0  \
R(b) = |              |
       \  0      b(1) /

       / b(2) \        / 1 \
f(b) = |      |   y =  |   |
       \ b(2) /        \ 1 /
%$$
It follows that
$math%                         
ElsqObj(b) = (1/2) #log{[2 #pi b(1)]^2} + [1 - b(2)]^2 / b(1)
%$$
The gradient of $math%ElsqObj(b)%$$ is equal to
$math%
	/ 1 / b(1) - [1 - b(2)]^2 / b(1)^2  \
	|                                   |
	\     - 2 [1 - b(2)] / b(1)         /
%$$
If all the components of $math%b%$$ are two,
$math%
ElsqObj(b)   = #log(4 #pi) + 1/2

ElsqObj_b(b) = [ 1/2 - 1/4, 1 ]
	       = [ .25 , 1 ]
%$$
If you enter
$codep

clear
include ElsqObj.oms
#
function Model(b, fOut, f_bOut, ROut, R_bOut) begin
	if fOut then ...
		fOut = {b(2), b(2)}
	if f_bOut then ...
		f_bOut = { ...
		[ 0 , 1 ], ...
		[ 0 , 1 ] ...
	}
	if ROut then ...
		ROut = { ...
		[ b(1) ,   0   ], ...
		[ 0    ,  b(1) ] ...
	}
	if R_bOut then ...
		R_bOut = { ...
		[ 1 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 1 , 0 ] ...
	}
	return true
end
y           = {1, 1}
b           = {2., 2.}
ElsqObjOut   = true
ElsqObj_bOut = true
ok = ElsqObj(function Model, y, b, ElsqObjOut, ElsqObj_bOut)
print "ok                         =", ok
print "ElsqObjOut - log(4 * pi)   =", ElsqObjOut - log(4 * pi)
print "ElsqObj_bOut               =", ElsqObj_bOut

$$
O-Matrix will respond
$codep
	ok                      = T
	ElsqObj - log(4 * pi^2) = .5
	ElsqObj_b               = [ .25 , 1 ]
$$

$pre

$$
$center
$italic
$include shortCopyright.txt$$
$$
$$
$end
-------------------------------------------------------------------------
#end##
#
include elsq.oms
#
function ElsqObj( ...
	function Model, ...
	y,  ...
	b, ...
	ElsqObjOut, ...
	ElsqObj_bOut ...
) begin
	# special do nothing case
	if not (ElsqObjOut or ElsqObj_bOut) then ...
		return true
	#
	# evalute the model functions
	f   = true
	R   = true
	f_b = ElsqObj_bOut
	R_b = ElsqObj_bOut 
	ok     = Model(b, f, f_b, R, R_b)
	if not ok then begin
		stop
		return false
	end
	#
	# related values
	Rinv = inv(R)
	zero = fill(0d0, rowdim(b), 1)
	#
	if ElsqObjOut then ...
		ElsqObjOut = elsq(y, f, R, Rinv)
	if ElsqObj_bOut then ...
		ElsqObj_bOut = elsq_x(y, f, R, Rinv, f_b, R_b)
	return true
end
