#begin##
%************************************************************************
%                                                                       *
%  From:   Resource Facility for Population Kinetics                    *
%          Department of Bioengineering Box 352255                      *
%          University of Washington                                     *
%          Seattle, WA 98195-2255                                       *
%                                                                       *
%  Copyright (C) 2002, University of Washington,                        *
%  Resource Facility for Population Kinetics. All Rights Reserved.      *
%                                                                       *
%  This software was developed with support from NIH grant RR-12609.    *
%  Please cite this grant in any publication for which this software    *
%  is used and send a notification to the address given above.          *
%                                                                       *
%  Check for updates and notices at:                                    *
%  http://www.rfpk.washington.edu                                       *
%                                                                       *
%************************************************************************

#end##
begin # blocking for automatic include

#begin##
$begin Lambda2Diff$$
$escape #$$

$spell
	Diff
	ok
$$

$section Second Order Central Difference Of Lambda$$

$index Lambda2Diff$$
$cindex second #order central difference #of Lambda$$

$table
$bold Syntax:$$ $cend
$syntax/Lambda2Diff( ...
function /Model/, ...
/y/,  ...
/alp/,
/b/, /bStep/ ...
/Lambda_b_bOut/, /Lambda_b_b_alpOut/, /Lambda_b_b_bOut/ ...
)/$$

$tend

$fend 25$$

$head Description$$
Evaluates the second order central difference for the derivatives of
$math%Lambda(alp, b)%$$ with respect to $math%b%$$ where
$math%
                 1 %          %                 1               T  -1
Lambda(alp, b) = - #logdet[ 2 #pi R(alp, b) ] + - [y - f(alp, b)] R (alp, b) [y - f(alp, b)]
                 2 %          %                 2

                 1 %          %                 1  T  -1
               + - #logdet[ 2 #pi D(alp) ]    + - b  D (alp)  b
                 2 %          %                 2
%$$
In addition, the derivatives of the central difference approximation
are also evaluated.
(The equation above uses
$xref/glossary/Individual Notation/individual notation/$$.)

$head Reference$$
$italic
Approximating The Maximum Likelihood Estimate For Models With Random Parameter
$$

$head Arguments$$
The return value of $code Lambda2Diff$$ is true, if it succeeds,
and false otherwise.
$syntax/

/Model/(/alp/, /b/, /fOut/, /f_alpOut/, /f_bOut/, /ROut/, /R_alpOut/, /R_bOut/, /DOut/, /D_alpOut/)
/$$
The return value of $italic Model$$ is true if it succeeds and false otherwise.
All the arguments to this routine have real or double-precision values. In addition,
the arguments that end in $italic Out$$ are $xref/glossary/Output Value/output values/$$.
$table
$bold Argument$$
	$cend $bold Value$$ 
	$cend $bold Comments$$ $rend
$italic alp$$
	$cend $math%alp%$$ 
	$cend fixed population parameter vector $rend
$italic b$$
	$cend $math%b%$$ 
	$cend random population parameter vector $rend
$italic fOut$$
	$cend $math%f(alp, b)%$$ 
	$cend model for the mean of $math%y%$$ given $math%b%$$ $rend
$italic f_alpOut$$ 
	$cend $math%f_alp(alp, b)%$$ 
	$cend derivative of $math%f(alp, b)%$$ with respect to $math%alp%$$ $rend
$italic f_bOut$$ 
	$cend $math%f_b(alp, b)%$$ 
	$cend derivative of $math%f(alp, b)%$$ with respect to $math%b%$$ $rend
$italic ROut$$ 
	$cend $math%R(alp, b)%$$ 
	$cend model for the variance of $math%y%$$ given $math%b%$$ $rend
$italic R_alpOut$$
	$cend $math%R_alp(alp, b)%$$ 
	$cend derivative of $math%R(alp, b)%$$ with respect to $math%alp%$$ $rend
$italic R_bOut$$
	$cend $math%R_b(alp, b)%$$ 
	$cend derivative of $math%R(alp, b)%$$ with respect to $math%b%$$ $rend
$italic DOut$$ 
	$cend $math%D(alp)%$$ 
	$cend model for the variance of $math%b%$$ $rend
$italic D_alpOut$$
	$cend $math%D_alp(alp)%$$ 
	$cend derivative of $math%D(alp)%$$ with respect to $math%alp%$$
$tend
$syntax/

/y/
/$$
is a double-precision column vector containing the data vector.
$syntax/

/alp/
/$$
The double-precision column vector $italic alp$$
specifies a value for the fixed population parameter vector.
$syntax/

/b/
/$$
The double-precision column vector $italic b$$
specifies a value for the random population parameter vector.
$syntax/

/bStep/
/$$
is a column vector with the same type and dimension as $italic b$$
specifying the step size for the central difference approximations
with respect to $math%b%$$.
$syntax/

/Lambda_b_bOut/
/$$
the output value $italic Lambda_b_bOut$$
is a row vector containing the 
central difference approximation for $math%Lambda_b_b(alp, b)%$$.
$syntax/

/Lambda_b_b_alpOut/
/$$
the output value $italic Lambda_b_b_alpOut$$
is a matrix containing the derivative with respect to $math%alp%$$ of the 
central difference approximation for
$math%Lambda_b_b(alp, b)%$$.
$syntax/

/Lambda_b_b_bOut/
/$$
the output value $italic Lambda_b_b_bOut$$
is a matrix containing the derivative with respect to $math%b%$$ of the 
central difference approximation for
$math%Lambda_b_b(alp, b)%$$.

$head Example$$
Suppose that
$math%
	            /  b(1)     0  \
	R(alp, b) = |              |
	            \  0      b(1) /

	            / alp(1)  0 \
	D(alp)    = |           |
	            \ 0  alp(1) /

	            / alp(2) + b(2) \
	f(alp, b) = |               |
	            \ alp(2) + b(2) /

	            / 1 \
	y         = |   |
	            \ 1 /
%$$
It follows that
$math%                         
Lambda(alp, b) = (1/2) #log{[2 #pi b(1)]^2}   + [1 - alp(2) - b(2)]^2 / b(1)
               + (1/2) #log{[2 #pi alp(1)]^2} + (1/2) [b(1)^2 + b(2)^2] / alp(1)
%$$
$pre

$$
The transpose of $math%Lambda_b(alp, b)%$$ is equal to
$math%                                          
/ 1 / b(1) - [1 - alp(2) - b(2)]^2 / b(1)^2 + b(1) / alp(1) \
|                                                           |
\     - 2 [1 - alp(2) - b(2)] / b(1) + b(2) / alp(1)        /
%$$
The value of $math%Lambda_b_b(alp, b)%$$ is the $math%2 x 2%$$ matrix
$math%
/-1/b(1)^2 + 2[1-alp(2)-b(2)]^2 / b(1)^3 + 1/alp(1)   2[1-alp(2)-b(2)]/b(1)^2 \
|                                                                             |
\            2[1-alp(2)-b(2)]/b(1)^2                      2/b(1)+1/alp(1)     /
%$$
The value of $math%Lambda_b_b_alp(alp, b)%$$ is the $math%4 x 2%$$ matrix
$math%
/ -1/alp(1)^2     -4[1-alp(2)-b(2)]/b(1)^3 \
|    0                    -2/b(1)^2        |
|    0                    -2/b(1)^2        |
\ -1/alp(1)^2               0              /
%$$
The value of $math%Lambda_b_b_b(alp, b)%$$ is the $math%4 x 2%$$ matrix
$math%
/2/b(1)^3 - 6[1-alp(2)-b(2)]^2/b(1)^4      -4[1-alp(2)-b(2)]/b(1)^3  \
|    -4[1-alp(2)-b(2)]/b(1)^3                    -2/b(1)^2           |
|    -4[1-alp(2)-b(2)]/b(1)^3                    -2/b(1)^2           |
\     -2/b(1)^2                                     0                /
%$$



If all the components of $math%alp%$$ and $math%b%$$ are one,
$math%
                          /  2  -2 \
Lambda_b_b(alp, b)     =  |        |
                          \ -2   3 /

                          / -1   4 \
Lambda_b_b_alp(alp, b) =  |  0  -2 |
                          |  0  -2 |
                          \ -1  0  /

                          / -4   4 \
Lambda_b_b_b(alp, b)   =  |  4  -2 |
                          |  4  -2 |
                          \ -2   0 /
%$$
If you enter
$codep

clear
include Lambda2Diff.oms
#
function Model(alp, b, fOut, f_alpOut, f_bOut, ROut, R_alpOut, R_bOut, DOut, D_alpOut) begin
	if fOut then ...
		fOut = {alp(2) + b(2), alp(2) + b(2)}
	if f_alpOut then ...
		f_alpOut = { ...
		[ 0 , 1 ], ...
		[ 0 , 1 ] ...
	}
	if f_bOut then ...
		f_bOut = { ...
		[ 0 , 1 ], ...
		[ 0 , 1 ] ...
	}
	if ROut then ...
		ROut = { ...
		[ b(1) ,   0   ], ...
		[ 0    ,  b(1) ] ...
	}
	if R_alpOut then ...
		R_alpOut = { ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ] ...
	}
	if R_bOut then ...
		R_bOut = { ...
		[ 1 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 1 , 0 ] ...
		}
	if DOut then ...
		DOut = { ...
		[ alp(1) ,   0   ], ...
		[ 0    ,  alp(1) ] ...
	}
	if D_alpOut then ...
		D_alpOut = { ...
		[ 1 , 0 ], ...
		[ 0 , 0 ], ...
		[ 0 , 0 ], ...
		[ 1 , 0 ] ...
	}
	return true
end
y               = {1d0, 1d0}
alp             = {1d0, 1d0}
b               = {1.d0, 1.d0}
bStep           = {.1d0, .1d0}
x               ="b"
Lambda_b_bOut     = true
Lambda_b_b_alpOut = true
Lambda_b_b_bOut   = true
ok = Lambda2Diff(function Model, y, alp, b, bStep, ...
            Lambda_b_bOut, Lambda_b_b_alpOut, Lambda_b_b_bOut)
print "ok                =", ok
print "Lambda_b_bOut       =", Lambda_b_bOut
print "Lambda_b_b_alpOut   =", Lambda_b_b_alpOut
print "Lambda_b_b_bOut     =", Lambda_b_b_bOut

$$
O-Matrix will respond
$codep

ok                = T 
Lambda_b_bOut       = {
[ 2.06278 , -2.0202 ]
[ -2.0202 , 3 ]
}

Lambda_b_b_alpOut   = {
[ -1 , 4.16667 ]
[ 5.55112e-015 , -2.0202 ]
[ 5.55112e-015 , -2.0202 ]
[ -1 , 1.11022e-014 ]
}

Lambda_b_b_bOut     = {
[ -4.34028 , 4.16667 ]
[ 4.08122 , -2.0202 ]
[ 4.08122 , -2.0202 ]
[ -2 , 2.22045e-014 ]
}

$$

$pre

$$
$center
$italic
$include shortCopyright.txt$$
$$
$$
$end
-------------------------------------------------------------------------
#end##
#
include LambdaDiff.oms
include cendiff.oms
include TranCenDiff.oms
#
local Ok = novalue
local function Fun(function Model, y, alp, bStep, b) begin
	vout   = true
	x = "b"
	if Ok then ...
		Ok = LambdaDiff( ...
			function Model, ...
			y,  ...
			alp, alp, ...
			b, bStep, ...
			x, ...
			vout, ...
			false, ...
			false ...
		)
	if Ok then ...
		return vout'
	else	return fill(0, rowdim(b), 1)
end
local function Fun_alp(function Model, y, alp, bStep, b) begin
	vout   = true
	x = "b"
	if Ok then ...
		Ok = LambdaDiff( ...
			function Model, ...
			y,  ...
			alp, alp, ...
			b, bStep, ...
			x, ...
			false, ...
			vout, ...
			false ...
		)
	if Ok then ...
		return vout
	else	return fill(0, rowdim(b), rowdim(alp))
end
local function Fun_b(function Model, y, alp, bStep, b) begin
	vout   = true
	x = "b"
	if Ok then ...
		Ok = LambdaDiff( ...
			function Model, ...
			y,  ...
			alp, alp, ...
			b, bStep, ...
			x, ...
			false, ...
			false, ...
			vout ...
		)
	if Ok then ...
		return vout
	else	return fill(0, rowdim(b), rowdim(b))
end
#
function Lambda2Diff( ...
	function Model, ...
	y,  ...
	alp, ...
	b, bStep, ...
	Lambda_b_bOut, ...
	Lambda_b_b_alpOut, ...
	Lambda_b_b_bOut ...
) begin
	# special do nothing case
	if not (Lambda_b_bOut or Lambda_b_b_alpOut or Lambda_b_b_bOut) then ...
		return true
	#
	Ok     = true
	if Lambda_b_bOut then begin
		function f    = Fun(Model, y, alp, bStep)
		Lambda_b_bOut = cendiff(function f, b, bStep)
	end
	if Lambda_b_b_alpOut then begin
		function f        = Fun_alp(Model, y, alp, bStep)
		Lambda_b_b_alpOut = TranCenDiff(function f, b, bStep)
	end
	if Lambda_b_b_bOut then begin
		function f      = Fun_b(Model, y, alp, bStep)
		Lambda_b_b_bOut = TranCenDiff(function f, b, bStep)
	end
	return Ok
end

end # blocking for automatic include
