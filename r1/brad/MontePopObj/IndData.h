// THIS FILE IS GENERATED BY THE ASPK COMPILER <NonmemTranslator.cpp>
#ifndef INDDATA_H
#define INDDATA_H
#include <vector>

template <class T>
class IndData{
public:
IndData( int nIn,
	const std::vector<char*> & IDIn,
	const std::vector<T> & TIMEIn,
	const std::vector<T> & DVIn,
	const std::vector<T> & MDVIn);

const std::vector<T> DV;
std::vector< std::vector<T> > EPS;
std::vector< std::vector<T> > ETA;
std::vector<T> F;
const std::vector<char *> ID;
const std::vector<T> MDV;
std::vector<T> PRED;
std::vector<T> RES;
std::vector< std::vector<T> > THETA;
const std::vector<T> TIME;
std::vector<T> WRES;
std::vector<T> Y;

~IndData();
protected:
IndData();
IndData( const IndData& );
IndData& operator=( const IndData& );

private:
const int n; // #of measurements.
};
template <class T>
IndData<T>::IndData( int nIn,
const std::vector<char*> & IDIn,
const std::vector<T> & TIMEIn,
const std::vector<T> & DVIn,
const std::vector<T> & MDVIn)
: n( nIn ),
ID( IDIn ),
TIME( TIMEIn ),
DV( DVIn ),
MDV( MDVIn ),
EPS( nIn ),
ETA( nIn ),
F( nIn ),
PRED( nIn ),
RES( nIn ),
THETA( nIn ),
WRES( nIn ),
Y( nIn ){
   for( int i=0; i<nIn; i++ )
   {
      THETA[i].resize( 1 );
      ETA[i].resize( 1 );
      EPS[i].resize( 1 );
   }
}

template <class T>
IndData<T>::~IndData(){}
template <class T>
IndData<T>::IndData(){}
template <class T>
IndData<T>::IndData( const IndData<T>& ){}
template <class T>
IndData<T>& IndData<T>::operator=( const IndData<T>& ){}
#endif
